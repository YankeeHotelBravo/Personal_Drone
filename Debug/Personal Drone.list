
Personal Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012c14  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  08012eb8  08012eb8  00022eb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080133c8  080133c8  000233c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080133d0  080133d0  000233d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080133d4  080133d4  000233d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f8  24000000  080133d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003cc  240001f8  080135d0  000301f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240005c4  080135d0  000305c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002a691  00000000  00000000  00030226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000041cd  00000000  00000000  0005a8b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001758  00000000  00000000  0005ea88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001670  00000000  00000000  000601e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000391ef  00000000  00000000  00061850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e6f1  00000000  00000000  0009aa3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00168346  00000000  00000000  000b9130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00221476  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000074dc  00000000  00000000  002214cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f8 	.word	0x240001f8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012e9c 	.word	0x08012e9c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001fc 	.word	0x240001fc
 80002dc:	08012e9c 	.word	0x08012e9c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <MPU9250_Init>:
float MPU9250_Acc_LSB = 16384.0;
float MPU9250_Mag_LSB = 0.15f;

//Functions
uint8_t MPU9250_Init(I2C_HandleTypeDef *I2Cx, uint8_t Gyro_FS, uint8_t Acc_FS, uint8_t DLPF_CFG, uint8_t A_DLPF_CFG)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af04      	add	r7, sp, #16
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	4608      	mov	r0, r1
 8000692:	4611      	mov	r1, r2
 8000694:	461a      	mov	r2, r3
 8000696:	4603      	mov	r3, r0
 8000698:	70fb      	strb	r3, [r7, #3]
 800069a:	460b      	mov	r3, r1
 800069c:	70bb      	strb	r3, [r7, #2]
 800069e:	4613      	mov	r3, r2
 80006a0:	707b      	strb	r3, [r7, #1]
	//Save LSB/Unit for both gyro and acc in order to use them later
	switch(Gyro_FS)
 80006a2:	78fb      	ldrb	r3, [r7, #3]
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	d81b      	bhi.n	80006e0 <MPU9250_Init+0x58>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <MPU9250_Init+0x28>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	080006c1 	.word	0x080006c1
 80006b4:	080006c9 	.word	0x080006c9
 80006b8:	080006d1 	.word	0x080006d1
 80006bc:	080006d9 	.word	0x080006d9
	{
	case 0: //250dps
		MPU9250_Gyro_LSB = 131.0;
 80006c0:	4b5d      	ldr	r3, [pc, #372]	; (8000838 <MPU9250_Init+0x1b0>)
 80006c2:	4a5e      	ldr	r2, [pc, #376]	; (800083c <MPU9250_Init+0x1b4>)
 80006c4:	601a      	str	r2, [r3, #0]
		break;
 80006c6:	e00c      	b.n	80006e2 <MPU9250_Init+0x5a>
	case 1: //500dps
		MPU9250_Gyro_LSB = 65.5;
 80006c8:	4b5b      	ldr	r3, [pc, #364]	; (8000838 <MPU9250_Init+0x1b0>)
 80006ca:	4a5d      	ldr	r2, [pc, #372]	; (8000840 <MPU9250_Init+0x1b8>)
 80006cc:	601a      	str	r2, [r3, #0]
		break;
 80006ce:	e008      	b.n	80006e2 <MPU9250_Init+0x5a>
	case 2: //1000dps
		MPU9250_Gyro_LSB = 32.8;
 80006d0:	4b59      	ldr	r3, [pc, #356]	; (8000838 <MPU9250_Init+0x1b0>)
 80006d2:	4a5c      	ldr	r2, [pc, #368]	; (8000844 <MPU9250_Init+0x1bc>)
 80006d4:	601a      	str	r2, [r3, #0]
		break;
 80006d6:	e004      	b.n	80006e2 <MPU9250_Init+0x5a>
	case 3: //2000dps
		MPU9250_Gyro_LSB = 16.4;
 80006d8:	4b57      	ldr	r3, [pc, #348]	; (8000838 <MPU9250_Init+0x1b0>)
 80006da:	4a5b      	ldr	r2, [pc, #364]	; (8000848 <MPU9250_Init+0x1c0>)
 80006dc:	601a      	str	r2, [r3, #0]
		break;
 80006de:	e000      	b.n	80006e2 <MPU9250_Init+0x5a>
	default:
		break;
 80006e0:	bf00      	nop
	}

	switch(Acc_FS)
 80006e2:	78bb      	ldrb	r3, [r7, #2]
 80006e4:	2b03      	cmp	r3, #3
 80006e6:	d81f      	bhi.n	8000728 <MPU9250_Init+0xa0>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <MPU9250_Init+0x68>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	08000701 	.word	0x08000701
 80006f4:	0800070b 	.word	0x0800070b
 80006f8:	08000715 	.word	0x08000715
 80006fc:	0800071f 	.word	0x0800071f
	{
	case 0: //2g
		MPU9250_Acc_LSB = 16384.0;
 8000700:	4b52      	ldr	r3, [pc, #328]	; (800084c <MPU9250_Init+0x1c4>)
 8000702:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8000706:	601a      	str	r2, [r3, #0]
		break;
 8000708:	e00f      	b.n	800072a <MPU9250_Init+0xa2>
	case 1: //4g
		MPU9250_Acc_LSB = 8192.0;
 800070a:	4b50      	ldr	r3, [pc, #320]	; (800084c <MPU9250_Init+0x1c4>)
 800070c:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8000710:	601a      	str	r2, [r3, #0]
		break;
 8000712:	e00a      	b.n	800072a <MPU9250_Init+0xa2>
	case 2: //8g
		MPU9250_Acc_LSB = 4096.0;
 8000714:	4b4d      	ldr	r3, [pc, #308]	; (800084c <MPU9250_Init+0x1c4>)
 8000716:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800071a:	601a      	str	r2, [r3, #0]
		break;
 800071c:	e005      	b.n	800072a <MPU9250_Init+0xa2>
	case 3: //16g
		MPU9250_Acc_LSB = 2048.0;
 800071e:	4b4b      	ldr	r3, [pc, #300]	; (800084c <MPU9250_Init+0x1c4>)
 8000720:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8000724:	601a      	str	r2, [r3, #0]
		break;
 8000726:	e000      	b.n	800072a <MPU9250_Init+0xa2>
	default:
		break;
 8000728:	bf00      	nop
	}

	HAL_I2C_Mem_Read(I2Cx, MPU6500_ADDR, MPU6500_WHO_AM_I, 1, &MPU9250_rx, 1, 100);
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	9302      	str	r3, [sp, #8]
 800072e:	2301      	movs	r3, #1
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	4b47      	ldr	r3, [pc, #284]	; (8000850 <MPU9250_Init+0x1c8>)
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	2301      	movs	r3, #1
 8000738:	2275      	movs	r2, #117	; 0x75
 800073a:	21d0      	movs	r1, #208	; 0xd0
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f007 f99d 	bl	8007a7c <HAL_I2C_Mem_Read>
	if (MPU9250_rx == 0x71)
 8000742:	4b43      	ldr	r3, [pc, #268]	; (8000850 <MPU9250_Init+0x1c8>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b71      	cmp	r3, #113	; 0x71
 8000748:	d171      	bne.n	800082e <MPU9250_Init+0x1a6>
	{
		MPU9250_tx = 0x01; // Set Sampling by 2 = 500Hz
 800074a:	4b42      	ldr	r3, [pc, #264]	; (8000854 <MPU9250_Init+0x1cc>)
 800074c:	2201      	movs	r2, #1
 800074e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_SMPLRT_DIV, 1, &MPU9250_tx, 1, 100);
 8000750:	2364      	movs	r3, #100	; 0x64
 8000752:	9302      	str	r3, [sp, #8]
 8000754:	2301      	movs	r3, #1
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	4b3e      	ldr	r3, [pc, #248]	; (8000854 <MPU9250_Init+0x1cc>)
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2301      	movs	r3, #1
 800075e:	2219      	movs	r2, #25
 8000760:	21d0      	movs	r1, #208	; 0xd0
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f007 f876 	bl	8007854 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000768:	200a      	movs	r0, #10
 800076a:	f003 fe6b 	bl	8004444 <HAL_Delay>

		MPU9250_tx = DLPF_CFG; // Digital Low Pass Filter Setting
 800076e:	4a39      	ldr	r2, [pc, #228]	; (8000854 <MPU9250_Init+0x1cc>)
 8000770:	787b      	ldrb	r3, [r7, #1]
 8000772:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_CONFIG, 1, &MPU9250_tx, 1, 100);
 8000774:	2364      	movs	r3, #100	; 0x64
 8000776:	9302      	str	r3, [sp, #8]
 8000778:	2301      	movs	r3, #1
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	4b35      	ldr	r3, [pc, #212]	; (8000854 <MPU9250_Init+0x1cc>)
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	2301      	movs	r3, #1
 8000782:	221a      	movs	r2, #26
 8000784:	21d0      	movs	r1, #208	; 0xd0
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f007 f864 	bl	8007854 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 800078c:	200a      	movs	r0, #10
 800078e:	f003 fe59 	bl	8004444 <HAL_Delay>

		MPU9250_tx = Gyro_FS << 3;
 8000792:	78fb      	ldrb	r3, [r7, #3]
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	b2da      	uxtb	r2, r3
 8000798:	4b2e      	ldr	r3, [pc, #184]	; (8000854 <MPU9250_Init+0x1cc>)
 800079a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_GYRO_CONFIG, 1, &MPU9250_tx, 1, 100);
 800079c:	2364      	movs	r3, #100	; 0x64
 800079e:	9302      	str	r3, [sp, #8]
 80007a0:	2301      	movs	r3, #1
 80007a2:	9301      	str	r3, [sp, #4]
 80007a4:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <MPU9250_Init+0x1cc>)
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	2301      	movs	r3, #1
 80007aa:	221b      	movs	r2, #27
 80007ac:	21d0      	movs	r1, #208	; 0xd0
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f007 f850 	bl	8007854 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80007b4:	200a      	movs	r0, #10
 80007b6:	f003 fe45 	bl	8004444 <HAL_Delay>

		MPU9250_tx = Acc_FS << 3;
 80007ba:	78bb      	ldrb	r3, [r7, #2]
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	4b24      	ldr	r3, [pc, #144]	; (8000854 <MPU9250_Init+0x1cc>)
 80007c2:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG, 1, &MPU9250_tx, 1, 100);
 80007c4:	2364      	movs	r3, #100	; 0x64
 80007c6:	9302      	str	r3, [sp, #8]
 80007c8:	2301      	movs	r3, #1
 80007ca:	9301      	str	r3, [sp, #4]
 80007cc:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MPU9250_Init+0x1cc>)
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	2301      	movs	r3, #1
 80007d2:	221c      	movs	r2, #28
 80007d4:	21d0      	movs	r1, #208	; 0xd0
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f007 f83c 	bl	8007854 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80007dc:	200a      	movs	r0, #10
 80007de:	f003 fe31 	bl	8004444 <HAL_Delay>

		MPU9250_tx = A_DLPF_CFG;
 80007e2:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <MPU9250_Init+0x1cc>)
 80007e4:	7c3b      	ldrb	r3, [r7, #16]
 80007e6:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG2, 1, &MPU9250_tx, 1, 100);
 80007e8:	2364      	movs	r3, #100	; 0x64
 80007ea:	9302      	str	r3, [sp, #8]
 80007ec:	2301      	movs	r3, #1
 80007ee:	9301      	str	r3, [sp, #4]
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MPU9250_Init+0x1cc>)
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	2301      	movs	r3, #1
 80007f6:	221d      	movs	r2, #29
 80007f8:	21d0      	movs	r1, #208	; 0xd0
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f007 f82a 	bl	8007854 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000800:	200a      	movs	r0, #10
 8000802:	f003 fe1f 	bl	8004444 <HAL_Delay>

		MPU9250_tx = 0x00;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MPU9250_Init+0x1cc>)
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 800080c:	2364      	movs	r3, #100	; 0x64
 800080e:	9302      	str	r3, [sp, #8]
 8000810:	2301      	movs	r3, #1
 8000812:	9301      	str	r3, [sp, #4]
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MPU9250_Init+0x1cc>)
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	2301      	movs	r3, #1
 800081a:	226b      	movs	r2, #107	; 0x6b
 800081c:	21d0      	movs	r1, #208	; 0xd0
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f007 f818 	bl	8007854 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000824:	200a      	movs	r0, #10
 8000826:	f003 fe0d 	bl	8004444 <HAL_Delay>

		return 1;
 800082a:	2301      	movs	r3, #1
 800082c:	e000      	b.n	8000830 <MPU9250_Init+0x1a8>
	}
	else
	{
		return 0;
 800082e:	2300      	movs	r3, #0
	}
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	24000000 	.word	0x24000000
 800083c:	43030000 	.word	0x43030000
 8000840:	42830000 	.word	0x42830000
 8000844:	42033333 	.word	0x42033333
 8000848:	41833333 	.word	0x41833333
 800084c:	24000004 	.word	0x24000004
 8000850:	240002b9 	.word	0x240002b9
 8000854:	24000241 	.word	0x24000241

08000858 <MPU9250_Bypass>:

void MPU9250_Bypass(I2C_HandleTypeDef *I2Cx)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af04      	add	r7, sp, #16
 800085e:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Master Mode
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MPU9250_Bypass+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Disable
 8000866:	2364      	movs	r3, #100	; 0x64
 8000868:	9302      	str	r3, [sp, #8]
 800086a:	2301      	movs	r3, #1
 800086c:	9301      	str	r3, [sp, #4]
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MPU9250_Bypass+0x58>)
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	2301      	movs	r3, #1
 8000874:	226a      	movs	r2, #106	; 0x6a
 8000876:	21d0      	movs	r1, #208	; 0xd0
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f006 ffeb 	bl	8007854 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800087e:	200a      	movs	r0, #10
 8000880:	f003 fde0 	bl	8004444 <HAL_Delay>

	MPU9250_tx = 0b00000010; //Enable Bypass Mode
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MPU9250_Bypass+0x58>)
 8000886:	2202      	movs	r2, #2
 8000888:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Bypass Enable
 800088a:	2364      	movs	r3, #100	; 0x64
 800088c:	9302      	str	r3, [sp, #8]
 800088e:	2301      	movs	r3, #1
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MPU9250_Bypass+0x58>)
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2301      	movs	r3, #1
 8000898:	2237      	movs	r2, #55	; 0x37
 800089a:	21d0      	movs	r1, #208	; 0xd0
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f006 ffd9 	bl	8007854 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80008a2:	200a      	movs	r0, #10
 80008a4:	f003 fdce 	bl	8004444 <HAL_Delay>
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	24000241 	.word	0x24000241

080008b4 <MPU9250_Master>:

void MPU9250_Master(I2C_HandleTypeDef *I2Cx)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af04      	add	r7, sp, #16
 80008ba:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Bypass Mode
 80008bc:	4b25      	ldr	r3, [pc, #148]	; (8000954 <MPU9250_Master+0xa0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Disable Bypass
 80008c2:	2364      	movs	r3, #100	; 0x64
 80008c4:	9302      	str	r3, [sp, #8]
 80008c6:	2301      	movs	r3, #1
 80008c8:	9301      	str	r3, [sp, #4]
 80008ca:	4b22      	ldr	r3, [pc, #136]	; (8000954 <MPU9250_Master+0xa0>)
 80008cc:	9300      	str	r3, [sp, #0]
 80008ce:	2301      	movs	r3, #1
 80008d0:	2237      	movs	r2, #55	; 0x37
 80008d2:	21d0      	movs	r1, #208	; 0xd0
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f006 ffbd 	bl	8007854 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80008da:	200a      	movs	r0, #10
 80008dc:	f003 fdb2 	bl	8004444 <HAL_Delay>

	MPU9250_tx = 0b00100000; //Enable Master Mode
 80008e0:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <MPU9250_Master+0xa0>)
 80008e2:	2220      	movs	r2, #32
 80008e4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Enable
 80008e6:	2364      	movs	r3, #100	; 0x64
 80008e8:	9302      	str	r3, [sp, #8]
 80008ea:	2301      	movs	r3, #1
 80008ec:	9301      	str	r3, [sp, #4]
 80008ee:	4b19      	ldr	r3, [pc, #100]	; (8000954 <MPU9250_Master+0xa0>)
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	2301      	movs	r3, #1
 80008f4:	226a      	movs	r2, #106	; 0x6a
 80008f6:	21d0      	movs	r1, #208	; 0xd0
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f006 ffab 	bl	8007854 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80008fe:	200a      	movs	r0, #10
 8000900:	f003 fda0 	bl	8004444 <HAL_Delay>

	MPU9250_tx = 0b00001101; //Set I2C Clock to 400kHz
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MPU9250_Master+0xa0>)
 8000906:	220d      	movs	r2, #13
 8000908:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_MST_CTRL, 1, &MPU9250_tx, 1, 100); //Master Clock to 400kHz
 800090a:	2364      	movs	r3, #100	; 0x64
 800090c:	9302      	str	r3, [sp, #8]
 800090e:	2301      	movs	r3, #1
 8000910:	9301      	str	r3, [sp, #4]
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <MPU9250_Master+0xa0>)
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	2301      	movs	r3, #1
 8000918:	2224      	movs	r2, #36	; 0x24
 800091a:	21d0      	movs	r1, #208	; 0xd0
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f006 ff99 	bl	8007854 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000922:	200a      	movs	r0, #10
 8000924:	f003 fd8e 	bl	8004444 <HAL_Delay>

	MPU9250_tx = 0x00;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MPU9250_Master+0xa0>)
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 800092e:	2364      	movs	r3, #100	; 0x64
 8000930:	9302      	str	r3, [sp, #8]
 8000932:	2301      	movs	r3, #1
 8000934:	9301      	str	r3, [sp, #4]
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MPU9250_Master+0xa0>)
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	2301      	movs	r3, #1
 800093c:	226b      	movs	r2, #107	; 0x6b
 800093e:	21d0      	movs	r1, #208	; 0xd0
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f006 ff87 	bl	8007854 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000946:	200a      	movs	r0, #10
 8000948:	f003 fd7c 	bl	8004444 <HAL_Delay>
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	24000241 	.word	0x24000241

08000958 <MPU9250_AK8963_Setup>:

uint8_t MPU9250_AK8963_Setup(I2C_HandleTypeDef *I2Cx, MPU9250_t *Datastruct)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af04      	add	r7, sp, #16
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
	MPU9250_tx = AK8963_CNTL1_Continous2; //Continuous Mode 2 (100Hz) + 16Bit Output
 8000962:	4b25      	ldr	r3, [pc, #148]	; (80009f8 <MPU9250_AK8963_Setup+0xa0>)
 8000964:	2216      	movs	r2, #22
 8000966:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, AK8963_ADDR, AK8963_CNTL1, 1, &MPU9250_tx, 1, 100);
 8000968:	2364      	movs	r3, #100	; 0x64
 800096a:	9302      	str	r3, [sp, #8]
 800096c:	2301      	movs	r3, #1
 800096e:	9301      	str	r3, [sp, #4]
 8000970:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <MPU9250_AK8963_Setup+0xa0>)
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	2301      	movs	r3, #1
 8000976:	220a      	movs	r2, #10
 8000978:	2118      	movs	r1, #24
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f006 ff6a 	bl	8007854 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000980:	200a      	movs	r0, #10
 8000982:	f003 fd5f 	bl	8004444 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_ASAX, 1, &MPU9250_rx_buf[0], 3, 100);
 8000986:	2364      	movs	r3, #100	; 0x64
 8000988:	9302      	str	r3, [sp, #8]
 800098a:	2303      	movs	r3, #3
 800098c:	9301      	str	r3, [sp, #4]
 800098e:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MPU9250_AK8963_Setup+0xa4>)
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	2301      	movs	r3, #1
 8000994:	2210      	movs	r2, #16
 8000996:	2118      	movs	r1, #24
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f007 f86f 	bl	8007a7c <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 800099e:	200a      	movs	r0, #10
 80009a0:	f003 fd50 	bl	8004444 <HAL_Delay>

	Datastruct->ASAX = MPU9250_rx_buf[0];
 80009a4:	4b15      	ldr	r3, [pc, #84]	; (80009fc <MPU9250_AK8963_Setup+0xa4>)
 80009a6:	781a      	ldrb	r2, [r3, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Datastruct->ASAY = MPU9250_rx_buf[1];
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MPU9250_AK8963_Setup+0xa4>)
 80009b0:	785a      	ldrb	r2, [r3, #1]
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	Datastruct->ASAZ = MPU9250_rx_buf[2];
 80009b8:	4b10      	ldr	r3, [pc, #64]	; (80009fc <MPU9250_AK8963_Setup+0xa4>)
 80009ba:	789a      	ldrb	r2, [r3, #2]
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_WIA, 1, &AK8963_WAI, 3, 100);
 80009c2:	2364      	movs	r3, #100	; 0x64
 80009c4:	9302      	str	r3, [sp, #8]
 80009c6:	2303      	movs	r3, #3
 80009c8:	9301      	str	r3, [sp, #4]
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <MPU9250_AK8963_Setup+0xa8>)
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	2301      	movs	r3, #1
 80009d0:	2200      	movs	r2, #0
 80009d2:	2118      	movs	r1, #24
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f007 f851 	bl	8007a7c <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 80009da:	200a      	movs	r0, #10
 80009dc:	f003 fd32 	bl	8004444 <HAL_Delay>

	if(AK8963_WAI == 0b01001000) return 1;
 80009e0:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <MPU9250_AK8963_Setup+0xa8>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b48      	cmp	r3, #72	; 0x48
 80009e6:	d101      	bne.n	80009ec <MPU9250_AK8963_Setup+0x94>
 80009e8:	2301      	movs	r3, #1
 80009ea:	e000      	b.n	80009ee <MPU9250_AK8963_Setup+0x96>
	else return 0;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	24000241 	.word	0x24000241
 80009fc:	240002bc 	.word	0x240002bc
 8000a00:	240002b8 	.word	0x240002b8

08000a04 <MPU9250_Slave0_Enable>:

void MPU9250_Slave0_Enable(I2C_HandleTypeDef *I2Cx)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af04      	add	r7, sp, #16
 8000a0a:	6078      	str	r0, [r7, #4]
	MPU9250_tx = (AK8963_ADDR >> 1) | 0x80; //Access Slave into read mode
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a0e:	228c      	movs	r2, #140	; 0x8c
 8000a10:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_ADDR, 1, &MPU9250_tx, 1, 100);
 8000a12:	2364      	movs	r3, #100	; 0x64
 8000a14:	9302      	str	r3, [sp, #8]
 8000a16:	2301      	movs	r3, #1
 8000a18:	9301      	str	r3, [sp, #4]
 8000a1a:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	2301      	movs	r3, #1
 8000a20:	2225      	movs	r2, #37	; 0x25
 8000a22:	21d0      	movs	r1, #208	; 0xd0
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f006 ff15 	bl	8007854 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a2a:	200a      	movs	r0, #10
 8000a2c:	f003 fd0a 	bl	8004444 <HAL_Delay>

	MPU9250_tx = AK8963_HXL; //Slave REG for reading to take place
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a32:	2203      	movs	r2, #3
 8000a34:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_REG, 1, &MPU9250_tx, 1, 100);
 8000a36:	2364      	movs	r3, #100	; 0x64
 8000a38:	9302      	str	r3, [sp, #8]
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	9301      	str	r3, [sp, #4]
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	2301      	movs	r3, #1
 8000a44:	2226      	movs	r2, #38	; 0x26
 8000a46:	21d0      	movs	r1, #208	; 0xd0
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f006 ff03 	bl	8007854 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a4e:	200a      	movs	r0, #10
 8000a50:	f003 fcf8 	bl	8004444 <HAL_Delay>

	MPU9250_tx = 0x80 | 0x07; //Number of data bytes
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a56:	2287      	movs	r2, #135	; 0x87
 8000a58:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_CTRL, 1, &MPU9250_tx, 1, 100);
 8000a5a:	2364      	movs	r3, #100	; 0x64
 8000a5c:	9302      	str	r3, [sp, #8]
 8000a5e:	2301      	movs	r3, #1
 8000a60:	9301      	str	r3, [sp, #4]
 8000a62:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	2301      	movs	r3, #1
 8000a68:	2227      	movs	r2, #39	; 0x27
 8000a6a:	21d0      	movs	r1, #208	; 0xd0
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f006 fef1 	bl	8007854 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a72:	200a      	movs	r0, #10
 8000a74:	f003 fce6 	bl	8004444 <HAL_Delay>
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	24000241 	.word	0x24000241

08000a84 <MPU9250_Read_All>:

void MPU9250_Read_All(I2C_HandleTypeDef *I2Cx)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af02      	add	r7, sp, #8
 8000a8a:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_XOUT_H, 1, &MPU9250_rx_buf[0], 20);
 8000a8c:	2314      	movs	r3, #20
 8000a8e:	9301      	str	r3, [sp, #4]
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <MPU9250_Read_All+0x24>)
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	2301      	movs	r3, #1
 8000a96:	223b      	movs	r2, #59	; 0x3b
 8000a98:	21d0      	movs	r1, #208	; 0xd0
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f007 f908 	bl	8007cb0 <HAL_I2C_Mem_Read_DMA>
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	240002bc 	.word	0x240002bc
 8000aac:	00000000 	.word	0x00000000

08000ab0 <MPU9250_Parsing>:

void MPU9250_Parsing(MPU9250_t *DataStruct)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = (MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8000ab8:	4bb7      	ldr	r3, [pc, #732]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	021b      	lsls	r3, r3, #8
 8000abe:	b21a      	sxth	r2, r3
 8000ac0:	4bb5      	ldr	r3, [pc, #724]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000ac2:	785b      	ldrb	r3, [r3, #1]
 8000ac4:	b21b      	sxth	r3, r3
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	b21a      	sxth	r2, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = -(MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8000ace:	4bb2      	ldr	r3, [pc, #712]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000ad0:	789b      	ldrb	r3, [r3, #2]
 8000ad2:	021b      	lsls	r3, r3, #8
 8000ad4:	b21a      	sxth	r2, r3
 8000ad6:	4bb0      	ldr	r3, [pc, #704]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000ad8:	78db      	ldrb	r3, [r3, #3]
 8000ada:	b21b      	sxth	r3, r3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	425b      	negs	r3, r3
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	b21a      	sxth	r2, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = -(MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]);
 8000aec:	4baa      	ldr	r3, [pc, #680]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000aee:	791b      	ldrb	r3, [r3, #4]
 8000af0:	021b      	lsls	r3, r3, #8
 8000af2:	b21a      	sxth	r2, r3
 8000af4:	4ba8      	ldr	r3, [pc, #672]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000af6:	795b      	ldrb	r3, [r3, #5]
 8000af8:	b21b      	sxth	r3, r3
 8000afa:	4313      	orrs	r3, r2
 8000afc:	b21b      	sxth	r3, r3
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	425b      	negs	r3, r3
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	b21a      	sxth	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	809a      	strh	r2, [r3, #4]
	// Didn't Save Temp Value
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8000b0a:	4ba3      	ldr	r3, [pc, #652]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b0c:	7a1b      	ldrb	r3, [r3, #8]
 8000b0e:	021b      	lsls	r3, r3, #8
 8000b10:	b21a      	sxth	r2, r3
 8000b12:	4ba1      	ldr	r3, [pc, #644]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b14:	7a5b      	ldrb	r3, [r3, #9]
 8000b16:	b21b      	sxth	r3, r3
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	b21a      	sxth	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8000b20:	4b9d      	ldr	r3, [pc, #628]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b22:	7a9b      	ldrb	r3, [r3, #10]
 8000b24:	021b      	lsls	r3, r3, #8
 8000b26:	b21a      	sxth	r2, r3
 8000b28:	4b9b      	ldr	r3, [pc, #620]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b2a:	7adb      	ldrb	r3, [r3, #11]
 8000b2c:	b21b      	sxth	r3, r3
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	b21b      	sxth	r3, r3
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	425b      	negs	r3, r3
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	b21a      	sxth	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 8000b3e:	4b96      	ldr	r3, [pc, #600]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b40:	7b1b      	ldrb	r3, [r3, #12]
 8000b42:	021b      	lsls	r3, r3, #8
 8000b44:	b21a      	sxth	r2, r3
 8000b46:	4b94      	ldr	r3, [pc, #592]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b48:	7b5b      	ldrb	r3, [r3, #13]
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	b21b      	sxth	r3, r3
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	425b      	negs	r3, r3
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	b21a      	sxth	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	831a      	strh	r2, [r3, #24]

	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 8000b5c:	4b8e      	ldr	r3, [pc, #568]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b5e:	7bdb      	ldrb	r3, [r3, #15]
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	b21a      	sxth	r2, r3
 8000b64:	4b8c      	ldr	r3, [pc, #560]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b66:	7b9b      	ldrb	r3, [r3, #14]
 8000b68:	b21b      	sxth	r3, r3
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	b21b      	sxth	r3, r3
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	425b      	negs	r3, r3
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	b21a      	sxth	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	875a      	strh	r2, [r3, #58]	; 0x3a
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 8000b7a:	4b87      	ldr	r3, [pc, #540]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b7c:	7c5b      	ldrb	r3, [r3, #17]
 8000b7e:	021b      	lsls	r3, r3, #8
 8000b80:	b21a      	sxth	r2, r3
 8000b82:	4b85      	ldr	r3, [pc, #532]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b84:	7c1b      	ldrb	r3, [r3, #16]
 8000b86:	b21b      	sxth	r3, r3
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	b21a      	sxth	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	871a      	strh	r2, [r3, #56]	; 0x38
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 8000b90:	4b81      	ldr	r3, [pc, #516]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b92:	7cdb      	ldrb	r3, [r3, #19]
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	b21a      	sxth	r2, r3
 8000b98:	4b7f      	ldr	r3, [pc, #508]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b9a:	7c9b      	ldrb	r3, [r3, #18]
 8000b9c:	b21b      	sxth	r3, r3
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	b21a      	sxth	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	879a      	strh	r2, [r3, #60]	; 0x3c

	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000bac:	ee07 3a90 	vmov	s15, r3
 8000bb0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bb4:	4b79      	ldr	r3, [pc, #484]	; (8000d9c <MPU9250_Parsing+0x2ec>)
 8000bb6:	ed93 7a00 	vldr	s14, [r3]
 8000bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000bca:	ee07 3a90 	vmov	s15, r3
 8000bce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bd2:	4b72      	ldr	r3, [pc, #456]	; (8000d9c <MPU9250_Parsing+0x2ec>)
 8000bd4:	ed93 7a00 	vldr	s14, [r3]
 8000bd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000be8:	ee07 3a90 	vmov	s15, r3
 8000bec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bf0:	4b6a      	ldr	r3, [pc, #424]	; (8000d9c <MPU9250_Parsing+0x2ec>)
 8000bf2:	ed93 7a00 	vldr	s14, [r3]
 8000bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c06:	ee07 3a90 	vmov	s15, r3
 8000c0a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c0e:	4b64      	ldr	r3, [pc, #400]	; (8000da0 <MPU9250_Parsing+0x2f0>)
 8000c10:	ed93 7a00 	vldr	s14, [r3]
 8000c14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c24:	ee07 3a90 	vmov	s15, r3
 8000c28:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c2c:	4b5c      	ldr	r3, [pc, #368]	; (8000da0 <MPU9250_Parsing+0x2f0>)
 8000c2e:	ed93 7a00 	vldr	s14, [r3]
 8000c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = DataStruct->Az_Raw / MPU9250_Acc_LSB;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c42:	ee07 3a90 	vmov	s15, r3
 8000c46:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c4a:	4b55      	ldr	r3, [pc, #340]	; (8000da0 <MPU9250_Parsing+0x2f0>)
 8000c4c:	ed93 7a00 	vldr	s14, [r3]
 8000c50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Mx = (DataStruct->Mx_Raw * ((DataStruct->ASAX - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8000c60:	461a      	mov	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000c68:	3b80      	subs	r3, #128	; 0x80
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	da00      	bge.n	8000c70 <MPU9250_Parsing+0x1c0>
 8000c6e:	33ff      	adds	r3, #255	; 0xff
 8000c70:	121b      	asrs	r3, r3, #8
 8000c72:	3301      	adds	r3, #1
 8000c74:	fb03 f302 	mul.w	r3, r3, r2
 8000c78:	ee07 3a90 	vmov	s15, r3
 8000c7c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c80:	4b48      	ldr	r3, [pc, #288]	; (8000da4 <MPU9250_Parsing+0x2f4>)
 8000c82:	ed93 7a00 	vldr	s14, [r3]
 8000c86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	DataStruct->My = (DataStruct->My_Raw * ((DataStruct->ASAY - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8000c96:	461a      	mov	r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8000c9e:	3b80      	subs	r3, #128	; 0x80
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	da00      	bge.n	8000ca6 <MPU9250_Parsing+0x1f6>
 8000ca4:	33ff      	adds	r3, #255	; 0xff
 8000ca6:	121b      	asrs	r3, r3, #8
 8000ca8:	3301      	adds	r3, #1
 8000caa:	fb03 f302 	mul.w	r3, r3, r2
 8000cae:	ee07 3a90 	vmov	s15, r3
 8000cb2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000cb6:	4b3b      	ldr	r3, [pc, #236]	; (8000da4 <MPU9250_Parsing+0x2f4>)
 8000cb8:	ed93 7a00 	vldr	s14, [r3]
 8000cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	DataStruct->Mz = (DataStruct->Mz_Raw * ((DataStruct->ASAZ - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8000ccc:	461a      	mov	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000cd4:	3b80      	subs	r3, #128	; 0x80
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	da00      	bge.n	8000cdc <MPU9250_Parsing+0x22c>
 8000cda:	33ff      	adds	r3, #255	; 0xff
 8000cdc:	121b      	asrs	r3, r3, #8
 8000cde:	3301      	adds	r3, #1
 8000ce0:	fb03 f302 	mul.w	r3, r3, r2
 8000ce4:	ee07 3a90 	vmov	s15, r3
 8000ce8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000cec:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <MPU9250_Parsing+0x2f4>)
 8000cee:	ed93 7a00 	vldr	s14, [r3]
 8000cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70

	DataStruct->Gx -= DataStruct->Gx_Offset;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	ed93 7a08 	vldr	s14, [r3, #32]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000d08:	ee07 3a90 	vmov	s15, r3
 8000d0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy -= DataStruct->Gy_Offset;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000d26:	ee07 3a90 	vmov	s15, r3
 8000d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz -= DataStruct->Gz_Offset;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000d44:	ee07 3a90 	vmov	s15, r3
 8000d48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Gx_Rad = DataStruct->Gx * D2R;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	edd3 7a08 	vldr	s15, [r3, #32]
 8000d5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d60:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000d90 <MPU9250_Parsing+0x2e0>
 8000d64:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d68:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	DataStruct->Gy_Rad = DataStruct->Gy * D2R;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000d78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d7c:	ed9f 6b04 	vldr	d6, [pc, #16]	; 8000d90 <MPU9250_Parsing+0x2e0>
 8000d80:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d84:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d88:	e00e      	b.n	8000da8 <MPU9250_Parsing+0x2f8>
 8000d8a:	bf00      	nop
 8000d8c:	f3af 8000 	nop.w
 8000d90:	a252dd11 	.word	0xa252dd11
 8000d94:	3f91df46 	.word	0x3f91df46
 8000d98:	240002bc 	.word	0x240002bc
 8000d9c:	24000000 	.word	0x24000000
 8000da0:	24000004 	.word	0x24000004
 8000da4:	24000008 	.word	0x24000008
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	DataStruct->Gz_Rad = DataStruct->Gz * D2R;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000db4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000db8:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000e18 <MPU9250_Parsing+0x368>
 8000dbc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000dc0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	DataStruct->Mx -= DataStruct->Mx_Offset;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8000dd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	DataStruct->My -= DataStruct->My_Offset;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8000dec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	DataStruct->Mz -= DataStruct->Mz_Offset;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8000e02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	a252dd11 	.word	0xa252dd11
 8000e1c:	3f91df46 	.word	0x3f91df46

08000e20 <MPU9250_Parsing_NoOffset>:

void MPU9250_Parsing_NoOffset(MPU9250_t *DataStruct)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = (MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8000e28:	4bb7      	ldr	r3, [pc, #732]	; (8001108 <MPU9250_Parsing_NoOffset+0x2e8>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	b21a      	sxth	r2, r3
 8000e30:	4bb5      	ldr	r3, [pc, #724]	; (8001108 <MPU9250_Parsing_NoOffset+0x2e8>)
 8000e32:	785b      	ldrb	r3, [r3, #1]
 8000e34:	b21b      	sxth	r3, r3
 8000e36:	4313      	orrs	r3, r2
 8000e38:	b21a      	sxth	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = -(MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8000e3e:	4bb2      	ldr	r3, [pc, #712]	; (8001108 <MPU9250_Parsing_NoOffset+0x2e8>)
 8000e40:	789b      	ldrb	r3, [r3, #2]
 8000e42:	021b      	lsls	r3, r3, #8
 8000e44:	b21a      	sxth	r2, r3
 8000e46:	4bb0      	ldr	r3, [pc, #704]	; (8001108 <MPU9250_Parsing_NoOffset+0x2e8>)
 8000e48:	78db      	ldrb	r3, [r3, #3]
 8000e4a:	b21b      	sxth	r3, r3
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	b21b      	sxth	r3, r3
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	425b      	negs	r3, r3
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	b21a      	sxth	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = -(MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]);
 8000e5c:	4baa      	ldr	r3, [pc, #680]	; (8001108 <MPU9250_Parsing_NoOffset+0x2e8>)
 8000e5e:	791b      	ldrb	r3, [r3, #4]
 8000e60:	021b      	lsls	r3, r3, #8
 8000e62:	b21a      	sxth	r2, r3
 8000e64:	4ba8      	ldr	r3, [pc, #672]	; (8001108 <MPU9250_Parsing_NoOffset+0x2e8>)
 8000e66:	795b      	ldrb	r3, [r3, #5]
 8000e68:	b21b      	sxth	r3, r3
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	b21b      	sxth	r3, r3
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	425b      	negs	r3, r3
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	b21a      	sxth	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	809a      	strh	r2, [r3, #4]
	// Didn't Save Temp Value
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8000e7a:	4ba3      	ldr	r3, [pc, #652]	; (8001108 <MPU9250_Parsing_NoOffset+0x2e8>)
 8000e7c:	7a1b      	ldrb	r3, [r3, #8]
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	b21a      	sxth	r2, r3
 8000e82:	4ba1      	ldr	r3, [pc, #644]	; (8001108 <MPU9250_Parsing_NoOffset+0x2e8>)
 8000e84:	7a5b      	ldrb	r3, [r3, #9]
 8000e86:	b21b      	sxth	r3, r3
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	b21a      	sxth	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8000e90:	4b9d      	ldr	r3, [pc, #628]	; (8001108 <MPU9250_Parsing_NoOffset+0x2e8>)
 8000e92:	7a9b      	ldrb	r3, [r3, #10]
 8000e94:	021b      	lsls	r3, r3, #8
 8000e96:	b21a      	sxth	r2, r3
 8000e98:	4b9b      	ldr	r3, [pc, #620]	; (8001108 <MPU9250_Parsing_NoOffset+0x2e8>)
 8000e9a:	7adb      	ldrb	r3, [r3, #11]
 8000e9c:	b21b      	sxth	r3, r3
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	b21b      	sxth	r3, r3
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	425b      	negs	r3, r3
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	b21a      	sxth	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 8000eae:	4b96      	ldr	r3, [pc, #600]	; (8001108 <MPU9250_Parsing_NoOffset+0x2e8>)
 8000eb0:	7b1b      	ldrb	r3, [r3, #12]
 8000eb2:	021b      	lsls	r3, r3, #8
 8000eb4:	b21a      	sxth	r2, r3
 8000eb6:	4b94      	ldr	r3, [pc, #592]	; (8001108 <MPU9250_Parsing_NoOffset+0x2e8>)
 8000eb8:	7b5b      	ldrb	r3, [r3, #13]
 8000eba:	b21b      	sxth	r3, r3
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	b21b      	sxth	r3, r3
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	425b      	negs	r3, r3
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	b21a      	sxth	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	831a      	strh	r2, [r3, #24]

	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 8000ecc:	4b8e      	ldr	r3, [pc, #568]	; (8001108 <MPU9250_Parsing_NoOffset+0x2e8>)
 8000ece:	7bdb      	ldrb	r3, [r3, #15]
 8000ed0:	021b      	lsls	r3, r3, #8
 8000ed2:	b21a      	sxth	r2, r3
 8000ed4:	4b8c      	ldr	r3, [pc, #560]	; (8001108 <MPU9250_Parsing_NoOffset+0x2e8>)
 8000ed6:	7b9b      	ldrb	r3, [r3, #14]
 8000ed8:	b21b      	sxth	r3, r3
 8000eda:	4313      	orrs	r3, r2
 8000edc:	b21b      	sxth	r3, r3
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	425b      	negs	r3, r3
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	b21a      	sxth	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	875a      	strh	r2, [r3, #58]	; 0x3a
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 8000eea:	4b87      	ldr	r3, [pc, #540]	; (8001108 <MPU9250_Parsing_NoOffset+0x2e8>)
 8000eec:	7c5b      	ldrb	r3, [r3, #17]
 8000eee:	021b      	lsls	r3, r3, #8
 8000ef0:	b21a      	sxth	r2, r3
 8000ef2:	4b85      	ldr	r3, [pc, #532]	; (8001108 <MPU9250_Parsing_NoOffset+0x2e8>)
 8000ef4:	7c1b      	ldrb	r3, [r3, #16]
 8000ef6:	b21b      	sxth	r3, r3
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	b21a      	sxth	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	871a      	strh	r2, [r3, #56]	; 0x38
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 8000f00:	4b81      	ldr	r3, [pc, #516]	; (8001108 <MPU9250_Parsing_NoOffset+0x2e8>)
 8000f02:	7cdb      	ldrb	r3, [r3, #19]
 8000f04:	021b      	lsls	r3, r3, #8
 8000f06:	b21a      	sxth	r2, r3
 8000f08:	4b7f      	ldr	r3, [pc, #508]	; (8001108 <MPU9250_Parsing_NoOffset+0x2e8>)
 8000f0a:	7c9b      	ldrb	r3, [r3, #18]
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	b21a      	sxth	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	879a      	strh	r2, [r3, #60]	; 0x3c

	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB* D2R;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000f1c:	ee07 3a90 	vmov	s15, r3
 8000f20:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f24:	4b79      	ldr	r3, [pc, #484]	; (800110c <MPU9250_Parsing_NoOffset+0x2ec>)
 8000f26:	ed93 7a00 	vldr	s14, [r3]
 8000f2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f32:	ed9f 6b73 	vldr	d6, [pc, #460]	; 8001100 <MPU9250_Parsing_NoOffset+0x2e0>
 8000f36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f3a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB* D2R;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000f4a:	ee07 3a90 	vmov	s15, r3
 8000f4e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f52:	4b6e      	ldr	r3, [pc, #440]	; (800110c <MPU9250_Parsing_NoOffset+0x2ec>)
 8000f54:	ed93 7a00 	vldr	s14, [r3]
 8000f58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f60:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8001100 <MPU9250_Parsing_NoOffset+0x2e0>
 8000f64:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f68:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB* D2R;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000f78:	ee07 3a90 	vmov	s15, r3
 8000f7c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f80:	4b62      	ldr	r3, [pc, #392]	; (800110c <MPU9250_Parsing_NoOffset+0x2ec>)
 8000f82:	ed93 7a00 	vldr	s14, [r3]
 8000f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f8e:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8001100 <MPU9250_Parsing_NoOffset+0x2e0>
 8000f92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f96:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Gx_Rad = DataStruct->Gx * D2R;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	edd3 7a08 	vldr	s15, [r3, #32]
 8000fa6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000faa:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8001100 <MPU9250_Parsing_NoOffset+0x2e0>
 8000fae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fb2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	DataStruct->Gy_Rad = DataStruct->Gy * D2R;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000fc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fc6:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8001100 <MPU9250_Parsing_NoOffset+0x2e0>
 8000fca:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	DataStruct->Gz_Rad = DataStruct->Gz * D2R;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000fde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fe2:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8001100 <MPU9250_Parsing_NoOffset+0x2e0>
 8000fe6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ffa:	ee07 3a90 	vmov	s15, r3
 8000ffe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001002:	4b43      	ldr	r3, [pc, #268]	; (8001110 <MPU9250_Parsing_NoOffset+0x2f0>)
 8001004:	ed93 7a00 	vldr	s14, [r3]
 8001008:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001018:	ee07 3a90 	vmov	s15, r3
 800101c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001020:	4b3b      	ldr	r3, [pc, #236]	; (8001110 <MPU9250_Parsing_NoOffset+0x2f0>)
 8001022:	ed93 7a00 	vldr	s14, [r3]
 8001026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = DataStruct->Az_Raw / MPU9250_Acc_LSB;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001036:	ee07 3a90 	vmov	s15, r3
 800103a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800103e:	4b34      	ldr	r3, [pc, #208]	; (8001110 <MPU9250_Parsing_NoOffset+0x2f0>)
 8001040:	ed93 7a00 	vldr	s14, [r3]
 8001044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Mx = (DataStruct->Mx_Raw * ((DataStruct->ASAX - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8001054:	461a      	mov	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800105c:	3b80      	subs	r3, #128	; 0x80
 800105e:	2b00      	cmp	r3, #0
 8001060:	da00      	bge.n	8001064 <MPU9250_Parsing_NoOffset+0x244>
 8001062:	33ff      	adds	r3, #255	; 0xff
 8001064:	121b      	asrs	r3, r3, #8
 8001066:	3301      	adds	r3, #1
 8001068:	fb03 f302 	mul.w	r3, r3, r2
 800106c:	ee07 3a90 	vmov	s15, r3
 8001070:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001074:	4b27      	ldr	r3, [pc, #156]	; (8001114 <MPU9250_Parsing_NoOffset+0x2f4>)
 8001076:	ed93 7a00 	vldr	s14, [r3]
 800107a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	DataStruct->My = (DataStruct->My_Raw * ((DataStruct->ASAY - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800108a:	461a      	mov	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001092:	3b80      	subs	r3, #128	; 0x80
 8001094:	2b00      	cmp	r3, #0
 8001096:	da00      	bge.n	800109a <MPU9250_Parsing_NoOffset+0x27a>
 8001098:	33ff      	adds	r3, #255	; 0xff
 800109a:	121b      	asrs	r3, r3, #8
 800109c:	3301      	adds	r3, #1
 800109e:	fb03 f302 	mul.w	r3, r3, r2
 80010a2:	ee07 3a90 	vmov	s15, r3
 80010a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <MPU9250_Parsing_NoOffset+0x2f4>)
 80010ac:	ed93 7a00 	vldr	s14, [r3]
 80010b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	DataStruct->Mz = (DataStruct->Mz_Raw * ((DataStruct->ASAZ - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80010c0:	461a      	mov	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010c8:	3b80      	subs	r3, #128	; 0x80
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	da00      	bge.n	80010d0 <MPU9250_Parsing_NoOffset+0x2b0>
 80010ce:	33ff      	adds	r3, #255	; 0xff
 80010d0:	121b      	asrs	r3, r3, #8
 80010d2:	3301      	adds	r3, #1
 80010d4:	fb03 f302 	mul.w	r3, r3, r2
 80010d8:	ee07 3a90 	vmov	s15, r3
 80010dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <MPU9250_Parsing_NoOffset+0x2f4>)
 80010e2:	ed93 7a00 	vldr	s14, [r3]
 80010e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	f3af 8000 	nop.w
 8001100:	a252dd11 	.word	0xa252dd11
 8001104:	3f91df46 	.word	0x3f91df46
 8001108:	240002bc 	.word	0x240002bc
 800110c:	24000000 	.word	0x24000000
 8001110:	24000004 	.word	0x24000004
 8001114:	24000008 	.word	0x24000008

08001118 <MadgwickAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b0ae      	sub	sp, #184	; 0xb8
 800111c:	af00      	add	r7, sp, #0
 800111e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8001122:	edc7 0a08 	vstr	s1, [r7, #32]
 8001126:	ed87 1a07 	vstr	s2, [r7, #28]
 800112a:	edc7 1a06 	vstr	s3, [r7, #24]
 800112e:	ed87 2a05 	vstr	s4, [r7, #20]
 8001132:	edc7 2a04 	vstr	s5, [r7, #16]
 8001136:	ed87 3a03 	vstr	s6, [r7, #12]
 800113a:	edc7 3a02 	vstr	s7, [r7, #8]
 800113e:	ed87 4a01 	vstr	s8, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;
	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8001142:	edd7 7a03 	vldr	s15, [r7, #12]
 8001146:	eef5 7a40 	vcmp.f32	s15, #0.0
 800114a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114e:	d11d      	bne.n	800118c <MadgwickAHRSupdate+0x74>
 8001150:	edd7 7a02 	vldr	s15, [r7, #8]
 8001154:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115c:	d116      	bne.n	800118c <MadgwickAHRSupdate+0x74>
 800115e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001162:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116a:	d10f      	bne.n	800118c <MadgwickAHRSupdate+0x74>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 800116c:	edd7 2a04 	vldr	s5, [r7, #16]
 8001170:	ed97 2a05 	vldr	s4, [r7, #20]
 8001174:	edd7 1a06 	vldr	s3, [r7, #24]
 8001178:	ed97 1a07 	vldr	s2, [r7, #28]
 800117c:	edd7 0a08 	vldr	s1, [r7, #32]
 8001180:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001184:	f000 ffd6 	bl	8002134 <MadgwickAHRSupdateIMU>
		return;
 8001188:	f000 bfb4 	b.w	80020f4 <MadgwickAHRSupdate+0xfdc>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800118c:	4be6      	ldr	r3, [pc, #920]	; (8001528 <MadgwickAHRSupdate+0x410>)
 800118e:	edd3 7a00 	vldr	s15, [r3]
 8001192:	eeb1 7a67 	vneg.f32	s14, s15
 8001196:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800119a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800119e:	4be3      	ldr	r3, [pc, #908]	; (800152c <MadgwickAHRSupdate+0x414>)
 80011a0:	edd3 6a00 	vldr	s13, [r3]
 80011a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80011a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011b0:	4bdf      	ldr	r3, [pc, #892]	; (8001530 <MadgwickAHRSupdate+0x418>)
 80011b2:	edd3 6a00 	vldr	s13, [r3]
 80011b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80011ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80011c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ca:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80011ce:	4bd9      	ldr	r3, [pc, #868]	; (8001534 <MadgwickAHRSupdate+0x41c>)
 80011d0:	ed93 7a00 	vldr	s14, [r3]
 80011d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80011d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011dc:	4bd3      	ldr	r3, [pc, #844]	; (800152c <MadgwickAHRSupdate+0x414>)
 80011de:	edd3 6a00 	vldr	s13, [r3]
 80011e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80011e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011ee:	4bd0      	ldr	r3, [pc, #832]	; (8001530 <MadgwickAHRSupdate+0x418>)
 80011f0:	edd3 6a00 	vldr	s13, [r3]
 80011f4:	edd7 7a08 	vldr	s15, [r7, #32]
 80011f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001200:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001204:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001208:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800120c:	4bc9      	ldr	r3, [pc, #804]	; (8001534 <MadgwickAHRSupdate+0x41c>)
 800120e:	ed93 7a00 	vldr	s14, [r3]
 8001212:	edd7 7a08 	vldr	s15, [r7, #32]
 8001216:	ee27 7a27 	vmul.f32	s14, s14, s15
 800121a:	4bc3      	ldr	r3, [pc, #780]	; (8001528 <MadgwickAHRSupdate+0x410>)
 800121c:	edd3 6a00 	vldr	s13, [r3]
 8001220:	edd7 7a07 	vldr	s15, [r7, #28]
 8001224:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001228:	ee37 7a67 	vsub.f32	s14, s14, s15
 800122c:	4bc0      	ldr	r3, [pc, #768]	; (8001530 <MadgwickAHRSupdate+0x418>)
 800122e:	edd3 6a00 	vldr	s13, [r3]
 8001232:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001236:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800123a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800123e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001242:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001246:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800124a:	4bba      	ldr	r3, [pc, #744]	; (8001534 <MadgwickAHRSupdate+0x41c>)
 800124c:	ed93 7a00 	vldr	s14, [r3]
 8001250:	edd7 7a07 	vldr	s15, [r7, #28]
 8001254:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001258:	4bb3      	ldr	r3, [pc, #716]	; (8001528 <MadgwickAHRSupdate+0x410>)
 800125a:	edd3 6a00 	vldr	s13, [r3]
 800125e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001262:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001266:	ee37 7a27 	vadd.f32	s14, s14, s15
 800126a:	4bb0      	ldr	r3, [pc, #704]	; (800152c <MadgwickAHRSupdate+0x414>)
 800126c:	edd3 6a00 	vldr	s13, [r3]
 8001270:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001274:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001278:	ee77 7a67 	vsub.f32	s15, s14, s15
 800127c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001280:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001284:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001288:	edd7 7a06 	vldr	s15, [r7, #24]
 800128c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001294:	d10e      	bne.n	80012b4 <MadgwickAHRSupdate+0x19c>
 8001296:	edd7 7a05 	vldr	s15, [r7, #20]
 800129a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800129e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a2:	d107      	bne.n	80012b4 <MadgwickAHRSupdate+0x19c>
 80012a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80012a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b0:	f000 85a6 	beq.w	8001e00 <MadgwickAHRSupdate+0xce8>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80012b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80012b8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80012bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80012c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80012cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d4:	eeb0 0a67 	vmov.f32	s0, s15
 80012d8:	f001 fb5a 	bl	8002990 <invSqrt>
 80012dc:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		ax *= recipNorm;
 80012e0:	ed97 7a06 	vldr	s14, [r7, #24]
 80012e4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80012e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ec:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 80012f0:	ed97 7a05 	vldr	s14, [r7, #20]
 80012f4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80012f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fc:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;   
 8001300:	ed97 7a04 	vldr	s14, [r7, #16]
 8001304:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800130c:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8001310:	edd7 7a03 	vldr	s15, [r7, #12]
 8001314:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001318:	edd7 7a02 	vldr	s15, [r7, #8]
 800131c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001320:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001324:	edd7 7a01 	vldr	s15, [r7, #4]
 8001328:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800132c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001330:	eeb0 0a67 	vmov.f32	s0, s15
 8001334:	f001 fb2c 	bl	8002990 <invSqrt>
 8001338:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		mx *= recipNorm;
 800133c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001340:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001348:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 800134c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001350:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001354:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001358:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 800135c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001360:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001368:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 800136c:	4b71      	ldr	r3, [pc, #452]	; (8001534 <MadgwickAHRSupdate+0x41c>)
 800136e:	edd3 7a00 	vldr	s15, [r3]
 8001372:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001376:	ed97 7a03 	vldr	s14, [r7, #12]
 800137a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800137e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0my = 2.0f * q0 * my;
 8001382:	4b6c      	ldr	r3, [pc, #432]	; (8001534 <MadgwickAHRSupdate+0x41c>)
 8001384:	edd3 7a00 	vldr	s15, [r3]
 8001388:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800138c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001394:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q0mz = 2.0f * q0 * mz;
 8001398:	4b66      	ldr	r3, [pc, #408]	; (8001534 <MadgwickAHRSupdate+0x41c>)
 800139a:	edd3 7a00 	vldr	s15, [r3]
 800139e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013a2:	ed97 7a01 	vldr	s14, [r7, #4]
 80013a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013aa:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		_2q1mx = 2.0f * q1 * mx;
 80013ae:	4b5e      	ldr	r3, [pc, #376]	; (8001528 <MadgwickAHRSupdate+0x410>)
 80013b0:	edd3 7a00 	vldr	s15, [r3]
 80013b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013b8:	ed97 7a03 	vldr	s14, [r7, #12]
 80013bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c0:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		_2q0 = 2.0f * q0;
 80013c4:	4b5b      	ldr	r3, [pc, #364]	; (8001534 <MadgwickAHRSupdate+0x41c>)
 80013c6:	edd3 7a00 	vldr	s15, [r3]
 80013ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013ce:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		_2q1 = 2.0f * q1;
 80013d2:	4b55      	ldr	r3, [pc, #340]	; (8001528 <MadgwickAHRSupdate+0x410>)
 80013d4:	edd3 7a00 	vldr	s15, [r3]
 80013d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013dc:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		_2q2 = 2.0f * q2;
 80013e0:	4b52      	ldr	r3, [pc, #328]	; (800152c <MadgwickAHRSupdate+0x414>)
 80013e2:	edd3 7a00 	vldr	s15, [r3]
 80013e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013ea:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q3 = 2.0f * q3;
 80013ee:	4b50      	ldr	r3, [pc, #320]	; (8001530 <MadgwickAHRSupdate+0x418>)
 80013f0:	edd3 7a00 	vldr	s15, [r3]
 80013f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013f8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0q2 = 2.0f * q0 * q2;
 80013fc:	4b4d      	ldr	r3, [pc, #308]	; (8001534 <MadgwickAHRSupdate+0x41c>)
 80013fe:	edd3 7a00 	vldr	s15, [r3]
 8001402:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001406:	4b49      	ldr	r3, [pc, #292]	; (800152c <MadgwickAHRSupdate+0x414>)
 8001408:	edd3 7a00 	vldr	s15, [r3]
 800140c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001410:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q2q3 = 2.0f * q2 * q3;
 8001414:	4b45      	ldr	r3, [pc, #276]	; (800152c <MadgwickAHRSupdate+0x414>)
 8001416:	edd3 7a00 	vldr	s15, [r3]
 800141a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800141e:	4b44      	ldr	r3, [pc, #272]	; (8001530 <MadgwickAHRSupdate+0x418>)
 8001420:	edd3 7a00 	vldr	s15, [r3]
 8001424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001428:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q0q0 = q0 * q0;
 800142c:	4b41      	ldr	r3, [pc, #260]	; (8001534 <MadgwickAHRSupdate+0x41c>)
 800142e:	ed93 7a00 	vldr	s14, [r3]
 8001432:	4b40      	ldr	r3, [pc, #256]	; (8001534 <MadgwickAHRSupdate+0x41c>)
 8001434:	edd3 7a00 	vldr	s15, [r3]
 8001438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800143c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q0q1 = q0 * q1;
 8001440:	4b3c      	ldr	r3, [pc, #240]	; (8001534 <MadgwickAHRSupdate+0x41c>)
 8001442:	ed93 7a00 	vldr	s14, [r3]
 8001446:	4b38      	ldr	r3, [pc, #224]	; (8001528 <MadgwickAHRSupdate+0x410>)
 8001448:	edd3 7a00 	vldr	s15, [r3]
 800144c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001450:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q0q2 = q0 * q2;
 8001454:	4b37      	ldr	r3, [pc, #220]	; (8001534 <MadgwickAHRSupdate+0x41c>)
 8001456:	ed93 7a00 	vldr	s14, [r3]
 800145a:	4b34      	ldr	r3, [pc, #208]	; (800152c <MadgwickAHRSupdate+0x414>)
 800145c:	edd3 7a00 	vldr	s15, [r3]
 8001460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001464:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q0q3 = q0 * q3;
 8001468:	4b32      	ldr	r3, [pc, #200]	; (8001534 <MadgwickAHRSupdate+0x41c>)
 800146a:	ed93 7a00 	vldr	s14, [r3]
 800146e:	4b30      	ldr	r3, [pc, #192]	; (8001530 <MadgwickAHRSupdate+0x418>)
 8001470:	edd3 7a00 	vldr	s15, [r3]
 8001474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001478:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		q1q1 = q1 * q1;
 800147c:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <MadgwickAHRSupdate+0x410>)
 800147e:	ed93 7a00 	vldr	s14, [r3]
 8001482:	4b29      	ldr	r3, [pc, #164]	; (8001528 <MadgwickAHRSupdate+0x410>)
 8001484:	edd3 7a00 	vldr	s15, [r3]
 8001488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q1q2 = q1 * q2;
 8001490:	4b25      	ldr	r3, [pc, #148]	; (8001528 <MadgwickAHRSupdate+0x410>)
 8001492:	ed93 7a00 	vldr	s14, [r3]
 8001496:	4b25      	ldr	r3, [pc, #148]	; (800152c <MadgwickAHRSupdate+0x414>)
 8001498:	edd3 7a00 	vldr	s15, [r3]
 800149c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a0:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q3 = q1 * q3;
 80014a4:	4b20      	ldr	r3, [pc, #128]	; (8001528 <MadgwickAHRSupdate+0x410>)
 80014a6:	ed93 7a00 	vldr	s14, [r3]
 80014aa:	4b21      	ldr	r3, [pc, #132]	; (8001530 <MadgwickAHRSupdate+0x418>)
 80014ac:	edd3 7a00 	vldr	s15, [r3]
 80014b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 80014b8:	4b1c      	ldr	r3, [pc, #112]	; (800152c <MadgwickAHRSupdate+0x414>)
 80014ba:	ed93 7a00 	vldr	s14, [r3]
 80014be:	4b1b      	ldr	r3, [pc, #108]	; (800152c <MadgwickAHRSupdate+0x414>)
 80014c0:	edd3 7a00 	vldr	s15, [r3]
 80014c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q2q3 = q2 * q3;
 80014cc:	4b17      	ldr	r3, [pc, #92]	; (800152c <MadgwickAHRSupdate+0x414>)
 80014ce:	ed93 7a00 	vldr	s14, [r3]
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <MadgwickAHRSupdate+0x418>)
 80014d4:	edd3 7a00 	vldr	s15, [r3]
 80014d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014dc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q3q3 = q3 * q3;
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <MadgwickAHRSupdate+0x418>)
 80014e2:	ed93 7a00 	vldr	s14, [r3]
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <MadgwickAHRSupdate+0x418>)
 80014e8:	edd3 7a00 	vldr	s15, [r3]
 80014ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 80014f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80014f8:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80014fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <MadgwickAHRSupdate+0x418>)
 8001502:	edd3 6a00 	vldr	s13, [r3]
 8001506:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800150a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800150e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <MadgwickAHRSupdate+0x414>)
 8001514:	edd3 6a00 	vldr	s13, [r3]
 8001518:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800151c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001520:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001524:	e008      	b.n	8001538 <MadgwickAHRSupdate+0x420>
 8001526:	bf00      	nop
 8001528:	24000214 	.word	0x24000214
 800152c:	24000218 	.word	0x24000218
 8001530:	2400021c 	.word	0x2400021c
 8001534:	24000010 	.word	0x24000010
 8001538:	edd7 6a03 	vldr	s13, [r7, #12]
 800153c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001540:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001544:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001548:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800154c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001550:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001554:	4bf5      	ldr	r3, [pc, #980]	; (800192c <MadgwickAHRSupdate+0x814>)
 8001556:	edd3 7a00 	vldr	s15, [r3]
 800155a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800155e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001562:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001566:	edd7 7a01 	vldr	s15, [r7, #4]
 800156a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800156e:	4bf0      	ldr	r3, [pc, #960]	; (8001930 <MadgwickAHRSupdate+0x818>)
 8001570:	edd3 7a00 	vldr	s15, [r3]
 8001574:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001578:	ee37 7a27 	vadd.f32	s14, s14, s15
 800157c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001580:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001584:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001588:	ee37 7a67 	vsub.f32	s14, s14, s15
 800158c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001590:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001594:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001598:	ee77 7a67 	vsub.f32	s15, s14, s15
 800159c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 80015a0:	4be3      	ldr	r3, [pc, #908]	; (8001930 <MadgwickAHRSupdate+0x818>)
 80015a2:	ed93 7a00 	vldr	s14, [r3]
 80015a6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80015aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015ae:	edd7 6a02 	vldr	s13, [r7, #8]
 80015b2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80015b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015be:	4bdd      	ldr	r3, [pc, #884]	; (8001934 <MadgwickAHRSupdate+0x81c>)
 80015c0:	edd3 6a00 	vldr	s13, [r3]
 80015c4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80015c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015d0:	4bd6      	ldr	r3, [pc, #856]	; (800192c <MadgwickAHRSupdate+0x814>)
 80015d2:	edd3 6a00 	vldr	s13, [r3]
 80015d6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80015da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015e2:	edd7 6a02 	vldr	s13, [r7, #8]
 80015e6:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80015ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015f2:	edd7 6a02 	vldr	s13, [r7, #8]
 80015f6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80015fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001602:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001606:	edd7 7a01 	vldr	s15, [r7, #4]
 800160a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800160e:	4bc8      	ldr	r3, [pc, #800]	; (8001930 <MadgwickAHRSupdate+0x818>)
 8001610:	edd3 7a00 	vldr	s15, [r3]
 8001614:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001618:	ee37 7a27 	vadd.f32	s14, s14, s15
 800161c:	edd7 6a02 	vldr	s13, [r7, #8]
 8001620:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001628:	ee77 7a67 	vsub.f32	s15, s14, s15
 800162c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 8001630:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001634:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001638:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800163c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001644:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001648:	eeb0 0b47 	vmov.f64	d0, d7
 800164c:	f010 ff84 	bl	8012558 <sqrt>
 8001650:	eeb0 7b40 	vmov.f64	d7, d0
 8001654:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001658:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 800165c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001660:	eeb1 7a67 	vneg.f32	s14, s15
 8001664:	4bb1      	ldr	r3, [pc, #708]	; (800192c <MadgwickAHRSupdate+0x814>)
 8001666:	edd3 7a00 	vldr	s15, [r3]
 800166a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800166e:	4bb1      	ldr	r3, [pc, #708]	; (8001934 <MadgwickAHRSupdate+0x81c>)
 8001670:	edd3 6a00 	vldr	s13, [r3]
 8001674:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001678:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800167c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001680:	edd7 6a01 	vldr	s13, [r7, #4]
 8001684:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001688:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800168c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001690:	4ba7      	ldr	r3, [pc, #668]	; (8001930 <MadgwickAHRSupdate+0x818>)
 8001692:	edd3 6a00 	vldr	s13, [r3]
 8001696:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800169a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800169e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016a2:	edd7 6a01 	vldr	s13, [r7, #4]
 80016a6:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80016aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016b2:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80016b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80016ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016be:	4b9c      	ldr	r3, [pc, #624]	; (8001930 <MadgwickAHRSupdate+0x818>)
 80016c0:	edd3 7a00 	vldr	s15, [r3]
 80016c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016cc:	edd7 6a01 	vldr	s13, [r7, #4]
 80016d0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80016d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016dc:	edd7 6a01 	vldr	s13, [r7, #4]
 80016e0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80016e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ec:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4bx = 2.0f * _2bx;
 80016f0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80016f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016f8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_4bz = 2.0f * _2bz;
 80016fc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001700:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001704:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001708:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800170c:	eeb1 7a67 	vneg.f32	s14, s15
 8001710:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001714:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001718:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800171c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001720:	edd7 7a06 	vldr	s15, [r7, #24]
 8001724:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001728:	ee27 7a27 	vmul.f32	s14, s14, s15
 800172c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001730:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001734:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001738:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800173c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001740:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001744:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001748:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800174c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001750:	4b76      	ldr	r3, [pc, #472]	; (800192c <MadgwickAHRSupdate+0x814>)
 8001752:	edd3 6a00 	vldr	s13, [r3]
 8001756:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800175a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800175e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001762:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001766:	ee36 6a67 	vsub.f32	s12, s12, s15
 800176a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800176e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001772:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001776:	ee26 6a27 	vmul.f32	s12, s12, s15
 800177a:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800177e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001782:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001786:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800178a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800178e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001792:	edd7 7a03 	vldr	s15, [r7, #12]
 8001796:	ee76 7a67 	vsub.f32	s15, s12, s15
 800179a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800179e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017a2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80017a6:	eef1 6a67 	vneg.f32	s13, s15
 80017aa:	4b61      	ldr	r3, [pc, #388]	; (8001930 <MadgwickAHRSupdate+0x818>)
 80017ac:	edd3 7a00 	vldr	s15, [r3]
 80017b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017b4:	4b5f      	ldr	r3, [pc, #380]	; (8001934 <MadgwickAHRSupdate+0x81c>)
 80017b6:	ed93 6a00 	vldr	s12, [r3]
 80017ba:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80017be:	ee66 7a27 	vmul.f32	s15, s12, s15
 80017c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80017c6:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80017ca:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80017ce:	ee36 6a67 	vsub.f32	s12, s12, s15
 80017d2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80017d6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80017da:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80017de:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80017e2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80017e6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80017ea:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80017ee:	ee36 6a27 	vadd.f32	s12, s12, s15
 80017f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80017f6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80017fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001802:	4b4a      	ldr	r3, [pc, #296]	; (800192c <MadgwickAHRSupdate+0x814>)
 8001804:	edd3 6a00 	vldr	s13, [r3]
 8001808:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800180c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001810:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001814:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001818:	ee36 6a27 	vadd.f32	s12, s12, s15
 800181c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001820:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001824:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001828:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800182c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001830:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001834:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001838:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800183c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001840:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001844:	edd7 7a01 	vldr	s15, [r7, #4]
 8001848:	ee76 7a67 	vsub.f32	s15, s12, s15
 800184c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001850:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001854:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001858:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800185c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001860:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001864:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001868:	edd7 7a06 	vldr	s15, [r7, #24]
 800186c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001870:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001874:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001878:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800187c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001880:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001884:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001888:	edd7 7a05 	vldr	s15, [r7, #20]
 800188c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001890:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001894:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001898:	ee37 7a27 	vadd.f32	s14, s14, s15
 800189c:	4b25      	ldr	r3, [pc, #148]	; (8001934 <MadgwickAHRSupdate+0x81c>)
 800189e:	edd3 7a00 	vldr	s15, [r3]
 80018a2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80018a6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80018aa:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80018ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018b2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80018b6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018ba:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80018be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018c2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80018ca:	ee76 7a67 	vsub.f32	s15, s12, s15
 80018ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018d6:	4b16      	ldr	r3, [pc, #88]	; (8001930 <MadgwickAHRSupdate+0x818>)
 80018d8:	edd3 6a00 	vldr	s13, [r3]
 80018dc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018e4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80018e8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80018ec:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018f0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80018f4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018f8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018fc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001900:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001904:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001908:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800190c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001910:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001914:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001918:	edd7 7a03 	vldr	s15, [r7, #12]
 800191c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001920:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001924:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001928:	e006      	b.n	8001938 <MadgwickAHRSupdate+0x820>
 800192a:	bf00      	nop
 800192c:	24000218 	.word	0x24000218
 8001930:	2400021c 	.word	0x2400021c
 8001934:	24000214 	.word	0x24000214
 8001938:	4bf6      	ldr	r3, [pc, #984]	; (8001d14 <MadgwickAHRSupdate+0xbfc>)
 800193a:	edd3 6a00 	vldr	s13, [r3]
 800193e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001942:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001946:	4bf4      	ldr	r3, [pc, #976]	; (8001d18 <MadgwickAHRSupdate+0xc00>)
 8001948:	ed93 6a00 	vldr	s12, [r3]
 800194c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001950:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001954:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001958:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800195c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001960:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001964:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001968:	ee26 6a27 	vmul.f32	s12, s12, s15
 800196c:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001970:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001974:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001978:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800197c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001980:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001984:	edd7 7a02 	vldr	s15, [r7, #8]
 8001988:	ee76 7a67 	vsub.f32	s15, s12, s15
 800198c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001990:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001994:	4be1      	ldr	r3, [pc, #900]	; (8001d1c <MadgwickAHRSupdate+0xc04>)
 8001996:	edd3 6a00 	vldr	s13, [r3]
 800199a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800199e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019a2:	4bdf      	ldr	r3, [pc, #892]	; (8001d20 <MadgwickAHRSupdate+0xc08>)
 80019a4:	ed93 6a00 	vldr	s12, [r3]
 80019a8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80019ac:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019b0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019b4:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80019b8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80019bc:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019c0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019c4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80019c8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80019cc:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80019d0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80019d4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80019d8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80019dc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019e0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019e4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80019ec:	ee76 7a67 	vsub.f32	s15, s12, s15
 80019f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80019fc:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001a00:	eeb1 7a67 	vneg.f32	s14, s15
 8001a04:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a08:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001a0c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001a10:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a14:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a18:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a20:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001a24:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001a28:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001a2c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a30:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a34:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a38:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001a3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a44:	4bb3      	ldr	r3, [pc, #716]	; (8001d14 <MadgwickAHRSupdate+0xbfc>)
 8001a46:	edd3 7a00 	vldr	s15, [r3]
 8001a4a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001a4e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001a52:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001a56:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a5a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001a5e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a62:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a66:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a6a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a72:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a7e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001a82:	eef1 6a67 	vneg.f32	s13, s15
 8001a86:	4ba3      	ldr	r3, [pc, #652]	; (8001d14 <MadgwickAHRSupdate+0xbfc>)
 8001a88:	edd3 7a00 	vldr	s15, [r3]
 8001a8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a90:	4ba1      	ldr	r3, [pc, #644]	; (8001d18 <MadgwickAHRSupdate+0xc00>)
 8001a92:	ed93 6a00 	vldr	s12, [r3]
 8001a96:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a9a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a9e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001aa2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001aa6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001aaa:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001aae:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001ab2:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ab6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001aba:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001abe:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001ac2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001ac6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001aca:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ace:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ad2:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ad6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ada:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001ade:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ae2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ae6:	4b8e      	ldr	r3, [pc, #568]	; (8001d20 <MadgwickAHRSupdate+0xc08>)
 8001ae8:	edd3 6a00 	vldr	s13, [r3]
 8001aec:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001af0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001af4:	4b89      	ldr	r3, [pc, #548]	; (8001d1c <MadgwickAHRSupdate+0xc04>)
 8001af6:	ed93 6a00 	vldr	s12, [r3]
 8001afa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001afe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b02:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b06:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001b0a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001b0e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001b12:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b16:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b1a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001b1e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001b22:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001b26:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b2a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b2e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b32:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b36:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b42:	4b75      	ldr	r3, [pc, #468]	; (8001d18 <MadgwickAHRSupdate+0xc00>)
 8001b44:	edd3 6a00 	vldr	s13, [r3]
 8001b48:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b4c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b50:	4b70      	ldr	r3, [pc, #448]	; (8001d14 <MadgwickAHRSupdate+0xbfc>)
 8001b52:	ed93 6a00 	vldr	s12, [r3]
 8001b56:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b5a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b5e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b62:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001b66:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b6a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b6e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b72:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b76:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001b7a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b7e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b82:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b86:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b8a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b8e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b92:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b96:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b9a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001baa:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001bae:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001bb2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001bb6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bba:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bc2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001bc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bca:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001bce:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001bd2:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001bd6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001bda:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bde:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001be2:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bee:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001bf2:	eef1 6a67 	vneg.f32	s13, s15
 8001bf6:	4b49      	ldr	r3, [pc, #292]	; (8001d1c <MadgwickAHRSupdate+0xc04>)
 8001bf8:	edd3 7a00 	vldr	s15, [r3]
 8001bfc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c00:	4b47      	ldr	r3, [pc, #284]	; (8001d20 <MadgwickAHRSupdate+0xc08>)
 8001c02:	ed93 6a00 	vldr	s12, [r3]
 8001c06:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c0a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c0e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c12:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001c16:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c1a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c1e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001c22:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c26:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c2a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c2e:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001c32:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001c36:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001c3a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c3e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c42:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c46:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c4a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c56:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c5a:	eef1 6a67 	vneg.f32	s13, s15
 8001c5e:	4b2e      	ldr	r3, [pc, #184]	; (8001d18 <MadgwickAHRSupdate+0xc00>)
 8001c60:	edd3 7a00 	vldr	s15, [r3]
 8001c64:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c68:	4b2a      	ldr	r3, [pc, #168]	; (8001d14 <MadgwickAHRSupdate+0xbfc>)
 8001c6a:	ed93 6a00 	vldr	s12, [r3]
 8001c6e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c72:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c76:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c7a:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001c7e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001c82:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c86:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c8a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c8e:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001c92:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001c96:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001c9a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c9e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ca2:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ca6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001caa:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001cae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <MadgwickAHRSupdate+0xc08>)
 8001cb8:	edd3 6a00 	vldr	s13, [r3]
 8001cbc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001cc0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001cc4:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001cc8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001ccc:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001cd0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001cd4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cd8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001cdc:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001ce0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001ce4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001ce8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001cec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cf0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001cf4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001cf8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cfc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d08:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001d0c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001d10:	e008      	b.n	8001d24 <MadgwickAHRSupdate+0xc0c>
 8001d12:	bf00      	nop
 8001d14:	24000218 	.word	0x24000218
 8001d18:	24000010 	.word	0x24000010
 8001d1c:	2400021c 	.word	0x2400021c
 8001d20:	24000214 	.word	0x24000214
 8001d24:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001d28:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001d2c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d34:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001d38:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d40:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d44:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d50:	f000 fe1e 	bl	8002990 <invSqrt>
 8001d54:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		s0 *= recipNorm;
 8001d58:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001d5c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001d60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d64:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 8001d68:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001d6c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001d70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d74:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 8001d78:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001d7c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d84:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 8001d88:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001d8c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d94:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 8001d98:	4bd8      	ldr	r3, [pc, #864]	; (80020fc <MadgwickAHRSupdate+0xfe4>)
 8001d9a:	ed93 7a00 	vldr	s14, [r3]
 8001d9e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da6:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001daa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dae:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 8001db2:	4bd2      	ldr	r3, [pc, #840]	; (80020fc <MadgwickAHRSupdate+0xfe4>)
 8001db4:	ed93 7a00 	vldr	s14, [r3]
 8001db8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc0:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001dc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dc8:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 8001dcc:	4bcb      	ldr	r3, [pc, #812]	; (80020fc <MadgwickAHRSupdate+0xfe4>)
 8001dce:	ed93 7a00 	vldr	s14, [r3]
 8001dd2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dda:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001dde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001de2:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 8001de6:	4bc5      	ldr	r3, [pc, #788]	; (80020fc <MadgwickAHRSupdate+0xfe4>)
 8001de8:	ed93 7a00 	vldr	s14, [r3]
 8001dec:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df4:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001df8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dfc:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8001e00:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001e04:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8002100 <MadgwickAHRSupdate+0xfe8>
 8001e08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e0c:	4bbd      	ldr	r3, [pc, #756]	; (8002104 <MadgwickAHRSupdate+0xfec>)
 8001e0e:	edd3 7a00 	vldr	s15, [r3]
 8001e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e16:	4bbb      	ldr	r3, [pc, #748]	; (8002104 <MadgwickAHRSupdate+0xfec>)
 8001e18:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8001e1c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001e20:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8002100 <MadgwickAHRSupdate+0xfe8>
 8001e24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e28:	4bb7      	ldr	r3, [pc, #732]	; (8002108 <MadgwickAHRSupdate+0xff0>)
 8001e2a:	edd3 7a00 	vldr	s15, [r3]
 8001e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e32:	4bb5      	ldr	r3, [pc, #724]	; (8002108 <MadgwickAHRSupdate+0xff0>)
 8001e34:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8001e38:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001e3c:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8002100 <MadgwickAHRSupdate+0xfe8>
 8001e40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e44:	4bb1      	ldr	r3, [pc, #708]	; (800210c <MadgwickAHRSupdate+0xff4>)
 8001e46:	edd3 7a00 	vldr	s15, [r3]
 8001e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e4e:	4baf      	ldr	r3, [pc, #700]	; (800210c <MadgwickAHRSupdate+0xff4>)
 8001e50:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8001e54:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001e58:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8002100 <MadgwickAHRSupdate+0xfe8>
 8001e5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e60:	4bab      	ldr	r3, [pc, #684]	; (8002110 <MadgwickAHRSupdate+0xff8>)
 8001e62:	edd3 7a00 	vldr	s15, [r3]
 8001e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e6a:	4ba9      	ldr	r3, [pc, #676]	; (8002110 <MadgwickAHRSupdate+0xff8>)
 8001e6c:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001e70:	4ba4      	ldr	r3, [pc, #656]	; (8002104 <MadgwickAHRSupdate+0xfec>)
 8001e72:	ed93 7a00 	vldr	s14, [r3]
 8001e76:	4ba3      	ldr	r3, [pc, #652]	; (8002104 <MadgwickAHRSupdate+0xfec>)
 8001e78:	edd3 7a00 	vldr	s15, [r3]
 8001e7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e80:	4ba1      	ldr	r3, [pc, #644]	; (8002108 <MadgwickAHRSupdate+0xff0>)
 8001e82:	edd3 6a00 	vldr	s13, [r3]
 8001e86:	4ba0      	ldr	r3, [pc, #640]	; (8002108 <MadgwickAHRSupdate+0xff0>)
 8001e88:	edd3 7a00 	vldr	s15, [r3]
 8001e8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e94:	4b9d      	ldr	r3, [pc, #628]	; (800210c <MadgwickAHRSupdate+0xff4>)
 8001e96:	edd3 6a00 	vldr	s13, [r3]
 8001e9a:	4b9c      	ldr	r3, [pc, #624]	; (800210c <MadgwickAHRSupdate+0xff4>)
 8001e9c:	edd3 7a00 	vldr	s15, [r3]
 8001ea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ea8:	4b99      	ldr	r3, [pc, #612]	; (8002110 <MadgwickAHRSupdate+0xff8>)
 8001eaa:	edd3 6a00 	vldr	s13, [r3]
 8001eae:	4b98      	ldr	r3, [pc, #608]	; (8002110 <MadgwickAHRSupdate+0xff8>)
 8001eb0:	edd3 7a00 	vldr	s15, [r3]
 8001eb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec0:	f000 fd66 	bl	8002990 <invSqrt>
 8001ec4:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 8001ec8:	4b8e      	ldr	r3, [pc, #568]	; (8002104 <MadgwickAHRSupdate+0xfec>)
 8001eca:	ed93 7a00 	vldr	s14, [r3]
 8001ece:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed6:	4b8b      	ldr	r3, [pc, #556]	; (8002104 <MadgwickAHRSupdate+0xfec>)
 8001ed8:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8001edc:	4b8a      	ldr	r3, [pc, #552]	; (8002108 <MadgwickAHRSupdate+0xff0>)
 8001ede:	ed93 7a00 	vldr	s14, [r3]
 8001ee2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eea:	4b87      	ldr	r3, [pc, #540]	; (8002108 <MadgwickAHRSupdate+0xff0>)
 8001eec:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8001ef0:	4b86      	ldr	r3, [pc, #536]	; (800210c <MadgwickAHRSupdate+0xff4>)
 8001ef2:	ed93 7a00 	vldr	s14, [r3]
 8001ef6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001efe:	4b83      	ldr	r3, [pc, #524]	; (800210c <MadgwickAHRSupdate+0xff4>)
 8001f00:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8001f04:	4b82      	ldr	r3, [pc, #520]	; (8002110 <MadgwickAHRSupdate+0xff8>)
 8001f06:	ed93 7a00 	vldr	s14, [r3]
 8001f0a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f12:	4b7f      	ldr	r3, [pc, #508]	; (8002110 <MadgwickAHRSupdate+0xff8>)
 8001f14:	edc3 7a00 	vstr	s15, [r3]

	//Roll, Pitch, Yaw System Conversion
	System_Roll  = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 8001f18:	4b7a      	ldr	r3, [pc, #488]	; (8002104 <MadgwickAHRSupdate+0xfec>)
 8001f1a:	ed93 7a00 	vldr	s14, [r3]
 8001f1e:	4b7a      	ldr	r3, [pc, #488]	; (8002108 <MadgwickAHRSupdate+0xff0>)
 8001f20:	edd3 7a00 	vldr	s15, [r3]
 8001f24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f28:	4b78      	ldr	r3, [pc, #480]	; (800210c <MadgwickAHRSupdate+0xff4>)
 8001f2a:	edd3 6a00 	vldr	s13, [r3]
 8001f2e:	4b78      	ldr	r3, [pc, #480]	; (8002110 <MadgwickAHRSupdate+0xff8>)
 8001f30:	edd3 7a00 	vldr	s15, [r3]
 8001f34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f38:	ee37 6a27 	vadd.f32	s12, s14, s15
 8001f3c:	4b72      	ldr	r3, [pc, #456]	; (8002108 <MadgwickAHRSupdate+0xff0>)
 8001f3e:	ed93 7a00 	vldr	s14, [r3]
 8001f42:	4b71      	ldr	r3, [pc, #452]	; (8002108 <MadgwickAHRSupdate+0xff0>)
 8001f44:	edd3 7a00 	vldr	s15, [r3]
 8001f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f4c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001f50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f54:	4b6d      	ldr	r3, [pc, #436]	; (800210c <MadgwickAHRSupdate+0xff4>)
 8001f56:	edd3 6a00 	vldr	s13, [r3]
 8001f5a:	4b6c      	ldr	r3, [pc, #432]	; (800210c <MadgwickAHRSupdate+0xff4>)
 8001f5c:	edd3 7a00 	vldr	s15, [r3]
 8001f60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f68:	eef0 0a67 	vmov.f32	s1, s15
 8001f6c:	eeb0 0a46 	vmov.f32	s0, s12
 8001f70:	f010 fb4e 	bl	8012610 <atan2f>
 8001f74:	eef0 7a40 	vmov.f32	s15, s0
 8001f78:	4b66      	ldr	r3, [pc, #408]	; (8002114 <MadgwickAHRSupdate+0xffc>)
 8001f7a:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 8001f7e:	4b62      	ldr	r3, [pc, #392]	; (8002108 <MadgwickAHRSupdate+0xff0>)
 8001f80:	ed93 7a00 	vldr	s14, [r3]
 8001f84:	4b62      	ldr	r3, [pc, #392]	; (8002110 <MadgwickAHRSupdate+0xff8>)
 8001f86:	edd3 7a00 	vldr	s15, [r3]
 8001f8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f8e:	4b5d      	ldr	r3, [pc, #372]	; (8002104 <MadgwickAHRSupdate+0xfec>)
 8001f90:	edd3 6a00 	vldr	s13, [r3]
 8001f94:	4b5d      	ldr	r3, [pc, #372]	; (800210c <MadgwickAHRSupdate+0xff4>)
 8001f96:	edd3 7a00 	vldr	s15, [r3]
 8001f9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fa2:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001fa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001faa:	eeb0 0a67 	vmov.f32	s0, s15
 8001fae:	f010 fafd 	bl	80125ac <asinf>
 8001fb2:	eef0 7a40 	vmov.f32	s15, s0
 8001fb6:	4b58      	ldr	r3, [pc, #352]	; (8002118 <MadgwickAHRSupdate+0x1000>)
 8001fb8:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw = atan2(2.0f * (q1*q2 + q0*q3),q0*q0 + q1*q1 - q2*q2 - q3*q3);
 8001fbc:	4b52      	ldr	r3, [pc, #328]	; (8002108 <MadgwickAHRSupdate+0xff0>)
 8001fbe:	ed93 7a00 	vldr	s14, [r3]
 8001fc2:	4b52      	ldr	r3, [pc, #328]	; (800210c <MadgwickAHRSupdate+0xff4>)
 8001fc4:	edd3 7a00 	vldr	s15, [r3]
 8001fc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fcc:	4b4d      	ldr	r3, [pc, #308]	; (8002104 <MadgwickAHRSupdate+0xfec>)
 8001fce:	edd3 6a00 	vldr	s13, [r3]
 8001fd2:	4b4f      	ldr	r3, [pc, #316]	; (8002110 <MadgwickAHRSupdate+0xff8>)
 8001fd4:	edd3 7a00 	vldr	s15, [r3]
 8001fd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001fe4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fe8:	4b46      	ldr	r3, [pc, #280]	; (8002104 <MadgwickAHRSupdate+0xfec>)
 8001fea:	ed93 6a00 	vldr	s12, [r3]
 8001fee:	4b45      	ldr	r3, [pc, #276]	; (8002104 <MadgwickAHRSupdate+0xfec>)
 8001ff0:	edd3 6a00 	vldr	s13, [r3]
 8001ff4:	ee26 6a26 	vmul.f32	s12, s12, s13
 8001ff8:	4b43      	ldr	r3, [pc, #268]	; (8002108 <MadgwickAHRSupdate+0xff0>)
 8001ffa:	edd3 5a00 	vldr	s11, [r3]
 8001ffe:	4b42      	ldr	r3, [pc, #264]	; (8002108 <MadgwickAHRSupdate+0xff0>)
 8002000:	edd3 6a00 	vldr	s13, [r3]
 8002004:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002008:	ee36 6a26 	vadd.f32	s12, s12, s13
 800200c:	4b3f      	ldr	r3, [pc, #252]	; (800210c <MadgwickAHRSupdate+0xff4>)
 800200e:	edd3 5a00 	vldr	s11, [r3]
 8002012:	4b3e      	ldr	r3, [pc, #248]	; (800210c <MadgwickAHRSupdate+0xff4>)
 8002014:	edd3 6a00 	vldr	s13, [r3]
 8002018:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800201c:	ee36 6a66 	vsub.f32	s12, s12, s13
 8002020:	4b3b      	ldr	r3, [pc, #236]	; (8002110 <MadgwickAHRSupdate+0xff8>)
 8002022:	edd3 5a00 	vldr	s11, [r3]
 8002026:	4b3a      	ldr	r3, [pc, #232]	; (8002110 <MadgwickAHRSupdate+0xff8>)
 8002028:	edd3 6a00 	vldr	s13, [r3]
 800202c:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002030:	ee76 6a66 	vsub.f32	s13, s12, s13
 8002034:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002038:	eeb0 1b46 	vmov.f64	d1, d6
 800203c:	eeb0 0b47 	vmov.f64	d0, d7
 8002040:	f010 fa86 	bl	8012550 <atan2>
 8002044:	eeb0 7b40 	vmov.f64	d7, d0
 8002048:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800204c:	4b33      	ldr	r3, [pc, #204]	; (800211c <MadgwickAHRSupdate+0x1004>)
 800204e:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  *= 57.295779515f;
 8002052:	4b30      	ldr	r3, [pc, #192]	; (8002114 <MadgwickAHRSupdate+0xffc>)
 8002054:	edd3 7a00 	vldr	s15, [r3]
 8002058:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002120 <MadgwickAHRSupdate+0x1008>
 800205c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002060:	4b2c      	ldr	r3, [pc, #176]	; (8002114 <MadgwickAHRSupdate+0xffc>)
 8002062:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch *= 57.295779515f;
 8002066:	4b2c      	ldr	r3, [pc, #176]	; (8002118 <MadgwickAHRSupdate+0x1000>)
 8002068:	edd3 7a00 	vldr	s15, [r3]
 800206c:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002120 <MadgwickAHRSupdate+0x1008>
 8002070:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002074:	4b28      	ldr	r3, [pc, #160]	; (8002118 <MadgwickAHRSupdate+0x1000>)
 8002076:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   *= 57.295779515f;
 800207a:	4b28      	ldr	r3, [pc, #160]	; (800211c <MadgwickAHRSupdate+0x1004>)
 800207c:	edd3 7a00 	vldr	s15, [r3]
 8002080:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002120 <MadgwickAHRSupdate+0x1008>
 8002084:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002088:	4b24      	ldr	r3, [pc, #144]	; (800211c <MadgwickAHRSupdate+0x1004>)
 800208a:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  -= System_Roll_Offset;
 800208e:	4b21      	ldr	r3, [pc, #132]	; (8002114 <MadgwickAHRSupdate+0xffc>)
 8002090:	ed93 7a00 	vldr	s14, [r3]
 8002094:	4b23      	ldr	r3, [pc, #140]	; (8002124 <MadgwickAHRSupdate+0x100c>)
 8002096:	edd3 7a00 	vldr	s15, [r3]
 800209a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800209e:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <MadgwickAHRSupdate+0xffc>)
 80020a0:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch -= System_Pitch_Offset;
 80020a4:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <MadgwickAHRSupdate+0x1000>)
 80020a6:	ed93 7a00 	vldr	s14, [r3]
 80020aa:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <MadgwickAHRSupdate+0x1010>)
 80020ac:	edd3 7a00 	vldr	s15, [r3]
 80020b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020b4:	4b18      	ldr	r3, [pc, #96]	; (8002118 <MadgwickAHRSupdate+0x1000>)
 80020b6:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   -= System_Yaw_Offset;
 80020ba:	4b18      	ldr	r3, [pc, #96]	; (800211c <MadgwickAHRSupdate+0x1004>)
 80020bc:	ed93 7a00 	vldr	s14, [r3]
 80020c0:	4b1a      	ldr	r3, [pc, #104]	; (800212c <MadgwickAHRSupdate+0x1014>)
 80020c2:	edd3 7a00 	vldr	s15, [r3]
 80020c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ca:	4b14      	ldr	r3, [pc, #80]	; (800211c <MadgwickAHRSupdate+0x1004>)
 80020cc:	edc3 7a00 	vstr	s15, [r3]
	if(System_Yaw < 0)
 80020d0:	4b12      	ldr	r3, [pc, #72]	; (800211c <MadgwickAHRSupdate+0x1004>)
 80020d2:	edd3 7a00 	vldr	s15, [r3]
 80020d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020de:	d509      	bpl.n	80020f4 <MadgwickAHRSupdate+0xfdc>
	{
		System_Yaw = 360.0f + System_Yaw;
 80020e0:	4b0e      	ldr	r3, [pc, #56]	; (800211c <MadgwickAHRSupdate+0x1004>)
 80020e2:	edd3 7a00 	vldr	s15, [r3]
 80020e6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002130 <MadgwickAHRSupdate+0x1018>
 80020ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020ee:	4b0b      	ldr	r3, [pc, #44]	; (800211c <MadgwickAHRSupdate+0x1004>)
 80020f0:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80020f4:	37b8      	adds	r7, #184	; 0xb8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	2400000c 	.word	0x2400000c
 8002100:	3b03126f 	.word	0x3b03126f
 8002104:	24000010 	.word	0x24000010
 8002108:	24000214 	.word	0x24000214
 800210c:	24000218 	.word	0x24000218
 8002110:	2400021c 	.word	0x2400021c
 8002114:	240002d4 	.word	0x240002d4
 8002118:	240002d8 	.word	0x240002d8
 800211c:	240002d0 	.word	0x240002d0
 8002120:	42652ee1 	.word	0x42652ee1
 8002124:	24000220 	.word	0x24000220
 8002128:	24000224 	.word	0x24000224
 800212c:	24000228 	.word	0x24000228
 8002130:	43b40000 	.word	0x43b40000

08002134 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8002134:	b580      	push	{r7, lr}
 8002136:	b09c      	sub	sp, #112	; 0x70
 8002138:	af00      	add	r7, sp, #0
 800213a:	ed87 0a05 	vstr	s0, [r7, #20]
 800213e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002142:	ed87 1a03 	vstr	s2, [r7, #12]
 8002146:	edc7 1a02 	vstr	s3, [r7, #8]
 800214a:	ed87 2a01 	vstr	s4, [r7, #4]
 800214e:	edc7 2a00 	vstr	s5, [r7]
	float recipNorm;
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;
	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8002152:	4bee      	ldr	r3, [pc, #952]	; (800250c <MadgwickAHRSupdateIMU+0x3d8>)
 8002154:	edd3 7a00 	vldr	s15, [r3]
 8002158:	eeb1 7a67 	vneg.f32	s14, s15
 800215c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002160:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002164:	4bea      	ldr	r3, [pc, #936]	; (8002510 <MadgwickAHRSupdateIMU+0x3dc>)
 8002166:	edd3 6a00 	vldr	s13, [r3]
 800216a:	edd7 7a04 	vldr	s15, [r7, #16]
 800216e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002172:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002176:	4be7      	ldr	r3, [pc, #924]	; (8002514 <MadgwickAHRSupdateIMU+0x3e0>)
 8002178:	edd3 6a00 	vldr	s13, [r3]
 800217c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002180:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002184:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002188:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800218c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002190:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8002194:	4be0      	ldr	r3, [pc, #896]	; (8002518 <MadgwickAHRSupdateIMU+0x3e4>)
 8002196:	ed93 7a00 	vldr	s14, [r3]
 800219a:	edd7 7a05 	vldr	s15, [r7, #20]
 800219e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021a2:	4bdb      	ldr	r3, [pc, #876]	; (8002510 <MadgwickAHRSupdateIMU+0x3dc>)
 80021a4:	edd3 6a00 	vldr	s13, [r3]
 80021a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80021ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021b4:	4bd7      	ldr	r3, [pc, #860]	; (8002514 <MadgwickAHRSupdateIMU+0x3e0>)
 80021b6:	edd3 6a00 	vldr	s13, [r3]
 80021ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80021be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80021ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021ce:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80021d2:	4bd1      	ldr	r3, [pc, #836]	; (8002518 <MadgwickAHRSupdateIMU+0x3e4>)
 80021d4:	ed93 7a00 	vldr	s14, [r3]
 80021d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80021dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021e0:	4bca      	ldr	r3, [pc, #808]	; (800250c <MadgwickAHRSupdateIMU+0x3d8>)
 80021e2:	edd3 6a00 	vldr	s13, [r3]
 80021e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80021ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021f2:	4bc8      	ldr	r3, [pc, #800]	; (8002514 <MadgwickAHRSupdateIMU+0x3e0>)
 80021f4:	edd3 6a00 	vldr	s13, [r3]
 80021f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80021fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002204:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002208:	ee67 7a87 	vmul.f32	s15, s15, s14
 800220c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8002210:	4bc1      	ldr	r3, [pc, #772]	; (8002518 <MadgwickAHRSupdateIMU+0x3e4>)
 8002212:	ed93 7a00 	vldr	s14, [r3]
 8002216:	edd7 7a03 	vldr	s15, [r7, #12]
 800221a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800221e:	4bbb      	ldr	r3, [pc, #748]	; (800250c <MadgwickAHRSupdateIMU+0x3d8>)
 8002220:	edd3 6a00 	vldr	s13, [r3]
 8002224:	edd7 7a04 	vldr	s15, [r7, #16]
 8002228:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800222c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002230:	4bb7      	ldr	r3, [pc, #732]	; (8002510 <MadgwickAHRSupdateIMU+0x3dc>)
 8002232:	edd3 6a00 	vldr	s13, [r3]
 8002236:	edd7 7a05 	vldr	s15, [r7, #20]
 800223a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800223e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002242:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002246:	ee67 7a87 	vmul.f32	s15, s15, s14
 800224a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 800224e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002252:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800225a:	d10e      	bne.n	800227a <MadgwickAHRSupdateIMU+0x146>
 800225c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002260:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002268:	d107      	bne.n	800227a <MadgwickAHRSupdateIMU+0x146>
 800226a:	edd7 7a00 	vldr	s15, [r7]
 800226e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002276:	f000 81e5 	beq.w	8002644 <MadgwickAHRSupdateIMU+0x510>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800227a:	edd7 7a02 	vldr	s15, [r7, #8]
 800227e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002282:	edd7 7a01 	vldr	s15, [r7, #4]
 8002286:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800228a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800228e:	edd7 7a00 	vldr	s15, [r7]
 8002292:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229a:	eeb0 0a67 	vmov.f32	s0, s15
 800229e:	f000 fb77 	bl	8002990 <invSqrt>
 80022a2:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 80022a6:	ed97 7a02 	vldr	s14, [r7, #8]
 80022aa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80022ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b2:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 80022b6:	ed97 7a01 	vldr	s14, [r7, #4]
 80022ba:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80022be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c2:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;   
 80022c6:	ed97 7a00 	vldr	s14, [r7]
 80022ca:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80022ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d2:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 80022d6:	4b90      	ldr	r3, [pc, #576]	; (8002518 <MadgwickAHRSupdateIMU+0x3e4>)
 80022d8:	edd3 7a00 	vldr	s15, [r3]
 80022dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80022e0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * q1;
 80022e4:	4b89      	ldr	r3, [pc, #548]	; (800250c <MadgwickAHRSupdateIMU+0x3d8>)
 80022e6:	edd3 7a00 	vldr	s15, [r3]
 80022ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80022ee:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * q2;
 80022f2:	4b87      	ldr	r3, [pc, #540]	; (8002510 <MadgwickAHRSupdateIMU+0x3dc>)
 80022f4:	edd3 7a00 	vldr	s15, [r3]
 80022f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80022fc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * q3;
 8002300:	4b84      	ldr	r3, [pc, #528]	; (8002514 <MadgwickAHRSupdateIMU+0x3e0>)
 8002302:	edd3 7a00 	vldr	s15, [r3]
 8002306:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800230a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * q0;
 800230e:	4b82      	ldr	r3, [pc, #520]	; (8002518 <MadgwickAHRSupdateIMU+0x3e4>)
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002318:	ee67 7a87 	vmul.f32	s15, s15, s14
 800231c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * q1;
 8002320:	4b7a      	ldr	r3, [pc, #488]	; (800250c <MadgwickAHRSupdateIMU+0x3d8>)
 8002322:	edd3 7a00 	vldr	s15, [r3]
 8002326:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800232a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800232e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * q2;
 8002332:	4b77      	ldr	r3, [pc, #476]	; (8002510 <MadgwickAHRSupdateIMU+0x3dc>)
 8002334:	edd3 7a00 	vldr	s15, [r3]
 8002338:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800233c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002340:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * q1;
 8002344:	4b71      	ldr	r3, [pc, #452]	; (800250c <MadgwickAHRSupdateIMU+0x3d8>)
 8002346:	edd3 7a00 	vldr	s15, [r3]
 800234a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800234e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002352:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * q2;
 8002356:	4b6e      	ldr	r3, [pc, #440]	; (8002510 <MadgwickAHRSupdateIMU+0x3dc>)
 8002358:	edd3 7a00 	vldr	s15, [r3]
 800235c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002360:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002364:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = q0 * q0;
 8002368:	4b6b      	ldr	r3, [pc, #428]	; (8002518 <MadgwickAHRSupdateIMU+0x3e4>)
 800236a:	ed93 7a00 	vldr	s14, [r3]
 800236e:	4b6a      	ldr	r3, [pc, #424]	; (8002518 <MadgwickAHRSupdateIMU+0x3e4>)
 8002370:	edd3 7a00 	vldr	s15, [r3]
 8002374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002378:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = q1 * q1;
 800237c:	4b63      	ldr	r3, [pc, #396]	; (800250c <MadgwickAHRSupdateIMU+0x3d8>)
 800237e:	ed93 7a00 	vldr	s14, [r3]
 8002382:	4b62      	ldr	r3, [pc, #392]	; (800250c <MadgwickAHRSupdateIMU+0x3d8>)
 8002384:	edd3 7a00 	vldr	s15, [r3]
 8002388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800238c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = q2 * q2;
 8002390:	4b5f      	ldr	r3, [pc, #380]	; (8002510 <MadgwickAHRSupdateIMU+0x3dc>)
 8002392:	ed93 7a00 	vldr	s14, [r3]
 8002396:	4b5e      	ldr	r3, [pc, #376]	; (8002510 <MadgwickAHRSupdateIMU+0x3dc>)
 8002398:	edd3 7a00 	vldr	s15, [r3]
 800239c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = q3 * q3;
 80023a4:	4b5b      	ldr	r3, [pc, #364]	; (8002514 <MadgwickAHRSupdateIMU+0x3e0>)
 80023a6:	ed93 7a00 	vldr	s14, [r3]
 80023aa:	4b5a      	ldr	r3, [pc, #360]	; (8002514 <MadgwickAHRSupdateIMU+0x3e0>)
 80023ac:	edd3 7a00 	vldr	s15, [r3]
 80023b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80023b8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80023bc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80023c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023c4:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80023c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80023cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023d4:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80023d8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80023dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023e4:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80023e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80023ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023f4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80023f8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80023fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002400:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002404:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8002408:	edd7 7a02 	vldr	s15, [r7, #8]
 800240c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002410:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002414:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002418:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800241c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002420:	4b3a      	ldr	r3, [pc, #232]	; (800250c <MadgwickAHRSupdateIMU+0x3d8>)
 8002422:	edd3 7a00 	vldr	s15, [r3]
 8002426:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800242a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800242e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002432:	edd7 7a01 	vldr	s15, [r7, #4]
 8002436:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800243a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800243e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002442:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002446:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800244a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800244e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002452:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002456:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800245a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800245e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002462:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002466:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800246a:	edd7 7a00 	vldr	s15, [r7]
 800246e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002472:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002476:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800247a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800247e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002482:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002486:	4b22      	ldr	r3, [pc, #136]	; (8002510 <MadgwickAHRSupdateIMU+0x3dc>)
 8002488:	edd3 7a00 	vldr	s15, [r3]
 800248c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002490:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002494:	edd7 7a02 	vldr	s15, [r7, #8]
 8002498:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800249c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024a0:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80024a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80024a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024b0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80024b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80024b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024c0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80024c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024c8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80024cc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80024d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024d8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80024dc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80024e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024e8:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80024ec:	edd7 7a00 	vldr	s15, [r7]
 80024f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f8:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 80024fc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002500:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002504:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002508:	e008      	b.n	800251c <MadgwickAHRSupdateIMU+0x3e8>
 800250a:	bf00      	nop
 800250c:	24000214 	.word	0x24000214
 8002510:	24000218 	.word	0x24000218
 8002514:	2400021c 	.word	0x2400021c
 8002518:	24000010 	.word	0x24000010
 800251c:	4be0      	ldr	r3, [pc, #896]	; (80028a0 <MadgwickAHRSupdateIMU+0x76c>)
 800251e:	edd3 7a00 	vldr	s15, [r3]
 8002522:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002526:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800252a:	edd7 7a02 	vldr	s15, [r7, #8]
 800252e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002532:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002536:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800253a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800253e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002542:	4bd7      	ldr	r3, [pc, #860]	; (80028a0 <MadgwickAHRSupdateIMU+0x76c>)
 8002544:	edd3 7a00 	vldr	s15, [r3]
 8002548:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800254c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002550:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002554:	edd7 7a01 	vldr	s15, [r7, #4]
 8002558:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800255c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002560:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002564:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002568:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800256c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002570:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002574:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002578:	edd7 7a07 	vldr	s15, [r7, #28]
 800257c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002580:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002584:	edd7 7a06 	vldr	s15, [r7, #24]
 8002588:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800258c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002590:	eeb0 0a67 	vmov.f32	s0, s15
 8002594:	f000 f9fc 	bl	8002990 <invSqrt>
 8002598:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 800259c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80025a0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80025a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 80025ac:	ed97 7a08 	vldr	s14, [r7, #32]
 80025b0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80025b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b8:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 80025bc:	ed97 7a07 	vldr	s14, [r7, #28]
 80025c0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80025c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c8:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 80025cc:	ed97 7a06 	vldr	s14, [r7, #24]
 80025d0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80025d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d8:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 80025dc:	4bb1      	ldr	r3, [pc, #708]	; (80028a4 <MadgwickAHRSupdateIMU+0x770>)
 80025de:	ed93 7a00 	vldr	s14, [r3]
 80025e2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80025e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ea:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80025ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025f2:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 80025f6:	4bab      	ldr	r3, [pc, #684]	; (80028a4 <MadgwickAHRSupdateIMU+0x770>)
 80025f8:	ed93 7a00 	vldr	s14, [r3]
 80025fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8002600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002604:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002608:	ee77 7a67 	vsub.f32	s15, s14, s15
 800260c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 8002610:	4ba4      	ldr	r3, [pc, #656]	; (80028a4 <MadgwickAHRSupdateIMU+0x770>)
 8002612:	ed93 7a00 	vldr	s14, [r3]
 8002616:	edd7 7a07 	vldr	s15, [r7, #28]
 800261a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800261e:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002622:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002626:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 800262a:	4b9e      	ldr	r3, [pc, #632]	; (80028a4 <MadgwickAHRSupdateIMU+0x770>)
 800262c:	ed93 7a00 	vldr	s14, [r3]
 8002630:	edd7 7a06 	vldr	s15, [r7, #24]
 8002634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002638:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800263c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002640:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8002644:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002648:	ed9f 7a97 	vldr	s14, [pc, #604]	; 80028a8 <MadgwickAHRSupdateIMU+0x774>
 800264c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002650:	4b96      	ldr	r3, [pc, #600]	; (80028ac <MadgwickAHRSupdateIMU+0x778>)
 8002652:	edd3 7a00 	vldr	s15, [r3]
 8002656:	ee77 7a27 	vadd.f32	s15, s14, s15
 800265a:	4b94      	ldr	r3, [pc, #592]	; (80028ac <MadgwickAHRSupdateIMU+0x778>)
 800265c:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8002660:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002664:	ed9f 7a90 	vldr	s14, [pc, #576]	; 80028a8 <MadgwickAHRSupdateIMU+0x774>
 8002668:	ee27 7a87 	vmul.f32	s14, s15, s14
 800266c:	4b90      	ldr	r3, [pc, #576]	; (80028b0 <MadgwickAHRSupdateIMU+0x77c>)
 800266e:	edd3 7a00 	vldr	s15, [r3]
 8002672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002676:	4b8e      	ldr	r3, [pc, #568]	; (80028b0 <MadgwickAHRSupdateIMU+0x77c>)
 8002678:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 800267c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002680:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80028a8 <MadgwickAHRSupdateIMU+0x774>
 8002684:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002688:	4b8a      	ldr	r3, [pc, #552]	; (80028b4 <MadgwickAHRSupdateIMU+0x780>)
 800268a:	edd3 7a00 	vldr	s15, [r3]
 800268e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002692:	4b88      	ldr	r3, [pc, #544]	; (80028b4 <MadgwickAHRSupdateIMU+0x780>)
 8002694:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002698:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800269c:	ed9f 7a82 	vldr	s14, [pc, #520]	; 80028a8 <MadgwickAHRSupdateIMU+0x774>
 80026a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026a4:	4b7e      	ldr	r3, [pc, #504]	; (80028a0 <MadgwickAHRSupdateIMU+0x76c>)
 80026a6:	edd3 7a00 	vldr	s15, [r3]
 80026aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ae:	4b7c      	ldr	r3, [pc, #496]	; (80028a0 <MadgwickAHRSupdateIMU+0x76c>)
 80026b0:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80026b4:	4b7d      	ldr	r3, [pc, #500]	; (80028ac <MadgwickAHRSupdateIMU+0x778>)
 80026b6:	ed93 7a00 	vldr	s14, [r3]
 80026ba:	4b7c      	ldr	r3, [pc, #496]	; (80028ac <MadgwickAHRSupdateIMU+0x778>)
 80026bc:	edd3 7a00 	vldr	s15, [r3]
 80026c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026c4:	4b7a      	ldr	r3, [pc, #488]	; (80028b0 <MadgwickAHRSupdateIMU+0x77c>)
 80026c6:	edd3 6a00 	vldr	s13, [r3]
 80026ca:	4b79      	ldr	r3, [pc, #484]	; (80028b0 <MadgwickAHRSupdateIMU+0x77c>)
 80026cc:	edd3 7a00 	vldr	s15, [r3]
 80026d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026d8:	4b76      	ldr	r3, [pc, #472]	; (80028b4 <MadgwickAHRSupdateIMU+0x780>)
 80026da:	edd3 6a00 	vldr	s13, [r3]
 80026de:	4b75      	ldr	r3, [pc, #468]	; (80028b4 <MadgwickAHRSupdateIMU+0x780>)
 80026e0:	edd3 7a00 	vldr	s15, [r3]
 80026e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026ec:	4b6c      	ldr	r3, [pc, #432]	; (80028a0 <MadgwickAHRSupdateIMU+0x76c>)
 80026ee:	edd3 6a00 	vldr	s13, [r3]
 80026f2:	4b6b      	ldr	r3, [pc, #428]	; (80028a0 <MadgwickAHRSupdateIMU+0x76c>)
 80026f4:	edd3 7a00 	vldr	s15, [r3]
 80026f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002700:	eeb0 0a67 	vmov.f32	s0, s15
 8002704:	f000 f944 	bl	8002990 <invSqrt>
 8002708:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	q0 *= recipNorm;
 800270c:	4b67      	ldr	r3, [pc, #412]	; (80028ac <MadgwickAHRSupdateIMU+0x778>)
 800270e:	ed93 7a00 	vldr	s14, [r3]
 8002712:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800271a:	4b64      	ldr	r3, [pc, #400]	; (80028ac <MadgwickAHRSupdateIMU+0x778>)
 800271c:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002720:	4b63      	ldr	r3, [pc, #396]	; (80028b0 <MadgwickAHRSupdateIMU+0x77c>)
 8002722:	ed93 7a00 	vldr	s14, [r3]
 8002726:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800272a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800272e:	4b60      	ldr	r3, [pc, #384]	; (80028b0 <MadgwickAHRSupdateIMU+0x77c>)
 8002730:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002734:	4b5f      	ldr	r3, [pc, #380]	; (80028b4 <MadgwickAHRSupdateIMU+0x780>)
 8002736:	ed93 7a00 	vldr	s14, [r3]
 800273a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800273e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002742:	4b5c      	ldr	r3, [pc, #368]	; (80028b4 <MadgwickAHRSupdateIMU+0x780>)
 8002744:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002748:	4b55      	ldr	r3, [pc, #340]	; (80028a0 <MadgwickAHRSupdateIMU+0x76c>)
 800274a:	ed93 7a00 	vldr	s14, [r3]
 800274e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002756:	4b52      	ldr	r3, [pc, #328]	; (80028a0 <MadgwickAHRSupdateIMU+0x76c>)
 8002758:	edc3 7a00 	vstr	s15, [r3]

	//Roll, Pitch, Yaw System Conversion
	System_Roll  = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 800275c:	4b53      	ldr	r3, [pc, #332]	; (80028ac <MadgwickAHRSupdateIMU+0x778>)
 800275e:	ed93 7a00 	vldr	s14, [r3]
 8002762:	4b53      	ldr	r3, [pc, #332]	; (80028b0 <MadgwickAHRSupdateIMU+0x77c>)
 8002764:	edd3 7a00 	vldr	s15, [r3]
 8002768:	ee27 7a27 	vmul.f32	s14, s14, s15
 800276c:	4b51      	ldr	r3, [pc, #324]	; (80028b4 <MadgwickAHRSupdateIMU+0x780>)
 800276e:	edd3 6a00 	vldr	s13, [r3]
 8002772:	4b4b      	ldr	r3, [pc, #300]	; (80028a0 <MadgwickAHRSupdateIMU+0x76c>)
 8002774:	edd3 7a00 	vldr	s15, [r3]
 8002778:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800277c:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002780:	4b4b      	ldr	r3, [pc, #300]	; (80028b0 <MadgwickAHRSupdateIMU+0x77c>)
 8002782:	ed93 7a00 	vldr	s14, [r3]
 8002786:	4b4a      	ldr	r3, [pc, #296]	; (80028b0 <MadgwickAHRSupdateIMU+0x77c>)
 8002788:	edd3 7a00 	vldr	s15, [r3]
 800278c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002790:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002794:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002798:	4b46      	ldr	r3, [pc, #280]	; (80028b4 <MadgwickAHRSupdateIMU+0x780>)
 800279a:	edd3 6a00 	vldr	s13, [r3]
 800279e:	4b45      	ldr	r3, [pc, #276]	; (80028b4 <MadgwickAHRSupdateIMU+0x780>)
 80027a0:	edd3 7a00 	vldr	s15, [r3]
 80027a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ac:	eef0 0a67 	vmov.f32	s1, s15
 80027b0:	eeb0 0a46 	vmov.f32	s0, s12
 80027b4:	f00f ff2c 	bl	8012610 <atan2f>
 80027b8:	eef0 7a40 	vmov.f32	s15, s0
 80027bc:	4b3e      	ldr	r3, [pc, #248]	; (80028b8 <MadgwickAHRSupdateIMU+0x784>)
 80027be:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 80027c2:	4b3b      	ldr	r3, [pc, #236]	; (80028b0 <MadgwickAHRSupdateIMU+0x77c>)
 80027c4:	ed93 7a00 	vldr	s14, [r3]
 80027c8:	4b35      	ldr	r3, [pc, #212]	; (80028a0 <MadgwickAHRSupdateIMU+0x76c>)
 80027ca:	edd3 7a00 	vldr	s15, [r3]
 80027ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027d2:	4b36      	ldr	r3, [pc, #216]	; (80028ac <MadgwickAHRSupdateIMU+0x778>)
 80027d4:	edd3 6a00 	vldr	s13, [r3]
 80027d8:	4b36      	ldr	r3, [pc, #216]	; (80028b4 <MadgwickAHRSupdateIMU+0x780>)
 80027da:	edd3 7a00 	vldr	s15, [r3]
 80027de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027e6:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80027ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027ee:	eeb0 0a67 	vmov.f32	s0, s15
 80027f2:	f00f fedb 	bl	80125ac <asinf>
 80027f6:	eef0 7a40 	vmov.f32	s15, s0
 80027fa:	4b30      	ldr	r3, [pc, #192]	; (80028bc <MadgwickAHRSupdateIMU+0x788>)
 80027fc:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw = atan2(2.0f * (q1*q2 + q0*q3),q0*q0 + q1*q1 - q2*q2 - q3*q3);
 8002800:	4b2b      	ldr	r3, [pc, #172]	; (80028b0 <MadgwickAHRSupdateIMU+0x77c>)
 8002802:	ed93 7a00 	vldr	s14, [r3]
 8002806:	4b2b      	ldr	r3, [pc, #172]	; (80028b4 <MadgwickAHRSupdateIMU+0x780>)
 8002808:	edd3 7a00 	vldr	s15, [r3]
 800280c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002810:	4b26      	ldr	r3, [pc, #152]	; (80028ac <MadgwickAHRSupdateIMU+0x778>)
 8002812:	edd3 6a00 	vldr	s13, [r3]
 8002816:	4b22      	ldr	r3, [pc, #136]	; (80028a0 <MadgwickAHRSupdateIMU+0x76c>)
 8002818:	edd3 7a00 	vldr	s15, [r3]
 800281c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002824:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002828:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800282c:	4b1f      	ldr	r3, [pc, #124]	; (80028ac <MadgwickAHRSupdateIMU+0x778>)
 800282e:	ed93 6a00 	vldr	s12, [r3]
 8002832:	4b1e      	ldr	r3, [pc, #120]	; (80028ac <MadgwickAHRSupdateIMU+0x778>)
 8002834:	edd3 6a00 	vldr	s13, [r3]
 8002838:	ee26 6a26 	vmul.f32	s12, s12, s13
 800283c:	4b1c      	ldr	r3, [pc, #112]	; (80028b0 <MadgwickAHRSupdateIMU+0x77c>)
 800283e:	edd3 5a00 	vldr	s11, [r3]
 8002842:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <MadgwickAHRSupdateIMU+0x77c>)
 8002844:	edd3 6a00 	vldr	s13, [r3]
 8002848:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800284c:	ee36 6a26 	vadd.f32	s12, s12, s13
 8002850:	4b18      	ldr	r3, [pc, #96]	; (80028b4 <MadgwickAHRSupdateIMU+0x780>)
 8002852:	edd3 5a00 	vldr	s11, [r3]
 8002856:	4b17      	ldr	r3, [pc, #92]	; (80028b4 <MadgwickAHRSupdateIMU+0x780>)
 8002858:	edd3 6a00 	vldr	s13, [r3]
 800285c:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002860:	ee36 6a66 	vsub.f32	s12, s12, s13
 8002864:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <MadgwickAHRSupdateIMU+0x76c>)
 8002866:	edd3 5a00 	vldr	s11, [r3]
 800286a:	4b0d      	ldr	r3, [pc, #52]	; (80028a0 <MadgwickAHRSupdateIMU+0x76c>)
 800286c:	edd3 6a00 	vldr	s13, [r3]
 8002870:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002874:	ee76 6a66 	vsub.f32	s13, s12, s13
 8002878:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800287c:	eeb0 1b46 	vmov.f64	d1, d6
 8002880:	eeb0 0b47 	vmov.f64	d0, d7
 8002884:	f00f fe64 	bl	8012550 <atan2>
 8002888:	eeb0 7b40 	vmov.f64	d7, d0
 800288c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <MadgwickAHRSupdateIMU+0x78c>)
 8002892:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  *= 57.295779515f;
 8002896:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <MadgwickAHRSupdateIMU+0x784>)
 8002898:	edd3 7a00 	vldr	s15, [r3]
 800289c:	e014      	b.n	80028c8 <MadgwickAHRSupdateIMU+0x794>
 800289e:	bf00      	nop
 80028a0:	2400021c 	.word	0x2400021c
 80028a4:	2400000c 	.word	0x2400000c
 80028a8:	3b03126f 	.word	0x3b03126f
 80028ac:	24000010 	.word	0x24000010
 80028b0:	24000214 	.word	0x24000214
 80028b4:	24000218 	.word	0x24000218
 80028b8:	240002d4 	.word	0x240002d4
 80028bc:	240002d8 	.word	0x240002d8
 80028c0:	240002d0 	.word	0x240002d0
 80028c4:	42652ee1 	.word	0x42652ee1
 80028c8:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 80028c4 <MadgwickAHRSupdateIMU+0x790>
 80028cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028d0:	4b27      	ldr	r3, [pc, #156]	; (8002970 <MadgwickAHRSupdateIMU+0x83c>)
 80028d2:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch *= 57.295779515f;
 80028d6:	4b27      	ldr	r3, [pc, #156]	; (8002974 <MadgwickAHRSupdateIMU+0x840>)
 80028d8:	edd3 7a00 	vldr	s15, [r3]
 80028dc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002978 <MadgwickAHRSupdateIMU+0x844>
 80028e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028e4:	4b23      	ldr	r3, [pc, #140]	; (8002974 <MadgwickAHRSupdateIMU+0x840>)
 80028e6:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   *= 57.295779515f;
 80028ea:	4b24      	ldr	r3, [pc, #144]	; (800297c <MadgwickAHRSupdateIMU+0x848>)
 80028ec:	edd3 7a00 	vldr	s15, [r3]
 80028f0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002978 <MadgwickAHRSupdateIMU+0x844>
 80028f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028f8:	4b20      	ldr	r3, [pc, #128]	; (800297c <MadgwickAHRSupdateIMU+0x848>)
 80028fa:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  -= System_Roll_Offset;
 80028fe:	4b1c      	ldr	r3, [pc, #112]	; (8002970 <MadgwickAHRSupdateIMU+0x83c>)
 8002900:	ed93 7a00 	vldr	s14, [r3]
 8002904:	4b1e      	ldr	r3, [pc, #120]	; (8002980 <MadgwickAHRSupdateIMU+0x84c>)
 8002906:	edd3 7a00 	vldr	s15, [r3]
 800290a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800290e:	4b18      	ldr	r3, [pc, #96]	; (8002970 <MadgwickAHRSupdateIMU+0x83c>)
 8002910:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch -= System_Pitch_Offset;
 8002914:	4b17      	ldr	r3, [pc, #92]	; (8002974 <MadgwickAHRSupdateIMU+0x840>)
 8002916:	ed93 7a00 	vldr	s14, [r3]
 800291a:	4b1a      	ldr	r3, [pc, #104]	; (8002984 <MadgwickAHRSupdateIMU+0x850>)
 800291c:	edd3 7a00 	vldr	s15, [r3]
 8002920:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002924:	4b13      	ldr	r3, [pc, #76]	; (8002974 <MadgwickAHRSupdateIMU+0x840>)
 8002926:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   -= System_Yaw_Offset;
 800292a:	4b14      	ldr	r3, [pc, #80]	; (800297c <MadgwickAHRSupdateIMU+0x848>)
 800292c:	ed93 7a00 	vldr	s14, [r3]
 8002930:	4b15      	ldr	r3, [pc, #84]	; (8002988 <MadgwickAHRSupdateIMU+0x854>)
 8002932:	edd3 7a00 	vldr	s15, [r3]
 8002936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800293a:	4b10      	ldr	r3, [pc, #64]	; (800297c <MadgwickAHRSupdateIMU+0x848>)
 800293c:	edc3 7a00 	vstr	s15, [r3]
	if(System_Yaw < 0)
 8002940:	4b0e      	ldr	r3, [pc, #56]	; (800297c <MadgwickAHRSupdateIMU+0x848>)
 8002942:	edd3 7a00 	vldr	s15, [r3]
 8002946:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800294a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294e:	d400      	bmi.n	8002952 <MadgwickAHRSupdateIMU+0x81e>
	{
		System_Yaw = 360.0f + System_Yaw;
	}
}
 8002950:	e009      	b.n	8002966 <MadgwickAHRSupdateIMU+0x832>
		System_Yaw = 360.0f + System_Yaw;
 8002952:	4b0a      	ldr	r3, [pc, #40]	; (800297c <MadgwickAHRSupdateIMU+0x848>)
 8002954:	edd3 7a00 	vldr	s15, [r3]
 8002958:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800298c <MadgwickAHRSupdateIMU+0x858>
 800295c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002960:	4b06      	ldr	r3, [pc, #24]	; (800297c <MadgwickAHRSupdateIMU+0x848>)
 8002962:	edc3 7a00 	vstr	s15, [r3]
}
 8002966:	bf00      	nop
 8002968:	3770      	adds	r7, #112	; 0x70
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	240002d4 	.word	0x240002d4
 8002974:	240002d8 	.word	0x240002d8
 8002978:	42652ee1 	.word	0x42652ee1
 800297c:	240002d0 	.word	0x240002d0
 8002980:	24000220 	.word	0x24000220
 8002984:	24000224 	.word	0x24000224
 8002988:	24000228 	.word	0x24000228
 800298c:	43b40000 	.word	0x43b40000

08002990 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 800299a:	edd7 7a01 	vldr	s15, [r7, #4]
 800299e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80029a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029a6:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80029ae:	f107 0310 	add.w	r3, r7, #16
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	105a      	asrs	r2, r3, #1
 80029ba:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <invSqrt+0x74>)
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80029c0:	f107 030c 	add.w	r3, r7, #12
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80029c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80029cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80029d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80029d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029dc:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80029e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80029e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ec:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	ee07 3a90 	vmov	s15, r3
}
 80029f6:	eeb0 0a67 	vmov.f32	s0, s15
 80029fa:	371c      	adds	r7, #28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	5f3759df 	.word	0x5f3759df

08002a08 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* p, int len)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_DMA(&huart1, p, len);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	461a      	mov	r2, r3
 8002a1a:	68b9      	ldr	r1, [r7, #8]
 8002a1c:	4803      	ldr	r0, [pc, #12]	; (8002a2c <_write+0x24>)
 8002a1e:	f00b f8b5 	bl	800db8c <HAL_UART_Transmit_DMA>
}
 8002a22:	bf00      	nop
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	240003a0 	.word	0x240003a0

08002a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a36:	f001 fc73 	bl	8004320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a3a:	f000 fa23 	bl	8002e84 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002a3e:	f000 fa9f 	bl	8002f80 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a42:	f000 fbf9 	bl	8003238 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a46:	f000 fbcf 	bl	80031e8 <MX_DMA_Init>
  MX_TIM7_Init();
 8002a4a:	f000 fb4b 	bl	80030e4 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8002a4e:	f000 fb7f 	bl	8003150 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002a52:	f000 fab1 	bl	8002fb8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002a56:	f000 faef 	bl	8003038 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim7);
 8002a5a:	4896      	ldr	r0, [pc, #600]	; (8002cb4 <main+0x284>)
 8002a5c:	f00a fd08 	bl	800d470 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 8002a60:	2201      	movs	r2, #1
 8002a62:	4995      	ldr	r1, [pc, #596]	; (8002cb8 <main+0x288>)
 8002a64:	4895      	ldr	r0, [pc, #596]	; (8002cbc <main+0x28c>)
 8002a66:	f00b f84b 	bl	800db00 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	//Initialize MPU9250
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8002a6a:	e009      	b.n	8002a80 <main+0x50>
	{
		if(tim1_20ms_flag == 1)
 8002a6c:	4b94      	ldr	r3, [pc, #592]	; (8002cc0 <main+0x290>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d105      	bne.n	8002a80 <main+0x50>
		{
			tim1_20ms_flag = 0;
 8002a74:	4b92      	ldr	r3, [pc, #584]	; (8002cc0 <main+0x290>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	701a      	strb	r2, [r3, #0]
			printf("MPU9250 Initialing \n");
 8002a7a:	4892      	ldr	r0, [pc, #584]	; (8002cc4 <main+0x294>)
 8002a7c:	f00d fd64 	bl	8010548 <puts>
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8002a80:	2303      	movs	r3, #3
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	2303      	movs	r3, #3
 8002a86:	2203      	movs	r2, #3
 8002a88:	2103      	movs	r1, #3
 8002a8a:	488f      	ldr	r0, [pc, #572]	; (8002cc8 <main+0x298>)
 8002a8c:	f7fd fdfc 	bl	8000688 <MPU9250_Init>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0ea      	beq.n	8002a6c <main+0x3c>
		}
	}
	MPU9250_Bypass(&hi2c1);
 8002a96:	488c      	ldr	r0, [pc, #560]	; (8002cc8 <main+0x298>)
 8002a98:	f7fd fede 	bl	8000858 <MPU9250_Bypass>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 8002a9c:	e009      	b.n	8002ab2 <main+0x82>
	{
		if(tim1_20ms_flag == 1)
 8002a9e:	4b88      	ldr	r3, [pc, #544]	; (8002cc0 <main+0x290>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d105      	bne.n	8002ab2 <main+0x82>
		{
			tim1_20ms_flag = 0;
 8002aa6:	4b86      	ldr	r3, [pc, #536]	; (8002cc0 <main+0x290>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	701a      	strb	r2, [r3, #0]
			printf("AK8963 Initialing \n");
 8002aac:	4887      	ldr	r0, [pc, #540]	; (8002ccc <main+0x29c>)
 8002aae:	f00d fd4b 	bl	8010548 <puts>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 8002ab2:	4987      	ldr	r1, [pc, #540]	; (8002cd0 <main+0x2a0>)
 8002ab4:	4884      	ldr	r0, [pc, #528]	; (8002cc8 <main+0x298>)
 8002ab6:	f7fd ff4f 	bl	8000958 <MPU9250_AK8963_Setup>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0ee      	beq.n	8002a9e <main+0x6e>
		}
	}
	MPU9250_Master(&hi2c1);
 8002ac0:	4881      	ldr	r0, [pc, #516]	; (8002cc8 <main+0x298>)
 8002ac2:	f7fd fef7 	bl	80008b4 <MPU9250_Master>
	MPU9250_Slave0_Enable(&hi2c1);
 8002ac6:	4880      	ldr	r0, [pc, #512]	; (8002cc8 <main+0x298>)
 8002ac8:	f7fd ff9c 	bl	8000a04 <MPU9250_Slave0_Enable>


	//Initialize MS5611

	//EEPROM
	W25qxx_Init();
 8002acc:	f001 f8f8 	bl	8003cc0 <W25qxx_Init>


	// Compass Calibration //
	int SwC = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	603b      	str	r3, [r7, #0]
	if(SwC == 1500)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002ada:	4293      	cmp	r3, r2
 8002adc:	f040 80a3 	bne.w	8002c26 <main+0x1f6>
	{
		for(int i =0;i<20;i++)
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	607b      	str	r3, [r7, #4]
 8002ae4:	e00b      	b.n	8002afe <main+0xce>
		{
			MPU9250_Read_All(&hi2c1);
 8002ae6:	4878      	ldr	r0, [pc, #480]	; (8002cc8 <main+0x298>)
 8002ae8:	f7fd ffcc 	bl	8000a84 <MPU9250_Read_All>
			HAL_Delay(20);
 8002aec:	2014      	movs	r0, #20
 8002aee:	f001 fca9 	bl	8004444 <HAL_Delay>
			MPU9250_Parsing_NoOffset(&MPU9250);
 8002af2:	4877      	ldr	r0, [pc, #476]	; (8002cd0 <main+0x2a0>)
 8002af4:	f7fe f994 	bl	8000e20 <MPU9250_Parsing_NoOffset>
		for(int i =0;i<20;i++)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3301      	adds	r3, #1
 8002afc:	607b      	str	r3, [r7, #4]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b13      	cmp	r3, #19
 8002b02:	ddf0      	ble.n	8002ae6 <main+0xb6>
		}
		MPU9250.Mx_Max = MPU9250.Mx_Raw;
 8002b04:	4b72      	ldr	r3, [pc, #456]	; (8002cd0 <main+0x2a0>)
 8002b06:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8002b0a:	ee07 3a90 	vmov	s15, r3
 8002b0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b12:	4b6f      	ldr	r3, [pc, #444]	; (8002cd0 <main+0x2a0>)
 8002b14:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		MPU9250.Mx_Min = MPU9250.Mx_Raw;
 8002b18:	4b6d      	ldr	r3, [pc, #436]	; (8002cd0 <main+0x2a0>)
 8002b1a:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8002b1e:	ee07 3a90 	vmov	s15, r3
 8002b22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b26:	4b6a      	ldr	r3, [pc, #424]	; (8002cd0 <main+0x2a0>)
 8002b28:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		MPU9250.My_Max = MPU9250.My_Raw;
 8002b2c:	4b68      	ldr	r3, [pc, #416]	; (8002cd0 <main+0x2a0>)
 8002b2e:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8002b32:	ee07 3a90 	vmov	s15, r3
 8002b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b3a:	4b65      	ldr	r3, [pc, #404]	; (8002cd0 <main+0x2a0>)
 8002b3c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		MPU9250.My_Min = MPU9250.My_Raw;
 8002b40:	4b63      	ldr	r3, [pc, #396]	; (8002cd0 <main+0x2a0>)
 8002b42:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8002b46:	ee07 3a90 	vmov	s15, r3
 8002b4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b4e:	4b60      	ldr	r3, [pc, #384]	; (8002cd0 <main+0x2a0>)
 8002b50:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		MPU9250.Mz_Max = MPU9250.Mz_Raw;
 8002b54:	4b5e      	ldr	r3, [pc, #376]	; (8002cd0 <main+0x2a0>)
 8002b56:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8002b5a:	ee07 3a90 	vmov	s15, r3
 8002b5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b62:	4b5b      	ldr	r3, [pc, #364]	; (8002cd0 <main+0x2a0>)
 8002b64:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		MPU9250.Mz_Min = MPU9250.Mz_Raw;
 8002b68:	4b59      	ldr	r3, [pc, #356]	; (8002cd0 <main+0x2a0>)
 8002b6a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8002b6e:	ee07 3a90 	vmov	s15, r3
 8002b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b76:	4b56      	ldr	r3, [pc, #344]	; (8002cd0 <main+0x2a0>)
 8002b78:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

		while(SwC != 1000)
 8002b7c:	e00d      	b.n	8002b9a <main+0x16a>
		{
			//			Is_iBus_Received();
			MPU9250_Read_All(&hi2c1);
 8002b7e:	4852      	ldr	r0, [pc, #328]	; (8002cc8 <main+0x298>)
 8002b80:	f7fd ff80 	bl	8000a84 <MPU9250_Read_All>
			HAL_Delay(10);
 8002b84:	200a      	movs	r0, #10
 8002b86:	f001 fc5d 	bl	8004444 <HAL_Delay>
			MPU9250_Parsing_NoOffset(&MPU9250);
 8002b8a:	4851      	ldr	r0, [pc, #324]	; (8002cd0 <main+0x2a0>)
 8002b8c:	f7fe f948 	bl	8000e20 <MPU9250_Parsing_NoOffset>
			if(MPU9250.My > MPU9250.My) MPU9250.My_Max = MPU9250.My_Raw;
			if(MPU9250.My < MPU9250.My) MPU9250.My_Min = MPU9250.My_Raw;

			if(MPU9250.Mz > MPU9250.Mz) MPU9250.Mz_Max = MPU9250.Mz_Raw;
			if(MPU9250.Mz < MPU9250.Mz) MPU9250.Mz_Min = MPU9250.Mz_Raw;
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8002b90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b94:	484f      	ldr	r0, [pc, #316]	; (8002cd4 <main+0x2a4>)
 8002b96:	f004 fdb2 	bl	80076fe <HAL_GPIO_TogglePin>
		while(SwC != 1000)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ba0:	d1ed      	bne.n	8002b7e <main+0x14e>
		}
		MPU9250.Mx_Offset = (MPU9250.Mx_Max + MPU9250.Mx_Min) / 2;
 8002ba2:	4b4b      	ldr	r3, [pc, #300]	; (8002cd0 <main+0x2a0>)
 8002ba4:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8002ba8:	4b49      	ldr	r3, [pc, #292]	; (8002cd0 <main+0x2a0>)
 8002baa:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002bae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bb2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002bb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bba:	4b45      	ldr	r3, [pc, #276]	; (8002cd0 <main+0x2a0>)
 8002bbc:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		MPU9250.My_Offset = (MPU9250.My_Max + MPU9250.My_Min) / 2;
 8002bc0:	4b43      	ldr	r3, [pc, #268]	; (8002cd0 <main+0x2a0>)
 8002bc2:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8002bc6:	4b42      	ldr	r3, [pc, #264]	; (8002cd0 <main+0x2a0>)
 8002bc8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002bcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bd0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002bd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bd8:	4b3d      	ldr	r3, [pc, #244]	; (8002cd0 <main+0x2a0>)
 8002bda:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		MPU9250.Mz_Offset = (MPU9250.Mz_Max + MPU9250.Mz_Min) / 2;
 8002bde:	4b3c      	ldr	r3, [pc, #240]	; (8002cd0 <main+0x2a0>)
 8002be0:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8002be4:	4b3a      	ldr	r3, [pc, #232]	; (8002cd0 <main+0x2a0>)
 8002be6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002bea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bee:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002bf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bf6:	4b36      	ldr	r3, [pc, #216]	; (8002cd0 <main+0x2a0>)
 8002bf8:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

		*(float*)&Mag_Calib[0] = MPU9250.Mx_Offset;
 8002bfc:	4a36      	ldr	r2, [pc, #216]	; (8002cd8 <main+0x2a8>)
 8002bfe:	4b34      	ldr	r3, [pc, #208]	; (8002cd0 <main+0x2a0>)
 8002c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c02:	6013      	str	r3, [r2, #0]
		*(float*)&Mag_Calib[4] = MPU9250.My_Offset;
 8002c04:	4a35      	ldr	r2, [pc, #212]	; (8002cdc <main+0x2ac>)
 8002c06:	4b32      	ldr	r3, [pc, #200]	; (8002cd0 <main+0x2a0>)
 8002c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0a:	6013      	str	r3, [r2, #0]
		*(float*)&Mag_Calib[8] = MPU9250.Mz_Offset;
 8002c0c:	4a34      	ldr	r2, [pc, #208]	; (8002ce0 <main+0x2b0>)
 8002c0e:	4b30      	ldr	r3, [pc, #192]	; (8002cd0 <main+0x2a0>)
 8002c10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c12:	6013      	str	r3, [r2, #0]

		W25qxx_EraseSector(0);
 8002c14:	2000      	movs	r0, #0
 8002c16:	f001 f925 	bl	8003e64 <W25qxx_EraseSector>
		W25qxx_WriteSector(Mag_Calib, 0, 0, 12);
 8002c1a:	230c      	movs	r3, #12
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	2100      	movs	r1, #0
 8002c20:	482d      	ldr	r0, [pc, #180]	; (8002cd8 <main+0x2a8>)
 8002c22:	f001 fa11 	bl	8004048 <W25qxx_WriteSector>
	}

	HAL_Delay(100);
 8002c26:	2064      	movs	r0, #100	; 0x64
 8002c28:	f001 fc0c 	bl	8004444 <HAL_Delay>
	W25qxx_ReadSector(Mag_Calib, 0, 0, 12);
 8002c2c:	230c      	movs	r3, #12
 8002c2e:	2200      	movs	r2, #0
 8002c30:	2100      	movs	r1, #0
 8002c32:	4829      	ldr	r0, [pc, #164]	; (8002cd8 <main+0x2a8>)
 8002c34:	f001 fae8 	bl	8004208 <W25qxx_ReadSector>
	MPU9250.Mx_Offset = *(float*)&Mag_Calib[0];
 8002c38:	4b27      	ldr	r3, [pc, #156]	; (8002cd8 <main+0x2a8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a24      	ldr	r2, [pc, #144]	; (8002cd0 <main+0x2a0>)
 8002c3e:	65d3      	str	r3, [r2, #92]	; 0x5c
	MPU9250.My_Offset = *(float*)&Mag_Calib[4];
 8002c40:	4b26      	ldr	r3, [pc, #152]	; (8002cdc <main+0x2ac>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a22      	ldr	r2, [pc, #136]	; (8002cd0 <main+0x2a0>)
 8002c46:	6613      	str	r3, [r2, #96]	; 0x60
	MPU9250.Mz_Offset = *(float*)&Mag_Calib[8];
 8002c48:	4b25      	ldr	r3, [pc, #148]	; (8002ce0 <main+0x2b0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a20      	ldr	r2, [pc, #128]	; (8002cd0 <main+0x2a0>)
 8002c4e:	6653      	str	r3, [r2, #100]	; 0x64
	// Compass Calibration //

	while (1)
	{
		if(uart1_rx_flag == 1)
 8002c50:	4b24      	ldr	r3, [pc, #144]	; (8002ce4 <main+0x2b4>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d149      	bne.n	8002cec <main+0x2bc>
		{
			uart1_rx_flag = 0;
 8002c58:	4b22      	ldr	r3, [pc, #136]	; (8002ce4 <main+0x2b4>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	701a      	strb	r2, [r3, #0]

			switch(uart1_rx_data)
 8002c5e:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <main+0x288>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	3b31      	subs	r3, #49	; 0x31
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d821      	bhi.n	8002cac <main+0x27c>
 8002c68:	a201      	add	r2, pc, #4	; (adr r2, 8002c70 <main+0x240>)
 8002c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6e:	bf00      	nop
 8002c70:	08002c85 	.word	0x08002c85
 8002c74:	08002c8d 	.word	0x08002c8d
 8002c78:	08002c95 	.word	0x08002c95
 8002c7c:	08002c9d 	.word	0x08002c9d
 8002c80:	08002ca5 	.word	0x08002ca5
			{
			case '1': print_mode = 1; break; //Roll, Pitch, Yaw
 8002c84:	4b18      	ldr	r3, [pc, #96]	; (8002ce8 <main+0x2b8>)
 8002c86:	2201      	movs	r2, #1
 8002c88:	701a      	strb	r2, [r3, #0]
 8002c8a:	e030      	b.n	8002cee <main+0x2be>
			case '2': print_mode = 2; break; //Alt Raw, Alt Filt
 8002c8c:	4b16      	ldr	r3, [pc, #88]	; (8002ce8 <main+0x2b8>)
 8002c8e:	2202      	movs	r2, #2
 8002c90:	701a      	strb	r2, [r3, #0]
 8002c92:	e02c      	b.n	8002cee <main+0x2be>
			case '3': print_mode = 3; break; //Gyro
 8002c94:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <main+0x2b8>)
 8002c96:	2203      	movs	r2, #3
 8002c98:	701a      	strb	r2, [r3, #0]
 8002c9a:	e028      	b.n	8002cee <main+0x2be>
			case '4': print_mode = 4; break; //Accel
 8002c9c:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <main+0x2b8>)
 8002c9e:	2204      	movs	r2, #4
 8002ca0:	701a      	strb	r2, [r3, #0]
 8002ca2:	e024      	b.n	8002cee <main+0x2be>
			case '5': print_mode = 5; break; //Mag
 8002ca4:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <main+0x2b8>)
 8002ca6:	2205      	movs	r2, #5
 8002ca8:	701a      	strb	r2, [r3, #0]
 8002caa:	e020      	b.n	8002cee <main+0x2be>
			default: print_mode = 0; break; // Stop Printing
 8002cac:	4b0e      	ldr	r3, [pc, #56]	; (8002ce8 <main+0x2b8>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	701a      	strb	r2, [r3, #0]
 8002cb2:	e01c      	b.n	8002cee <main+0x2be>
 8002cb4:	2400053c 	.word	0x2400053c
 8002cb8:	24000232 	.word	0x24000232
 8002cbc:	240003a0 	.word	0x240003a0
 8002cc0:	24000230 	.word	0x24000230
 8002cc4:	08012eb8 	.word	0x08012eb8
 8002cc8:	240002dc 	.word	0x240002dc
 8002ccc:	08012ecc 	.word	0x08012ecc
 8002cd0:	24000244 	.word	0x24000244
 8002cd4:	58020000 	.word	0x58020000
 8002cd8:	24000530 	.word	0x24000530
 8002cdc:	24000534 	.word	0x24000534
 8002ce0:	24000538 	.word	0x24000538
 8002ce4:	24000231 	.word	0x24000231
 8002ce8:	2400022c 	.word	0x2400022c
			}
		}
 8002cec:	bf00      	nop

		if(tim1_2ms_flag == 1)
 8002cee:	4b5c      	ldr	r3, [pc, #368]	; (8002e60 <main+0x430>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d133      	bne.n	8002d5e <main+0x32e>
		{
			tim1_2ms_flag = 0;
 8002cf6:	4b5a      	ldr	r3, [pc, #360]	; (8002e60 <main+0x430>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	701a      	strb	r2, [r3, #0]
			MPU9250_Read_All(&hi2c1);
 8002cfc:	4859      	ldr	r0, [pc, #356]	; (8002e64 <main+0x434>)
 8002cfe:	f7fd fec1 	bl	8000a84 <MPU9250_Read_All>
			MPU9250_Parsing(&MPU9250);
 8002d02:	4859      	ldr	r0, [pc, #356]	; (8002e68 <main+0x438>)
 8002d04:	f7fd fed4 	bl	8000ab0 <MPU9250_Parsing>
			MadgwickAHRSupdate(MPU9250.Gx_Rad, MPU9250.Gy_Rad, MPU9250.Gz_Rad, MPU9250.Ax, MPU9250.Ay, MPU9250.Az, MPU9250.Mx, MPU9250.My, MPU9250.Mz);
 8002d08:	4b57      	ldr	r3, [pc, #348]	; (8002e68 <main+0x438>)
 8002d0a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002d0e:	4b56      	ldr	r3, [pc, #344]	; (8002e68 <main+0x438>)
 8002d10:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002d14:	4b54      	ldr	r3, [pc, #336]	; (8002e68 <main+0x438>)
 8002d16:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8002d1a:	4b53      	ldr	r3, [pc, #332]	; (8002e68 <main+0x438>)
 8002d1c:	ed93 6a02 	vldr	s12, [r3, #8]
 8002d20:	4b51      	ldr	r3, [pc, #324]	; (8002e68 <main+0x438>)
 8002d22:	edd3 5a03 	vldr	s11, [r3, #12]
 8002d26:	4b50      	ldr	r3, [pc, #320]	; (8002e68 <main+0x438>)
 8002d28:	ed93 5a04 	vldr	s10, [r3, #16]
 8002d2c:	4b4e      	ldr	r3, [pc, #312]	; (8002e68 <main+0x438>)
 8002d2e:	edd3 4a1a 	vldr	s9, [r3, #104]	; 0x68
 8002d32:	4b4d      	ldr	r3, [pc, #308]	; (8002e68 <main+0x438>)
 8002d34:	edd3 3a1b 	vldr	s7, [r3, #108]	; 0x6c
 8002d38:	4b4b      	ldr	r3, [pc, #300]	; (8002e68 <main+0x438>)
 8002d3a:	ed93 4a1c 	vldr	s8, [r3, #112]	; 0x70
 8002d3e:	eeb0 3a64 	vmov.f32	s6, s9
 8002d42:	eef0 2a45 	vmov.f32	s5, s10
 8002d46:	eeb0 2a65 	vmov.f32	s4, s11
 8002d4a:	eef0 1a46 	vmov.f32	s3, s12
 8002d4e:	eeb0 1a66 	vmov.f32	s2, s13
 8002d52:	eef0 0a47 	vmov.f32	s1, s14
 8002d56:	eeb0 0a67 	vmov.f32	s0, s15
 8002d5a:	f7fe f9dd 	bl	8001118 <MadgwickAHRSupdate>
		}

		//Print According to the Input
		if(tim1_20ms_flag == 1)
 8002d5e:	4b43      	ldr	r3, [pc, #268]	; (8002e6c <main+0x43c>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d178      	bne.n	8002e58 <main+0x428>
		{
			tim1_20ms_flag = 0;
 8002d66:	4b41      	ldr	r3, [pc, #260]	; (8002e6c <main+0x43c>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]

			switch(print_mode)
 8002d6c:	4b40      	ldr	r3, [pc, #256]	; (8002e70 <main+0x440>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	3b01      	subs	r3, #1
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d872      	bhi.n	8002e5c <main+0x42c>
 8002d76:	a201      	add	r2, pc, #4	; (adr r2, 8002d7c <main+0x34c>)
 8002d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7c:	08002d91 	.word	0x08002d91
 8002d80:	08002e5d 	.word	0x08002e5d
 8002d84:	08002dc3 	.word	0x08002dc3
 8002d88:	08002df5 	.word	0x08002df5
 8002d8c:	08002e27 	.word	0x08002e27
			{
			case 1: printf("%.2f \t %.2f \t %.2f \t \n", System_Roll, System_Pitch, System_Yaw); break; //Roll, Pitch, Yaw
 8002d90:	4b38      	ldr	r3, [pc, #224]	; (8002e74 <main+0x444>)
 8002d92:	edd3 7a00 	vldr	s15, [r3]
 8002d96:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002d9a:	4b37      	ldr	r3, [pc, #220]	; (8002e78 <main+0x448>)
 8002d9c:	edd3 7a00 	vldr	s15, [r3]
 8002da0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002da4:	4b35      	ldr	r3, [pc, #212]	; (8002e7c <main+0x44c>)
 8002da6:	edd3 6a00 	vldr	s13, [r3]
 8002daa:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002dae:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002db2:	ed8d 7b00 	vstr	d7, [sp]
 8002db6:	ec53 2b15 	vmov	r2, r3, d5
 8002dba:	4831      	ldr	r0, [pc, #196]	; (8002e80 <main+0x450>)
 8002dbc:	f00d fb3e 	bl	801043c <iprintf>
 8002dc0:	e04d      	b.n	8002e5e <main+0x42e>
			case 2: /* printf("%.2f \t %.2f \t \m", Alt, Alt_Filt); */ break; //Alt Raw, Alt Filt
			case 3: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Gx, MPU9250.Gy, MPU9250.Gz); break; //Gyro
 8002dc2:	4b29      	ldr	r3, [pc, #164]	; (8002e68 <main+0x438>)
 8002dc4:	edd3 7a08 	vldr	s15, [r3, #32]
 8002dc8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002dcc:	4b26      	ldr	r3, [pc, #152]	; (8002e68 <main+0x438>)
 8002dce:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002dd2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002dd6:	4b24      	ldr	r3, [pc, #144]	; (8002e68 <main+0x438>)
 8002dd8:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002ddc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002de0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002de4:	ed8d 7b00 	vstr	d7, [sp]
 8002de8:	ec53 2b15 	vmov	r2, r3, d5
 8002dec:	4824      	ldr	r0, [pc, #144]	; (8002e80 <main+0x450>)
 8002dee:	f00d fb25 	bl	801043c <iprintf>
 8002df2:	e034      	b.n	8002e5e <main+0x42e>
			case 4: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Ax, MPU9250.Ay, MPU9250.Az); break; //Accel
 8002df4:	4b1c      	ldr	r3, [pc, #112]	; (8002e68 <main+0x438>)
 8002df6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dfa:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002dfe:	4b1a      	ldr	r3, [pc, #104]	; (8002e68 <main+0x438>)
 8002e00:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e08:	4b17      	ldr	r3, [pc, #92]	; (8002e68 <main+0x438>)
 8002e0a:	edd3 6a04 	vldr	s13, [r3, #16]
 8002e0e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002e12:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002e16:	ed8d 7b00 	vstr	d7, [sp]
 8002e1a:	ec53 2b15 	vmov	r2, r3, d5
 8002e1e:	4818      	ldr	r0, [pc, #96]	; (8002e80 <main+0x450>)
 8002e20:	f00d fb0c 	bl	801043c <iprintf>
 8002e24:	e01b      	b.n	8002e5e <main+0x42e>
			case 5: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Mx, MPU9250.My, MPU9250.Mz); break; //Mag
 8002e26:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <main+0x438>)
 8002e28:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002e2c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002e30:	4b0d      	ldr	r3, [pc, #52]	; (8002e68 <main+0x438>)
 8002e32:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002e36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <main+0x438>)
 8002e3c:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8002e40:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002e44:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002e48:	ed8d 7b00 	vstr	d7, [sp]
 8002e4c:	ec53 2b15 	vmov	r2, r3, d5
 8002e50:	480b      	ldr	r0, [pc, #44]	; (8002e80 <main+0x450>)
 8002e52:	f00d faf3 	bl	801043c <iprintf>
 8002e56:	e002      	b.n	8002e5e <main+0x42e>
			default: break;
			}
		}
 8002e58:	bf00      	nop
 8002e5a:	e6f9      	b.n	8002c50 <main+0x220>
			default: break;
 8002e5c:	bf00      	nop
		if(uart1_rx_flag == 1)
 8002e5e:	e6f7      	b.n	8002c50 <main+0x220>
 8002e60:	2400022f 	.word	0x2400022f
 8002e64:	240002dc 	.word	0x240002dc
 8002e68:	24000244 	.word	0x24000244
 8002e6c:	24000230 	.word	0x24000230
 8002e70:	2400022c 	.word	0x2400022c
 8002e74:	240002d4 	.word	0x240002d4
 8002e78:	240002d8 	.word	0x240002d8
 8002e7c:	240002d0 	.word	0x240002d0
 8002e80:	08012ee0 	.word	0x08012ee0

08002e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b09c      	sub	sp, #112	; 0x70
 8002e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e8e:	224c      	movs	r2, #76	; 0x4c
 8002e90:	2100      	movs	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f00c fe88 	bl	800fba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e98:	1d3b      	adds	r3, r7, #4
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f00c fe82 	bl	800fba8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002ea4:	2002      	movs	r0, #2
 8002ea6:	f006 fe99 	bl	8009bdc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002eaa:	2300      	movs	r3, #0
 8002eac:	603b      	str	r3, [r7, #0]
 8002eae:	4b32      	ldr	r3, [pc, #200]	; (8002f78 <SystemClock_Config+0xf4>)
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	4a31      	ldr	r2, [pc, #196]	; (8002f78 <SystemClock_Config+0xf4>)
 8002eb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eb8:	6193      	str	r3, [r2, #24]
 8002eba:	4b2f      	ldr	r3, [pc, #188]	; (8002f78 <SystemClock_Config+0xf4>)
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ec2:	603b      	str	r3, [r7, #0]
 8002ec4:	4b2d      	ldr	r3, [pc, #180]	; (8002f7c <SystemClock_Config+0xf8>)
 8002ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec8:	4a2c      	ldr	r2, [pc, #176]	; (8002f7c <SystemClock_Config+0xf8>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002ed0:	4b2a      	ldr	r3, [pc, #168]	; (8002f7c <SystemClock_Config+0xf8>)
 8002ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	603b      	str	r3, [r7, #0]
 8002eda:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002edc:	bf00      	nop
 8002ede:	4b26      	ldr	r3, [pc, #152]	; (8002f78 <SystemClock_Config+0xf4>)
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eea:	d1f8      	bne.n	8002ede <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002eec:	2303      	movs	r3, #3
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ef0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002efa:	2340      	movs	r3, #64	; 0x40
 8002efc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002efe:	2302      	movs	r3, #2
 8002f00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f02:	2302      	movs	r3, #2
 8002f04:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002f06:	2305      	movs	r3, #5
 8002f08:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002f0a:	23c0      	movs	r3, #192	; 0xc0
 8002f0c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002f12:	2302      	movs	r3, #2
 8002f14:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002f16:	2302      	movs	r3, #2
 8002f18:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002f1a:	2308      	movs	r3, #8
 8002f1c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f006 fe90 	bl	8009c50 <HAL_RCC_OscConfig>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002f36:	f000 f9e7 	bl	8003308 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f3a:	233f      	movs	r3, #63	; 0x3f
 8002f3c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002f46:	2308      	movs	r3, #8
 8002f48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002f4a:	2340      	movs	r3, #64	; 0x40
 8002f4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002f4e:	2340      	movs	r3, #64	; 0x40
 8002f50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f56:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002f58:	2340      	movs	r3, #64	; 0x40
 8002f5a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002f5c:	1d3b      	adds	r3, r7, #4
 8002f5e:	2104      	movs	r1, #4
 8002f60:	4618      	mov	r0, r3
 8002f62:	f007 fa85 	bl	800a470 <HAL_RCC_ClockConfig>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8002f6c:	f000 f9cc 	bl	8003308 <Error_Handler>
  }
}
 8002f70:	bf00      	nop
 8002f72:	3770      	adds	r7, #112	; 0x70
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	58024800 	.word	0x58024800
 8002f7c:	58000400 	.word	0x58000400

08002f80 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b0b0      	sub	sp, #192	; 0xc0
 8002f84:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f86:	1d3b      	adds	r3, r7, #4
 8002f88:	22bc      	movs	r2, #188	; 0xbc
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f00c fe0b 	bl	800fba8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8002f92:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002f96:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f9c:	1d3b      	adds	r3, r7, #4
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f007 fdf2 	bl	800ab88 <HAL_RCCEx_PeriphCLKConfig>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 8002faa:	f000 f9ad 	bl	8003308 <Error_Handler>
  }
}
 8002fae:	bf00      	nop
 8002fb0:	37c0      	adds	r7, #192	; 0xc0
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002fbc:	4b1b      	ldr	r3, [pc, #108]	; (800302c <MX_I2C1_Init+0x74>)
 8002fbe:	4a1c      	ldr	r2, [pc, #112]	; (8003030 <MX_I2C1_Init+0x78>)
 8002fc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 8002fc2:	4b1a      	ldr	r3, [pc, #104]	; (800302c <MX_I2C1_Init+0x74>)
 8002fc4:	4a1b      	ldr	r2, [pc, #108]	; (8003034 <MX_I2C1_Init+0x7c>)
 8002fc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002fc8:	4b18      	ldr	r3, [pc, #96]	; (800302c <MX_I2C1_Init+0x74>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fce:	4b17      	ldr	r3, [pc, #92]	; (800302c <MX_I2C1_Init+0x74>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fd4:	4b15      	ldr	r3, [pc, #84]	; (800302c <MX_I2C1_Init+0x74>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002fda:	4b14      	ldr	r3, [pc, #80]	; (800302c <MX_I2C1_Init+0x74>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002fe0:	4b12      	ldr	r3, [pc, #72]	; (800302c <MX_I2C1_Init+0x74>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fe6:	4b11      	ldr	r3, [pc, #68]	; (800302c <MX_I2C1_Init+0x74>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fec:	4b0f      	ldr	r3, [pc, #60]	; (800302c <MX_I2C1_Init+0x74>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ff2:	480e      	ldr	r0, [pc, #56]	; (800302c <MX_I2C1_Init+0x74>)
 8002ff4:	f004 fb9e 	bl	8007734 <HAL_I2C_Init>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002ffe:	f000 f983 	bl	8003308 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003002:	2100      	movs	r1, #0
 8003004:	4809      	ldr	r0, [pc, #36]	; (800302c <MX_I2C1_Init+0x74>)
 8003006:	f006 fd51 	bl	8009aac <HAL_I2CEx_ConfigAnalogFilter>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003010:	f000 f97a 	bl	8003308 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003014:	2100      	movs	r1, #0
 8003016:	4805      	ldr	r0, [pc, #20]	; (800302c <MX_I2C1_Init+0x74>)
 8003018:	f006 fd93 	bl	8009b42 <HAL_I2CEx_ConfigDigitalFilter>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003022:	f000 f971 	bl	8003308 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003026:	bf00      	nop
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	240002dc 	.word	0x240002dc
 8003030:	40005400 	.word	0x40005400
 8003034:	00b03fdb 	.word	0x00b03fdb

08003038 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800303c:	4b27      	ldr	r3, [pc, #156]	; (80030dc <MX_SPI1_Init+0xa4>)
 800303e:	4a28      	ldr	r2, [pc, #160]	; (80030e0 <MX_SPI1_Init+0xa8>)
 8003040:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003042:	4b26      	ldr	r3, [pc, #152]	; (80030dc <MX_SPI1_Init+0xa4>)
 8003044:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003048:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800304a:	4b24      	ldr	r3, [pc, #144]	; (80030dc <MX_SPI1_Init+0xa4>)
 800304c:	2200      	movs	r2, #0
 800304e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003050:	4b22      	ldr	r3, [pc, #136]	; (80030dc <MX_SPI1_Init+0xa4>)
 8003052:	2207      	movs	r2, #7
 8003054:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003056:	4b21      	ldr	r3, [pc, #132]	; (80030dc <MX_SPI1_Init+0xa4>)
 8003058:	2200      	movs	r2, #0
 800305a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800305c:	4b1f      	ldr	r3, [pc, #124]	; (80030dc <MX_SPI1_Init+0xa4>)
 800305e:	2200      	movs	r2, #0
 8003060:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003062:	4b1e      	ldr	r3, [pc, #120]	; (80030dc <MX_SPI1_Init+0xa4>)
 8003064:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003068:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800306a:	4b1c      	ldr	r3, [pc, #112]	; (80030dc <MX_SPI1_Init+0xa4>)
 800306c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8003070:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003072:	4b1a      	ldr	r3, [pc, #104]	; (80030dc <MX_SPI1_Init+0xa4>)
 8003074:	2200      	movs	r2, #0
 8003076:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003078:	4b18      	ldr	r3, [pc, #96]	; (80030dc <MX_SPI1_Init+0xa4>)
 800307a:	2200      	movs	r2, #0
 800307c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800307e:	4b17      	ldr	r3, [pc, #92]	; (80030dc <MX_SPI1_Init+0xa4>)
 8003080:	2200      	movs	r2, #0
 8003082:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003084:	4b15      	ldr	r3, [pc, #84]	; (80030dc <MX_SPI1_Init+0xa4>)
 8003086:	2200      	movs	r2, #0
 8003088:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800308a:	4b14      	ldr	r3, [pc, #80]	; (80030dc <MX_SPI1_Init+0xa4>)
 800308c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003090:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003092:	4b12      	ldr	r3, [pc, #72]	; (80030dc <MX_SPI1_Init+0xa4>)
 8003094:	2200      	movs	r2, #0
 8003096:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003098:	4b10      	ldr	r3, [pc, #64]	; (80030dc <MX_SPI1_Init+0xa4>)
 800309a:	2200      	movs	r2, #0
 800309c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800309e:	4b0f      	ldr	r3, [pc, #60]	; (80030dc <MX_SPI1_Init+0xa4>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80030a4:	4b0d      	ldr	r3, [pc, #52]	; (80030dc <MX_SPI1_Init+0xa4>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80030aa:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <MX_SPI1_Init+0xa4>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80030b0:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <MX_SPI1_Init+0xa4>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80030b6:	4b09      	ldr	r3, [pc, #36]	; (80030dc <MX_SPI1_Init+0xa4>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80030bc:	4b07      	ldr	r3, [pc, #28]	; (80030dc <MX_SPI1_Init+0xa4>)
 80030be:	2200      	movs	r2, #0
 80030c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80030c2:	4b06      	ldr	r3, [pc, #24]	; (80030dc <MX_SPI1_Init+0xa4>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030c8:	4804      	ldr	r0, [pc, #16]	; (80030dc <MX_SPI1_Init+0xa4>)
 80030ca:	f009 f8bf 	bl	800c24c <HAL_SPI_Init>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80030d4:	f000 f918 	bl	8003308 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80030d8:	bf00      	nop
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	240004a8 	.word	0x240004a8
 80030e0:	40013000 	.word	0x40013000

080030e4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030ea:	1d3b      	adds	r3, r7, #4
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80030f4:	4b14      	ldr	r3, [pc, #80]	; (8003148 <MX_TIM7_Init+0x64>)
 80030f6:	4a15      	ldr	r2, [pc, #84]	; (800314c <MX_TIM7_Init+0x68>)
 80030f8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 39999;
 80030fa:	4b13      	ldr	r3, [pc, #76]	; (8003148 <MX_TIM7_Init+0x64>)
 80030fc:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8003100:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003102:	4b11      	ldr	r3, [pc, #68]	; (8003148 <MX_TIM7_Init+0x64>)
 8003104:	2200      	movs	r2, #0
 8003106:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5;
 8003108:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <MX_TIM7_Init+0x64>)
 800310a:	2205      	movs	r2, #5
 800310c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800310e:	4b0e      	ldr	r3, [pc, #56]	; (8003148 <MX_TIM7_Init+0x64>)
 8003110:	2280      	movs	r2, #128	; 0x80
 8003112:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003114:	480c      	ldr	r0, [pc, #48]	; (8003148 <MX_TIM7_Init+0x64>)
 8003116:	f00a f954 	bl	800d3c2 <HAL_TIM_Base_Init>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003120:	f000 f8f2 	bl	8003308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003124:	2300      	movs	r3, #0
 8003126:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003128:	2300      	movs	r3, #0
 800312a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800312c:	1d3b      	adds	r3, r7, #4
 800312e:	4619      	mov	r1, r3
 8003130:	4805      	ldr	r0, [pc, #20]	; (8003148 <MX_TIM7_Init+0x64>)
 8003132:	f00a fbef 	bl	800d914 <HAL_TIMEx_MasterConfigSynchronization>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800313c:	f000 f8e4 	bl	8003308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003140:	bf00      	nop
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	2400053c 	.word	0x2400053c
 800314c:	40001400 	.word	0x40001400

08003150 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003154:	4b22      	ldr	r3, [pc, #136]	; (80031e0 <MX_USART1_UART_Init+0x90>)
 8003156:	4a23      	ldr	r2, [pc, #140]	; (80031e4 <MX_USART1_UART_Init+0x94>)
 8003158:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800315a:	4b21      	ldr	r3, [pc, #132]	; (80031e0 <MX_USART1_UART_Init+0x90>)
 800315c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003160:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003162:	4b1f      	ldr	r3, [pc, #124]	; (80031e0 <MX_USART1_UART_Init+0x90>)
 8003164:	2200      	movs	r2, #0
 8003166:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003168:	4b1d      	ldr	r3, [pc, #116]	; (80031e0 <MX_USART1_UART_Init+0x90>)
 800316a:	2200      	movs	r2, #0
 800316c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800316e:	4b1c      	ldr	r3, [pc, #112]	; (80031e0 <MX_USART1_UART_Init+0x90>)
 8003170:	2200      	movs	r2, #0
 8003172:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003174:	4b1a      	ldr	r3, [pc, #104]	; (80031e0 <MX_USART1_UART_Init+0x90>)
 8003176:	220c      	movs	r2, #12
 8003178:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800317a:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <MX_USART1_UART_Init+0x90>)
 800317c:	2200      	movs	r2, #0
 800317e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003180:	4b17      	ldr	r3, [pc, #92]	; (80031e0 <MX_USART1_UART_Init+0x90>)
 8003182:	2200      	movs	r2, #0
 8003184:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003186:	4b16      	ldr	r3, [pc, #88]	; (80031e0 <MX_USART1_UART_Init+0x90>)
 8003188:	2200      	movs	r2, #0
 800318a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800318c:	4b14      	ldr	r3, [pc, #80]	; (80031e0 <MX_USART1_UART_Init+0x90>)
 800318e:	2200      	movs	r2, #0
 8003190:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003192:	4b13      	ldr	r3, [pc, #76]	; (80031e0 <MX_USART1_UART_Init+0x90>)
 8003194:	2200      	movs	r2, #0
 8003196:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003198:	4811      	ldr	r0, [pc, #68]	; (80031e0 <MX_USART1_UART_Init+0x90>)
 800319a:	f00a fc61 	bl	800da60 <HAL_UART_Init>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80031a4:	f000 f8b0 	bl	8003308 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031a8:	2100      	movs	r1, #0
 80031aa:	480d      	ldr	r0, [pc, #52]	; (80031e0 <MX_USART1_UART_Init+0x90>)
 80031ac:	f00c fc07 	bl	800f9be <HAL_UARTEx_SetTxFifoThreshold>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80031b6:	f000 f8a7 	bl	8003308 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031ba:	2100      	movs	r1, #0
 80031bc:	4808      	ldr	r0, [pc, #32]	; (80031e0 <MX_USART1_UART_Init+0x90>)
 80031be:	f00c fc3c 	bl	800fa3a <HAL_UARTEx_SetRxFifoThreshold>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80031c8:	f000 f89e 	bl	8003308 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80031cc:	4804      	ldr	r0, [pc, #16]	; (80031e0 <MX_USART1_UART_Init+0x90>)
 80031ce:	f00c fbbd 	bl	800f94c <HAL_UARTEx_DisableFifoMode>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80031d8:	f000 f896 	bl	8003308 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031dc:	bf00      	nop
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	240003a0 	.word	0x240003a0
 80031e4:	40011000 	.word	0x40011000

080031e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031ee:	4b11      	ldr	r3, [pc, #68]	; (8003234 <MX_DMA_Init+0x4c>)
 80031f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80031f4:	4a0f      	ldr	r2, [pc, #60]	; (8003234 <MX_DMA_Init+0x4c>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80031fe:	4b0d      	ldr	r3, [pc, #52]	; (8003234 <MX_DMA_Init+0x4c>)
 8003200:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	607b      	str	r3, [r7, #4]
 800320a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800320c:	2200      	movs	r2, #0
 800320e:	2100      	movs	r1, #0
 8003210:	200b      	movs	r0, #11
 8003212:	f001 fa22 	bl	800465a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003216:	200b      	movs	r0, #11
 8003218:	f001 fa39 	bl	800468e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800321c:	2200      	movs	r2, #0
 800321e:	2100      	movs	r1, #0
 8003220:	200c      	movs	r0, #12
 8003222:	f001 fa1a 	bl	800465a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003226:	200c      	movs	r0, #12
 8003228:	f001 fa31 	bl	800468e <HAL_NVIC_EnableIRQ>

}
 800322c:	bf00      	nop
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	58024400 	.word	0x58024400

08003238 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800323e:	f107 030c 	add.w	r3, r7, #12
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	605a      	str	r2, [r3, #4]
 8003248:	609a      	str	r2, [r3, #8]
 800324a:	60da      	str	r2, [r3, #12]
 800324c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800324e:	4b2b      	ldr	r3, [pc, #172]	; (80032fc <MX_GPIO_Init+0xc4>)
 8003250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003254:	4a29      	ldr	r2, [pc, #164]	; (80032fc <MX_GPIO_Init+0xc4>)
 8003256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800325a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800325e:	4b27      	ldr	r3, [pc, #156]	; (80032fc <MX_GPIO_Init+0xc4>)
 8003260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003268:	60bb      	str	r3, [r7, #8]
 800326a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800326c:	4b23      	ldr	r3, [pc, #140]	; (80032fc <MX_GPIO_Init+0xc4>)
 800326e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003272:	4a22      	ldr	r2, [pc, #136]	; (80032fc <MX_GPIO_Init+0xc4>)
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800327c:	4b1f      	ldr	r3, [pc, #124]	; (80032fc <MX_GPIO_Init+0xc4>)
 800327e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	607b      	str	r3, [r7, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800328a:	4b1c      	ldr	r3, [pc, #112]	; (80032fc <MX_GPIO_Init+0xc4>)
 800328c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003290:	4a1a      	ldr	r2, [pc, #104]	; (80032fc <MX_GPIO_Init+0xc4>)
 8003292:	f043 0302 	orr.w	r3, r3, #2
 8003296:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800329a:	4b18      	ldr	r3, [pc, #96]	; (80032fc <MX_GPIO_Init+0xc4>)
 800329c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	603b      	str	r3, [r7, #0]
 80032a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80032a8:	2200      	movs	r2, #0
 80032aa:	2102      	movs	r1, #2
 80032ac:	4814      	ldr	r0, [pc, #80]	; (8003300 <MX_GPIO_Init+0xc8>)
 80032ae:	f004 fa0d 	bl	80076cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80032b2:	2200      	movs	r2, #0
 80032b4:	2140      	movs	r1, #64	; 0x40
 80032b6:	4813      	ldr	r0, [pc, #76]	; (8003304 <MX_GPIO_Init+0xcc>)
 80032b8:	f004 fa08 	bl	80076cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80032bc:	2302      	movs	r3, #2
 80032be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032c0:	2301      	movs	r3, #1
 80032c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c4:	2300      	movs	r3, #0
 80032c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c8:	2300      	movs	r3, #0
 80032ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80032cc:	f107 030c 	add.w	r3, r7, #12
 80032d0:	4619      	mov	r1, r3
 80032d2:	480b      	ldr	r0, [pc, #44]	; (8003300 <MX_GPIO_Init+0xc8>)
 80032d4:	f004 f84a 	bl	800736c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80032d8:	2340      	movs	r3, #64	; 0x40
 80032da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032dc:	2301      	movs	r3, #1
 80032de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e4:	2300      	movs	r3, #0
 80032e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032e8:	f107 030c 	add.w	r3, r7, #12
 80032ec:	4619      	mov	r1, r3
 80032ee:	4805      	ldr	r0, [pc, #20]	; (8003304 <MX_GPIO_Init+0xcc>)
 80032f0:	f004 f83c 	bl	800736c <HAL_GPIO_Init>

}
 80032f4:	bf00      	nop
 80032f6:	3720      	adds	r7, #32
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	58024400 	.word	0x58024400
 8003300:	58020000 	.word	0x58020000
 8003304:	58020400 	.word	0x58020400

08003308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800330c:	b672      	cpsid	i
}
 800330e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003310:	e7fe      	b.n	8003310 <Error_Handler+0x8>
	...

08003314 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800331a:	4b0a      	ldr	r3, [pc, #40]	; (8003344 <HAL_MspInit+0x30>)
 800331c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003320:	4a08      	ldr	r2, [pc, #32]	; (8003344 <HAL_MspInit+0x30>)
 8003322:	f043 0302 	orr.w	r3, r3, #2
 8003326:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800332a:	4b06      	ldr	r3, [pc, #24]	; (8003344 <HAL_MspInit+0x30>)
 800332c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	607b      	str	r3, [r7, #4]
 8003336:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	58024400 	.word	0x58024400

08003348 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b0b8      	sub	sp, #224	; 0xe0
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003350:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	605a      	str	r2, [r3, #4]
 800335a:	609a      	str	r2, [r3, #8]
 800335c:	60da      	str	r2, [r3, #12]
 800335e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003360:	f107 0310 	add.w	r3, r7, #16
 8003364:	22bc      	movs	r2, #188	; 0xbc
 8003366:	2100      	movs	r1, #0
 8003368:	4618      	mov	r0, r3
 800336a:	f00c fc1d 	bl	800fba8 <memset>
  if(hi2c->Instance==I2C1)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a3f      	ldr	r2, [pc, #252]	; (8003470 <HAL_I2C_MspInit+0x128>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d177      	bne.n	8003468 <HAL_I2C_MspInit+0x120>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003378:	2308      	movs	r3, #8
 800337a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800337c:	2300      	movs	r3, #0
 800337e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003382:	f107 0310 	add.w	r3, r7, #16
 8003386:	4618      	mov	r0, r3
 8003388:	f007 fbfe 	bl	800ab88 <HAL_RCCEx_PeriphCLKConfig>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003392:	f7ff ffb9 	bl	8003308 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003396:	4b37      	ldr	r3, [pc, #220]	; (8003474 <HAL_I2C_MspInit+0x12c>)
 8003398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800339c:	4a35      	ldr	r2, [pc, #212]	; (8003474 <HAL_I2C_MspInit+0x12c>)
 800339e:	f043 0302 	orr.w	r3, r3, #2
 80033a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033a6:	4b33      	ldr	r3, [pc, #204]	; (8003474 <HAL_I2C_MspInit+0x12c>)
 80033a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80033b4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80033b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033bc:	2312      	movs	r3, #18
 80033be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c8:	2300      	movs	r3, #0
 80033ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033ce:	2304      	movs	r3, #4
 80033d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80033d8:	4619      	mov	r1, r3
 80033da:	4827      	ldr	r0, [pc, #156]	; (8003478 <HAL_I2C_MspInit+0x130>)
 80033dc:	f003 ffc6 	bl	800736c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033e0:	4b24      	ldr	r3, [pc, #144]	; (8003474 <HAL_I2C_MspInit+0x12c>)
 80033e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033e6:	4a23      	ldr	r2, [pc, #140]	; (8003474 <HAL_I2C_MspInit+0x12c>)
 80033e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80033f0:	4b20      	ldr	r3, [pc, #128]	; (8003474 <HAL_I2C_MspInit+0x12c>)
 80033f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033fa:	60bb      	str	r3, [r7, #8]
 80033fc:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream1;
 80033fe:	4b1f      	ldr	r3, [pc, #124]	; (800347c <HAL_I2C_MspInit+0x134>)
 8003400:	4a1f      	ldr	r2, [pc, #124]	; (8003480 <HAL_I2C_MspInit+0x138>)
 8003402:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8003404:	4b1d      	ldr	r3, [pc, #116]	; (800347c <HAL_I2C_MspInit+0x134>)
 8003406:	2221      	movs	r2, #33	; 0x21
 8003408:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800340a:	4b1c      	ldr	r3, [pc, #112]	; (800347c <HAL_I2C_MspInit+0x134>)
 800340c:	2200      	movs	r2, #0
 800340e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003410:	4b1a      	ldr	r3, [pc, #104]	; (800347c <HAL_I2C_MspInit+0x134>)
 8003412:	2200      	movs	r2, #0
 8003414:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003416:	4b19      	ldr	r3, [pc, #100]	; (800347c <HAL_I2C_MspInit+0x134>)
 8003418:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800341c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800341e:	4b17      	ldr	r3, [pc, #92]	; (800347c <HAL_I2C_MspInit+0x134>)
 8003420:	2200      	movs	r2, #0
 8003422:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003424:	4b15      	ldr	r3, [pc, #84]	; (800347c <HAL_I2C_MspInit+0x134>)
 8003426:	2200      	movs	r2, #0
 8003428:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800342a:	4b14      	ldr	r3, [pc, #80]	; (800347c <HAL_I2C_MspInit+0x134>)
 800342c:	2200      	movs	r2, #0
 800342e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003430:	4b12      	ldr	r3, [pc, #72]	; (800347c <HAL_I2C_MspInit+0x134>)
 8003432:	2200      	movs	r2, #0
 8003434:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003436:	4b11      	ldr	r3, [pc, #68]	; (800347c <HAL_I2C_MspInit+0x134>)
 8003438:	2200      	movs	r2, #0
 800343a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800343c:	480f      	ldr	r0, [pc, #60]	; (800347c <HAL_I2C_MspInit+0x134>)
 800343e:	f001 f941 	bl	80046c4 <HAL_DMA_Init>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <HAL_I2C_MspInit+0x104>
    {
      Error_Handler();
 8003448:	f7ff ff5e 	bl	8003308 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a0b      	ldr	r2, [pc, #44]	; (800347c <HAL_I2C_MspInit+0x134>)
 8003450:	63da      	str	r2, [r3, #60]	; 0x3c
 8003452:	4a0a      	ldr	r2, [pc, #40]	; (800347c <HAL_I2C_MspInit+0x134>)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003458:	2200      	movs	r2, #0
 800345a:	2100      	movs	r1, #0
 800345c:	201f      	movs	r0, #31
 800345e:	f001 f8fc 	bl	800465a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003462:	201f      	movs	r0, #31
 8003464:	f001 f913 	bl	800468e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003468:	bf00      	nop
 800346a:	37e0      	adds	r7, #224	; 0xe0
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40005400 	.word	0x40005400
 8003474:	58024400 	.word	0x58024400
 8003478:	58020400 	.word	0x58020400
 800347c:	24000430 	.word	0x24000430
 8003480:	40020028 	.word	0x40020028

08003484 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b0b8      	sub	sp, #224	; 0xe0
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800348c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	605a      	str	r2, [r3, #4]
 8003496:	609a      	str	r2, [r3, #8]
 8003498:	60da      	str	r2, [r3, #12]
 800349a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800349c:	f107 0310 	add.w	r3, r7, #16
 80034a0:	22bc      	movs	r2, #188	; 0xbc
 80034a2:	2100      	movs	r1, #0
 80034a4:	4618      	mov	r0, r3
 80034a6:	f00c fb7f 	bl	800fba8 <memset>
  if(hspi->Instance==SPI1)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a25      	ldr	r2, [pc, #148]	; (8003544 <HAL_SPI_MspInit+0xc0>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d142      	bne.n	800353a <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80034b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034b8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80034ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034be:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034c0:	f107 0310 	add.w	r3, r7, #16
 80034c4:	4618      	mov	r0, r3
 80034c6:	f007 fb5f 	bl	800ab88 <HAL_RCCEx_PeriphCLKConfig>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 80034d0:	f7ff ff1a 	bl	8003308 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034d4:	4b1c      	ldr	r3, [pc, #112]	; (8003548 <HAL_SPI_MspInit+0xc4>)
 80034d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034da:	4a1b      	ldr	r2, [pc, #108]	; (8003548 <HAL_SPI_MspInit+0xc4>)
 80034dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034e0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034e4:	4b18      	ldr	r3, [pc, #96]	; (8003548 <HAL_SPI_MspInit+0xc4>)
 80034e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f2:	4b15      	ldr	r3, [pc, #84]	; (8003548 <HAL_SPI_MspInit+0xc4>)
 80034f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034f8:	4a13      	ldr	r2, [pc, #76]	; (8003548 <HAL_SPI_MspInit+0xc4>)
 80034fa:	f043 0301 	orr.w	r3, r3, #1
 80034fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003502:	4b11      	ldr	r3, [pc, #68]	; (8003548 <HAL_SPI_MspInit+0xc4>)
 8003504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003510:	23e0      	movs	r3, #224	; 0xe0
 8003512:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003516:	2302      	movs	r3, #2
 8003518:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351c:	2300      	movs	r3, #0
 800351e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003522:	2300      	movs	r3, #0
 8003524:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003528:	2305      	movs	r3, #5
 800352a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800352e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003532:	4619      	mov	r1, r3
 8003534:	4805      	ldr	r0, [pc, #20]	; (800354c <HAL_SPI_MspInit+0xc8>)
 8003536:	f003 ff19 	bl	800736c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800353a:	bf00      	nop
 800353c:	37e0      	adds	r7, #224	; 0xe0
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40013000 	.word	0x40013000
 8003548:	58024400 	.word	0x58024400
 800354c:	58020000 	.word	0x58020000

08003550 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a0e      	ldr	r2, [pc, #56]	; (8003598 <HAL_TIM_Base_MspInit+0x48>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d116      	bne.n	8003590 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003562:	4b0e      	ldr	r3, [pc, #56]	; (800359c <HAL_TIM_Base_MspInit+0x4c>)
 8003564:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003568:	4a0c      	ldr	r2, [pc, #48]	; (800359c <HAL_TIM_Base_MspInit+0x4c>)
 800356a:	f043 0320 	orr.w	r3, r3, #32
 800356e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003572:	4b0a      	ldr	r3, [pc, #40]	; (800359c <HAL_TIM_Base_MspInit+0x4c>)
 8003574:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003578:	f003 0320 	and.w	r3, r3, #32
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003580:	2200      	movs	r2, #0
 8003582:	2100      	movs	r1, #0
 8003584:	2037      	movs	r0, #55	; 0x37
 8003586:	f001 f868 	bl	800465a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800358a:	2037      	movs	r0, #55	; 0x37
 800358c:	f001 f87f 	bl	800468e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003590:	bf00      	nop
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40001400 	.word	0x40001400
 800359c:	58024400 	.word	0x58024400

080035a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b0b8      	sub	sp, #224	; 0xe0
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	605a      	str	r2, [r3, #4]
 80035b2:	609a      	str	r2, [r3, #8]
 80035b4:	60da      	str	r2, [r3, #12]
 80035b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035b8:	f107 0310 	add.w	r3, r7, #16
 80035bc:	22bc      	movs	r2, #188	; 0xbc
 80035be:	2100      	movs	r1, #0
 80035c0:	4618      	mov	r0, r3
 80035c2:	f00c faf1 	bl	800fba8 <memset>
  if(huart->Instance==USART1)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a3f      	ldr	r2, [pc, #252]	; (80036c8 <HAL_UART_MspInit+0x128>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d177      	bne.n	80036c0 <HAL_UART_MspInit+0x120>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80035d0:	2301      	movs	r3, #1
 80035d2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80035d4:	2300      	movs	r3, #0
 80035d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035da:	f107 0310 	add.w	r3, r7, #16
 80035de:	4618      	mov	r0, r3
 80035e0:	f007 fad2 	bl	800ab88 <HAL_RCCEx_PeriphCLKConfig>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80035ea:	f7ff fe8d 	bl	8003308 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035ee:	4b37      	ldr	r3, [pc, #220]	; (80036cc <HAL_UART_MspInit+0x12c>)
 80035f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035f4:	4a35      	ldr	r2, [pc, #212]	; (80036cc <HAL_UART_MspInit+0x12c>)
 80035f6:	f043 0310 	orr.w	r3, r3, #16
 80035fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80035fe:	4b33      	ldr	r3, [pc, #204]	; (80036cc <HAL_UART_MspInit+0x12c>)
 8003600:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003604:	f003 0310 	and.w	r3, r3, #16
 8003608:	60fb      	str	r3, [r7, #12]
 800360a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800360c:	4b2f      	ldr	r3, [pc, #188]	; (80036cc <HAL_UART_MspInit+0x12c>)
 800360e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003612:	4a2e      	ldr	r2, [pc, #184]	; (80036cc <HAL_UART_MspInit+0x12c>)
 8003614:	f043 0302 	orr.w	r3, r3, #2
 8003618:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800361c:	4b2b      	ldr	r3, [pc, #172]	; (80036cc <HAL_UART_MspInit+0x12c>)
 800361e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	60bb      	str	r3, [r7, #8]
 8003628:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800362a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800362e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003632:	2302      	movs	r3, #2
 8003634:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003638:	2300      	movs	r3, #0
 800363a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800363e:	2300      	movs	r3, #0
 8003640:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003644:	2304      	movs	r3, #4
 8003646:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800364a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800364e:	4619      	mov	r1, r3
 8003650:	481f      	ldr	r0, [pc, #124]	; (80036d0 <HAL_UART_MspInit+0x130>)
 8003652:	f003 fe8b 	bl	800736c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream0;
 8003656:	4b1f      	ldr	r3, [pc, #124]	; (80036d4 <HAL_UART_MspInit+0x134>)
 8003658:	4a1f      	ldr	r2, [pc, #124]	; (80036d8 <HAL_UART_MspInit+0x138>)
 800365a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800365c:	4b1d      	ldr	r3, [pc, #116]	; (80036d4 <HAL_UART_MspInit+0x134>)
 800365e:	222a      	movs	r2, #42	; 0x2a
 8003660:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003662:	4b1c      	ldr	r3, [pc, #112]	; (80036d4 <HAL_UART_MspInit+0x134>)
 8003664:	2240      	movs	r2, #64	; 0x40
 8003666:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003668:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <HAL_UART_MspInit+0x134>)
 800366a:	2200      	movs	r2, #0
 800366c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800366e:	4b19      	ldr	r3, [pc, #100]	; (80036d4 <HAL_UART_MspInit+0x134>)
 8003670:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003674:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003676:	4b17      	ldr	r3, [pc, #92]	; (80036d4 <HAL_UART_MspInit+0x134>)
 8003678:	2200      	movs	r2, #0
 800367a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800367c:	4b15      	ldr	r3, [pc, #84]	; (80036d4 <HAL_UART_MspInit+0x134>)
 800367e:	2200      	movs	r2, #0
 8003680:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003682:	4b14      	ldr	r3, [pc, #80]	; (80036d4 <HAL_UART_MspInit+0x134>)
 8003684:	2200      	movs	r2, #0
 8003686:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003688:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <HAL_UART_MspInit+0x134>)
 800368a:	2200      	movs	r2, #0
 800368c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800368e:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <HAL_UART_MspInit+0x134>)
 8003690:	2200      	movs	r2, #0
 8003692:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003694:	480f      	ldr	r0, [pc, #60]	; (80036d4 <HAL_UART_MspInit+0x134>)
 8003696:	f001 f815 	bl	80046c4 <HAL_DMA_Init>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 80036a0:	f7ff fe32 	bl	8003308 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a0b      	ldr	r2, [pc, #44]	; (80036d4 <HAL_UART_MspInit+0x134>)
 80036a8:	679a      	str	r2, [r3, #120]	; 0x78
 80036aa:	4a0a      	ldr	r2, [pc, #40]	; (80036d4 <HAL_UART_MspInit+0x134>)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80036b0:	2200      	movs	r2, #0
 80036b2:	2100      	movs	r1, #0
 80036b4:	2025      	movs	r0, #37	; 0x25
 80036b6:	f000 ffd0 	bl	800465a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80036ba:	2025      	movs	r0, #37	; 0x25
 80036bc:	f000 ffe7 	bl	800468e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80036c0:	bf00      	nop
 80036c2:	37e0      	adds	r7, #224	; 0xe0
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40011000 	.word	0x40011000
 80036cc:	58024400 	.word	0x58024400
 80036d0:	58020400 	.word	0x58020400
 80036d4:	24000328 	.word	0x24000328
 80036d8:	40020010 	.word	0x40020010

080036dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80036e0:	e7fe      	b.n	80036e0 <NMI_Handler+0x4>

080036e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036e2:	b480      	push	{r7}
 80036e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036e6:	e7fe      	b.n	80036e6 <HardFault_Handler+0x4>

080036e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036ec:	e7fe      	b.n	80036ec <MemManage_Handler+0x4>

080036ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036ee:	b480      	push	{r7}
 80036f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036f2:	e7fe      	b.n	80036f2 <BusFault_Handler+0x4>

080036f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036f8:	e7fe      	b.n	80036f8 <UsageFault_Handler+0x4>

080036fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036fa:	b480      	push	{r7}
 80036fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036fe:	bf00      	nop
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800370c:	bf00      	nop
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003716:	b480      	push	{r7}
 8003718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800371a:	bf00      	nop
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003728:	f000 fe6c 	bl	8004404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800372c:	bf00      	nop
 800372e:	bd80      	pop	{r7, pc}

08003730 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003734:	4802      	ldr	r0, [pc, #8]	; (8003740 <DMA1_Stream0_IRQHandler+0x10>)
 8003736:	f002 faed 	bl	8005d14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800373a:	bf00      	nop
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	24000328 	.word	0x24000328

08003744 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003748:	4802      	ldr	r0, [pc, #8]	; (8003754 <DMA1_Stream1_IRQHandler+0x10>)
 800374a:	f002 fae3 	bl	8005d14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	24000430 	.word	0x24000430

08003758 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800375c:	4802      	ldr	r0, [pc, #8]	; (8003768 <I2C1_EV_IRQHandler+0x10>)
 800375e:	f004 fb9f 	bl	8007ea0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003762:	bf00      	nop
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	240002dc 	.word	0x240002dc

0800376c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003770:	4802      	ldr	r0, [pc, #8]	; (800377c <USART1_IRQHandler+0x10>)
 8003772:	f00a fa8b 	bl	800dc8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003776:	bf00      	nop
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	240003a0 	.word	0x240003a0

08003780 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003784:	4802      	ldr	r0, [pc, #8]	; (8003790 <TIM7_IRQHandler+0x10>)
 8003786:	f009 fee3 	bl	800d550 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800378a:	bf00      	nop
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	2400053c 	.word	0x2400053c

08003794 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a14      	ldr	r2, [pc, #80]	; (80037f4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d11f      	bne.n	80037e6 <HAL_TIM_PeriodElapsedCallback+0x52>
	{
		tim1_2ms_count++;
 80037a6:	4b14      	ldr	r3, [pc, #80]	; (80037f8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	3301      	adds	r3, #1
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80037b0:	701a      	strb	r2, [r3, #0]
		if(tim1_2ms_count == 2)
 80037b2:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d105      	bne.n	80037c6 <HAL_TIM_PeriodElapsedCallback+0x32>
		{
			tim1_2ms_count = 0;
 80037ba:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80037bc:	2200      	movs	r2, #0
 80037be:	701a      	strb	r2, [r3, #0]
			tim1_2ms_flag = 1;
 80037c0:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <HAL_TIM_PeriodElapsedCallback+0x68>)
 80037c2:	2201      	movs	r2, #1
 80037c4:	701a      	strb	r2, [r3, #0]
		}
		tim1_20ms_count++;
 80037c6:	4b0e      	ldr	r3, [pc, #56]	; (8003800 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	3301      	adds	r3, #1
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80037d0:	701a      	strb	r2, [r3, #0]
		if(tim1_20ms_count == 20)
 80037d2:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b14      	cmp	r3, #20
 80037d8:	d105      	bne.n	80037e6 <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			tim1_20ms_count = 0;
 80037da:	4b09      	ldr	r3, [pc, #36]	; (8003800 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80037dc:	2200      	movs	r2, #0
 80037de:	701a      	strb	r2, [r3, #0]
			tim1_20ms_flag = 1;
 80037e0:	4b08      	ldr	r3, [pc, #32]	; (8003804 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80037e2:	2201      	movs	r2, #1
 80037e4:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40001400 	.word	0x40001400
 80037f8:	2400022d 	.word	0x2400022d
 80037fc:	2400022f 	.word	0x2400022f
 8003800:	2400022e 	.word	0x2400022e
 8003804:	24000230 	.word	0x24000230

08003808 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a07      	ldr	r2, [pc, #28]	; (8003834 <HAL_UART_RxCpltCallback+0x2c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d107      	bne.n	800382a <HAL_UART_RxCpltCallback+0x22>
	{
		uart1_rx_flag = 1;
 800381a:	4b07      	ldr	r3, [pc, #28]	; (8003838 <HAL_UART_RxCpltCallback+0x30>)
 800381c:	2201      	movs	r2, #1
 800381e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 8003820:	2201      	movs	r2, #1
 8003822:	4906      	ldr	r1, [pc, #24]	; (800383c <HAL_UART_RxCpltCallback+0x34>)
 8003824:	4806      	ldr	r0, [pc, #24]	; (8003840 <HAL_UART_RxCpltCallback+0x38>)
 8003826:	f00a f96b 	bl	800db00 <HAL_UART_Receive_IT>
	}
}
 800382a:	bf00      	nop
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40011000 	.word	0x40011000
 8003838:	24000231 	.word	0x24000231
 800383c:	24000232 	.word	0x24000232
 8003840:	240003a0 	.word	0x240003a0

08003844 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
	return 1;
 8003848:	2301      	movs	r3, #1
}
 800384a:	4618      	mov	r0, r3
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <_kill>:

int _kill(int pid, int sig)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800385e:	f00c f979 	bl	800fb54 <__errno>
 8003862:	4603      	mov	r3, r0
 8003864:	2216      	movs	r2, #22
 8003866:	601a      	str	r2, [r3, #0]
	return -1;
 8003868:	f04f 33ff 	mov.w	r3, #4294967295
}
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <_exit>:

void _exit (int status)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800387c:	f04f 31ff 	mov.w	r1, #4294967295
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7ff ffe7 	bl	8003854 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003886:	e7fe      	b.n	8003886 <_exit+0x12>

08003888 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003894:	2300      	movs	r3, #0
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	e00a      	b.n	80038b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800389a:	f3af 8000 	nop.w
 800389e:	4601      	mov	r1, r0
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	60ba      	str	r2, [r7, #8]
 80038a6:	b2ca      	uxtb	r2, r1
 80038a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	3301      	adds	r3, #1
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	dbf0      	blt.n	800389a <_read+0x12>
	}

return len;
 80038b8:	687b      	ldr	r3, [r7, #4]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
	return -1;
 80038ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
 80038e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038ea:	605a      	str	r2, [r3, #4]
	return 0;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <_isatty>:

int _isatty(int file)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
	return 1;
 8003902:	2301      	movs	r3, #1
}
 8003904:	4618      	mov	r0, r3
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
	return 0;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
	...

0800392c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003934:	4a14      	ldr	r2, [pc, #80]	; (8003988 <_sbrk+0x5c>)
 8003936:	4b15      	ldr	r3, [pc, #84]	; (800398c <_sbrk+0x60>)
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003940:	4b13      	ldr	r3, [pc, #76]	; (8003990 <_sbrk+0x64>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d102      	bne.n	800394e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003948:	4b11      	ldr	r3, [pc, #68]	; (8003990 <_sbrk+0x64>)
 800394a:	4a12      	ldr	r2, [pc, #72]	; (8003994 <_sbrk+0x68>)
 800394c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800394e:	4b10      	ldr	r3, [pc, #64]	; (8003990 <_sbrk+0x64>)
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4413      	add	r3, r2
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	429a      	cmp	r2, r3
 800395a:	d207      	bcs.n	800396c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800395c:	f00c f8fa 	bl	800fb54 <__errno>
 8003960:	4603      	mov	r3, r0
 8003962:	220c      	movs	r2, #12
 8003964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003966:	f04f 33ff 	mov.w	r3, #4294967295
 800396a:	e009      	b.n	8003980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800396c:	4b08      	ldr	r3, [pc, #32]	; (8003990 <_sbrk+0x64>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003972:	4b07      	ldr	r3, [pc, #28]	; (8003990 <_sbrk+0x64>)
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4413      	add	r3, r2
 800397a:	4a05      	ldr	r2, [pc, #20]	; (8003990 <_sbrk+0x64>)
 800397c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800397e:	68fb      	ldr	r3, [r7, #12]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	24080000 	.word	0x24080000
 800398c:	00000400 	.word	0x00000400
 8003990:	24000234 	.word	0x24000234
 8003994:	240005c8 	.word	0x240005c8

08003998 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800399c:	4b39      	ldr	r3, [pc, #228]	; (8003a84 <SystemInit+0xec>)
 800399e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a2:	4a38      	ldr	r2, [pc, #224]	; (8003a84 <SystemInit+0xec>)
 80039a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80039ac:	4b36      	ldr	r3, [pc, #216]	; (8003a88 <SystemInit+0xf0>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 030f 	and.w	r3, r3, #15
 80039b4:	2b06      	cmp	r3, #6
 80039b6:	d807      	bhi.n	80039c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80039b8:	4b33      	ldr	r3, [pc, #204]	; (8003a88 <SystemInit+0xf0>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f023 030f 	bic.w	r3, r3, #15
 80039c0:	4a31      	ldr	r2, [pc, #196]	; (8003a88 <SystemInit+0xf0>)
 80039c2:	f043 0307 	orr.w	r3, r3, #7
 80039c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80039c8:	4b30      	ldr	r3, [pc, #192]	; (8003a8c <SystemInit+0xf4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a2f      	ldr	r2, [pc, #188]	; (8003a8c <SystemInit+0xf4>)
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80039d4:	4b2d      	ldr	r3, [pc, #180]	; (8003a8c <SystemInit+0xf4>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80039da:	4b2c      	ldr	r3, [pc, #176]	; (8003a8c <SystemInit+0xf4>)
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	492b      	ldr	r1, [pc, #172]	; (8003a8c <SystemInit+0xf4>)
 80039e0:	4b2b      	ldr	r3, [pc, #172]	; (8003a90 <SystemInit+0xf8>)
 80039e2:	4013      	ands	r3, r2
 80039e4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80039e6:	4b28      	ldr	r3, [pc, #160]	; (8003a88 <SystemInit+0xf0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d007      	beq.n	8003a02 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80039f2:	4b25      	ldr	r3, [pc, #148]	; (8003a88 <SystemInit+0xf0>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f023 030f 	bic.w	r3, r3, #15
 80039fa:	4a23      	ldr	r2, [pc, #140]	; (8003a88 <SystemInit+0xf0>)
 80039fc:	f043 0307 	orr.w	r3, r3, #7
 8003a00:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003a02:	4b22      	ldr	r3, [pc, #136]	; (8003a8c <SystemInit+0xf4>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003a08:	4b20      	ldr	r3, [pc, #128]	; (8003a8c <SystemInit+0xf4>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003a0e:	4b1f      	ldr	r3, [pc, #124]	; (8003a8c <SystemInit+0xf4>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003a14:	4b1d      	ldr	r3, [pc, #116]	; (8003a8c <SystemInit+0xf4>)
 8003a16:	4a1f      	ldr	r2, [pc, #124]	; (8003a94 <SystemInit+0xfc>)
 8003a18:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003a1a:	4b1c      	ldr	r3, [pc, #112]	; (8003a8c <SystemInit+0xf4>)
 8003a1c:	4a1e      	ldr	r2, [pc, #120]	; (8003a98 <SystemInit+0x100>)
 8003a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003a20:	4b1a      	ldr	r3, [pc, #104]	; (8003a8c <SystemInit+0xf4>)
 8003a22:	4a1e      	ldr	r2, [pc, #120]	; (8003a9c <SystemInit+0x104>)
 8003a24:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003a26:	4b19      	ldr	r3, [pc, #100]	; (8003a8c <SystemInit+0xf4>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003a2c:	4b17      	ldr	r3, [pc, #92]	; (8003a8c <SystemInit+0xf4>)
 8003a2e:	4a1b      	ldr	r2, [pc, #108]	; (8003a9c <SystemInit+0x104>)
 8003a30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003a32:	4b16      	ldr	r3, [pc, #88]	; (8003a8c <SystemInit+0xf4>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003a38:	4b14      	ldr	r3, [pc, #80]	; (8003a8c <SystemInit+0xf4>)
 8003a3a:	4a18      	ldr	r2, [pc, #96]	; (8003a9c <SystemInit+0x104>)
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003a3e:	4b13      	ldr	r3, [pc, #76]	; (8003a8c <SystemInit+0xf4>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003a44:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <SystemInit+0xf4>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a10      	ldr	r2, [pc, #64]	; (8003a8c <SystemInit+0xf4>)
 8003a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a4e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003a50:	4b0e      	ldr	r3, [pc, #56]	; (8003a8c <SystemInit+0xf4>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003a56:	4b12      	ldr	r3, [pc, #72]	; (8003aa0 <SystemInit+0x108>)
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	4b12      	ldr	r3, [pc, #72]	; (8003aa4 <SystemInit+0x10c>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a62:	d202      	bcs.n	8003a6a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003a64:	4b10      	ldr	r3, [pc, #64]	; (8003aa8 <SystemInit+0x110>)
 8003a66:	2201      	movs	r2, #1
 8003a68:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003a6a:	4b10      	ldr	r3, [pc, #64]	; (8003aac <SystemInit+0x114>)
 8003a6c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003a70:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a72:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <SystemInit+0xec>)
 8003a74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a78:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003a7a:	bf00      	nop
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	e000ed00 	.word	0xe000ed00
 8003a88:	52002000 	.word	0x52002000
 8003a8c:	58024400 	.word	0x58024400
 8003a90:	eaf6ed7f 	.word	0xeaf6ed7f
 8003a94:	02020200 	.word	0x02020200
 8003a98:	01ff0000 	.word	0x01ff0000
 8003a9c:	01010280 	.word	0x01010280
 8003aa0:	5c001000 	.word	0x5c001000
 8003aa4:	ffff0000 	.word	0xffff0000
 8003aa8:	51008108 	.word	0x51008108
 8003aac:	52004000 	.word	0x52004000

08003ab0 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af02      	add	r7, sp, #8
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8003aba:	f107 020f 	add.w	r2, r7, #15
 8003abe:	1df9      	adds	r1, r7, #7
 8003ac0:	2364      	movs	r3, #100	; 0x64
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	4804      	ldr	r0, [pc, #16]	; (8003ad8 <W25qxx_Spi+0x28>)
 8003ac8:	f009 f8a6 	bl	800cc18 <HAL_SPI_TransmitReceive>
	return ret;
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	240004a8 	.word	0x240004a8

08003adc <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60bb      	str	r3, [r7, #8]
 8003aea:	2300      	movs	r3, #0
 8003aec:	607b      	str	r3, [r7, #4]
 8003aee:	2300      	movs	r3, #0
 8003af0:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003af2:	2200      	movs	r2, #0
 8003af4:	2140      	movs	r1, #64	; 0x40
 8003af6:	4813      	ldr	r0, [pc, #76]	; (8003b44 <W25qxx_ReadID+0x68>)
 8003af8:	f003 fde8 	bl	80076cc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8003afc:	209f      	movs	r0, #159	; 0x9f
 8003afe:	f7ff ffd7 	bl	8003ab0 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003b02:	20a5      	movs	r0, #165	; 0xa5
 8003b04:	f7ff ffd4 	bl	8003ab0 <W25qxx_Spi>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003b0c:	20a5      	movs	r0, #165	; 0xa5
 8003b0e:	f7ff ffcf 	bl	8003ab0 <W25qxx_Spi>
 8003b12:	4603      	mov	r3, r0
 8003b14:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003b16:	20a5      	movs	r0, #165	; 0xa5
 8003b18:	f7ff ffca 	bl	8003ab0 <W25qxx_Spi>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003b20:	2201      	movs	r2, #1
 8003b22:	2140      	movs	r1, #64	; 0x40
 8003b24:	4807      	ldr	r0, [pc, #28]	; (8003b44 <W25qxx_ReadID+0x68>)
 8003b26:	f003 fdd1 	bl	80076cc <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	041a      	lsls	r2, r3, #16
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	021b      	lsls	r3, r3, #8
 8003b32:	4313      	orrs	r3, r2
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]
	return Temp;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	58020400 	.word	0x58020400

08003b48 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8003b48:	b590      	push	{r4, r7, lr}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003b4e:	2200      	movs	r2, #0
 8003b50:	2140      	movs	r1, #64	; 0x40
 8003b52:	4816      	ldr	r0, [pc, #88]	; (8003bac <W25qxx_ReadUniqID+0x64>)
 8003b54:	f003 fdba 	bl	80076cc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8003b58:	204b      	movs	r0, #75	; 0x4b
 8003b5a:	f7ff ffa9 	bl	8003ab0 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003b5e:	2300      	movs	r3, #0
 8003b60:	71fb      	strb	r3, [r7, #7]
 8003b62:	e005      	b.n	8003b70 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003b64:	20a5      	movs	r0, #165	; 0xa5
 8003b66:	f7ff ffa3 	bl	8003ab0 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003b6a:	79fb      	ldrb	r3, [r7, #7]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	71fb      	strb	r3, [r7, #7]
 8003b70:	79fb      	ldrb	r3, [r7, #7]
 8003b72:	2b03      	cmp	r3, #3
 8003b74:	d9f6      	bls.n	8003b64 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8003b76:	2300      	movs	r3, #0
 8003b78:	71bb      	strb	r3, [r7, #6]
 8003b7a:	e00b      	b.n	8003b94 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003b7c:	79bc      	ldrb	r4, [r7, #6]
 8003b7e:	20a5      	movs	r0, #165	; 0xa5
 8003b80:	f7ff ff96 	bl	8003ab0 <W25qxx_Spi>
 8003b84:	4603      	mov	r3, r0
 8003b86:	461a      	mov	r2, r3
 8003b88:	4b09      	ldr	r3, [pc, #36]	; (8003bb0 <W25qxx_ReadUniqID+0x68>)
 8003b8a:	4423      	add	r3, r4
 8003b8c:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8003b8e:	79bb      	ldrb	r3, [r7, #6]
 8003b90:	3301      	adds	r3, #1
 8003b92:	71bb      	strb	r3, [r7, #6]
 8003b94:	79bb      	ldrb	r3, [r7, #6]
 8003b96:	2b07      	cmp	r3, #7
 8003b98:	d9f0      	bls.n	8003b7c <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	2140      	movs	r1, #64	; 0x40
 8003b9e:	4803      	ldr	r0, [pc, #12]	; (8003bac <W25qxx_ReadUniqID+0x64>)
 8003ba0:	f003 fd94 	bl	80076cc <HAL_GPIO_WritePin>
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd90      	pop	{r4, r7, pc}
 8003bac:	58020400 	.word	0x58020400
 8003bb0:	24000588 	.word	0x24000588

08003bb4 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003bb8:	2200      	movs	r2, #0
 8003bba:	2140      	movs	r1, #64	; 0x40
 8003bbc:	4807      	ldr	r0, [pc, #28]	; (8003bdc <W25qxx_WriteEnable+0x28>)
 8003bbe:	f003 fd85 	bl	80076cc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8003bc2:	2006      	movs	r0, #6
 8003bc4:	f7ff ff74 	bl	8003ab0 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003bc8:	2201      	movs	r2, #1
 8003bca:	2140      	movs	r1, #64	; 0x40
 8003bcc:	4803      	ldr	r0, [pc, #12]	; (8003bdc <W25qxx_WriteEnable+0x28>)
 8003bce:	f003 fd7d 	bl	80076cc <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8003bd2:	2001      	movs	r0, #1
 8003bd4:	f000 fc36 	bl	8004444 <HAL_Delay>
}
 8003bd8:	bf00      	nop
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	58020400 	.word	0x58020400

08003be0 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	4603      	mov	r3, r0
 8003be8:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003bee:	2200      	movs	r2, #0
 8003bf0:	2140      	movs	r1, #64	; 0x40
 8003bf2:	481c      	ldr	r0, [pc, #112]	; (8003c64 <W25qxx_ReadStatusRegister+0x84>)
 8003bf4:	f003 fd6a 	bl	80076cc <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8003bf8:	79fb      	ldrb	r3, [r7, #7]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d10c      	bne.n	8003c18 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8003bfe:	2005      	movs	r0, #5
 8003c00:	f7ff ff56 	bl	8003ab0 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003c04:	20a5      	movs	r0, #165	; 0xa5
 8003c06:	f7ff ff53 	bl	8003ab0 <W25qxx_Spi>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8003c0e:	4a16      	ldr	r2, [pc, #88]	; (8003c68 <W25qxx_ReadStatusRegister+0x88>)
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8003c16:	e01b      	b.n	8003c50 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8003c18:	79fb      	ldrb	r3, [r7, #7]
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d10c      	bne.n	8003c38 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8003c1e:	2035      	movs	r0, #53	; 0x35
 8003c20:	f7ff ff46 	bl	8003ab0 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003c24:	20a5      	movs	r0, #165	; 0xa5
 8003c26:	f7ff ff43 	bl	8003ab0 <W25qxx_Spi>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8003c2e:	4a0e      	ldr	r2, [pc, #56]	; (8003c68 <W25qxx_ReadStatusRegister+0x88>)
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
 8003c32:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8003c36:	e00b      	b.n	8003c50 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8003c38:	2015      	movs	r0, #21
 8003c3a:	f7ff ff39 	bl	8003ab0 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003c3e:	20a5      	movs	r0, #165	; 0xa5
 8003c40:	f7ff ff36 	bl	8003ab0 <W25qxx_Spi>
 8003c44:	4603      	mov	r3, r0
 8003c46:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8003c48:	4a07      	ldr	r2, [pc, #28]	; (8003c68 <W25qxx_ReadStatusRegister+0x88>)
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
 8003c4c:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003c50:	2201      	movs	r2, #1
 8003c52:	2140      	movs	r1, #64	; 0x40
 8003c54:	4803      	ldr	r0, [pc, #12]	; (8003c64 <W25qxx_ReadStatusRegister+0x84>)
 8003c56:	f003 fd39 	bl	80076cc <HAL_GPIO_WritePin>
	return status;
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	58020400 	.word	0x58020400
 8003c68:	24000588 	.word	0x24000588

08003c6c <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8003c70:	2001      	movs	r0, #1
 8003c72:	f000 fbe7 	bl	8004444 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003c76:	2200      	movs	r2, #0
 8003c78:	2140      	movs	r1, #64	; 0x40
 8003c7a:	480f      	ldr	r0, [pc, #60]	; (8003cb8 <W25qxx_WaitForWriteEnd+0x4c>)
 8003c7c:	f003 fd26 	bl	80076cc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8003c80:	2005      	movs	r0, #5
 8003c82:	f7ff ff15 	bl	8003ab0 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003c86:	20a5      	movs	r0, #165	; 0xa5
 8003c88:	f7ff ff12 	bl	8003ab0 <W25qxx_Spi>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	461a      	mov	r2, r3
 8003c90:	4b0a      	ldr	r3, [pc, #40]	; (8003cbc <W25qxx_WaitForWriteEnd+0x50>)
 8003c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8003c96:	2001      	movs	r0, #1
 8003c98:	f000 fbd4 	bl	8004444 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8003c9c:	4b07      	ldr	r3, [pc, #28]	; (8003cbc <W25qxx_WaitForWriteEnd+0x50>)
 8003c9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1ed      	bne.n	8003c86 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003caa:	2201      	movs	r2, #1
 8003cac:	2140      	movs	r1, #64	; 0x40
 8003cae:	4802      	ldr	r0, [pc, #8]	; (8003cb8 <W25qxx_WaitForWriteEnd+0x4c>)
 8003cb0:	f003 fd0c 	bl	80076cc <HAL_GPIO_WritePin>
}
 8003cb4:	bf00      	nop
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	58020400 	.word	0x58020400
 8003cbc:	24000588 	.word	0x24000588

08003cc0 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8003cc6:	4b65      	ldr	r3, [pc, #404]	; (8003e5c <W25qxx_Init+0x19c>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8003cce:	e002      	b.n	8003cd6 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8003cd0:	2001      	movs	r0, #1
 8003cd2:	f000 fbb7 	bl	8004444 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8003cd6:	f000 fba9 	bl	800442c <HAL_GetTick>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b63      	cmp	r3, #99	; 0x63
 8003cde:	d9f7      	bls.n	8003cd0 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	2140      	movs	r1, #64	; 0x40
 8003ce4:	485e      	ldr	r0, [pc, #376]	; (8003e60 <W25qxx_Init+0x1a0>)
 8003ce6:	f003 fcf1 	bl	80076cc <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8003cea:	2064      	movs	r0, #100	; 0x64
 8003cec:	f000 fbaa 	bl	8004444 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8003cf0:	f7ff fef4 	bl	8003adc <W25qxx_ReadID>
 8003cf4:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	3b11      	subs	r3, #17
 8003cfc:	2b0f      	cmp	r3, #15
 8003cfe:	d86c      	bhi.n	8003dda <W25qxx_Init+0x11a>
 8003d00:	a201      	add	r2, pc, #4	; (adr r2, 8003d08 <W25qxx_Init+0x48>)
 8003d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d06:	bf00      	nop
 8003d08:	08003dcd 	.word	0x08003dcd
 8003d0c:	08003dbf 	.word	0x08003dbf
 8003d10:	08003db1 	.word	0x08003db1
 8003d14:	08003da3 	.word	0x08003da3
 8003d18:	08003d95 	.word	0x08003d95
 8003d1c:	08003d87 	.word	0x08003d87
 8003d20:	08003d79 	.word	0x08003d79
 8003d24:	08003d69 	.word	0x08003d69
 8003d28:	08003d59 	.word	0x08003d59
 8003d2c:	08003ddb 	.word	0x08003ddb
 8003d30:	08003ddb 	.word	0x08003ddb
 8003d34:	08003ddb 	.word	0x08003ddb
 8003d38:	08003ddb 	.word	0x08003ddb
 8003d3c:	08003ddb 	.word	0x08003ddb
 8003d40:	08003ddb 	.word	0x08003ddb
 8003d44:	08003d49 	.word	0x08003d49
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8003d48:	4b44      	ldr	r3, [pc, #272]	; (8003e5c <W25qxx_Init+0x19c>)
 8003d4a:	220a      	movs	r2, #10
 8003d4c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8003d4e:	4b43      	ldr	r3, [pc, #268]	; (8003e5c <W25qxx_Init+0x19c>)
 8003d50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d54:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8003d56:	e046      	b.n	8003de6 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8003d58:	4b40      	ldr	r3, [pc, #256]	; (8003e5c <W25qxx_Init+0x19c>)
 8003d5a:	2209      	movs	r2, #9
 8003d5c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8003d5e:	4b3f      	ldr	r3, [pc, #252]	; (8003e5c <W25qxx_Init+0x19c>)
 8003d60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d64:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8003d66:	e03e      	b.n	8003de6 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8003d68:	4b3c      	ldr	r3, [pc, #240]	; (8003e5c <W25qxx_Init+0x19c>)
 8003d6a:	2208      	movs	r2, #8
 8003d6c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8003d6e:	4b3b      	ldr	r3, [pc, #236]	; (8003e5c <W25qxx_Init+0x19c>)
 8003d70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d74:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8003d76:	e036      	b.n	8003de6 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8003d78:	4b38      	ldr	r3, [pc, #224]	; (8003e5c <W25qxx_Init+0x19c>)
 8003d7a:	2207      	movs	r2, #7
 8003d7c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8003d7e:	4b37      	ldr	r3, [pc, #220]	; (8003e5c <W25qxx_Init+0x19c>)
 8003d80:	2280      	movs	r2, #128	; 0x80
 8003d82:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8003d84:	e02f      	b.n	8003de6 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8003d86:	4b35      	ldr	r3, [pc, #212]	; (8003e5c <W25qxx_Init+0x19c>)
 8003d88:	2206      	movs	r2, #6
 8003d8a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8003d8c:	4b33      	ldr	r3, [pc, #204]	; (8003e5c <W25qxx_Init+0x19c>)
 8003d8e:	2240      	movs	r2, #64	; 0x40
 8003d90:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8003d92:	e028      	b.n	8003de6 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8003d94:	4b31      	ldr	r3, [pc, #196]	; (8003e5c <W25qxx_Init+0x19c>)
 8003d96:	2205      	movs	r2, #5
 8003d98:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8003d9a:	4b30      	ldr	r3, [pc, #192]	; (8003e5c <W25qxx_Init+0x19c>)
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8003da0:	e021      	b.n	8003de6 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8003da2:	4b2e      	ldr	r3, [pc, #184]	; (8003e5c <W25qxx_Init+0x19c>)
 8003da4:	2204      	movs	r2, #4
 8003da6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8003da8:	4b2c      	ldr	r3, [pc, #176]	; (8003e5c <W25qxx_Init+0x19c>)
 8003daa:	2210      	movs	r2, #16
 8003dac:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8003dae:	e01a      	b.n	8003de6 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8003db0:	4b2a      	ldr	r3, [pc, #168]	; (8003e5c <W25qxx_Init+0x19c>)
 8003db2:	2203      	movs	r2, #3
 8003db4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8003db6:	4b29      	ldr	r3, [pc, #164]	; (8003e5c <W25qxx_Init+0x19c>)
 8003db8:	2208      	movs	r2, #8
 8003dba:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8003dbc:	e013      	b.n	8003de6 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8003dbe:	4b27      	ldr	r3, [pc, #156]	; (8003e5c <W25qxx_Init+0x19c>)
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8003dc4:	4b25      	ldr	r3, [pc, #148]	; (8003e5c <W25qxx_Init+0x19c>)
 8003dc6:	2204      	movs	r2, #4
 8003dc8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8003dca:	e00c      	b.n	8003de6 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8003dcc:	4b23      	ldr	r3, [pc, #140]	; (8003e5c <W25qxx_Init+0x19c>)
 8003dce:	2201      	movs	r2, #1
 8003dd0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8003dd2:	4b22      	ldr	r3, [pc, #136]	; (8003e5c <W25qxx_Init+0x19c>)
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8003dd8:	e005      	b.n	8003de6 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8003dda:	4b20      	ldr	r3, [pc, #128]	; (8003e5c <W25qxx_Init+0x19c>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8003de2:	2300      	movs	r3, #0
 8003de4:	e036      	b.n	8003e54 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8003de6:	4b1d      	ldr	r3, [pc, #116]	; (8003e5c <W25qxx_Init+0x19c>)
 8003de8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dec:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8003dee:	4b1b      	ldr	r3, [pc, #108]	; (8003e5c <W25qxx_Init+0x19c>)
 8003df0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003df4:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8003df6:	4b19      	ldr	r3, [pc, #100]	; (8003e5c <W25qxx_Init+0x19c>)
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	4a17      	ldr	r2, [pc, #92]	; (8003e5c <W25qxx_Init+0x19c>)
 8003dfe:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8003e00:	4b16      	ldr	r3, [pc, #88]	; (8003e5c <W25qxx_Init+0x19c>)
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	4a15      	ldr	r2, [pc, #84]	; (8003e5c <W25qxx_Init+0x19c>)
 8003e06:	6912      	ldr	r2, [r2, #16]
 8003e08:	fb02 f303 	mul.w	r3, r2, r3
 8003e0c:	4a13      	ldr	r2, [pc, #76]	; (8003e5c <W25qxx_Init+0x19c>)
 8003e0e:	8952      	ldrh	r2, [r2, #10]
 8003e10:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e14:	4a11      	ldr	r2, [pc, #68]	; (8003e5c <W25qxx_Init+0x19c>)
 8003e16:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8003e18:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <W25qxx_Init+0x19c>)
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	4a0f      	ldr	r2, [pc, #60]	; (8003e5c <W25qxx_Init+0x19c>)
 8003e20:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8003e22:	4b0e      	ldr	r3, [pc, #56]	; (8003e5c <W25qxx_Init+0x19c>)
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	4a0d      	ldr	r2, [pc, #52]	; (8003e5c <W25qxx_Init+0x19c>)
 8003e28:	6912      	ldr	r2, [r2, #16]
 8003e2a:	fb02 f303 	mul.w	r3, r2, r3
 8003e2e:	0a9b      	lsrs	r3, r3, #10
 8003e30:	4a0a      	ldr	r2, [pc, #40]	; (8003e5c <W25qxx_Init+0x19c>)
 8003e32:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8003e34:	f7ff fe88 	bl	8003b48 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8003e38:	2001      	movs	r0, #1
 8003e3a:	f7ff fed1 	bl	8003be0 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8003e3e:	2002      	movs	r0, #2
 8003e40:	f7ff fece 	bl	8003be0 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8003e44:	2003      	movs	r0, #3
 8003e46:	f7ff fecb 	bl	8003be0 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8003e4a:	4b04      	ldr	r3, [pc, #16]	; (8003e5c <W25qxx_Init+0x19c>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8003e52:	2301      	movs	r3, #1
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	24000588 	.word	0x24000588
 8003e60:	58020400 	.word	0x58020400

08003e64 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8003e6c:	e002      	b.n	8003e74 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8003e6e:	2001      	movs	r0, #1
 8003e70:	f000 fae8 	bl	8004444 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8003e74:	4b25      	ldr	r3, [pc, #148]	; (8003f0c <W25qxx_EraseSector+0xa8>)
 8003e76:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d0f7      	beq.n	8003e6e <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8003e7e:	4b23      	ldr	r3, [pc, #140]	; (8003f0c <W25qxx_EraseSector+0xa8>)
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 8003e86:	f7ff fef1 	bl	8003c6c <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8003e8a:	4b20      	ldr	r3, [pc, #128]	; (8003f0c <W25qxx_EraseSector+0xa8>)
 8003e8c:	691a      	ldr	r2, [r3, #16]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	fb02 f303 	mul.w	r3, r2, r3
 8003e94:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8003e96:	f7ff fe8d 	bl	8003bb4 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	2140      	movs	r1, #64	; 0x40
 8003e9e:	481c      	ldr	r0, [pc, #112]	; (8003f10 <W25qxx_EraseSector+0xac>)
 8003ea0:	f003 fc14 	bl	80076cc <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8003ea4:	4b19      	ldr	r3, [pc, #100]	; (8003f0c <W25qxx_EraseSector+0xa8>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d909      	bls.n	8003ec0 <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 8003eac:	2021      	movs	r0, #33	; 0x21
 8003eae:	f7ff fdff 	bl	8003ab0 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	0e1b      	lsrs	r3, r3, #24
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff fdf9 	bl	8003ab0 <W25qxx_Spi>
 8003ebe:	e002      	b.n	8003ec6 <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 8003ec0:	2020      	movs	r0, #32
 8003ec2:	f7ff fdf5 	bl	8003ab0 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	0c1b      	lsrs	r3, r3, #16
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff fdef 	bl	8003ab0 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	0a1b      	lsrs	r3, r3, #8
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff fde9 	bl	8003ab0 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff fde4 	bl	8003ab0 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003ee8:	2201      	movs	r2, #1
 8003eea:	2140      	movs	r1, #64	; 0x40
 8003eec:	4808      	ldr	r0, [pc, #32]	; (8003f10 <W25qxx_EraseSector+0xac>)
 8003eee:	f003 fbed 	bl	80076cc <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8003ef2:	f7ff febb 	bl	8003c6c <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 8003ef6:	2001      	movs	r0, #1
 8003ef8:	f000 faa4 	bl	8004444 <HAL_Delay>
	w25qxx.Lock = 0;
 8003efc:	4b03      	ldr	r3, [pc, #12]	; (8003f0c <W25qxx_EraseSector+0xa8>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003f04:	bf00      	nop
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	24000588 	.word	0x24000588
 8003f10:	58020400 	.word	0x58020400

08003f14 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8003f1c:	4b07      	ldr	r3, [pc, #28]	; (8003f3c <W25qxx_SectorToPage+0x28>)
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	fb02 f303 	mul.w	r3, r2, r3
 8003f26:	4a05      	ldr	r2, [pc, #20]	; (8003f3c <W25qxx_SectorToPage+0x28>)
 8003f28:	8952      	ldrh	r2, [r2, #10]
 8003f2a:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	24000588 	.word	0x24000588

08003f40 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
 8003f4c:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8003f4e:	e002      	b.n	8003f56 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8003f50:	2001      	movs	r0, #1
 8003f52:	f000 fa77 	bl	8004444 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8003f56:	4b39      	ldr	r3, [pc, #228]	; (800403c <W25qxx_WritePage+0xfc>)
 8003f58:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d0f7      	beq.n	8003f50 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8003f60:	4b36      	ldr	r3, [pc, #216]	; (800403c <W25qxx_WritePage+0xfc>)
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	4a33      	ldr	r2, [pc, #204]	; (800403c <W25qxx_WritePage+0xfc>)
 8003f70:	8952      	ldrh	r2, [r2, #10]
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d802      	bhi.n	8003f7c <W25qxx_WritePage+0x3c>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d105      	bne.n	8003f88 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003f7c:	4b2f      	ldr	r3, [pc, #188]	; (800403c <W25qxx_WritePage+0xfc>)
 8003f7e:	895b      	ldrh	r3, [r3, #10]
 8003f80:	461a      	mov	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	4a2b      	ldr	r2, [pc, #172]	; (800403c <W25qxx_WritePage+0xfc>)
 8003f90:	8952      	ldrh	r2, [r2, #10]
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d905      	bls.n	8003fa2 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003f96:	4b29      	ldr	r3, [pc, #164]	; (800403c <W25qxx_WritePage+0xfc>)
 8003f98:	895b      	ldrh	r3, [r3, #10]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8003fa2:	f7ff fe63 	bl	8003c6c <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8003fa6:	f7ff fe05 	bl	8003bb4 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003faa:	2200      	movs	r2, #0
 8003fac:	2140      	movs	r1, #64	; 0x40
 8003fae:	4824      	ldr	r0, [pc, #144]	; (8004040 <W25qxx_WritePage+0x100>)
 8003fb0:	f003 fb8c 	bl	80076cc <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8003fb4:	4b21      	ldr	r3, [pc, #132]	; (800403c <W25qxx_WritePage+0xfc>)
 8003fb6:	895b      	ldrh	r3, [r3, #10]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	fb03 f302 	mul.w	r3, r3, r2
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8003fc6:	4b1d      	ldr	r3, [pc, #116]	; (800403c <W25qxx_WritePage+0xfc>)
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d909      	bls.n	8003fe2 <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 8003fce:	2012      	movs	r0, #18
 8003fd0:	f7ff fd6e 	bl	8003ab0 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	0e1b      	lsrs	r3, r3, #24
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff fd68 	bl	8003ab0 <W25qxx_Spi>
 8003fe0:	e002      	b.n	8003fe8 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 8003fe2:	2002      	movs	r0, #2
 8003fe4:	f7ff fd64 	bl	8003ab0 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	0c1b      	lsrs	r3, r3, #16
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7ff fd5e 	bl	8003ab0 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	0a1b      	lsrs	r3, r3, #8
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff fd58 	bl	8003ab0 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	b2db      	uxtb	r3, r3
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff fd53 	bl	8003ab0 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	b29a      	uxth	r2, r3
 800400e:	2364      	movs	r3, #100	; 0x64
 8004010:	68f9      	ldr	r1, [r7, #12]
 8004012:	480c      	ldr	r0, [pc, #48]	; (8004044 <W25qxx_WritePage+0x104>)
 8004014:	f008 fa1c 	bl	800c450 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004018:	2201      	movs	r2, #1
 800401a:	2140      	movs	r1, #64	; 0x40
 800401c:	4808      	ldr	r0, [pc, #32]	; (8004040 <W25qxx_WritePage+0x100>)
 800401e:	f003 fb55 	bl	80076cc <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004022:	f7ff fe23 	bl	8003c6c <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8004026:	2001      	movs	r0, #1
 8004028:	f000 fa0c 	bl	8004444 <HAL_Delay>
	w25qxx.Lock = 0;
 800402c:	4b03      	ldr	r3, [pc, #12]	; (800403c <W25qxx_WritePage+0xfc>)
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004034:	bf00      	nop
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	24000588 	.word	0x24000588
 8004040:	58020400 	.word	0x58020400
 8004044:	240004a8 	.word	0x240004a8

08004048 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8004056:	4b2c      	ldr	r3, [pc, #176]	; (8004108 <W25qxx_WriteSector+0xc0>)
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d802      	bhi.n	8004066 <W25qxx_WriteSector+0x1e>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d102      	bne.n	800406c <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8004066:	4b28      	ldr	r3, [pc, #160]	; (8004108 <W25qxx_WriteSector+0xc0>)
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 800406c:	4b26      	ldr	r3, [pc, #152]	; (8004108 <W25qxx_WriteSector+0xc0>)
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	429a      	cmp	r2, r3
 8004074:	d243      	bcs.n	80040fe <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	441a      	add	r2, r3
 800407c:	4b22      	ldr	r3, [pc, #136]	; (8004108 <W25qxx_WriteSector+0xc0>)
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	429a      	cmp	r2, r3
 8004082:	d905      	bls.n	8004090 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8004084:	4b20      	ldr	r3, [pc, #128]	; (8004108 <W25qxx_WriteSector+0xc0>)
 8004086:	691a      	ldr	r2, [r3, #16]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	61bb      	str	r3, [r7, #24]
 800408e:	e001      	b.n	8004094 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004094:	68b8      	ldr	r0, [r7, #8]
 8004096:	f7ff ff3d 	bl	8003f14 <W25qxx_SectorToPage>
 800409a:	4602      	mov	r2, r0
 800409c:	4b1a      	ldr	r3, [pc, #104]	; (8004108 <W25qxx_WriteSector+0xc0>)
 800409e:	895b      	ldrh	r3, [r3, #10]
 80040a0:	4619      	mov	r1, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80040a8:	4413      	add	r3, r2
 80040aa:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80040ac:	4b16      	ldr	r3, [pc, #88]	; (8004108 <W25qxx_WriteSector+0xc0>)
 80040ae:	895b      	ldrh	r3, [r3, #10]
 80040b0:	461a      	mov	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80040b8:	fb02 f201 	mul.w	r2, r2, r1
 80040bc:	1a9b      	subs	r3, r3, r2
 80040be:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	69f9      	ldr	r1, [r7, #28]
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f7ff ff3a 	bl	8003f40 <W25qxx_WritePage>
		StartPage++;
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	3301      	adds	r3, #1
 80040d0:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80040d2:	4b0d      	ldr	r3, [pc, #52]	; (8004108 <W25qxx_WriteSector+0xc0>)
 80040d4:	895b      	ldrh	r3, [r3, #10]
 80040d6:	461a      	mov	r2, r3
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	1a9a      	subs	r2, r3, r2
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	4413      	add	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80040e2:	4b09      	ldr	r3, [pc, #36]	; (8004108 <W25qxx_WriteSector+0xc0>)
 80040e4:	895b      	ldrh	r3, [r3, #10]
 80040e6:	461a      	mov	r2, r3
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	4413      	add	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80040f2:	2300      	movs	r3, #0
 80040f4:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	dce1      	bgt.n	80040c0 <W25qxx_WriteSector+0x78>
 80040fc:	e000      	b.n	8004100 <W25qxx_WriteSector+0xb8>
		return;
 80040fe:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8004100:	3720      	adds	r7, #32
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	24000588 	.word	0x24000588

0800410c <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
 8004118:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800411a:	e002      	b.n	8004122 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 800411c:	2001      	movs	r0, #1
 800411e:	f000 f991 	bl	8004444 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004122:	4b36      	ldr	r3, [pc, #216]	; (80041fc <W25qxx_ReadPage+0xf0>)
 8004124:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004128:	2b01      	cmp	r3, #1
 800412a:	d0f7      	beq.n	800411c <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 800412c:	4b33      	ldr	r3, [pc, #204]	; (80041fc <W25qxx_ReadPage+0xf0>)
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8004134:	4b31      	ldr	r3, [pc, #196]	; (80041fc <W25qxx_ReadPage+0xf0>)
 8004136:	895b      	ldrh	r3, [r3, #10]
 8004138:	461a      	mov	r2, r3
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	4293      	cmp	r3, r2
 800413e:	d802      	bhi.n	8004146 <W25qxx_ReadPage+0x3a>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d102      	bne.n	800414c <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8004146:	4b2d      	ldr	r3, [pc, #180]	; (80041fc <W25qxx_ReadPage+0xf0>)
 8004148:	895b      	ldrh	r3, [r3, #10]
 800414a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	4413      	add	r3, r2
 8004152:	4a2a      	ldr	r2, [pc, #168]	; (80041fc <W25qxx_ReadPage+0xf0>)
 8004154:	8952      	ldrh	r2, [r2, #10]
 8004156:	4293      	cmp	r3, r2
 8004158:	d905      	bls.n	8004166 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800415a:	4b28      	ldr	r3, [pc, #160]	; (80041fc <W25qxx_ReadPage+0xf0>)
 800415c:	895b      	ldrh	r3, [r3, #10]
 800415e:	461a      	mov	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8004166:	4b25      	ldr	r3, [pc, #148]	; (80041fc <W25qxx_ReadPage+0xf0>)
 8004168:	895b      	ldrh	r3, [r3, #10]
 800416a:	461a      	mov	r2, r3
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	fb03 f302 	mul.w	r3, r3, r2
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	4413      	add	r3, r2
 8004176:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004178:	2200      	movs	r2, #0
 800417a:	2140      	movs	r1, #64	; 0x40
 800417c:	4820      	ldr	r0, [pc, #128]	; (8004200 <W25qxx_ReadPage+0xf4>)
 800417e:	f003 faa5 	bl	80076cc <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004182:	4b1e      	ldr	r3, [pc, #120]	; (80041fc <W25qxx_ReadPage+0xf0>)
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	2b08      	cmp	r3, #8
 8004188:	d909      	bls.n	800419e <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 800418a:	200c      	movs	r0, #12
 800418c:	f7ff fc90 	bl	8003ab0 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	0e1b      	lsrs	r3, r3, #24
 8004194:	b2db      	uxtb	r3, r3
 8004196:	4618      	mov	r0, r3
 8004198:	f7ff fc8a 	bl	8003ab0 <W25qxx_Spi>
 800419c:	e002      	b.n	80041a4 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 800419e:	200b      	movs	r0, #11
 80041a0:	f7ff fc86 	bl	8003ab0 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	0c1b      	lsrs	r3, r3, #16
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff fc80 	bl	8003ab0 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	0a1b      	lsrs	r3, r3, #8
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff fc7a 	bl	8003ab0 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff fc75 	bl	8003ab0 <W25qxx_Spi>
	W25qxx_Spi(0);
 80041c6:	2000      	movs	r0, #0
 80041c8:	f7ff fc72 	bl	8003ab0 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	2364      	movs	r3, #100	; 0x64
 80041d2:	68f9      	ldr	r1, [r7, #12]
 80041d4:	480b      	ldr	r0, [pc, #44]	; (8004204 <W25qxx_ReadPage+0xf8>)
 80041d6:	f008 fb2d 	bl	800c834 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80041da:	2201      	movs	r2, #1
 80041dc:	2140      	movs	r1, #64	; 0x40
 80041de:	4808      	ldr	r0, [pc, #32]	; (8004200 <W25qxx_ReadPage+0xf4>)
 80041e0:	f003 fa74 	bl	80076cc <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80041e4:	2001      	movs	r0, #1
 80041e6:	f000 f92d 	bl	8004444 <HAL_Delay>
	w25qxx.Lock = 0;
 80041ea:	4b04      	ldr	r3, [pc, #16]	; (80041fc <W25qxx_ReadPage+0xf0>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80041f2:	bf00      	nop
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	24000588 	.word	0x24000588
 8004200:	58020400 	.word	0x58020400
 8004204:	240004a8 	.word	0x240004a8

08004208 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b088      	sub	sp, #32
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8004216:	4b2c      	ldr	r3, [pc, #176]	; (80042c8 <W25qxx_ReadSector+0xc0>)
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	429a      	cmp	r2, r3
 800421e:	d802      	bhi.n	8004226 <W25qxx_ReadSector+0x1e>
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d102      	bne.n	800422c <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8004226:	4b28      	ldr	r3, [pc, #160]	; (80042c8 <W25qxx_ReadSector+0xc0>)
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 800422c:	4b26      	ldr	r3, [pc, #152]	; (80042c8 <W25qxx_ReadSector+0xc0>)
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	429a      	cmp	r2, r3
 8004234:	d243      	bcs.n	80042be <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	441a      	add	r2, r3
 800423c:	4b22      	ldr	r3, [pc, #136]	; (80042c8 <W25qxx_ReadSector+0xc0>)
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	429a      	cmp	r2, r3
 8004242:	d905      	bls.n	8004250 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8004244:	4b20      	ldr	r3, [pc, #128]	; (80042c8 <W25qxx_ReadSector+0xc0>)
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	61bb      	str	r3, [r7, #24]
 800424e:	e001      	b.n	8004254 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004254:	68b8      	ldr	r0, [r7, #8]
 8004256:	f7ff fe5d 	bl	8003f14 <W25qxx_SectorToPage>
 800425a:	4602      	mov	r2, r0
 800425c:	4b1a      	ldr	r3, [pc, #104]	; (80042c8 <W25qxx_ReadSector+0xc0>)
 800425e:	895b      	ldrh	r3, [r3, #10]
 8004260:	4619      	mov	r1, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	fbb3 f3f1 	udiv	r3, r3, r1
 8004268:	4413      	add	r3, r2
 800426a:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 800426c:	4b16      	ldr	r3, [pc, #88]	; (80042c8 <W25qxx_ReadSector+0xc0>)
 800426e:	895b      	ldrh	r3, [r3, #10]
 8004270:	461a      	mov	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	fbb3 f1f2 	udiv	r1, r3, r2
 8004278:	fb02 f201 	mul.w	r2, r2, r1
 800427c:	1a9b      	subs	r3, r3, r2
 800427e:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	69f9      	ldr	r1, [r7, #28]
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f7ff ff40 	bl	800410c <W25qxx_ReadPage>
		StartPage++;
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	3301      	adds	r3, #1
 8004290:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8004292:	4b0d      	ldr	r3, [pc, #52]	; (80042c8 <W25qxx_ReadSector+0xc0>)
 8004294:	895b      	ldrh	r3, [r3, #10]
 8004296:	461a      	mov	r2, r3
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	1a9a      	subs	r2, r3, r2
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	4413      	add	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80042a2:	4b09      	ldr	r3, [pc, #36]	; (80042c8 <W25qxx_ReadSector+0xc0>)
 80042a4:	895b      	ldrh	r3, [r3, #10]
 80042a6:	461a      	mov	r2, r3
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	4413      	add	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80042b2:	2300      	movs	r3, #0
 80042b4:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	dce1      	bgt.n	8004280 <W25qxx_ReadSector+0x78>
 80042bc:	e000      	b.n	80042c0 <W25qxx_ReadSector+0xb8>
		return;
 80042be:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 80042c0:	3720      	adds	r7, #32
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	24000588 	.word	0x24000588

080042cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80042cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004304 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80042d0:	f7ff fb62 	bl	8003998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042d4:	480c      	ldr	r0, [pc, #48]	; (8004308 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80042d6:	490d      	ldr	r1, [pc, #52]	; (800430c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80042d8:	4a0d      	ldr	r2, [pc, #52]	; (8004310 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80042da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042dc:	e002      	b.n	80042e4 <LoopCopyDataInit>

080042de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042e2:	3304      	adds	r3, #4

080042e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042e8:	d3f9      	bcc.n	80042de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042ea:	4a0a      	ldr	r2, [pc, #40]	; (8004314 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80042ec:	4c0a      	ldr	r4, [pc, #40]	; (8004318 <LoopFillZerobss+0x22>)
  movs r3, #0
 80042ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042f0:	e001      	b.n	80042f6 <LoopFillZerobss>

080042f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042f4:	3204      	adds	r2, #4

080042f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042f8:	d3fb      	bcc.n	80042f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80042fa:	f00b fc31 	bl	800fb60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042fe:	f7fe fb97 	bl	8002a30 <main>
  bx  lr
 8004302:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004304:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004308:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800430c:	240001f8 	.word	0x240001f8
  ldr r2, =_sidata
 8004310:	080133d8 	.word	0x080133d8
  ldr r2, =_sbss
 8004314:	240001f8 	.word	0x240001f8
  ldr r4, =_ebss
 8004318:	240005c4 	.word	0x240005c4

0800431c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800431c:	e7fe      	b.n	800431c <ADC3_IRQHandler>
	...

08004320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004326:	2003      	movs	r0, #3
 8004328:	f000 f98c 	bl	8004644 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800432c:	f006 fa56 	bl	800a7dc <HAL_RCC_GetSysClockFreq>
 8004330:	4602      	mov	r2, r0
 8004332:	4b15      	ldr	r3, [pc, #84]	; (8004388 <HAL_Init+0x68>)
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	0a1b      	lsrs	r3, r3, #8
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	4913      	ldr	r1, [pc, #76]	; (800438c <HAL_Init+0x6c>)
 800433e:	5ccb      	ldrb	r3, [r1, r3]
 8004340:	f003 031f 	and.w	r3, r3, #31
 8004344:	fa22 f303 	lsr.w	r3, r2, r3
 8004348:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800434a:	4b0f      	ldr	r3, [pc, #60]	; (8004388 <HAL_Init+0x68>)
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	f003 030f 	and.w	r3, r3, #15
 8004352:	4a0e      	ldr	r2, [pc, #56]	; (800438c <HAL_Init+0x6c>)
 8004354:	5cd3      	ldrb	r3, [r2, r3]
 8004356:	f003 031f 	and.w	r3, r3, #31
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	fa22 f303 	lsr.w	r3, r2, r3
 8004360:	4a0b      	ldr	r2, [pc, #44]	; (8004390 <HAL_Init+0x70>)
 8004362:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004364:	4a0b      	ldr	r2, [pc, #44]	; (8004394 <HAL_Init+0x74>)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800436a:	200f      	movs	r0, #15
 800436c:	f000 f814 	bl	8004398 <HAL_InitTick>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e002      	b.n	8004380 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800437a:	f7fe ffcb 	bl	8003314 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	58024400 	.word	0x58024400
 800438c:	08012ef8 	.word	0x08012ef8
 8004390:	24000018 	.word	0x24000018
 8004394:	24000014 	.word	0x24000014

08004398 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80043a0:	4b15      	ldr	r3, [pc, #84]	; (80043f8 <HAL_InitTick+0x60>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e021      	b.n	80043f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80043ac:	4b13      	ldr	r3, [pc, #76]	; (80043fc <HAL_InitTick+0x64>)
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	4b11      	ldr	r3, [pc, #68]	; (80043f8 <HAL_InitTick+0x60>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	4619      	mov	r1, r3
 80043b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80043be:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 f971 	bl	80046aa <HAL_SYSTICK_Config>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e00e      	b.n	80043f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b0f      	cmp	r3, #15
 80043d6:	d80a      	bhi.n	80043ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043d8:	2200      	movs	r2, #0
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	f04f 30ff 	mov.w	r0, #4294967295
 80043e0:	f000 f93b 	bl	800465a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043e4:	4a06      	ldr	r2, [pc, #24]	; (8004400 <HAL_InitTick+0x68>)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	e000      	b.n	80043f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	24000020 	.word	0x24000020
 80043fc:	24000014 	.word	0x24000014
 8004400:	2400001c 	.word	0x2400001c

08004404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004408:	4b06      	ldr	r3, [pc, #24]	; (8004424 <HAL_IncTick+0x20>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	461a      	mov	r2, r3
 800440e:	4b06      	ldr	r3, [pc, #24]	; (8004428 <HAL_IncTick+0x24>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4413      	add	r3, r2
 8004414:	4a04      	ldr	r2, [pc, #16]	; (8004428 <HAL_IncTick+0x24>)
 8004416:	6013      	str	r3, [r2, #0]
}
 8004418:	bf00      	nop
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	24000020 	.word	0x24000020
 8004428:	240005b0 	.word	0x240005b0

0800442c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  return uwTick;
 8004430:	4b03      	ldr	r3, [pc, #12]	; (8004440 <HAL_GetTick+0x14>)
 8004432:	681b      	ldr	r3, [r3, #0]
}
 8004434:	4618      	mov	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	240005b0 	.word	0x240005b0

08004444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800444c:	f7ff ffee 	bl	800442c <HAL_GetTick>
 8004450:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445c:	d005      	beq.n	800446a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800445e:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <HAL_Delay+0x44>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4413      	add	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800446a:	bf00      	nop
 800446c:	f7ff ffde 	bl	800442c <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	429a      	cmp	r2, r3
 800447a:	d8f7      	bhi.n	800446c <HAL_Delay+0x28>
  {
  }
}
 800447c:	bf00      	nop
 800447e:	bf00      	nop
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	24000020 	.word	0x24000020

0800448c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004490:	4b03      	ldr	r3, [pc, #12]	; (80044a0 <HAL_GetREVID+0x14>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	0c1b      	lsrs	r3, r3, #16
}
 8004496:	4618      	mov	r0, r3
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	5c001000 	.word	0x5c001000

080044a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044b4:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <__NVIC_SetPriorityGrouping+0x40>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044c0:	4013      	ands	r3, r2
 80044c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80044cc:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <__NVIC_SetPriorityGrouping+0x44>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044d2:	4a04      	ldr	r2, [pc, #16]	; (80044e4 <__NVIC_SetPriorityGrouping+0x40>)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	60d3      	str	r3, [r2, #12]
}
 80044d8:	bf00      	nop
 80044da:	3714      	adds	r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	e000ed00 	.word	0xe000ed00
 80044e8:	05fa0000 	.word	0x05fa0000

080044ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044f0:	4b04      	ldr	r3, [pc, #16]	; (8004504 <__NVIC_GetPriorityGrouping+0x18>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	0a1b      	lsrs	r3, r3, #8
 80044f6:	f003 0307 	and.w	r3, r3, #7
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	e000ed00 	.word	0xe000ed00

08004508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	4603      	mov	r3, r0
 8004510:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004516:	2b00      	cmp	r3, #0
 8004518:	db0b      	blt.n	8004532 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800451a:	88fb      	ldrh	r3, [r7, #6]
 800451c:	f003 021f 	and.w	r2, r3, #31
 8004520:	4907      	ldr	r1, [pc, #28]	; (8004540 <__NVIC_EnableIRQ+0x38>)
 8004522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	2001      	movs	r0, #1
 800452a:	fa00 f202 	lsl.w	r2, r0, r2
 800452e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	e000e100 	.word	0xe000e100

08004544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	4603      	mov	r3, r0
 800454c:	6039      	str	r1, [r7, #0]
 800454e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004550:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004554:	2b00      	cmp	r3, #0
 8004556:	db0a      	blt.n	800456e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	b2da      	uxtb	r2, r3
 800455c:	490c      	ldr	r1, [pc, #48]	; (8004590 <__NVIC_SetPriority+0x4c>)
 800455e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004562:	0112      	lsls	r2, r2, #4
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	440b      	add	r3, r1
 8004568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800456c:	e00a      	b.n	8004584 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	b2da      	uxtb	r2, r3
 8004572:	4908      	ldr	r1, [pc, #32]	; (8004594 <__NVIC_SetPriority+0x50>)
 8004574:	88fb      	ldrh	r3, [r7, #6]
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	3b04      	subs	r3, #4
 800457c:	0112      	lsls	r2, r2, #4
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	440b      	add	r3, r1
 8004582:	761a      	strb	r2, [r3, #24]
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	e000e100 	.word	0xe000e100
 8004594:	e000ed00 	.word	0xe000ed00

08004598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004598:	b480      	push	{r7}
 800459a:	b089      	sub	sp, #36	; 0x24
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	f1c3 0307 	rsb	r3, r3, #7
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	bf28      	it	cs
 80045b6:	2304      	movcs	r3, #4
 80045b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	3304      	adds	r3, #4
 80045be:	2b06      	cmp	r3, #6
 80045c0:	d902      	bls.n	80045c8 <NVIC_EncodePriority+0x30>
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	3b03      	subs	r3, #3
 80045c6:	e000      	b.n	80045ca <NVIC_EncodePriority+0x32>
 80045c8:	2300      	movs	r3, #0
 80045ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045cc:	f04f 32ff 	mov.w	r2, #4294967295
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	43da      	mvns	r2, r3
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	401a      	ands	r2, r3
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045e0:	f04f 31ff 	mov.w	r1, #4294967295
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ea:	43d9      	mvns	r1, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f0:	4313      	orrs	r3, r2
         );
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3724      	adds	r7, #36	; 0x24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
	...

08004600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3b01      	subs	r3, #1
 800460c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004610:	d301      	bcc.n	8004616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004612:	2301      	movs	r3, #1
 8004614:	e00f      	b.n	8004636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004616:	4a0a      	ldr	r2, [pc, #40]	; (8004640 <SysTick_Config+0x40>)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3b01      	subs	r3, #1
 800461c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800461e:	210f      	movs	r1, #15
 8004620:	f04f 30ff 	mov.w	r0, #4294967295
 8004624:	f7ff ff8e 	bl	8004544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <SysTick_Config+0x40>)
 800462a:	2200      	movs	r2, #0
 800462c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800462e:	4b04      	ldr	r3, [pc, #16]	; (8004640 <SysTick_Config+0x40>)
 8004630:	2207      	movs	r2, #7
 8004632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	e000e010 	.word	0xe000e010

08004644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff ff29 	bl	80044a4 <__NVIC_SetPriorityGrouping>
}
 8004652:	bf00      	nop
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b086      	sub	sp, #24
 800465e:	af00      	add	r7, sp, #0
 8004660:	4603      	mov	r3, r0
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	607a      	str	r2, [r7, #4]
 8004666:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004668:	f7ff ff40 	bl	80044ec <__NVIC_GetPriorityGrouping>
 800466c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	68b9      	ldr	r1, [r7, #8]
 8004672:	6978      	ldr	r0, [r7, #20]
 8004674:	f7ff ff90 	bl	8004598 <NVIC_EncodePriority>
 8004678:	4602      	mov	r2, r0
 800467a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800467e:	4611      	mov	r1, r2
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff ff5f 	bl	8004544 <__NVIC_SetPriority>
}
 8004686:	bf00      	nop
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b082      	sub	sp, #8
 8004692:	af00      	add	r7, sp, #0
 8004694:	4603      	mov	r3, r0
 8004696:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004698:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800469c:	4618      	mov	r0, r3
 800469e:	f7ff ff33 	bl	8004508 <__NVIC_EnableIRQ>
}
 80046a2:	bf00      	nop
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b082      	sub	sp, #8
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7ff ffa4 	bl	8004600 <SysTick_Config>
 80046b8:	4603      	mov	r3, r0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80046cc:	f7ff feae 	bl	800442c <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e316      	b.n	8004d0a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a66      	ldr	r2, [pc, #408]	; (800487c <HAL_DMA_Init+0x1b8>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d04a      	beq.n	800477c <HAL_DMA_Init+0xb8>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a65      	ldr	r2, [pc, #404]	; (8004880 <HAL_DMA_Init+0x1bc>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d045      	beq.n	800477c <HAL_DMA_Init+0xb8>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a63      	ldr	r2, [pc, #396]	; (8004884 <HAL_DMA_Init+0x1c0>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d040      	beq.n	800477c <HAL_DMA_Init+0xb8>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a62      	ldr	r2, [pc, #392]	; (8004888 <HAL_DMA_Init+0x1c4>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d03b      	beq.n	800477c <HAL_DMA_Init+0xb8>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a60      	ldr	r2, [pc, #384]	; (800488c <HAL_DMA_Init+0x1c8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d036      	beq.n	800477c <HAL_DMA_Init+0xb8>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a5f      	ldr	r2, [pc, #380]	; (8004890 <HAL_DMA_Init+0x1cc>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d031      	beq.n	800477c <HAL_DMA_Init+0xb8>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a5d      	ldr	r2, [pc, #372]	; (8004894 <HAL_DMA_Init+0x1d0>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d02c      	beq.n	800477c <HAL_DMA_Init+0xb8>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a5c      	ldr	r2, [pc, #368]	; (8004898 <HAL_DMA_Init+0x1d4>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d027      	beq.n	800477c <HAL_DMA_Init+0xb8>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a5a      	ldr	r2, [pc, #360]	; (800489c <HAL_DMA_Init+0x1d8>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d022      	beq.n	800477c <HAL_DMA_Init+0xb8>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a59      	ldr	r2, [pc, #356]	; (80048a0 <HAL_DMA_Init+0x1dc>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d01d      	beq.n	800477c <HAL_DMA_Init+0xb8>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a57      	ldr	r2, [pc, #348]	; (80048a4 <HAL_DMA_Init+0x1e0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d018      	beq.n	800477c <HAL_DMA_Init+0xb8>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a56      	ldr	r2, [pc, #344]	; (80048a8 <HAL_DMA_Init+0x1e4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d013      	beq.n	800477c <HAL_DMA_Init+0xb8>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a54      	ldr	r2, [pc, #336]	; (80048ac <HAL_DMA_Init+0x1e8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00e      	beq.n	800477c <HAL_DMA_Init+0xb8>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a53      	ldr	r2, [pc, #332]	; (80048b0 <HAL_DMA_Init+0x1ec>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d009      	beq.n	800477c <HAL_DMA_Init+0xb8>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a51      	ldr	r2, [pc, #324]	; (80048b4 <HAL_DMA_Init+0x1f0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d004      	beq.n	800477c <HAL_DMA_Init+0xb8>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a50      	ldr	r2, [pc, #320]	; (80048b8 <HAL_DMA_Init+0x1f4>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d101      	bne.n	8004780 <HAL_DMA_Init+0xbc>
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <HAL_DMA_Init+0xbe>
 8004780:	2300      	movs	r3, #0
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 813b 	beq.w	80049fe <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a37      	ldr	r2, [pc, #220]	; (800487c <HAL_DMA_Init+0x1b8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d04a      	beq.n	8004838 <HAL_DMA_Init+0x174>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a36      	ldr	r2, [pc, #216]	; (8004880 <HAL_DMA_Init+0x1bc>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d045      	beq.n	8004838 <HAL_DMA_Init+0x174>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a34      	ldr	r2, [pc, #208]	; (8004884 <HAL_DMA_Init+0x1c0>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d040      	beq.n	8004838 <HAL_DMA_Init+0x174>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a33      	ldr	r2, [pc, #204]	; (8004888 <HAL_DMA_Init+0x1c4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d03b      	beq.n	8004838 <HAL_DMA_Init+0x174>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a31      	ldr	r2, [pc, #196]	; (800488c <HAL_DMA_Init+0x1c8>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d036      	beq.n	8004838 <HAL_DMA_Init+0x174>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a30      	ldr	r2, [pc, #192]	; (8004890 <HAL_DMA_Init+0x1cc>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d031      	beq.n	8004838 <HAL_DMA_Init+0x174>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a2e      	ldr	r2, [pc, #184]	; (8004894 <HAL_DMA_Init+0x1d0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d02c      	beq.n	8004838 <HAL_DMA_Init+0x174>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a2d      	ldr	r2, [pc, #180]	; (8004898 <HAL_DMA_Init+0x1d4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d027      	beq.n	8004838 <HAL_DMA_Init+0x174>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a2b      	ldr	r2, [pc, #172]	; (800489c <HAL_DMA_Init+0x1d8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d022      	beq.n	8004838 <HAL_DMA_Init+0x174>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a2a      	ldr	r2, [pc, #168]	; (80048a0 <HAL_DMA_Init+0x1dc>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d01d      	beq.n	8004838 <HAL_DMA_Init+0x174>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a28      	ldr	r2, [pc, #160]	; (80048a4 <HAL_DMA_Init+0x1e0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d018      	beq.n	8004838 <HAL_DMA_Init+0x174>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a27      	ldr	r2, [pc, #156]	; (80048a8 <HAL_DMA_Init+0x1e4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d013      	beq.n	8004838 <HAL_DMA_Init+0x174>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a25      	ldr	r2, [pc, #148]	; (80048ac <HAL_DMA_Init+0x1e8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00e      	beq.n	8004838 <HAL_DMA_Init+0x174>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a24      	ldr	r2, [pc, #144]	; (80048b0 <HAL_DMA_Init+0x1ec>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d009      	beq.n	8004838 <HAL_DMA_Init+0x174>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a22      	ldr	r2, [pc, #136]	; (80048b4 <HAL_DMA_Init+0x1f0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d004      	beq.n	8004838 <HAL_DMA_Init+0x174>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a21      	ldr	r2, [pc, #132]	; (80048b8 <HAL_DMA_Init+0x1f4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d108      	bne.n	800484a <HAL_DMA_Init+0x186>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0201 	bic.w	r2, r2, #1
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	e007      	b.n	800485a <HAL_DMA_Init+0x196>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0201 	bic.w	r2, r2, #1
 8004858:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800485a:	e02f      	b.n	80048bc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800485c:	f7ff fde6 	bl	800442c <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b05      	cmp	r3, #5
 8004868:	d928      	bls.n	80048bc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2220      	movs	r2, #32
 800486e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2203      	movs	r2, #3
 8004874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e246      	b.n	8004d0a <HAL_DMA_Init+0x646>
 800487c:	40020010 	.word	0x40020010
 8004880:	40020028 	.word	0x40020028
 8004884:	40020040 	.word	0x40020040
 8004888:	40020058 	.word	0x40020058
 800488c:	40020070 	.word	0x40020070
 8004890:	40020088 	.word	0x40020088
 8004894:	400200a0 	.word	0x400200a0
 8004898:	400200b8 	.word	0x400200b8
 800489c:	40020410 	.word	0x40020410
 80048a0:	40020428 	.word	0x40020428
 80048a4:	40020440 	.word	0x40020440
 80048a8:	40020458 	.word	0x40020458
 80048ac:	40020470 	.word	0x40020470
 80048b0:	40020488 	.word	0x40020488
 80048b4:	400204a0 	.word	0x400204a0
 80048b8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1c8      	bne.n	800485c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	4b83      	ldr	r3, [pc, #524]	; (8004ae4 <HAL_DMA_Init+0x420>)
 80048d6:	4013      	ands	r3, r2
 80048d8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80048e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048fa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	4313      	orrs	r3, r2
 8004906:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	2b04      	cmp	r3, #4
 800490e:	d107      	bne.n	8004920 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	4313      	orrs	r3, r2
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	4313      	orrs	r3, r2
 800491e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004920:	4b71      	ldr	r3, [pc, #452]	; (8004ae8 <HAL_DMA_Init+0x424>)
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	4b71      	ldr	r3, [pc, #452]	; (8004aec <HAL_DMA_Init+0x428>)
 8004926:	4013      	ands	r3, r2
 8004928:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800492c:	d328      	bcc.n	8004980 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b28      	cmp	r3, #40	; 0x28
 8004934:	d903      	bls.n	800493e <HAL_DMA_Init+0x27a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b2e      	cmp	r3, #46	; 0x2e
 800493c:	d917      	bls.n	800496e <HAL_DMA_Init+0x2aa>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2b3e      	cmp	r3, #62	; 0x3e
 8004944:	d903      	bls.n	800494e <HAL_DMA_Init+0x28a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b42      	cmp	r3, #66	; 0x42
 800494c:	d90f      	bls.n	800496e <HAL_DMA_Init+0x2aa>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	2b46      	cmp	r3, #70	; 0x46
 8004954:	d903      	bls.n	800495e <HAL_DMA_Init+0x29a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	2b48      	cmp	r3, #72	; 0x48
 800495c:	d907      	bls.n	800496e <HAL_DMA_Init+0x2aa>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2b4e      	cmp	r3, #78	; 0x4e
 8004964:	d905      	bls.n	8004972 <HAL_DMA_Init+0x2ae>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2b52      	cmp	r3, #82	; 0x52
 800496c:	d801      	bhi.n	8004972 <HAL_DMA_Init+0x2ae>
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <HAL_DMA_Init+0x2b0>
 8004972:	2300      	movs	r3, #0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800497e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f023 0307 	bic.w	r3, r3, #7
 8004996:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d117      	bne.n	80049da <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00e      	beq.n	80049da <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f002 fb4b 	bl	8007058 <DMA_CheckFifoParam>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d008      	beq.n	80049da <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2240      	movs	r2, #64	; 0x40
 80049cc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e197      	b.n	8004d0a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f002 fa86 	bl	8006ef4 <DMA_CalcBaseAndBitshift>
 80049e8:	4603      	mov	r3, r0
 80049ea:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f0:	f003 031f 	and.w	r3, r3, #31
 80049f4:	223f      	movs	r2, #63	; 0x3f
 80049f6:	409a      	lsls	r2, r3
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	609a      	str	r2, [r3, #8]
 80049fc:	e0cd      	b.n	8004b9a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a3b      	ldr	r2, [pc, #236]	; (8004af0 <HAL_DMA_Init+0x42c>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d022      	beq.n	8004a4e <HAL_DMA_Init+0x38a>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a39      	ldr	r2, [pc, #228]	; (8004af4 <HAL_DMA_Init+0x430>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d01d      	beq.n	8004a4e <HAL_DMA_Init+0x38a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a38      	ldr	r2, [pc, #224]	; (8004af8 <HAL_DMA_Init+0x434>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d018      	beq.n	8004a4e <HAL_DMA_Init+0x38a>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a36      	ldr	r2, [pc, #216]	; (8004afc <HAL_DMA_Init+0x438>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d013      	beq.n	8004a4e <HAL_DMA_Init+0x38a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a35      	ldr	r2, [pc, #212]	; (8004b00 <HAL_DMA_Init+0x43c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00e      	beq.n	8004a4e <HAL_DMA_Init+0x38a>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a33      	ldr	r2, [pc, #204]	; (8004b04 <HAL_DMA_Init+0x440>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d009      	beq.n	8004a4e <HAL_DMA_Init+0x38a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a32      	ldr	r2, [pc, #200]	; (8004b08 <HAL_DMA_Init+0x444>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d004      	beq.n	8004a4e <HAL_DMA_Init+0x38a>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a30      	ldr	r2, [pc, #192]	; (8004b0c <HAL_DMA_Init+0x448>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d101      	bne.n	8004a52 <HAL_DMA_Init+0x38e>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e000      	b.n	8004a54 <HAL_DMA_Init+0x390>
 8004a52:	2300      	movs	r3, #0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 8097 	beq.w	8004b88 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a24      	ldr	r2, [pc, #144]	; (8004af0 <HAL_DMA_Init+0x42c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d021      	beq.n	8004aa8 <HAL_DMA_Init+0x3e4>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a22      	ldr	r2, [pc, #136]	; (8004af4 <HAL_DMA_Init+0x430>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d01c      	beq.n	8004aa8 <HAL_DMA_Init+0x3e4>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a21      	ldr	r2, [pc, #132]	; (8004af8 <HAL_DMA_Init+0x434>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d017      	beq.n	8004aa8 <HAL_DMA_Init+0x3e4>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a1f      	ldr	r2, [pc, #124]	; (8004afc <HAL_DMA_Init+0x438>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d012      	beq.n	8004aa8 <HAL_DMA_Init+0x3e4>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a1e      	ldr	r2, [pc, #120]	; (8004b00 <HAL_DMA_Init+0x43c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d00d      	beq.n	8004aa8 <HAL_DMA_Init+0x3e4>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a1c      	ldr	r2, [pc, #112]	; (8004b04 <HAL_DMA_Init+0x440>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d008      	beq.n	8004aa8 <HAL_DMA_Init+0x3e4>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a1b      	ldr	r2, [pc, #108]	; (8004b08 <HAL_DMA_Init+0x444>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d003      	beq.n	8004aa8 <HAL_DMA_Init+0x3e4>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a19      	ldr	r2, [pc, #100]	; (8004b0c <HAL_DMA_Init+0x448>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2202      	movs	r2, #2
 8004ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	4b12      	ldr	r3, [pc, #72]	; (8004b10 <HAL_DMA_Init+0x44c>)
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	2b40      	cmp	r3, #64	; 0x40
 8004ad0:	d020      	beq.n	8004b14 <HAL_DMA_Init+0x450>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	2b80      	cmp	r3, #128	; 0x80
 8004ad8:	d102      	bne.n	8004ae0 <HAL_DMA_Init+0x41c>
 8004ada:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ade:	e01a      	b.n	8004b16 <HAL_DMA_Init+0x452>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	e018      	b.n	8004b16 <HAL_DMA_Init+0x452>
 8004ae4:	fe10803f 	.word	0xfe10803f
 8004ae8:	5c001000 	.word	0x5c001000
 8004aec:	ffff0000 	.word	0xffff0000
 8004af0:	58025408 	.word	0x58025408
 8004af4:	5802541c 	.word	0x5802541c
 8004af8:	58025430 	.word	0x58025430
 8004afc:	58025444 	.word	0x58025444
 8004b00:	58025458 	.word	0x58025458
 8004b04:	5802546c 	.word	0x5802546c
 8004b08:	58025480 	.word	0x58025480
 8004b0c:	58025494 	.word	0x58025494
 8004b10:	fffe000f 	.word	0xfffe000f
 8004b14:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	68d2      	ldr	r2, [r2, #12]
 8004b1a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004b24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004b2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004b34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004b3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004b44:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	4b6e      	ldr	r3, [pc, #440]	; (8004d14 <HAL_DMA_Init+0x650>)
 8004b5c:	4413      	add	r3, r2
 8004b5e:	4a6e      	ldr	r2, [pc, #440]	; (8004d18 <HAL_DMA_Init+0x654>)
 8004b60:	fba2 2303 	umull	r2, r3, r2, r3
 8004b64:	091b      	lsrs	r3, r3, #4
 8004b66:	009a      	lsls	r2, r3, #2
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f002 f9c1 	bl	8006ef4 <DMA_CalcBaseAndBitshift>
 8004b72:	4603      	mov	r3, r0
 8004b74:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b7a:	f003 031f 	and.w	r3, r3, #31
 8004b7e:	2201      	movs	r2, #1
 8004b80:	409a      	lsls	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	605a      	str	r2, [r3, #4]
 8004b86:	e008      	b.n	8004b9a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2240      	movs	r2, #64	; 0x40
 8004b8c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2203      	movs	r2, #3
 8004b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e0b7      	b.n	8004d0a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a5f      	ldr	r2, [pc, #380]	; (8004d1c <HAL_DMA_Init+0x658>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d072      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a5d      	ldr	r2, [pc, #372]	; (8004d20 <HAL_DMA_Init+0x65c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d06d      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a5c      	ldr	r2, [pc, #368]	; (8004d24 <HAL_DMA_Init+0x660>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d068      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a5a      	ldr	r2, [pc, #360]	; (8004d28 <HAL_DMA_Init+0x664>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d063      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a59      	ldr	r2, [pc, #356]	; (8004d2c <HAL_DMA_Init+0x668>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d05e      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a57      	ldr	r2, [pc, #348]	; (8004d30 <HAL_DMA_Init+0x66c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d059      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a56      	ldr	r2, [pc, #344]	; (8004d34 <HAL_DMA_Init+0x670>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d054      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a54      	ldr	r2, [pc, #336]	; (8004d38 <HAL_DMA_Init+0x674>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d04f      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a53      	ldr	r2, [pc, #332]	; (8004d3c <HAL_DMA_Init+0x678>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d04a      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a51      	ldr	r2, [pc, #324]	; (8004d40 <HAL_DMA_Init+0x67c>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d045      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a50      	ldr	r2, [pc, #320]	; (8004d44 <HAL_DMA_Init+0x680>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d040      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a4e      	ldr	r2, [pc, #312]	; (8004d48 <HAL_DMA_Init+0x684>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d03b      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a4d      	ldr	r2, [pc, #308]	; (8004d4c <HAL_DMA_Init+0x688>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d036      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a4b      	ldr	r2, [pc, #300]	; (8004d50 <HAL_DMA_Init+0x68c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d031      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a4a      	ldr	r2, [pc, #296]	; (8004d54 <HAL_DMA_Init+0x690>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d02c      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a48      	ldr	r2, [pc, #288]	; (8004d58 <HAL_DMA_Init+0x694>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d027      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a47      	ldr	r2, [pc, #284]	; (8004d5c <HAL_DMA_Init+0x698>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d022      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a45      	ldr	r2, [pc, #276]	; (8004d60 <HAL_DMA_Init+0x69c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d01d      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a44      	ldr	r2, [pc, #272]	; (8004d64 <HAL_DMA_Init+0x6a0>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d018      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a42      	ldr	r2, [pc, #264]	; (8004d68 <HAL_DMA_Init+0x6a4>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d013      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a41      	ldr	r2, [pc, #260]	; (8004d6c <HAL_DMA_Init+0x6a8>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d00e      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a3f      	ldr	r2, [pc, #252]	; (8004d70 <HAL_DMA_Init+0x6ac>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d009      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a3e      	ldr	r2, [pc, #248]	; (8004d74 <HAL_DMA_Init+0x6b0>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d004      	beq.n	8004c8a <HAL_DMA_Init+0x5c6>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a3c      	ldr	r2, [pc, #240]	; (8004d78 <HAL_DMA_Init+0x6b4>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d101      	bne.n	8004c8e <HAL_DMA_Init+0x5ca>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e000      	b.n	8004c90 <HAL_DMA_Init+0x5cc>
 8004c8e:	2300      	movs	r3, #0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d032      	beq.n	8004cfa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f002 fa5b 	bl	8007150 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	2b80      	cmp	r3, #128	; 0x80
 8004ca0:	d102      	bne.n	8004ca8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004cbc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d010      	beq.n	8004ce8 <HAL_DMA_Init+0x624>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2b08      	cmp	r3, #8
 8004ccc:	d80c      	bhi.n	8004ce8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f002 fad8 	bl	8007284 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004ce4:	605a      	str	r2, [r3, #4]
 8004ce6:	e008      	b.n	8004cfa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	a7fdabf8 	.word	0xa7fdabf8
 8004d18:	cccccccd 	.word	0xcccccccd
 8004d1c:	40020010 	.word	0x40020010
 8004d20:	40020028 	.word	0x40020028
 8004d24:	40020040 	.word	0x40020040
 8004d28:	40020058 	.word	0x40020058
 8004d2c:	40020070 	.word	0x40020070
 8004d30:	40020088 	.word	0x40020088
 8004d34:	400200a0 	.word	0x400200a0
 8004d38:	400200b8 	.word	0x400200b8
 8004d3c:	40020410 	.word	0x40020410
 8004d40:	40020428 	.word	0x40020428
 8004d44:	40020440 	.word	0x40020440
 8004d48:	40020458 	.word	0x40020458
 8004d4c:	40020470 	.word	0x40020470
 8004d50:	40020488 	.word	0x40020488
 8004d54:	400204a0 	.word	0x400204a0
 8004d58:	400204b8 	.word	0x400204b8
 8004d5c:	58025408 	.word	0x58025408
 8004d60:	5802541c 	.word	0x5802541c
 8004d64:	58025430 	.word	0x58025430
 8004d68:	58025444 	.word	0x58025444
 8004d6c:	58025458 	.word	0x58025458
 8004d70:	5802546c 	.word	0x5802546c
 8004d74:	58025480 	.word	0x58025480
 8004d78:	58025494 	.word	0x58025494

08004d7c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
 8004d88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e226      	b.n	80051e6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d101      	bne.n	8004da6 <HAL_DMA_Start_IT+0x2a>
 8004da2:	2302      	movs	r3, #2
 8004da4:	e21f      	b.n	80051e6 <HAL_DMA_Start_IT+0x46a>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	f040 820a 	bne.w	80051d0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a68      	ldr	r2, [pc, #416]	; (8004f70 <HAL_DMA_Start_IT+0x1f4>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d04a      	beq.n	8004e6a <HAL_DMA_Start_IT+0xee>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a66      	ldr	r2, [pc, #408]	; (8004f74 <HAL_DMA_Start_IT+0x1f8>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d045      	beq.n	8004e6a <HAL_DMA_Start_IT+0xee>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a65      	ldr	r2, [pc, #404]	; (8004f78 <HAL_DMA_Start_IT+0x1fc>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d040      	beq.n	8004e6a <HAL_DMA_Start_IT+0xee>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a63      	ldr	r2, [pc, #396]	; (8004f7c <HAL_DMA_Start_IT+0x200>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d03b      	beq.n	8004e6a <HAL_DMA_Start_IT+0xee>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a62      	ldr	r2, [pc, #392]	; (8004f80 <HAL_DMA_Start_IT+0x204>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d036      	beq.n	8004e6a <HAL_DMA_Start_IT+0xee>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a60      	ldr	r2, [pc, #384]	; (8004f84 <HAL_DMA_Start_IT+0x208>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d031      	beq.n	8004e6a <HAL_DMA_Start_IT+0xee>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a5f      	ldr	r2, [pc, #380]	; (8004f88 <HAL_DMA_Start_IT+0x20c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d02c      	beq.n	8004e6a <HAL_DMA_Start_IT+0xee>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a5d      	ldr	r2, [pc, #372]	; (8004f8c <HAL_DMA_Start_IT+0x210>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d027      	beq.n	8004e6a <HAL_DMA_Start_IT+0xee>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a5c      	ldr	r2, [pc, #368]	; (8004f90 <HAL_DMA_Start_IT+0x214>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d022      	beq.n	8004e6a <HAL_DMA_Start_IT+0xee>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a5a      	ldr	r2, [pc, #360]	; (8004f94 <HAL_DMA_Start_IT+0x218>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d01d      	beq.n	8004e6a <HAL_DMA_Start_IT+0xee>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a59      	ldr	r2, [pc, #356]	; (8004f98 <HAL_DMA_Start_IT+0x21c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d018      	beq.n	8004e6a <HAL_DMA_Start_IT+0xee>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a57      	ldr	r2, [pc, #348]	; (8004f9c <HAL_DMA_Start_IT+0x220>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d013      	beq.n	8004e6a <HAL_DMA_Start_IT+0xee>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a56      	ldr	r2, [pc, #344]	; (8004fa0 <HAL_DMA_Start_IT+0x224>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d00e      	beq.n	8004e6a <HAL_DMA_Start_IT+0xee>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a54      	ldr	r2, [pc, #336]	; (8004fa4 <HAL_DMA_Start_IT+0x228>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d009      	beq.n	8004e6a <HAL_DMA_Start_IT+0xee>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a53      	ldr	r2, [pc, #332]	; (8004fa8 <HAL_DMA_Start_IT+0x22c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d004      	beq.n	8004e6a <HAL_DMA_Start_IT+0xee>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a51      	ldr	r2, [pc, #324]	; (8004fac <HAL_DMA_Start_IT+0x230>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d108      	bne.n	8004e7c <HAL_DMA_Start_IT+0x100>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0201 	bic.w	r2, r2, #1
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	e007      	b.n	8004e8c <HAL_DMA_Start_IT+0x110>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0201 	bic.w	r2, r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	68b9      	ldr	r1, [r7, #8]
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f001 fe82 	bl	8006b9c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a34      	ldr	r2, [pc, #208]	; (8004f70 <HAL_DMA_Start_IT+0x1f4>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d04a      	beq.n	8004f38 <HAL_DMA_Start_IT+0x1bc>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a33      	ldr	r2, [pc, #204]	; (8004f74 <HAL_DMA_Start_IT+0x1f8>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d045      	beq.n	8004f38 <HAL_DMA_Start_IT+0x1bc>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a31      	ldr	r2, [pc, #196]	; (8004f78 <HAL_DMA_Start_IT+0x1fc>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d040      	beq.n	8004f38 <HAL_DMA_Start_IT+0x1bc>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a30      	ldr	r2, [pc, #192]	; (8004f7c <HAL_DMA_Start_IT+0x200>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d03b      	beq.n	8004f38 <HAL_DMA_Start_IT+0x1bc>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a2e      	ldr	r2, [pc, #184]	; (8004f80 <HAL_DMA_Start_IT+0x204>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d036      	beq.n	8004f38 <HAL_DMA_Start_IT+0x1bc>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a2d      	ldr	r2, [pc, #180]	; (8004f84 <HAL_DMA_Start_IT+0x208>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d031      	beq.n	8004f38 <HAL_DMA_Start_IT+0x1bc>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a2b      	ldr	r2, [pc, #172]	; (8004f88 <HAL_DMA_Start_IT+0x20c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d02c      	beq.n	8004f38 <HAL_DMA_Start_IT+0x1bc>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a2a      	ldr	r2, [pc, #168]	; (8004f8c <HAL_DMA_Start_IT+0x210>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d027      	beq.n	8004f38 <HAL_DMA_Start_IT+0x1bc>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a28      	ldr	r2, [pc, #160]	; (8004f90 <HAL_DMA_Start_IT+0x214>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d022      	beq.n	8004f38 <HAL_DMA_Start_IT+0x1bc>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a27      	ldr	r2, [pc, #156]	; (8004f94 <HAL_DMA_Start_IT+0x218>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d01d      	beq.n	8004f38 <HAL_DMA_Start_IT+0x1bc>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a25      	ldr	r2, [pc, #148]	; (8004f98 <HAL_DMA_Start_IT+0x21c>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d018      	beq.n	8004f38 <HAL_DMA_Start_IT+0x1bc>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a24      	ldr	r2, [pc, #144]	; (8004f9c <HAL_DMA_Start_IT+0x220>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d013      	beq.n	8004f38 <HAL_DMA_Start_IT+0x1bc>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a22      	ldr	r2, [pc, #136]	; (8004fa0 <HAL_DMA_Start_IT+0x224>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d00e      	beq.n	8004f38 <HAL_DMA_Start_IT+0x1bc>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a21      	ldr	r2, [pc, #132]	; (8004fa4 <HAL_DMA_Start_IT+0x228>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d009      	beq.n	8004f38 <HAL_DMA_Start_IT+0x1bc>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a1f      	ldr	r2, [pc, #124]	; (8004fa8 <HAL_DMA_Start_IT+0x22c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d004      	beq.n	8004f38 <HAL_DMA_Start_IT+0x1bc>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a1e      	ldr	r2, [pc, #120]	; (8004fac <HAL_DMA_Start_IT+0x230>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d101      	bne.n	8004f3c <HAL_DMA_Start_IT+0x1c0>
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e000      	b.n	8004f3e <HAL_DMA_Start_IT+0x1c2>
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d036      	beq.n	8004fb0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f023 021e 	bic.w	r2, r3, #30
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f042 0216 	orr.w	r2, r2, #22
 8004f54:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d03e      	beq.n	8004fdc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f042 0208 	orr.w	r2, r2, #8
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	e035      	b.n	8004fdc <HAL_DMA_Start_IT+0x260>
 8004f70:	40020010 	.word	0x40020010
 8004f74:	40020028 	.word	0x40020028
 8004f78:	40020040 	.word	0x40020040
 8004f7c:	40020058 	.word	0x40020058
 8004f80:	40020070 	.word	0x40020070
 8004f84:	40020088 	.word	0x40020088
 8004f88:	400200a0 	.word	0x400200a0
 8004f8c:	400200b8 	.word	0x400200b8
 8004f90:	40020410 	.word	0x40020410
 8004f94:	40020428 	.word	0x40020428
 8004f98:	40020440 	.word	0x40020440
 8004f9c:	40020458 	.word	0x40020458
 8004fa0:	40020470 	.word	0x40020470
 8004fa4:	40020488 	.word	0x40020488
 8004fa8:	400204a0 	.word	0x400204a0
 8004fac:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f023 020e 	bic.w	r2, r3, #14
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 020a 	orr.w	r2, r2, #10
 8004fc2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d007      	beq.n	8004fdc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f042 0204 	orr.w	r2, r2, #4
 8004fda:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a83      	ldr	r2, [pc, #524]	; (80051f0 <HAL_DMA_Start_IT+0x474>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d072      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a82      	ldr	r2, [pc, #520]	; (80051f4 <HAL_DMA_Start_IT+0x478>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d06d      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a80      	ldr	r2, [pc, #512]	; (80051f8 <HAL_DMA_Start_IT+0x47c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d068      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a7f      	ldr	r2, [pc, #508]	; (80051fc <HAL_DMA_Start_IT+0x480>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d063      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a7d      	ldr	r2, [pc, #500]	; (8005200 <HAL_DMA_Start_IT+0x484>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d05e      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a7c      	ldr	r2, [pc, #496]	; (8005204 <HAL_DMA_Start_IT+0x488>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d059      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a7a      	ldr	r2, [pc, #488]	; (8005208 <HAL_DMA_Start_IT+0x48c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d054      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a79      	ldr	r2, [pc, #484]	; (800520c <HAL_DMA_Start_IT+0x490>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d04f      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a77      	ldr	r2, [pc, #476]	; (8005210 <HAL_DMA_Start_IT+0x494>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d04a      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a76      	ldr	r2, [pc, #472]	; (8005214 <HAL_DMA_Start_IT+0x498>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d045      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a74      	ldr	r2, [pc, #464]	; (8005218 <HAL_DMA_Start_IT+0x49c>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d040      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a73      	ldr	r2, [pc, #460]	; (800521c <HAL_DMA_Start_IT+0x4a0>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d03b      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a71      	ldr	r2, [pc, #452]	; (8005220 <HAL_DMA_Start_IT+0x4a4>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d036      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a70      	ldr	r2, [pc, #448]	; (8005224 <HAL_DMA_Start_IT+0x4a8>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d031      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a6e      	ldr	r2, [pc, #440]	; (8005228 <HAL_DMA_Start_IT+0x4ac>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d02c      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a6d      	ldr	r2, [pc, #436]	; (800522c <HAL_DMA_Start_IT+0x4b0>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d027      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a6b      	ldr	r2, [pc, #428]	; (8005230 <HAL_DMA_Start_IT+0x4b4>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d022      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a6a      	ldr	r2, [pc, #424]	; (8005234 <HAL_DMA_Start_IT+0x4b8>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d01d      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a68      	ldr	r2, [pc, #416]	; (8005238 <HAL_DMA_Start_IT+0x4bc>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d018      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a67      	ldr	r2, [pc, #412]	; (800523c <HAL_DMA_Start_IT+0x4c0>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d013      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a65      	ldr	r2, [pc, #404]	; (8005240 <HAL_DMA_Start_IT+0x4c4>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d00e      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a64      	ldr	r2, [pc, #400]	; (8005244 <HAL_DMA_Start_IT+0x4c8>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d009      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a62      	ldr	r2, [pc, #392]	; (8005248 <HAL_DMA_Start_IT+0x4cc>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d004      	beq.n	80050cc <HAL_DMA_Start_IT+0x350>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a61      	ldr	r2, [pc, #388]	; (800524c <HAL_DMA_Start_IT+0x4d0>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d101      	bne.n	80050d0 <HAL_DMA_Start_IT+0x354>
 80050cc:	2301      	movs	r3, #1
 80050ce:	e000      	b.n	80050d2 <HAL_DMA_Start_IT+0x356>
 80050d0:	2300      	movs	r3, #0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d01a      	beq.n	800510c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d007      	beq.n	80050f4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050f2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d007      	beq.n	800510c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005106:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800510a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a37      	ldr	r2, [pc, #220]	; (80051f0 <HAL_DMA_Start_IT+0x474>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d04a      	beq.n	80051ac <HAL_DMA_Start_IT+0x430>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a36      	ldr	r2, [pc, #216]	; (80051f4 <HAL_DMA_Start_IT+0x478>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d045      	beq.n	80051ac <HAL_DMA_Start_IT+0x430>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a34      	ldr	r2, [pc, #208]	; (80051f8 <HAL_DMA_Start_IT+0x47c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d040      	beq.n	80051ac <HAL_DMA_Start_IT+0x430>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a33      	ldr	r2, [pc, #204]	; (80051fc <HAL_DMA_Start_IT+0x480>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d03b      	beq.n	80051ac <HAL_DMA_Start_IT+0x430>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a31      	ldr	r2, [pc, #196]	; (8005200 <HAL_DMA_Start_IT+0x484>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d036      	beq.n	80051ac <HAL_DMA_Start_IT+0x430>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a30      	ldr	r2, [pc, #192]	; (8005204 <HAL_DMA_Start_IT+0x488>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d031      	beq.n	80051ac <HAL_DMA_Start_IT+0x430>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a2e      	ldr	r2, [pc, #184]	; (8005208 <HAL_DMA_Start_IT+0x48c>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d02c      	beq.n	80051ac <HAL_DMA_Start_IT+0x430>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a2d      	ldr	r2, [pc, #180]	; (800520c <HAL_DMA_Start_IT+0x490>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d027      	beq.n	80051ac <HAL_DMA_Start_IT+0x430>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a2b      	ldr	r2, [pc, #172]	; (8005210 <HAL_DMA_Start_IT+0x494>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d022      	beq.n	80051ac <HAL_DMA_Start_IT+0x430>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a2a      	ldr	r2, [pc, #168]	; (8005214 <HAL_DMA_Start_IT+0x498>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d01d      	beq.n	80051ac <HAL_DMA_Start_IT+0x430>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a28      	ldr	r2, [pc, #160]	; (8005218 <HAL_DMA_Start_IT+0x49c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d018      	beq.n	80051ac <HAL_DMA_Start_IT+0x430>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a27      	ldr	r2, [pc, #156]	; (800521c <HAL_DMA_Start_IT+0x4a0>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d013      	beq.n	80051ac <HAL_DMA_Start_IT+0x430>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a25      	ldr	r2, [pc, #148]	; (8005220 <HAL_DMA_Start_IT+0x4a4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00e      	beq.n	80051ac <HAL_DMA_Start_IT+0x430>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a24      	ldr	r2, [pc, #144]	; (8005224 <HAL_DMA_Start_IT+0x4a8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d009      	beq.n	80051ac <HAL_DMA_Start_IT+0x430>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a22      	ldr	r2, [pc, #136]	; (8005228 <HAL_DMA_Start_IT+0x4ac>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d004      	beq.n	80051ac <HAL_DMA_Start_IT+0x430>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a21      	ldr	r2, [pc, #132]	; (800522c <HAL_DMA_Start_IT+0x4b0>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d108      	bne.n	80051be <HAL_DMA_Start_IT+0x442>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0201 	orr.w	r2, r2, #1
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	e012      	b.n	80051e4 <HAL_DMA_Start_IT+0x468>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f042 0201 	orr.w	r2, r2, #1
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	e009      	b.n	80051e4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80051e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	40020010 	.word	0x40020010
 80051f4:	40020028 	.word	0x40020028
 80051f8:	40020040 	.word	0x40020040
 80051fc:	40020058 	.word	0x40020058
 8005200:	40020070 	.word	0x40020070
 8005204:	40020088 	.word	0x40020088
 8005208:	400200a0 	.word	0x400200a0
 800520c:	400200b8 	.word	0x400200b8
 8005210:	40020410 	.word	0x40020410
 8005214:	40020428 	.word	0x40020428
 8005218:	40020440 	.word	0x40020440
 800521c:	40020458 	.word	0x40020458
 8005220:	40020470 	.word	0x40020470
 8005224:	40020488 	.word	0x40020488
 8005228:	400204a0 	.word	0x400204a0
 800522c:	400204b8 	.word	0x400204b8
 8005230:	58025408 	.word	0x58025408
 8005234:	5802541c 	.word	0x5802541c
 8005238:	58025430 	.word	0x58025430
 800523c:	58025444 	.word	0x58025444
 8005240:	58025458 	.word	0x58025458
 8005244:	5802546c 	.word	0x5802546c
 8005248:	58025480 	.word	0x58025480
 800524c:	58025494 	.word	0x58025494

08005250 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005258:	f7ff f8e8 	bl	800442c <HAL_GetTick>
 800525c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e2dc      	b.n	8005822 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d008      	beq.n	8005286 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2280      	movs	r2, #128	; 0x80
 8005278:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e2cd      	b.n	8005822 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a76      	ldr	r2, [pc, #472]	; (8005464 <HAL_DMA_Abort+0x214>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d04a      	beq.n	8005326 <HAL_DMA_Abort+0xd6>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a74      	ldr	r2, [pc, #464]	; (8005468 <HAL_DMA_Abort+0x218>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d045      	beq.n	8005326 <HAL_DMA_Abort+0xd6>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a73      	ldr	r2, [pc, #460]	; (800546c <HAL_DMA_Abort+0x21c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d040      	beq.n	8005326 <HAL_DMA_Abort+0xd6>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a71      	ldr	r2, [pc, #452]	; (8005470 <HAL_DMA_Abort+0x220>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d03b      	beq.n	8005326 <HAL_DMA_Abort+0xd6>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a70      	ldr	r2, [pc, #448]	; (8005474 <HAL_DMA_Abort+0x224>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d036      	beq.n	8005326 <HAL_DMA_Abort+0xd6>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a6e      	ldr	r2, [pc, #440]	; (8005478 <HAL_DMA_Abort+0x228>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d031      	beq.n	8005326 <HAL_DMA_Abort+0xd6>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a6d      	ldr	r2, [pc, #436]	; (800547c <HAL_DMA_Abort+0x22c>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d02c      	beq.n	8005326 <HAL_DMA_Abort+0xd6>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a6b      	ldr	r2, [pc, #428]	; (8005480 <HAL_DMA_Abort+0x230>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d027      	beq.n	8005326 <HAL_DMA_Abort+0xd6>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a6a      	ldr	r2, [pc, #424]	; (8005484 <HAL_DMA_Abort+0x234>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d022      	beq.n	8005326 <HAL_DMA_Abort+0xd6>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a68      	ldr	r2, [pc, #416]	; (8005488 <HAL_DMA_Abort+0x238>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d01d      	beq.n	8005326 <HAL_DMA_Abort+0xd6>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a67      	ldr	r2, [pc, #412]	; (800548c <HAL_DMA_Abort+0x23c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d018      	beq.n	8005326 <HAL_DMA_Abort+0xd6>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a65      	ldr	r2, [pc, #404]	; (8005490 <HAL_DMA_Abort+0x240>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d013      	beq.n	8005326 <HAL_DMA_Abort+0xd6>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a64      	ldr	r2, [pc, #400]	; (8005494 <HAL_DMA_Abort+0x244>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d00e      	beq.n	8005326 <HAL_DMA_Abort+0xd6>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a62      	ldr	r2, [pc, #392]	; (8005498 <HAL_DMA_Abort+0x248>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d009      	beq.n	8005326 <HAL_DMA_Abort+0xd6>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a61      	ldr	r2, [pc, #388]	; (800549c <HAL_DMA_Abort+0x24c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d004      	beq.n	8005326 <HAL_DMA_Abort+0xd6>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a5f      	ldr	r2, [pc, #380]	; (80054a0 <HAL_DMA_Abort+0x250>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d101      	bne.n	800532a <HAL_DMA_Abort+0xda>
 8005326:	2301      	movs	r3, #1
 8005328:	e000      	b.n	800532c <HAL_DMA_Abort+0xdc>
 800532a:	2300      	movs	r3, #0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d013      	beq.n	8005358 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 021e 	bic.w	r2, r2, #30
 800533e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695a      	ldr	r2, [r3, #20]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800534e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	e00a      	b.n	800536e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 020e 	bic.w	r2, r2, #14
 8005366:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a3c      	ldr	r2, [pc, #240]	; (8005464 <HAL_DMA_Abort+0x214>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d072      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a3a      	ldr	r2, [pc, #232]	; (8005468 <HAL_DMA_Abort+0x218>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d06d      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a39      	ldr	r2, [pc, #228]	; (800546c <HAL_DMA_Abort+0x21c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d068      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a37      	ldr	r2, [pc, #220]	; (8005470 <HAL_DMA_Abort+0x220>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d063      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a36      	ldr	r2, [pc, #216]	; (8005474 <HAL_DMA_Abort+0x224>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d05e      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a34      	ldr	r2, [pc, #208]	; (8005478 <HAL_DMA_Abort+0x228>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d059      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a33      	ldr	r2, [pc, #204]	; (800547c <HAL_DMA_Abort+0x22c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d054      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a31      	ldr	r2, [pc, #196]	; (8005480 <HAL_DMA_Abort+0x230>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d04f      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a30      	ldr	r2, [pc, #192]	; (8005484 <HAL_DMA_Abort+0x234>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d04a      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a2e      	ldr	r2, [pc, #184]	; (8005488 <HAL_DMA_Abort+0x238>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d045      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a2d      	ldr	r2, [pc, #180]	; (800548c <HAL_DMA_Abort+0x23c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d040      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a2b      	ldr	r2, [pc, #172]	; (8005490 <HAL_DMA_Abort+0x240>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d03b      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a2a      	ldr	r2, [pc, #168]	; (8005494 <HAL_DMA_Abort+0x244>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d036      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a28      	ldr	r2, [pc, #160]	; (8005498 <HAL_DMA_Abort+0x248>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d031      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a27      	ldr	r2, [pc, #156]	; (800549c <HAL_DMA_Abort+0x24c>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d02c      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a25      	ldr	r2, [pc, #148]	; (80054a0 <HAL_DMA_Abort+0x250>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d027      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a24      	ldr	r2, [pc, #144]	; (80054a4 <HAL_DMA_Abort+0x254>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d022      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a22      	ldr	r2, [pc, #136]	; (80054a8 <HAL_DMA_Abort+0x258>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d01d      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a21      	ldr	r2, [pc, #132]	; (80054ac <HAL_DMA_Abort+0x25c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d018      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a1f      	ldr	r2, [pc, #124]	; (80054b0 <HAL_DMA_Abort+0x260>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d013      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a1e      	ldr	r2, [pc, #120]	; (80054b4 <HAL_DMA_Abort+0x264>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d00e      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a1c      	ldr	r2, [pc, #112]	; (80054b8 <HAL_DMA_Abort+0x268>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d009      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a1b      	ldr	r2, [pc, #108]	; (80054bc <HAL_DMA_Abort+0x26c>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d004      	beq.n	800545e <HAL_DMA_Abort+0x20e>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a19      	ldr	r2, [pc, #100]	; (80054c0 <HAL_DMA_Abort+0x270>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d132      	bne.n	80054c4 <HAL_DMA_Abort+0x274>
 800545e:	2301      	movs	r3, #1
 8005460:	e031      	b.n	80054c6 <HAL_DMA_Abort+0x276>
 8005462:	bf00      	nop
 8005464:	40020010 	.word	0x40020010
 8005468:	40020028 	.word	0x40020028
 800546c:	40020040 	.word	0x40020040
 8005470:	40020058 	.word	0x40020058
 8005474:	40020070 	.word	0x40020070
 8005478:	40020088 	.word	0x40020088
 800547c:	400200a0 	.word	0x400200a0
 8005480:	400200b8 	.word	0x400200b8
 8005484:	40020410 	.word	0x40020410
 8005488:	40020428 	.word	0x40020428
 800548c:	40020440 	.word	0x40020440
 8005490:	40020458 	.word	0x40020458
 8005494:	40020470 	.word	0x40020470
 8005498:	40020488 	.word	0x40020488
 800549c:	400204a0 	.word	0x400204a0
 80054a0:	400204b8 	.word	0x400204b8
 80054a4:	58025408 	.word	0x58025408
 80054a8:	5802541c 	.word	0x5802541c
 80054ac:	58025430 	.word	0x58025430
 80054b0:	58025444 	.word	0x58025444
 80054b4:	58025458 	.word	0x58025458
 80054b8:	5802546c 	.word	0x5802546c
 80054bc:	58025480 	.word	0x58025480
 80054c0:	58025494 	.word	0x58025494
 80054c4:	2300      	movs	r3, #0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d007      	beq.n	80054da <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a6d      	ldr	r2, [pc, #436]	; (8005694 <HAL_DMA_Abort+0x444>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d04a      	beq.n	800557a <HAL_DMA_Abort+0x32a>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a6b      	ldr	r2, [pc, #428]	; (8005698 <HAL_DMA_Abort+0x448>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d045      	beq.n	800557a <HAL_DMA_Abort+0x32a>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a6a      	ldr	r2, [pc, #424]	; (800569c <HAL_DMA_Abort+0x44c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d040      	beq.n	800557a <HAL_DMA_Abort+0x32a>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a68      	ldr	r2, [pc, #416]	; (80056a0 <HAL_DMA_Abort+0x450>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d03b      	beq.n	800557a <HAL_DMA_Abort+0x32a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a67      	ldr	r2, [pc, #412]	; (80056a4 <HAL_DMA_Abort+0x454>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d036      	beq.n	800557a <HAL_DMA_Abort+0x32a>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a65      	ldr	r2, [pc, #404]	; (80056a8 <HAL_DMA_Abort+0x458>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d031      	beq.n	800557a <HAL_DMA_Abort+0x32a>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a64      	ldr	r2, [pc, #400]	; (80056ac <HAL_DMA_Abort+0x45c>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d02c      	beq.n	800557a <HAL_DMA_Abort+0x32a>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a62      	ldr	r2, [pc, #392]	; (80056b0 <HAL_DMA_Abort+0x460>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d027      	beq.n	800557a <HAL_DMA_Abort+0x32a>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a61      	ldr	r2, [pc, #388]	; (80056b4 <HAL_DMA_Abort+0x464>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d022      	beq.n	800557a <HAL_DMA_Abort+0x32a>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a5f      	ldr	r2, [pc, #380]	; (80056b8 <HAL_DMA_Abort+0x468>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d01d      	beq.n	800557a <HAL_DMA_Abort+0x32a>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a5e      	ldr	r2, [pc, #376]	; (80056bc <HAL_DMA_Abort+0x46c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d018      	beq.n	800557a <HAL_DMA_Abort+0x32a>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a5c      	ldr	r2, [pc, #368]	; (80056c0 <HAL_DMA_Abort+0x470>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d013      	beq.n	800557a <HAL_DMA_Abort+0x32a>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a5b      	ldr	r2, [pc, #364]	; (80056c4 <HAL_DMA_Abort+0x474>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d00e      	beq.n	800557a <HAL_DMA_Abort+0x32a>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a59      	ldr	r2, [pc, #356]	; (80056c8 <HAL_DMA_Abort+0x478>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d009      	beq.n	800557a <HAL_DMA_Abort+0x32a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a58      	ldr	r2, [pc, #352]	; (80056cc <HAL_DMA_Abort+0x47c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d004      	beq.n	800557a <HAL_DMA_Abort+0x32a>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a56      	ldr	r2, [pc, #344]	; (80056d0 <HAL_DMA_Abort+0x480>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d108      	bne.n	800558c <HAL_DMA_Abort+0x33c>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 0201 	bic.w	r2, r2, #1
 8005588:	601a      	str	r2, [r3, #0]
 800558a:	e007      	b.n	800559c <HAL_DMA_Abort+0x34c>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0201 	bic.w	r2, r2, #1
 800559a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800559c:	e013      	b.n	80055c6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800559e:	f7fe ff45 	bl	800442c <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b05      	cmp	r3, #5
 80055aa:	d90c      	bls.n	80055c6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2220      	movs	r2, #32
 80055b0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2203      	movs	r2, #3
 80055be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e12d      	b.n	8005822 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1e5      	bne.n	800559e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a2f      	ldr	r2, [pc, #188]	; (8005694 <HAL_DMA_Abort+0x444>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d04a      	beq.n	8005672 <HAL_DMA_Abort+0x422>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a2d      	ldr	r2, [pc, #180]	; (8005698 <HAL_DMA_Abort+0x448>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d045      	beq.n	8005672 <HAL_DMA_Abort+0x422>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a2c      	ldr	r2, [pc, #176]	; (800569c <HAL_DMA_Abort+0x44c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d040      	beq.n	8005672 <HAL_DMA_Abort+0x422>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a2a      	ldr	r2, [pc, #168]	; (80056a0 <HAL_DMA_Abort+0x450>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d03b      	beq.n	8005672 <HAL_DMA_Abort+0x422>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a29      	ldr	r2, [pc, #164]	; (80056a4 <HAL_DMA_Abort+0x454>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d036      	beq.n	8005672 <HAL_DMA_Abort+0x422>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a27      	ldr	r2, [pc, #156]	; (80056a8 <HAL_DMA_Abort+0x458>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d031      	beq.n	8005672 <HAL_DMA_Abort+0x422>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a26      	ldr	r2, [pc, #152]	; (80056ac <HAL_DMA_Abort+0x45c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d02c      	beq.n	8005672 <HAL_DMA_Abort+0x422>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a24      	ldr	r2, [pc, #144]	; (80056b0 <HAL_DMA_Abort+0x460>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d027      	beq.n	8005672 <HAL_DMA_Abort+0x422>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a23      	ldr	r2, [pc, #140]	; (80056b4 <HAL_DMA_Abort+0x464>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d022      	beq.n	8005672 <HAL_DMA_Abort+0x422>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a21      	ldr	r2, [pc, #132]	; (80056b8 <HAL_DMA_Abort+0x468>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d01d      	beq.n	8005672 <HAL_DMA_Abort+0x422>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a20      	ldr	r2, [pc, #128]	; (80056bc <HAL_DMA_Abort+0x46c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d018      	beq.n	8005672 <HAL_DMA_Abort+0x422>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a1e      	ldr	r2, [pc, #120]	; (80056c0 <HAL_DMA_Abort+0x470>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d013      	beq.n	8005672 <HAL_DMA_Abort+0x422>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a1d      	ldr	r2, [pc, #116]	; (80056c4 <HAL_DMA_Abort+0x474>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00e      	beq.n	8005672 <HAL_DMA_Abort+0x422>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a1b      	ldr	r2, [pc, #108]	; (80056c8 <HAL_DMA_Abort+0x478>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d009      	beq.n	8005672 <HAL_DMA_Abort+0x422>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a1a      	ldr	r2, [pc, #104]	; (80056cc <HAL_DMA_Abort+0x47c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d004      	beq.n	8005672 <HAL_DMA_Abort+0x422>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a18      	ldr	r2, [pc, #96]	; (80056d0 <HAL_DMA_Abort+0x480>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d101      	bne.n	8005676 <HAL_DMA_Abort+0x426>
 8005672:	2301      	movs	r3, #1
 8005674:	e000      	b.n	8005678 <HAL_DMA_Abort+0x428>
 8005676:	2300      	movs	r3, #0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d02b      	beq.n	80056d4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005680:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005686:	f003 031f 	and.w	r3, r3, #31
 800568a:	223f      	movs	r2, #63	; 0x3f
 800568c:	409a      	lsls	r2, r3
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	609a      	str	r2, [r3, #8]
 8005692:	e02a      	b.n	80056ea <HAL_DMA_Abort+0x49a>
 8005694:	40020010 	.word	0x40020010
 8005698:	40020028 	.word	0x40020028
 800569c:	40020040 	.word	0x40020040
 80056a0:	40020058 	.word	0x40020058
 80056a4:	40020070 	.word	0x40020070
 80056a8:	40020088 	.word	0x40020088
 80056ac:	400200a0 	.word	0x400200a0
 80056b0:	400200b8 	.word	0x400200b8
 80056b4:	40020410 	.word	0x40020410
 80056b8:	40020428 	.word	0x40020428
 80056bc:	40020440 	.word	0x40020440
 80056c0:	40020458 	.word	0x40020458
 80056c4:	40020470 	.word	0x40020470
 80056c8:	40020488 	.word	0x40020488
 80056cc:	400204a0 	.word	0x400204a0
 80056d0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056de:	f003 031f 	and.w	r3, r3, #31
 80056e2:	2201      	movs	r2, #1
 80056e4:	409a      	lsls	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a4f      	ldr	r2, [pc, #316]	; (800582c <HAL_DMA_Abort+0x5dc>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d072      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a4d      	ldr	r2, [pc, #308]	; (8005830 <HAL_DMA_Abort+0x5e0>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d06d      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a4c      	ldr	r2, [pc, #304]	; (8005834 <HAL_DMA_Abort+0x5e4>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d068      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a4a      	ldr	r2, [pc, #296]	; (8005838 <HAL_DMA_Abort+0x5e8>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d063      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a49      	ldr	r2, [pc, #292]	; (800583c <HAL_DMA_Abort+0x5ec>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d05e      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a47      	ldr	r2, [pc, #284]	; (8005840 <HAL_DMA_Abort+0x5f0>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d059      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a46      	ldr	r2, [pc, #280]	; (8005844 <HAL_DMA_Abort+0x5f4>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d054      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a44      	ldr	r2, [pc, #272]	; (8005848 <HAL_DMA_Abort+0x5f8>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d04f      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a43      	ldr	r2, [pc, #268]	; (800584c <HAL_DMA_Abort+0x5fc>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d04a      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a41      	ldr	r2, [pc, #260]	; (8005850 <HAL_DMA_Abort+0x600>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d045      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a40      	ldr	r2, [pc, #256]	; (8005854 <HAL_DMA_Abort+0x604>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d040      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a3e      	ldr	r2, [pc, #248]	; (8005858 <HAL_DMA_Abort+0x608>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d03b      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a3d      	ldr	r2, [pc, #244]	; (800585c <HAL_DMA_Abort+0x60c>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d036      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a3b      	ldr	r2, [pc, #236]	; (8005860 <HAL_DMA_Abort+0x610>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d031      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a3a      	ldr	r2, [pc, #232]	; (8005864 <HAL_DMA_Abort+0x614>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d02c      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a38      	ldr	r2, [pc, #224]	; (8005868 <HAL_DMA_Abort+0x618>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d027      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a37      	ldr	r2, [pc, #220]	; (800586c <HAL_DMA_Abort+0x61c>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d022      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a35      	ldr	r2, [pc, #212]	; (8005870 <HAL_DMA_Abort+0x620>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d01d      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a34      	ldr	r2, [pc, #208]	; (8005874 <HAL_DMA_Abort+0x624>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d018      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a32      	ldr	r2, [pc, #200]	; (8005878 <HAL_DMA_Abort+0x628>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d013      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a31      	ldr	r2, [pc, #196]	; (800587c <HAL_DMA_Abort+0x62c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d00e      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a2f      	ldr	r2, [pc, #188]	; (8005880 <HAL_DMA_Abort+0x630>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d009      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a2e      	ldr	r2, [pc, #184]	; (8005884 <HAL_DMA_Abort+0x634>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d004      	beq.n	80057da <HAL_DMA_Abort+0x58a>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a2c      	ldr	r2, [pc, #176]	; (8005888 <HAL_DMA_Abort+0x638>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d101      	bne.n	80057de <HAL_DMA_Abort+0x58e>
 80057da:	2301      	movs	r3, #1
 80057dc:	e000      	b.n	80057e0 <HAL_DMA_Abort+0x590>
 80057de:	2300      	movs	r3, #0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d015      	beq.n	8005810 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80057ec:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00c      	beq.n	8005810 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005800:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005804:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800580e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3718      	adds	r7, #24
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	40020010 	.word	0x40020010
 8005830:	40020028 	.word	0x40020028
 8005834:	40020040 	.word	0x40020040
 8005838:	40020058 	.word	0x40020058
 800583c:	40020070 	.word	0x40020070
 8005840:	40020088 	.word	0x40020088
 8005844:	400200a0 	.word	0x400200a0
 8005848:	400200b8 	.word	0x400200b8
 800584c:	40020410 	.word	0x40020410
 8005850:	40020428 	.word	0x40020428
 8005854:	40020440 	.word	0x40020440
 8005858:	40020458 	.word	0x40020458
 800585c:	40020470 	.word	0x40020470
 8005860:	40020488 	.word	0x40020488
 8005864:	400204a0 	.word	0x400204a0
 8005868:	400204b8 	.word	0x400204b8
 800586c:	58025408 	.word	0x58025408
 8005870:	5802541c 	.word	0x5802541c
 8005874:	58025430 	.word	0x58025430
 8005878:	58025444 	.word	0x58025444
 800587c:	58025458 	.word	0x58025458
 8005880:	5802546c 	.word	0x5802546c
 8005884:	58025480 	.word	0x58025480
 8005888:	58025494 	.word	0x58025494

0800588c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e205      	b.n	8005caa <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d004      	beq.n	80058b4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2280      	movs	r2, #128	; 0x80
 80058ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e1fa      	b.n	8005caa <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a8c      	ldr	r2, [pc, #560]	; (8005aec <HAL_DMA_Abort_IT+0x260>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d04a      	beq.n	8005954 <HAL_DMA_Abort_IT+0xc8>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a8b      	ldr	r2, [pc, #556]	; (8005af0 <HAL_DMA_Abort_IT+0x264>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d045      	beq.n	8005954 <HAL_DMA_Abort_IT+0xc8>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a89      	ldr	r2, [pc, #548]	; (8005af4 <HAL_DMA_Abort_IT+0x268>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d040      	beq.n	8005954 <HAL_DMA_Abort_IT+0xc8>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a88      	ldr	r2, [pc, #544]	; (8005af8 <HAL_DMA_Abort_IT+0x26c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d03b      	beq.n	8005954 <HAL_DMA_Abort_IT+0xc8>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a86      	ldr	r2, [pc, #536]	; (8005afc <HAL_DMA_Abort_IT+0x270>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d036      	beq.n	8005954 <HAL_DMA_Abort_IT+0xc8>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a85      	ldr	r2, [pc, #532]	; (8005b00 <HAL_DMA_Abort_IT+0x274>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d031      	beq.n	8005954 <HAL_DMA_Abort_IT+0xc8>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a83      	ldr	r2, [pc, #524]	; (8005b04 <HAL_DMA_Abort_IT+0x278>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d02c      	beq.n	8005954 <HAL_DMA_Abort_IT+0xc8>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a82      	ldr	r2, [pc, #520]	; (8005b08 <HAL_DMA_Abort_IT+0x27c>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d027      	beq.n	8005954 <HAL_DMA_Abort_IT+0xc8>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a80      	ldr	r2, [pc, #512]	; (8005b0c <HAL_DMA_Abort_IT+0x280>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d022      	beq.n	8005954 <HAL_DMA_Abort_IT+0xc8>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a7f      	ldr	r2, [pc, #508]	; (8005b10 <HAL_DMA_Abort_IT+0x284>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d01d      	beq.n	8005954 <HAL_DMA_Abort_IT+0xc8>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a7d      	ldr	r2, [pc, #500]	; (8005b14 <HAL_DMA_Abort_IT+0x288>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d018      	beq.n	8005954 <HAL_DMA_Abort_IT+0xc8>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a7c      	ldr	r2, [pc, #496]	; (8005b18 <HAL_DMA_Abort_IT+0x28c>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d013      	beq.n	8005954 <HAL_DMA_Abort_IT+0xc8>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a7a      	ldr	r2, [pc, #488]	; (8005b1c <HAL_DMA_Abort_IT+0x290>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d00e      	beq.n	8005954 <HAL_DMA_Abort_IT+0xc8>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a79      	ldr	r2, [pc, #484]	; (8005b20 <HAL_DMA_Abort_IT+0x294>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d009      	beq.n	8005954 <HAL_DMA_Abort_IT+0xc8>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a77      	ldr	r2, [pc, #476]	; (8005b24 <HAL_DMA_Abort_IT+0x298>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d004      	beq.n	8005954 <HAL_DMA_Abort_IT+0xc8>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a76      	ldr	r2, [pc, #472]	; (8005b28 <HAL_DMA_Abort_IT+0x29c>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d101      	bne.n	8005958 <HAL_DMA_Abort_IT+0xcc>
 8005954:	2301      	movs	r3, #1
 8005956:	e000      	b.n	800595a <HAL_DMA_Abort_IT+0xce>
 8005958:	2300      	movs	r3, #0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d065      	beq.n	8005a2a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2204      	movs	r2, #4
 8005962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a60      	ldr	r2, [pc, #384]	; (8005aec <HAL_DMA_Abort_IT+0x260>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d04a      	beq.n	8005a06 <HAL_DMA_Abort_IT+0x17a>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a5e      	ldr	r2, [pc, #376]	; (8005af0 <HAL_DMA_Abort_IT+0x264>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d045      	beq.n	8005a06 <HAL_DMA_Abort_IT+0x17a>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a5d      	ldr	r2, [pc, #372]	; (8005af4 <HAL_DMA_Abort_IT+0x268>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d040      	beq.n	8005a06 <HAL_DMA_Abort_IT+0x17a>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a5b      	ldr	r2, [pc, #364]	; (8005af8 <HAL_DMA_Abort_IT+0x26c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d03b      	beq.n	8005a06 <HAL_DMA_Abort_IT+0x17a>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a5a      	ldr	r2, [pc, #360]	; (8005afc <HAL_DMA_Abort_IT+0x270>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d036      	beq.n	8005a06 <HAL_DMA_Abort_IT+0x17a>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a58      	ldr	r2, [pc, #352]	; (8005b00 <HAL_DMA_Abort_IT+0x274>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d031      	beq.n	8005a06 <HAL_DMA_Abort_IT+0x17a>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a57      	ldr	r2, [pc, #348]	; (8005b04 <HAL_DMA_Abort_IT+0x278>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d02c      	beq.n	8005a06 <HAL_DMA_Abort_IT+0x17a>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a55      	ldr	r2, [pc, #340]	; (8005b08 <HAL_DMA_Abort_IT+0x27c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d027      	beq.n	8005a06 <HAL_DMA_Abort_IT+0x17a>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a54      	ldr	r2, [pc, #336]	; (8005b0c <HAL_DMA_Abort_IT+0x280>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d022      	beq.n	8005a06 <HAL_DMA_Abort_IT+0x17a>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a52      	ldr	r2, [pc, #328]	; (8005b10 <HAL_DMA_Abort_IT+0x284>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d01d      	beq.n	8005a06 <HAL_DMA_Abort_IT+0x17a>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a51      	ldr	r2, [pc, #324]	; (8005b14 <HAL_DMA_Abort_IT+0x288>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d018      	beq.n	8005a06 <HAL_DMA_Abort_IT+0x17a>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a4f      	ldr	r2, [pc, #316]	; (8005b18 <HAL_DMA_Abort_IT+0x28c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d013      	beq.n	8005a06 <HAL_DMA_Abort_IT+0x17a>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a4e      	ldr	r2, [pc, #312]	; (8005b1c <HAL_DMA_Abort_IT+0x290>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d00e      	beq.n	8005a06 <HAL_DMA_Abort_IT+0x17a>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a4c      	ldr	r2, [pc, #304]	; (8005b20 <HAL_DMA_Abort_IT+0x294>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d009      	beq.n	8005a06 <HAL_DMA_Abort_IT+0x17a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a4b      	ldr	r2, [pc, #300]	; (8005b24 <HAL_DMA_Abort_IT+0x298>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d004      	beq.n	8005a06 <HAL_DMA_Abort_IT+0x17a>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a49      	ldr	r2, [pc, #292]	; (8005b28 <HAL_DMA_Abort_IT+0x29c>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d108      	bne.n	8005a18 <HAL_DMA_Abort_IT+0x18c>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 0201 	bic.w	r2, r2, #1
 8005a14:	601a      	str	r2, [r3, #0]
 8005a16:	e147      	b.n	8005ca8 <HAL_DMA_Abort_IT+0x41c>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0201 	bic.w	r2, r2, #1
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	e13e      	b.n	8005ca8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 020e 	bic.w	r2, r2, #14
 8005a38:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a2b      	ldr	r2, [pc, #172]	; (8005aec <HAL_DMA_Abort_IT+0x260>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d04a      	beq.n	8005ada <HAL_DMA_Abort_IT+0x24e>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a29      	ldr	r2, [pc, #164]	; (8005af0 <HAL_DMA_Abort_IT+0x264>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d045      	beq.n	8005ada <HAL_DMA_Abort_IT+0x24e>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a28      	ldr	r2, [pc, #160]	; (8005af4 <HAL_DMA_Abort_IT+0x268>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d040      	beq.n	8005ada <HAL_DMA_Abort_IT+0x24e>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a26      	ldr	r2, [pc, #152]	; (8005af8 <HAL_DMA_Abort_IT+0x26c>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d03b      	beq.n	8005ada <HAL_DMA_Abort_IT+0x24e>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a25      	ldr	r2, [pc, #148]	; (8005afc <HAL_DMA_Abort_IT+0x270>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d036      	beq.n	8005ada <HAL_DMA_Abort_IT+0x24e>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a23      	ldr	r2, [pc, #140]	; (8005b00 <HAL_DMA_Abort_IT+0x274>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d031      	beq.n	8005ada <HAL_DMA_Abort_IT+0x24e>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a22      	ldr	r2, [pc, #136]	; (8005b04 <HAL_DMA_Abort_IT+0x278>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d02c      	beq.n	8005ada <HAL_DMA_Abort_IT+0x24e>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a20      	ldr	r2, [pc, #128]	; (8005b08 <HAL_DMA_Abort_IT+0x27c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d027      	beq.n	8005ada <HAL_DMA_Abort_IT+0x24e>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a1f      	ldr	r2, [pc, #124]	; (8005b0c <HAL_DMA_Abort_IT+0x280>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d022      	beq.n	8005ada <HAL_DMA_Abort_IT+0x24e>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a1d      	ldr	r2, [pc, #116]	; (8005b10 <HAL_DMA_Abort_IT+0x284>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d01d      	beq.n	8005ada <HAL_DMA_Abort_IT+0x24e>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a1c      	ldr	r2, [pc, #112]	; (8005b14 <HAL_DMA_Abort_IT+0x288>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d018      	beq.n	8005ada <HAL_DMA_Abort_IT+0x24e>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a1a      	ldr	r2, [pc, #104]	; (8005b18 <HAL_DMA_Abort_IT+0x28c>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d013      	beq.n	8005ada <HAL_DMA_Abort_IT+0x24e>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a19      	ldr	r2, [pc, #100]	; (8005b1c <HAL_DMA_Abort_IT+0x290>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d00e      	beq.n	8005ada <HAL_DMA_Abort_IT+0x24e>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a17      	ldr	r2, [pc, #92]	; (8005b20 <HAL_DMA_Abort_IT+0x294>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d009      	beq.n	8005ada <HAL_DMA_Abort_IT+0x24e>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a16      	ldr	r2, [pc, #88]	; (8005b24 <HAL_DMA_Abort_IT+0x298>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d004      	beq.n	8005ada <HAL_DMA_Abort_IT+0x24e>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a14      	ldr	r2, [pc, #80]	; (8005b28 <HAL_DMA_Abort_IT+0x29c>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d128      	bne.n	8005b2c <HAL_DMA_Abort_IT+0x2a0>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 0201 	bic.w	r2, r2, #1
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	e027      	b.n	8005b3c <HAL_DMA_Abort_IT+0x2b0>
 8005aec:	40020010 	.word	0x40020010
 8005af0:	40020028 	.word	0x40020028
 8005af4:	40020040 	.word	0x40020040
 8005af8:	40020058 	.word	0x40020058
 8005afc:	40020070 	.word	0x40020070
 8005b00:	40020088 	.word	0x40020088
 8005b04:	400200a0 	.word	0x400200a0
 8005b08:	400200b8 	.word	0x400200b8
 8005b0c:	40020410 	.word	0x40020410
 8005b10:	40020428 	.word	0x40020428
 8005b14:	40020440 	.word	0x40020440
 8005b18:	40020458 	.word	0x40020458
 8005b1c:	40020470 	.word	0x40020470
 8005b20:	40020488 	.word	0x40020488
 8005b24:	400204a0 	.word	0x400204a0
 8005b28:	400204b8 	.word	0x400204b8
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 0201 	bic.w	r2, r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a5c      	ldr	r2, [pc, #368]	; (8005cb4 <HAL_DMA_Abort_IT+0x428>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d072      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x3a0>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a5b      	ldr	r2, [pc, #364]	; (8005cb8 <HAL_DMA_Abort_IT+0x42c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d06d      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x3a0>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a59      	ldr	r2, [pc, #356]	; (8005cbc <HAL_DMA_Abort_IT+0x430>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d068      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x3a0>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a58      	ldr	r2, [pc, #352]	; (8005cc0 <HAL_DMA_Abort_IT+0x434>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d063      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x3a0>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a56      	ldr	r2, [pc, #344]	; (8005cc4 <HAL_DMA_Abort_IT+0x438>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d05e      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x3a0>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a55      	ldr	r2, [pc, #340]	; (8005cc8 <HAL_DMA_Abort_IT+0x43c>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d059      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x3a0>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a53      	ldr	r2, [pc, #332]	; (8005ccc <HAL_DMA_Abort_IT+0x440>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d054      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x3a0>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a52      	ldr	r2, [pc, #328]	; (8005cd0 <HAL_DMA_Abort_IT+0x444>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d04f      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x3a0>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a50      	ldr	r2, [pc, #320]	; (8005cd4 <HAL_DMA_Abort_IT+0x448>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d04a      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x3a0>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a4f      	ldr	r2, [pc, #316]	; (8005cd8 <HAL_DMA_Abort_IT+0x44c>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d045      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x3a0>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a4d      	ldr	r2, [pc, #308]	; (8005cdc <HAL_DMA_Abort_IT+0x450>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d040      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x3a0>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a4c      	ldr	r2, [pc, #304]	; (8005ce0 <HAL_DMA_Abort_IT+0x454>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d03b      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x3a0>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a4a      	ldr	r2, [pc, #296]	; (8005ce4 <HAL_DMA_Abort_IT+0x458>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d036      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x3a0>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a49      	ldr	r2, [pc, #292]	; (8005ce8 <HAL_DMA_Abort_IT+0x45c>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d031      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x3a0>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a47      	ldr	r2, [pc, #284]	; (8005cec <HAL_DMA_Abort_IT+0x460>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d02c      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x3a0>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a46      	ldr	r2, [pc, #280]	; (8005cf0 <HAL_DMA_Abort_IT+0x464>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d027      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x3a0>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a44      	ldr	r2, [pc, #272]	; (8005cf4 <HAL_DMA_Abort_IT+0x468>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d022      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x3a0>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a43      	ldr	r2, [pc, #268]	; (8005cf8 <HAL_DMA_Abort_IT+0x46c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d01d      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x3a0>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a41      	ldr	r2, [pc, #260]	; (8005cfc <HAL_DMA_Abort_IT+0x470>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d018      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x3a0>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a40      	ldr	r2, [pc, #256]	; (8005d00 <HAL_DMA_Abort_IT+0x474>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d013      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x3a0>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a3e      	ldr	r2, [pc, #248]	; (8005d04 <HAL_DMA_Abort_IT+0x478>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00e      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x3a0>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a3d      	ldr	r2, [pc, #244]	; (8005d08 <HAL_DMA_Abort_IT+0x47c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d009      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x3a0>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a3b      	ldr	r2, [pc, #236]	; (8005d0c <HAL_DMA_Abort_IT+0x480>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d004      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x3a0>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a3a      	ldr	r2, [pc, #232]	; (8005d10 <HAL_DMA_Abort_IT+0x484>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d101      	bne.n	8005c30 <HAL_DMA_Abort_IT+0x3a4>
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e000      	b.n	8005c32 <HAL_DMA_Abort_IT+0x3a6>
 8005c30:	2300      	movs	r3, #0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d028      	beq.n	8005c88 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c44:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c4a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c50:	f003 031f 	and.w	r3, r3, #31
 8005c54:	2201      	movs	r2, #1
 8005c56:	409a      	lsls	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005c64:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00c      	beq.n	8005c88 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c7c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c86:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	40020010 	.word	0x40020010
 8005cb8:	40020028 	.word	0x40020028
 8005cbc:	40020040 	.word	0x40020040
 8005cc0:	40020058 	.word	0x40020058
 8005cc4:	40020070 	.word	0x40020070
 8005cc8:	40020088 	.word	0x40020088
 8005ccc:	400200a0 	.word	0x400200a0
 8005cd0:	400200b8 	.word	0x400200b8
 8005cd4:	40020410 	.word	0x40020410
 8005cd8:	40020428 	.word	0x40020428
 8005cdc:	40020440 	.word	0x40020440
 8005ce0:	40020458 	.word	0x40020458
 8005ce4:	40020470 	.word	0x40020470
 8005ce8:	40020488 	.word	0x40020488
 8005cec:	400204a0 	.word	0x400204a0
 8005cf0:	400204b8 	.word	0x400204b8
 8005cf4:	58025408 	.word	0x58025408
 8005cf8:	5802541c 	.word	0x5802541c
 8005cfc:	58025430 	.word	0x58025430
 8005d00:	58025444 	.word	0x58025444
 8005d04:	58025458 	.word	0x58025458
 8005d08:	5802546c 	.word	0x5802546c
 8005d0c:	58025480 	.word	0x58025480
 8005d10:	58025494 	.word	0x58025494

08005d14 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b08a      	sub	sp, #40	; 0x28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d20:	4b67      	ldr	r3, [pc, #412]	; (8005ec0 <HAL_DMA_IRQHandler+0x1ac>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a67      	ldr	r2, [pc, #412]	; (8005ec4 <HAL_DMA_IRQHandler+0x1b0>)
 8005d26:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2a:	0a9b      	lsrs	r3, r3, #10
 8005d2c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d32:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d38:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a5f      	ldr	r2, [pc, #380]	; (8005ec8 <HAL_DMA_IRQHandler+0x1b4>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d04a      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xd2>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a5d      	ldr	r2, [pc, #372]	; (8005ecc <HAL_DMA_IRQHandler+0x1b8>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d045      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xd2>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a5c      	ldr	r2, [pc, #368]	; (8005ed0 <HAL_DMA_IRQHandler+0x1bc>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d040      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xd2>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a5a      	ldr	r2, [pc, #360]	; (8005ed4 <HAL_DMA_IRQHandler+0x1c0>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d03b      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xd2>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a59      	ldr	r2, [pc, #356]	; (8005ed8 <HAL_DMA_IRQHandler+0x1c4>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d036      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xd2>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a57      	ldr	r2, [pc, #348]	; (8005edc <HAL_DMA_IRQHandler+0x1c8>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d031      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xd2>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a56      	ldr	r2, [pc, #344]	; (8005ee0 <HAL_DMA_IRQHandler+0x1cc>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d02c      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xd2>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a54      	ldr	r2, [pc, #336]	; (8005ee4 <HAL_DMA_IRQHandler+0x1d0>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d027      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xd2>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a53      	ldr	r2, [pc, #332]	; (8005ee8 <HAL_DMA_IRQHandler+0x1d4>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d022      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xd2>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a51      	ldr	r2, [pc, #324]	; (8005eec <HAL_DMA_IRQHandler+0x1d8>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d01d      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xd2>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a50      	ldr	r2, [pc, #320]	; (8005ef0 <HAL_DMA_IRQHandler+0x1dc>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d018      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xd2>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a4e      	ldr	r2, [pc, #312]	; (8005ef4 <HAL_DMA_IRQHandler+0x1e0>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d013      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xd2>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a4d      	ldr	r2, [pc, #308]	; (8005ef8 <HAL_DMA_IRQHandler+0x1e4>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d00e      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xd2>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a4b      	ldr	r2, [pc, #300]	; (8005efc <HAL_DMA_IRQHandler+0x1e8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d009      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xd2>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a4a      	ldr	r2, [pc, #296]	; (8005f00 <HAL_DMA_IRQHandler+0x1ec>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d004      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xd2>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a48      	ldr	r2, [pc, #288]	; (8005f04 <HAL_DMA_IRQHandler+0x1f0>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d101      	bne.n	8005dea <HAL_DMA_IRQHandler+0xd6>
 8005de6:	2301      	movs	r3, #1
 8005de8:	e000      	b.n	8005dec <HAL_DMA_IRQHandler+0xd8>
 8005dea:	2300      	movs	r3, #0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 842b 	beq.w	8006648 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df6:	f003 031f 	and.w	r3, r3, #31
 8005dfa:	2208      	movs	r2, #8
 8005dfc:	409a      	lsls	r2, r3
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	4013      	ands	r3, r2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 80a2 	beq.w	8005f4c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a2e      	ldr	r2, [pc, #184]	; (8005ec8 <HAL_DMA_IRQHandler+0x1b4>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d04a      	beq.n	8005ea8 <HAL_DMA_IRQHandler+0x194>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a2d      	ldr	r2, [pc, #180]	; (8005ecc <HAL_DMA_IRQHandler+0x1b8>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d045      	beq.n	8005ea8 <HAL_DMA_IRQHandler+0x194>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a2b      	ldr	r2, [pc, #172]	; (8005ed0 <HAL_DMA_IRQHandler+0x1bc>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d040      	beq.n	8005ea8 <HAL_DMA_IRQHandler+0x194>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a2a      	ldr	r2, [pc, #168]	; (8005ed4 <HAL_DMA_IRQHandler+0x1c0>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d03b      	beq.n	8005ea8 <HAL_DMA_IRQHandler+0x194>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a28      	ldr	r2, [pc, #160]	; (8005ed8 <HAL_DMA_IRQHandler+0x1c4>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d036      	beq.n	8005ea8 <HAL_DMA_IRQHandler+0x194>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a27      	ldr	r2, [pc, #156]	; (8005edc <HAL_DMA_IRQHandler+0x1c8>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d031      	beq.n	8005ea8 <HAL_DMA_IRQHandler+0x194>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a25      	ldr	r2, [pc, #148]	; (8005ee0 <HAL_DMA_IRQHandler+0x1cc>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d02c      	beq.n	8005ea8 <HAL_DMA_IRQHandler+0x194>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a24      	ldr	r2, [pc, #144]	; (8005ee4 <HAL_DMA_IRQHandler+0x1d0>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d027      	beq.n	8005ea8 <HAL_DMA_IRQHandler+0x194>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a22      	ldr	r2, [pc, #136]	; (8005ee8 <HAL_DMA_IRQHandler+0x1d4>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d022      	beq.n	8005ea8 <HAL_DMA_IRQHandler+0x194>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a21      	ldr	r2, [pc, #132]	; (8005eec <HAL_DMA_IRQHandler+0x1d8>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d01d      	beq.n	8005ea8 <HAL_DMA_IRQHandler+0x194>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a1f      	ldr	r2, [pc, #124]	; (8005ef0 <HAL_DMA_IRQHandler+0x1dc>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d018      	beq.n	8005ea8 <HAL_DMA_IRQHandler+0x194>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a1e      	ldr	r2, [pc, #120]	; (8005ef4 <HAL_DMA_IRQHandler+0x1e0>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d013      	beq.n	8005ea8 <HAL_DMA_IRQHandler+0x194>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a1c      	ldr	r2, [pc, #112]	; (8005ef8 <HAL_DMA_IRQHandler+0x1e4>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d00e      	beq.n	8005ea8 <HAL_DMA_IRQHandler+0x194>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a1b      	ldr	r2, [pc, #108]	; (8005efc <HAL_DMA_IRQHandler+0x1e8>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d009      	beq.n	8005ea8 <HAL_DMA_IRQHandler+0x194>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a19      	ldr	r2, [pc, #100]	; (8005f00 <HAL_DMA_IRQHandler+0x1ec>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d004      	beq.n	8005ea8 <HAL_DMA_IRQHandler+0x194>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a18      	ldr	r2, [pc, #96]	; (8005f04 <HAL_DMA_IRQHandler+0x1f0>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d12f      	bne.n	8005f08 <HAL_DMA_IRQHandler+0x1f4>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0304 	and.w	r3, r3, #4
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	bf14      	ite	ne
 8005eb6:	2301      	movne	r3, #1
 8005eb8:	2300      	moveq	r3, #0
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	e02e      	b.n	8005f1c <HAL_DMA_IRQHandler+0x208>
 8005ebe:	bf00      	nop
 8005ec0:	24000014 	.word	0x24000014
 8005ec4:	1b4e81b5 	.word	0x1b4e81b5
 8005ec8:	40020010 	.word	0x40020010
 8005ecc:	40020028 	.word	0x40020028
 8005ed0:	40020040 	.word	0x40020040
 8005ed4:	40020058 	.word	0x40020058
 8005ed8:	40020070 	.word	0x40020070
 8005edc:	40020088 	.word	0x40020088
 8005ee0:	400200a0 	.word	0x400200a0
 8005ee4:	400200b8 	.word	0x400200b8
 8005ee8:	40020410 	.word	0x40020410
 8005eec:	40020428 	.word	0x40020428
 8005ef0:	40020440 	.word	0x40020440
 8005ef4:	40020458 	.word	0x40020458
 8005ef8:	40020470 	.word	0x40020470
 8005efc:	40020488 	.word	0x40020488
 8005f00:	400204a0 	.word	0x400204a0
 8005f04:	400204b8 	.word	0x400204b8
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0308 	and.w	r3, r3, #8
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	bf14      	ite	ne
 8005f16:	2301      	movne	r3, #1
 8005f18:	2300      	moveq	r3, #0
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d015      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 0204 	bic.w	r2, r2, #4
 8005f2e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f34:	f003 031f 	and.w	r3, r3, #31
 8005f38:	2208      	movs	r2, #8
 8005f3a:	409a      	lsls	r2, r3
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f44:	f043 0201 	orr.w	r2, r3, #1
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f50:	f003 031f 	and.w	r3, r3, #31
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	fa22 f303 	lsr.w	r3, r2, r3
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d06e      	beq.n	8006040 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a69      	ldr	r2, [pc, #420]	; (800610c <HAL_DMA_IRQHandler+0x3f8>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d04a      	beq.n	8006002 <HAL_DMA_IRQHandler+0x2ee>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a67      	ldr	r2, [pc, #412]	; (8006110 <HAL_DMA_IRQHandler+0x3fc>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d045      	beq.n	8006002 <HAL_DMA_IRQHandler+0x2ee>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a66      	ldr	r2, [pc, #408]	; (8006114 <HAL_DMA_IRQHandler+0x400>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d040      	beq.n	8006002 <HAL_DMA_IRQHandler+0x2ee>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a64      	ldr	r2, [pc, #400]	; (8006118 <HAL_DMA_IRQHandler+0x404>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d03b      	beq.n	8006002 <HAL_DMA_IRQHandler+0x2ee>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a63      	ldr	r2, [pc, #396]	; (800611c <HAL_DMA_IRQHandler+0x408>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d036      	beq.n	8006002 <HAL_DMA_IRQHandler+0x2ee>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a61      	ldr	r2, [pc, #388]	; (8006120 <HAL_DMA_IRQHandler+0x40c>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d031      	beq.n	8006002 <HAL_DMA_IRQHandler+0x2ee>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a60      	ldr	r2, [pc, #384]	; (8006124 <HAL_DMA_IRQHandler+0x410>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d02c      	beq.n	8006002 <HAL_DMA_IRQHandler+0x2ee>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a5e      	ldr	r2, [pc, #376]	; (8006128 <HAL_DMA_IRQHandler+0x414>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d027      	beq.n	8006002 <HAL_DMA_IRQHandler+0x2ee>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a5d      	ldr	r2, [pc, #372]	; (800612c <HAL_DMA_IRQHandler+0x418>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d022      	beq.n	8006002 <HAL_DMA_IRQHandler+0x2ee>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a5b      	ldr	r2, [pc, #364]	; (8006130 <HAL_DMA_IRQHandler+0x41c>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d01d      	beq.n	8006002 <HAL_DMA_IRQHandler+0x2ee>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a5a      	ldr	r2, [pc, #360]	; (8006134 <HAL_DMA_IRQHandler+0x420>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d018      	beq.n	8006002 <HAL_DMA_IRQHandler+0x2ee>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a58      	ldr	r2, [pc, #352]	; (8006138 <HAL_DMA_IRQHandler+0x424>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d013      	beq.n	8006002 <HAL_DMA_IRQHandler+0x2ee>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a57      	ldr	r2, [pc, #348]	; (800613c <HAL_DMA_IRQHandler+0x428>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d00e      	beq.n	8006002 <HAL_DMA_IRQHandler+0x2ee>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a55      	ldr	r2, [pc, #340]	; (8006140 <HAL_DMA_IRQHandler+0x42c>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d009      	beq.n	8006002 <HAL_DMA_IRQHandler+0x2ee>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a54      	ldr	r2, [pc, #336]	; (8006144 <HAL_DMA_IRQHandler+0x430>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d004      	beq.n	8006002 <HAL_DMA_IRQHandler+0x2ee>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a52      	ldr	r2, [pc, #328]	; (8006148 <HAL_DMA_IRQHandler+0x434>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d10a      	bne.n	8006018 <HAL_DMA_IRQHandler+0x304>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600c:	2b00      	cmp	r3, #0
 800600e:	bf14      	ite	ne
 8006010:	2301      	movne	r3, #1
 8006012:	2300      	moveq	r3, #0
 8006014:	b2db      	uxtb	r3, r3
 8006016:	e003      	b.n	8006020 <HAL_DMA_IRQHandler+0x30c>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2300      	movs	r3, #0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00d      	beq.n	8006040 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006028:	f003 031f 	and.w	r3, r3, #31
 800602c:	2201      	movs	r2, #1
 800602e:	409a      	lsls	r2, r3
 8006030:	6a3b      	ldr	r3, [r7, #32]
 8006032:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006038:	f043 0202 	orr.w	r2, r3, #2
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006044:	f003 031f 	and.w	r3, r3, #31
 8006048:	2204      	movs	r2, #4
 800604a:	409a      	lsls	r2, r3
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	4013      	ands	r3, r2
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 808f 	beq.w	8006174 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a2c      	ldr	r2, [pc, #176]	; (800610c <HAL_DMA_IRQHandler+0x3f8>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d04a      	beq.n	80060f6 <HAL_DMA_IRQHandler+0x3e2>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a2a      	ldr	r2, [pc, #168]	; (8006110 <HAL_DMA_IRQHandler+0x3fc>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d045      	beq.n	80060f6 <HAL_DMA_IRQHandler+0x3e2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a29      	ldr	r2, [pc, #164]	; (8006114 <HAL_DMA_IRQHandler+0x400>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d040      	beq.n	80060f6 <HAL_DMA_IRQHandler+0x3e2>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a27      	ldr	r2, [pc, #156]	; (8006118 <HAL_DMA_IRQHandler+0x404>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d03b      	beq.n	80060f6 <HAL_DMA_IRQHandler+0x3e2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a26      	ldr	r2, [pc, #152]	; (800611c <HAL_DMA_IRQHandler+0x408>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d036      	beq.n	80060f6 <HAL_DMA_IRQHandler+0x3e2>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a24      	ldr	r2, [pc, #144]	; (8006120 <HAL_DMA_IRQHandler+0x40c>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d031      	beq.n	80060f6 <HAL_DMA_IRQHandler+0x3e2>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a23      	ldr	r2, [pc, #140]	; (8006124 <HAL_DMA_IRQHandler+0x410>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d02c      	beq.n	80060f6 <HAL_DMA_IRQHandler+0x3e2>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a21      	ldr	r2, [pc, #132]	; (8006128 <HAL_DMA_IRQHandler+0x414>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d027      	beq.n	80060f6 <HAL_DMA_IRQHandler+0x3e2>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a20      	ldr	r2, [pc, #128]	; (800612c <HAL_DMA_IRQHandler+0x418>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d022      	beq.n	80060f6 <HAL_DMA_IRQHandler+0x3e2>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a1e      	ldr	r2, [pc, #120]	; (8006130 <HAL_DMA_IRQHandler+0x41c>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d01d      	beq.n	80060f6 <HAL_DMA_IRQHandler+0x3e2>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a1d      	ldr	r2, [pc, #116]	; (8006134 <HAL_DMA_IRQHandler+0x420>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d018      	beq.n	80060f6 <HAL_DMA_IRQHandler+0x3e2>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a1b      	ldr	r2, [pc, #108]	; (8006138 <HAL_DMA_IRQHandler+0x424>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d013      	beq.n	80060f6 <HAL_DMA_IRQHandler+0x3e2>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a1a      	ldr	r2, [pc, #104]	; (800613c <HAL_DMA_IRQHandler+0x428>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d00e      	beq.n	80060f6 <HAL_DMA_IRQHandler+0x3e2>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a18      	ldr	r2, [pc, #96]	; (8006140 <HAL_DMA_IRQHandler+0x42c>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d009      	beq.n	80060f6 <HAL_DMA_IRQHandler+0x3e2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a17      	ldr	r2, [pc, #92]	; (8006144 <HAL_DMA_IRQHandler+0x430>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d004      	beq.n	80060f6 <HAL_DMA_IRQHandler+0x3e2>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a15      	ldr	r2, [pc, #84]	; (8006148 <HAL_DMA_IRQHandler+0x434>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d12a      	bne.n	800614c <HAL_DMA_IRQHandler+0x438>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	2b00      	cmp	r3, #0
 8006102:	bf14      	ite	ne
 8006104:	2301      	movne	r3, #1
 8006106:	2300      	moveq	r3, #0
 8006108:	b2db      	uxtb	r3, r3
 800610a:	e023      	b.n	8006154 <HAL_DMA_IRQHandler+0x440>
 800610c:	40020010 	.word	0x40020010
 8006110:	40020028 	.word	0x40020028
 8006114:	40020040 	.word	0x40020040
 8006118:	40020058 	.word	0x40020058
 800611c:	40020070 	.word	0x40020070
 8006120:	40020088 	.word	0x40020088
 8006124:	400200a0 	.word	0x400200a0
 8006128:	400200b8 	.word	0x400200b8
 800612c:	40020410 	.word	0x40020410
 8006130:	40020428 	.word	0x40020428
 8006134:	40020440 	.word	0x40020440
 8006138:	40020458 	.word	0x40020458
 800613c:	40020470 	.word	0x40020470
 8006140:	40020488 	.word	0x40020488
 8006144:	400204a0 	.word	0x400204a0
 8006148:	400204b8 	.word	0x400204b8
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2300      	movs	r3, #0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00d      	beq.n	8006174 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800615c:	f003 031f 	and.w	r3, r3, #31
 8006160:	2204      	movs	r2, #4
 8006162:	409a      	lsls	r2, r3
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800616c:	f043 0204 	orr.w	r2, r3, #4
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006178:	f003 031f 	and.w	r3, r3, #31
 800617c:	2210      	movs	r2, #16
 800617e:	409a      	lsls	r2, r3
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	4013      	ands	r3, r2
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 80a6 	beq.w	80062d6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a85      	ldr	r2, [pc, #532]	; (80063a4 <HAL_DMA_IRQHandler+0x690>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d04a      	beq.n	800622a <HAL_DMA_IRQHandler+0x516>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a83      	ldr	r2, [pc, #524]	; (80063a8 <HAL_DMA_IRQHandler+0x694>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d045      	beq.n	800622a <HAL_DMA_IRQHandler+0x516>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a82      	ldr	r2, [pc, #520]	; (80063ac <HAL_DMA_IRQHandler+0x698>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d040      	beq.n	800622a <HAL_DMA_IRQHandler+0x516>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a80      	ldr	r2, [pc, #512]	; (80063b0 <HAL_DMA_IRQHandler+0x69c>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d03b      	beq.n	800622a <HAL_DMA_IRQHandler+0x516>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a7f      	ldr	r2, [pc, #508]	; (80063b4 <HAL_DMA_IRQHandler+0x6a0>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d036      	beq.n	800622a <HAL_DMA_IRQHandler+0x516>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a7d      	ldr	r2, [pc, #500]	; (80063b8 <HAL_DMA_IRQHandler+0x6a4>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d031      	beq.n	800622a <HAL_DMA_IRQHandler+0x516>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a7c      	ldr	r2, [pc, #496]	; (80063bc <HAL_DMA_IRQHandler+0x6a8>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d02c      	beq.n	800622a <HAL_DMA_IRQHandler+0x516>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a7a      	ldr	r2, [pc, #488]	; (80063c0 <HAL_DMA_IRQHandler+0x6ac>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d027      	beq.n	800622a <HAL_DMA_IRQHandler+0x516>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a79      	ldr	r2, [pc, #484]	; (80063c4 <HAL_DMA_IRQHandler+0x6b0>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d022      	beq.n	800622a <HAL_DMA_IRQHandler+0x516>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a77      	ldr	r2, [pc, #476]	; (80063c8 <HAL_DMA_IRQHandler+0x6b4>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d01d      	beq.n	800622a <HAL_DMA_IRQHandler+0x516>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a76      	ldr	r2, [pc, #472]	; (80063cc <HAL_DMA_IRQHandler+0x6b8>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d018      	beq.n	800622a <HAL_DMA_IRQHandler+0x516>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a74      	ldr	r2, [pc, #464]	; (80063d0 <HAL_DMA_IRQHandler+0x6bc>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d013      	beq.n	800622a <HAL_DMA_IRQHandler+0x516>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a73      	ldr	r2, [pc, #460]	; (80063d4 <HAL_DMA_IRQHandler+0x6c0>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d00e      	beq.n	800622a <HAL_DMA_IRQHandler+0x516>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a71      	ldr	r2, [pc, #452]	; (80063d8 <HAL_DMA_IRQHandler+0x6c4>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d009      	beq.n	800622a <HAL_DMA_IRQHandler+0x516>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a70      	ldr	r2, [pc, #448]	; (80063dc <HAL_DMA_IRQHandler+0x6c8>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d004      	beq.n	800622a <HAL_DMA_IRQHandler+0x516>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a6e      	ldr	r2, [pc, #440]	; (80063e0 <HAL_DMA_IRQHandler+0x6cc>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d10a      	bne.n	8006240 <HAL_DMA_IRQHandler+0x52c>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0308 	and.w	r3, r3, #8
 8006234:	2b00      	cmp	r3, #0
 8006236:	bf14      	ite	ne
 8006238:	2301      	movne	r3, #1
 800623a:	2300      	moveq	r3, #0
 800623c:	b2db      	uxtb	r3, r3
 800623e:	e009      	b.n	8006254 <HAL_DMA_IRQHandler+0x540>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0304 	and.w	r3, r3, #4
 800624a:	2b00      	cmp	r3, #0
 800624c:	bf14      	ite	ne
 800624e:	2301      	movne	r3, #1
 8006250:	2300      	moveq	r3, #0
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b00      	cmp	r3, #0
 8006256:	d03e      	beq.n	80062d6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800625c:	f003 031f 	and.w	r3, r3, #31
 8006260:	2210      	movs	r2, #16
 8006262:	409a      	lsls	r2, r3
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d018      	beq.n	80062a8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d108      	bne.n	8006296 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006288:	2b00      	cmp	r3, #0
 800628a:	d024      	beq.n	80062d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	4798      	blx	r3
 8006294:	e01f      	b.n	80062d6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800629a:	2b00      	cmp	r3, #0
 800629c:	d01b      	beq.n	80062d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	4798      	blx	r3
 80062a6:	e016      	b.n	80062d6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d107      	bne.n	80062c6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 0208 	bic.w	r2, r2, #8
 80062c4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062da:	f003 031f 	and.w	r3, r3, #31
 80062de:	2220      	movs	r2, #32
 80062e0:	409a      	lsls	r2, r3
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	4013      	ands	r3, r2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f000 8110 	beq.w	800650c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a2c      	ldr	r2, [pc, #176]	; (80063a4 <HAL_DMA_IRQHandler+0x690>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d04a      	beq.n	800638c <HAL_DMA_IRQHandler+0x678>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a2b      	ldr	r2, [pc, #172]	; (80063a8 <HAL_DMA_IRQHandler+0x694>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d045      	beq.n	800638c <HAL_DMA_IRQHandler+0x678>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a29      	ldr	r2, [pc, #164]	; (80063ac <HAL_DMA_IRQHandler+0x698>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d040      	beq.n	800638c <HAL_DMA_IRQHandler+0x678>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a28      	ldr	r2, [pc, #160]	; (80063b0 <HAL_DMA_IRQHandler+0x69c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d03b      	beq.n	800638c <HAL_DMA_IRQHandler+0x678>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a26      	ldr	r2, [pc, #152]	; (80063b4 <HAL_DMA_IRQHandler+0x6a0>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d036      	beq.n	800638c <HAL_DMA_IRQHandler+0x678>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a25      	ldr	r2, [pc, #148]	; (80063b8 <HAL_DMA_IRQHandler+0x6a4>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d031      	beq.n	800638c <HAL_DMA_IRQHandler+0x678>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a23      	ldr	r2, [pc, #140]	; (80063bc <HAL_DMA_IRQHandler+0x6a8>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d02c      	beq.n	800638c <HAL_DMA_IRQHandler+0x678>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a22      	ldr	r2, [pc, #136]	; (80063c0 <HAL_DMA_IRQHandler+0x6ac>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d027      	beq.n	800638c <HAL_DMA_IRQHandler+0x678>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a20      	ldr	r2, [pc, #128]	; (80063c4 <HAL_DMA_IRQHandler+0x6b0>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d022      	beq.n	800638c <HAL_DMA_IRQHandler+0x678>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a1f      	ldr	r2, [pc, #124]	; (80063c8 <HAL_DMA_IRQHandler+0x6b4>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d01d      	beq.n	800638c <HAL_DMA_IRQHandler+0x678>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a1d      	ldr	r2, [pc, #116]	; (80063cc <HAL_DMA_IRQHandler+0x6b8>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d018      	beq.n	800638c <HAL_DMA_IRQHandler+0x678>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a1c      	ldr	r2, [pc, #112]	; (80063d0 <HAL_DMA_IRQHandler+0x6bc>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d013      	beq.n	800638c <HAL_DMA_IRQHandler+0x678>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a1a      	ldr	r2, [pc, #104]	; (80063d4 <HAL_DMA_IRQHandler+0x6c0>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d00e      	beq.n	800638c <HAL_DMA_IRQHandler+0x678>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a19      	ldr	r2, [pc, #100]	; (80063d8 <HAL_DMA_IRQHandler+0x6c4>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d009      	beq.n	800638c <HAL_DMA_IRQHandler+0x678>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a17      	ldr	r2, [pc, #92]	; (80063dc <HAL_DMA_IRQHandler+0x6c8>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d004      	beq.n	800638c <HAL_DMA_IRQHandler+0x678>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a16      	ldr	r2, [pc, #88]	; (80063e0 <HAL_DMA_IRQHandler+0x6cc>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d12b      	bne.n	80063e4 <HAL_DMA_IRQHandler+0x6d0>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0310 	and.w	r3, r3, #16
 8006396:	2b00      	cmp	r3, #0
 8006398:	bf14      	ite	ne
 800639a:	2301      	movne	r3, #1
 800639c:	2300      	moveq	r3, #0
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	e02a      	b.n	80063f8 <HAL_DMA_IRQHandler+0x6e4>
 80063a2:	bf00      	nop
 80063a4:	40020010 	.word	0x40020010
 80063a8:	40020028 	.word	0x40020028
 80063ac:	40020040 	.word	0x40020040
 80063b0:	40020058 	.word	0x40020058
 80063b4:	40020070 	.word	0x40020070
 80063b8:	40020088 	.word	0x40020088
 80063bc:	400200a0 	.word	0x400200a0
 80063c0:	400200b8 	.word	0x400200b8
 80063c4:	40020410 	.word	0x40020410
 80063c8:	40020428 	.word	0x40020428
 80063cc:	40020440 	.word	0x40020440
 80063d0:	40020458 	.word	0x40020458
 80063d4:	40020470 	.word	0x40020470
 80063d8:	40020488 	.word	0x40020488
 80063dc:	400204a0 	.word	0x400204a0
 80063e0:	400204b8 	.word	0x400204b8
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	bf14      	ite	ne
 80063f2:	2301      	movne	r3, #1
 80063f4:	2300      	moveq	r3, #0
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f000 8087 	beq.w	800650c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006402:	f003 031f 	and.w	r3, r3, #31
 8006406:	2220      	movs	r2, #32
 8006408:	409a      	lsls	r2, r3
 800640a:	6a3b      	ldr	r3, [r7, #32]
 800640c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b04      	cmp	r3, #4
 8006418:	d139      	bne.n	800648e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f022 0216 	bic.w	r2, r2, #22
 8006428:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	695a      	ldr	r2, [r3, #20]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006438:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643e:	2b00      	cmp	r3, #0
 8006440:	d103      	bne.n	800644a <HAL_DMA_IRQHandler+0x736>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006446:	2b00      	cmp	r3, #0
 8006448:	d007      	beq.n	800645a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 0208 	bic.w	r2, r2, #8
 8006458:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800645e:	f003 031f 	and.w	r3, r3, #31
 8006462:	223f      	movs	r2, #63	; 0x3f
 8006464:	409a      	lsls	r2, r3
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647e:	2b00      	cmp	r3, #0
 8006480:	f000 834a 	beq.w	8006b18 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	4798      	blx	r3
          }
          return;
 800648c:	e344      	b.n	8006b18 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d018      	beq.n	80064ce <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d108      	bne.n	80064bc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d02c      	beq.n	800650c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	4798      	blx	r3
 80064ba:	e027      	b.n	800650c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d023      	beq.n	800650c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	4798      	blx	r3
 80064cc:	e01e      	b.n	800650c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10f      	bne.n	80064fc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 0210 	bic.w	r2, r2, #16
 80064ea:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006500:	2b00      	cmp	r3, #0
 8006502:	d003      	beq.n	800650c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 8306 	beq.w	8006b22 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	f000 8088 	beq.w	8006634 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2204      	movs	r2, #4
 8006528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a7a      	ldr	r2, [pc, #488]	; (800671c <HAL_DMA_IRQHandler+0xa08>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d04a      	beq.n	80065cc <HAL_DMA_IRQHandler+0x8b8>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a79      	ldr	r2, [pc, #484]	; (8006720 <HAL_DMA_IRQHandler+0xa0c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d045      	beq.n	80065cc <HAL_DMA_IRQHandler+0x8b8>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a77      	ldr	r2, [pc, #476]	; (8006724 <HAL_DMA_IRQHandler+0xa10>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d040      	beq.n	80065cc <HAL_DMA_IRQHandler+0x8b8>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a76      	ldr	r2, [pc, #472]	; (8006728 <HAL_DMA_IRQHandler+0xa14>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d03b      	beq.n	80065cc <HAL_DMA_IRQHandler+0x8b8>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a74      	ldr	r2, [pc, #464]	; (800672c <HAL_DMA_IRQHandler+0xa18>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d036      	beq.n	80065cc <HAL_DMA_IRQHandler+0x8b8>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a73      	ldr	r2, [pc, #460]	; (8006730 <HAL_DMA_IRQHandler+0xa1c>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d031      	beq.n	80065cc <HAL_DMA_IRQHandler+0x8b8>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a71      	ldr	r2, [pc, #452]	; (8006734 <HAL_DMA_IRQHandler+0xa20>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d02c      	beq.n	80065cc <HAL_DMA_IRQHandler+0x8b8>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a70      	ldr	r2, [pc, #448]	; (8006738 <HAL_DMA_IRQHandler+0xa24>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d027      	beq.n	80065cc <HAL_DMA_IRQHandler+0x8b8>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a6e      	ldr	r2, [pc, #440]	; (800673c <HAL_DMA_IRQHandler+0xa28>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d022      	beq.n	80065cc <HAL_DMA_IRQHandler+0x8b8>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a6d      	ldr	r2, [pc, #436]	; (8006740 <HAL_DMA_IRQHandler+0xa2c>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d01d      	beq.n	80065cc <HAL_DMA_IRQHandler+0x8b8>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a6b      	ldr	r2, [pc, #428]	; (8006744 <HAL_DMA_IRQHandler+0xa30>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d018      	beq.n	80065cc <HAL_DMA_IRQHandler+0x8b8>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a6a      	ldr	r2, [pc, #424]	; (8006748 <HAL_DMA_IRQHandler+0xa34>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d013      	beq.n	80065cc <HAL_DMA_IRQHandler+0x8b8>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a68      	ldr	r2, [pc, #416]	; (800674c <HAL_DMA_IRQHandler+0xa38>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d00e      	beq.n	80065cc <HAL_DMA_IRQHandler+0x8b8>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a67      	ldr	r2, [pc, #412]	; (8006750 <HAL_DMA_IRQHandler+0xa3c>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d009      	beq.n	80065cc <HAL_DMA_IRQHandler+0x8b8>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a65      	ldr	r2, [pc, #404]	; (8006754 <HAL_DMA_IRQHandler+0xa40>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d004      	beq.n	80065cc <HAL_DMA_IRQHandler+0x8b8>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a64      	ldr	r2, [pc, #400]	; (8006758 <HAL_DMA_IRQHandler+0xa44>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d108      	bne.n	80065de <HAL_DMA_IRQHandler+0x8ca>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f022 0201 	bic.w	r2, r2, #1
 80065da:	601a      	str	r2, [r3, #0]
 80065dc:	e007      	b.n	80065ee <HAL_DMA_IRQHandler+0x8da>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 0201 	bic.w	r2, r2, #1
 80065ec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	3301      	adds	r3, #1
 80065f2:	60fb      	str	r3, [r7, #12]
 80065f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d307      	bcc.n	800660a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1f2      	bne.n	80065ee <HAL_DMA_IRQHandler+0x8da>
 8006608:	e000      	b.n	800660c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800660a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	2b00      	cmp	r3, #0
 8006620:	d004      	beq.n	800662c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2203      	movs	r2, #3
 8006626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800662a:	e003      	b.n	8006634 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 8272 	beq.w	8006b22 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	4798      	blx	r3
 8006646:	e26c      	b.n	8006b22 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a43      	ldr	r2, [pc, #268]	; (800675c <HAL_DMA_IRQHandler+0xa48>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d022      	beq.n	8006698 <HAL_DMA_IRQHandler+0x984>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a42      	ldr	r2, [pc, #264]	; (8006760 <HAL_DMA_IRQHandler+0xa4c>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d01d      	beq.n	8006698 <HAL_DMA_IRQHandler+0x984>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a40      	ldr	r2, [pc, #256]	; (8006764 <HAL_DMA_IRQHandler+0xa50>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d018      	beq.n	8006698 <HAL_DMA_IRQHandler+0x984>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a3f      	ldr	r2, [pc, #252]	; (8006768 <HAL_DMA_IRQHandler+0xa54>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d013      	beq.n	8006698 <HAL_DMA_IRQHandler+0x984>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a3d      	ldr	r2, [pc, #244]	; (800676c <HAL_DMA_IRQHandler+0xa58>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d00e      	beq.n	8006698 <HAL_DMA_IRQHandler+0x984>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a3c      	ldr	r2, [pc, #240]	; (8006770 <HAL_DMA_IRQHandler+0xa5c>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d009      	beq.n	8006698 <HAL_DMA_IRQHandler+0x984>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a3a      	ldr	r2, [pc, #232]	; (8006774 <HAL_DMA_IRQHandler+0xa60>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d004      	beq.n	8006698 <HAL_DMA_IRQHandler+0x984>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a39      	ldr	r2, [pc, #228]	; (8006778 <HAL_DMA_IRQHandler+0xa64>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d101      	bne.n	800669c <HAL_DMA_IRQHandler+0x988>
 8006698:	2301      	movs	r3, #1
 800669a:	e000      	b.n	800669e <HAL_DMA_IRQHandler+0x98a>
 800669c:	2300      	movs	r3, #0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f000 823f 	beq.w	8006b22 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b0:	f003 031f 	and.w	r3, r3, #31
 80066b4:	2204      	movs	r2, #4
 80066b6:	409a      	lsls	r2, r3
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	4013      	ands	r3, r2
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 80cd 	beq.w	800685c <HAL_DMA_IRQHandler+0xb48>
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	f003 0304 	and.w	r3, r3, #4
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 80c7 	beq.w	800685c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d2:	f003 031f 	and.w	r3, r3, #31
 80066d6:	2204      	movs	r2, #4
 80066d8:	409a      	lsls	r2, r3
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d049      	beq.n	800677c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d109      	bne.n	8006706 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f000 8210 	beq.w	8006b1c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006704:	e20a      	b.n	8006b1c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670a:	2b00      	cmp	r3, #0
 800670c:	f000 8206 	beq.w	8006b1c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006718:	e200      	b.n	8006b1c <HAL_DMA_IRQHandler+0xe08>
 800671a:	bf00      	nop
 800671c:	40020010 	.word	0x40020010
 8006720:	40020028 	.word	0x40020028
 8006724:	40020040 	.word	0x40020040
 8006728:	40020058 	.word	0x40020058
 800672c:	40020070 	.word	0x40020070
 8006730:	40020088 	.word	0x40020088
 8006734:	400200a0 	.word	0x400200a0
 8006738:	400200b8 	.word	0x400200b8
 800673c:	40020410 	.word	0x40020410
 8006740:	40020428 	.word	0x40020428
 8006744:	40020440 	.word	0x40020440
 8006748:	40020458 	.word	0x40020458
 800674c:	40020470 	.word	0x40020470
 8006750:	40020488 	.word	0x40020488
 8006754:	400204a0 	.word	0x400204a0
 8006758:	400204b8 	.word	0x400204b8
 800675c:	58025408 	.word	0x58025408
 8006760:	5802541c 	.word	0x5802541c
 8006764:	58025430 	.word	0x58025430
 8006768:	58025444 	.word	0x58025444
 800676c:	58025458 	.word	0x58025458
 8006770:	5802546c 	.word	0x5802546c
 8006774:	58025480 	.word	0x58025480
 8006778:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	f003 0320 	and.w	r3, r3, #32
 8006782:	2b00      	cmp	r3, #0
 8006784:	d160      	bne.n	8006848 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a8c      	ldr	r2, [pc, #560]	; (80069bc <HAL_DMA_IRQHandler+0xca8>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d04a      	beq.n	8006826 <HAL_DMA_IRQHandler+0xb12>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a8a      	ldr	r2, [pc, #552]	; (80069c0 <HAL_DMA_IRQHandler+0xcac>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d045      	beq.n	8006826 <HAL_DMA_IRQHandler+0xb12>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a89      	ldr	r2, [pc, #548]	; (80069c4 <HAL_DMA_IRQHandler+0xcb0>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d040      	beq.n	8006826 <HAL_DMA_IRQHandler+0xb12>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a87      	ldr	r2, [pc, #540]	; (80069c8 <HAL_DMA_IRQHandler+0xcb4>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d03b      	beq.n	8006826 <HAL_DMA_IRQHandler+0xb12>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a86      	ldr	r2, [pc, #536]	; (80069cc <HAL_DMA_IRQHandler+0xcb8>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d036      	beq.n	8006826 <HAL_DMA_IRQHandler+0xb12>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a84      	ldr	r2, [pc, #528]	; (80069d0 <HAL_DMA_IRQHandler+0xcbc>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d031      	beq.n	8006826 <HAL_DMA_IRQHandler+0xb12>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a83      	ldr	r2, [pc, #524]	; (80069d4 <HAL_DMA_IRQHandler+0xcc0>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d02c      	beq.n	8006826 <HAL_DMA_IRQHandler+0xb12>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a81      	ldr	r2, [pc, #516]	; (80069d8 <HAL_DMA_IRQHandler+0xcc4>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d027      	beq.n	8006826 <HAL_DMA_IRQHandler+0xb12>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a80      	ldr	r2, [pc, #512]	; (80069dc <HAL_DMA_IRQHandler+0xcc8>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d022      	beq.n	8006826 <HAL_DMA_IRQHandler+0xb12>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a7e      	ldr	r2, [pc, #504]	; (80069e0 <HAL_DMA_IRQHandler+0xccc>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d01d      	beq.n	8006826 <HAL_DMA_IRQHandler+0xb12>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a7d      	ldr	r2, [pc, #500]	; (80069e4 <HAL_DMA_IRQHandler+0xcd0>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d018      	beq.n	8006826 <HAL_DMA_IRQHandler+0xb12>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a7b      	ldr	r2, [pc, #492]	; (80069e8 <HAL_DMA_IRQHandler+0xcd4>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d013      	beq.n	8006826 <HAL_DMA_IRQHandler+0xb12>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a7a      	ldr	r2, [pc, #488]	; (80069ec <HAL_DMA_IRQHandler+0xcd8>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d00e      	beq.n	8006826 <HAL_DMA_IRQHandler+0xb12>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a78      	ldr	r2, [pc, #480]	; (80069f0 <HAL_DMA_IRQHandler+0xcdc>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d009      	beq.n	8006826 <HAL_DMA_IRQHandler+0xb12>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a77      	ldr	r2, [pc, #476]	; (80069f4 <HAL_DMA_IRQHandler+0xce0>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d004      	beq.n	8006826 <HAL_DMA_IRQHandler+0xb12>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a75      	ldr	r2, [pc, #468]	; (80069f8 <HAL_DMA_IRQHandler+0xce4>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d108      	bne.n	8006838 <HAL_DMA_IRQHandler+0xb24>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f022 0208 	bic.w	r2, r2, #8
 8006834:	601a      	str	r2, [r3, #0]
 8006836:	e007      	b.n	8006848 <HAL_DMA_IRQHandler+0xb34>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f022 0204 	bic.w	r2, r2, #4
 8006846:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 8165 	beq.w	8006b1c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800685a:	e15f      	b.n	8006b1c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006860:	f003 031f 	and.w	r3, r3, #31
 8006864:	2202      	movs	r2, #2
 8006866:	409a      	lsls	r2, r3
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	4013      	ands	r3, r2
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 80c5 	beq.w	80069fc <HAL_DMA_IRQHandler+0xce8>
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	f003 0302 	and.w	r3, r3, #2
 8006878:	2b00      	cmp	r3, #0
 800687a:	f000 80bf 	beq.w	80069fc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006882:	f003 031f 	and.w	r3, r3, #31
 8006886:	2202      	movs	r2, #2
 8006888:	409a      	lsls	r2, r3
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d018      	beq.n	80068ca <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d109      	bne.n	80068b6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 813a 	beq.w	8006b20 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068b4:	e134      	b.n	8006b20 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f000 8130 	beq.w	8006b20 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068c8:	e12a      	b.n	8006b20 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f003 0320 	and.w	r3, r3, #32
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d168      	bne.n	80069a6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a38      	ldr	r2, [pc, #224]	; (80069bc <HAL_DMA_IRQHandler+0xca8>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d04a      	beq.n	8006974 <HAL_DMA_IRQHandler+0xc60>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a37      	ldr	r2, [pc, #220]	; (80069c0 <HAL_DMA_IRQHandler+0xcac>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d045      	beq.n	8006974 <HAL_DMA_IRQHandler+0xc60>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a35      	ldr	r2, [pc, #212]	; (80069c4 <HAL_DMA_IRQHandler+0xcb0>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d040      	beq.n	8006974 <HAL_DMA_IRQHandler+0xc60>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a34      	ldr	r2, [pc, #208]	; (80069c8 <HAL_DMA_IRQHandler+0xcb4>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d03b      	beq.n	8006974 <HAL_DMA_IRQHandler+0xc60>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a32      	ldr	r2, [pc, #200]	; (80069cc <HAL_DMA_IRQHandler+0xcb8>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d036      	beq.n	8006974 <HAL_DMA_IRQHandler+0xc60>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a31      	ldr	r2, [pc, #196]	; (80069d0 <HAL_DMA_IRQHandler+0xcbc>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d031      	beq.n	8006974 <HAL_DMA_IRQHandler+0xc60>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a2f      	ldr	r2, [pc, #188]	; (80069d4 <HAL_DMA_IRQHandler+0xcc0>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d02c      	beq.n	8006974 <HAL_DMA_IRQHandler+0xc60>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a2e      	ldr	r2, [pc, #184]	; (80069d8 <HAL_DMA_IRQHandler+0xcc4>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d027      	beq.n	8006974 <HAL_DMA_IRQHandler+0xc60>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a2c      	ldr	r2, [pc, #176]	; (80069dc <HAL_DMA_IRQHandler+0xcc8>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d022      	beq.n	8006974 <HAL_DMA_IRQHandler+0xc60>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a2b      	ldr	r2, [pc, #172]	; (80069e0 <HAL_DMA_IRQHandler+0xccc>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d01d      	beq.n	8006974 <HAL_DMA_IRQHandler+0xc60>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a29      	ldr	r2, [pc, #164]	; (80069e4 <HAL_DMA_IRQHandler+0xcd0>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d018      	beq.n	8006974 <HAL_DMA_IRQHandler+0xc60>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a28      	ldr	r2, [pc, #160]	; (80069e8 <HAL_DMA_IRQHandler+0xcd4>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d013      	beq.n	8006974 <HAL_DMA_IRQHandler+0xc60>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a26      	ldr	r2, [pc, #152]	; (80069ec <HAL_DMA_IRQHandler+0xcd8>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d00e      	beq.n	8006974 <HAL_DMA_IRQHandler+0xc60>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a25      	ldr	r2, [pc, #148]	; (80069f0 <HAL_DMA_IRQHandler+0xcdc>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d009      	beq.n	8006974 <HAL_DMA_IRQHandler+0xc60>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a23      	ldr	r2, [pc, #140]	; (80069f4 <HAL_DMA_IRQHandler+0xce0>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d004      	beq.n	8006974 <HAL_DMA_IRQHandler+0xc60>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a22      	ldr	r2, [pc, #136]	; (80069f8 <HAL_DMA_IRQHandler+0xce4>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d108      	bne.n	8006986 <HAL_DMA_IRQHandler+0xc72>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f022 0214 	bic.w	r2, r2, #20
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	e007      	b.n	8006996 <HAL_DMA_IRQHandler+0xc82>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 020a 	bic.w	r2, r2, #10
 8006994:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f000 80b8 	beq.w	8006b20 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069b8:	e0b2      	b.n	8006b20 <HAL_DMA_IRQHandler+0xe0c>
 80069ba:	bf00      	nop
 80069bc:	40020010 	.word	0x40020010
 80069c0:	40020028 	.word	0x40020028
 80069c4:	40020040 	.word	0x40020040
 80069c8:	40020058 	.word	0x40020058
 80069cc:	40020070 	.word	0x40020070
 80069d0:	40020088 	.word	0x40020088
 80069d4:	400200a0 	.word	0x400200a0
 80069d8:	400200b8 	.word	0x400200b8
 80069dc:	40020410 	.word	0x40020410
 80069e0:	40020428 	.word	0x40020428
 80069e4:	40020440 	.word	0x40020440
 80069e8:	40020458 	.word	0x40020458
 80069ec:	40020470 	.word	0x40020470
 80069f0:	40020488 	.word	0x40020488
 80069f4:	400204a0 	.word	0x400204a0
 80069f8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a00:	f003 031f 	and.w	r3, r3, #31
 8006a04:	2208      	movs	r2, #8
 8006a06:	409a      	lsls	r2, r3
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 8088 	beq.w	8006b22 <HAL_DMA_IRQHandler+0xe0e>
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f003 0308 	and.w	r3, r3, #8
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 8082 	beq.w	8006b22 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a41      	ldr	r2, [pc, #260]	; (8006b28 <HAL_DMA_IRQHandler+0xe14>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d04a      	beq.n	8006abe <HAL_DMA_IRQHandler+0xdaa>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a3f      	ldr	r2, [pc, #252]	; (8006b2c <HAL_DMA_IRQHandler+0xe18>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d045      	beq.n	8006abe <HAL_DMA_IRQHandler+0xdaa>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a3e      	ldr	r2, [pc, #248]	; (8006b30 <HAL_DMA_IRQHandler+0xe1c>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d040      	beq.n	8006abe <HAL_DMA_IRQHandler+0xdaa>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a3c      	ldr	r2, [pc, #240]	; (8006b34 <HAL_DMA_IRQHandler+0xe20>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d03b      	beq.n	8006abe <HAL_DMA_IRQHandler+0xdaa>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a3b      	ldr	r2, [pc, #236]	; (8006b38 <HAL_DMA_IRQHandler+0xe24>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d036      	beq.n	8006abe <HAL_DMA_IRQHandler+0xdaa>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a39      	ldr	r2, [pc, #228]	; (8006b3c <HAL_DMA_IRQHandler+0xe28>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d031      	beq.n	8006abe <HAL_DMA_IRQHandler+0xdaa>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a38      	ldr	r2, [pc, #224]	; (8006b40 <HAL_DMA_IRQHandler+0xe2c>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d02c      	beq.n	8006abe <HAL_DMA_IRQHandler+0xdaa>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a36      	ldr	r2, [pc, #216]	; (8006b44 <HAL_DMA_IRQHandler+0xe30>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d027      	beq.n	8006abe <HAL_DMA_IRQHandler+0xdaa>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a35      	ldr	r2, [pc, #212]	; (8006b48 <HAL_DMA_IRQHandler+0xe34>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d022      	beq.n	8006abe <HAL_DMA_IRQHandler+0xdaa>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a33      	ldr	r2, [pc, #204]	; (8006b4c <HAL_DMA_IRQHandler+0xe38>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d01d      	beq.n	8006abe <HAL_DMA_IRQHandler+0xdaa>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a32      	ldr	r2, [pc, #200]	; (8006b50 <HAL_DMA_IRQHandler+0xe3c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d018      	beq.n	8006abe <HAL_DMA_IRQHandler+0xdaa>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a30      	ldr	r2, [pc, #192]	; (8006b54 <HAL_DMA_IRQHandler+0xe40>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d013      	beq.n	8006abe <HAL_DMA_IRQHandler+0xdaa>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a2f      	ldr	r2, [pc, #188]	; (8006b58 <HAL_DMA_IRQHandler+0xe44>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d00e      	beq.n	8006abe <HAL_DMA_IRQHandler+0xdaa>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a2d      	ldr	r2, [pc, #180]	; (8006b5c <HAL_DMA_IRQHandler+0xe48>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d009      	beq.n	8006abe <HAL_DMA_IRQHandler+0xdaa>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a2c      	ldr	r2, [pc, #176]	; (8006b60 <HAL_DMA_IRQHandler+0xe4c>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d004      	beq.n	8006abe <HAL_DMA_IRQHandler+0xdaa>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a2a      	ldr	r2, [pc, #168]	; (8006b64 <HAL_DMA_IRQHandler+0xe50>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d108      	bne.n	8006ad0 <HAL_DMA_IRQHandler+0xdbc>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f022 021c 	bic.w	r2, r2, #28
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	e007      	b.n	8006ae0 <HAL_DMA_IRQHandler+0xdcc>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f022 020e 	bic.w	r2, r2, #14
 8006ade:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ae4:	f003 031f 	and.w	r3, r3, #31
 8006ae8:	2201      	movs	r2, #1
 8006aea:	409a      	lsls	r2, r3
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d009      	beq.n	8006b22 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	4798      	blx	r3
 8006b16:	e004      	b.n	8006b22 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006b18:	bf00      	nop
 8006b1a:	e002      	b.n	8006b22 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b1c:	bf00      	nop
 8006b1e:	e000      	b.n	8006b22 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b20:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006b22:	3728      	adds	r7, #40	; 0x28
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	40020010 	.word	0x40020010
 8006b2c:	40020028 	.word	0x40020028
 8006b30:	40020040 	.word	0x40020040
 8006b34:	40020058 	.word	0x40020058
 8006b38:	40020070 	.word	0x40020070
 8006b3c:	40020088 	.word	0x40020088
 8006b40:	400200a0 	.word	0x400200a0
 8006b44:	400200b8 	.word	0x400200b8
 8006b48:	40020410 	.word	0x40020410
 8006b4c:	40020428 	.word	0x40020428
 8006b50:	40020440 	.word	0x40020440
 8006b54:	40020458 	.word	0x40020458
 8006b58:	40020470 	.word	0x40020470
 8006b5c:	40020488 	.word	0x40020488
 8006b60:	400204a0 	.word	0x400204a0
 8006b64:	400204b8 	.word	0x400204b8

08006b68 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b76:	b2db      	uxtb	r3, r3
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b087      	sub	sp, #28
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
 8006ba8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bae:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a84      	ldr	r2, [pc, #528]	; (8006dcc <DMA_SetConfig+0x230>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d072      	beq.n	8006ca6 <DMA_SetConfig+0x10a>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a82      	ldr	r2, [pc, #520]	; (8006dd0 <DMA_SetConfig+0x234>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d06d      	beq.n	8006ca6 <DMA_SetConfig+0x10a>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a81      	ldr	r2, [pc, #516]	; (8006dd4 <DMA_SetConfig+0x238>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d068      	beq.n	8006ca6 <DMA_SetConfig+0x10a>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a7f      	ldr	r2, [pc, #508]	; (8006dd8 <DMA_SetConfig+0x23c>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d063      	beq.n	8006ca6 <DMA_SetConfig+0x10a>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a7e      	ldr	r2, [pc, #504]	; (8006ddc <DMA_SetConfig+0x240>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d05e      	beq.n	8006ca6 <DMA_SetConfig+0x10a>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a7c      	ldr	r2, [pc, #496]	; (8006de0 <DMA_SetConfig+0x244>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d059      	beq.n	8006ca6 <DMA_SetConfig+0x10a>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a7b      	ldr	r2, [pc, #492]	; (8006de4 <DMA_SetConfig+0x248>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d054      	beq.n	8006ca6 <DMA_SetConfig+0x10a>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a79      	ldr	r2, [pc, #484]	; (8006de8 <DMA_SetConfig+0x24c>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d04f      	beq.n	8006ca6 <DMA_SetConfig+0x10a>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a78      	ldr	r2, [pc, #480]	; (8006dec <DMA_SetConfig+0x250>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d04a      	beq.n	8006ca6 <DMA_SetConfig+0x10a>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a76      	ldr	r2, [pc, #472]	; (8006df0 <DMA_SetConfig+0x254>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d045      	beq.n	8006ca6 <DMA_SetConfig+0x10a>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a75      	ldr	r2, [pc, #468]	; (8006df4 <DMA_SetConfig+0x258>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d040      	beq.n	8006ca6 <DMA_SetConfig+0x10a>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a73      	ldr	r2, [pc, #460]	; (8006df8 <DMA_SetConfig+0x25c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d03b      	beq.n	8006ca6 <DMA_SetConfig+0x10a>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a72      	ldr	r2, [pc, #456]	; (8006dfc <DMA_SetConfig+0x260>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d036      	beq.n	8006ca6 <DMA_SetConfig+0x10a>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a70      	ldr	r2, [pc, #448]	; (8006e00 <DMA_SetConfig+0x264>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d031      	beq.n	8006ca6 <DMA_SetConfig+0x10a>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a6f      	ldr	r2, [pc, #444]	; (8006e04 <DMA_SetConfig+0x268>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d02c      	beq.n	8006ca6 <DMA_SetConfig+0x10a>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a6d      	ldr	r2, [pc, #436]	; (8006e08 <DMA_SetConfig+0x26c>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d027      	beq.n	8006ca6 <DMA_SetConfig+0x10a>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a6c      	ldr	r2, [pc, #432]	; (8006e0c <DMA_SetConfig+0x270>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d022      	beq.n	8006ca6 <DMA_SetConfig+0x10a>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a6a      	ldr	r2, [pc, #424]	; (8006e10 <DMA_SetConfig+0x274>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d01d      	beq.n	8006ca6 <DMA_SetConfig+0x10a>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a69      	ldr	r2, [pc, #420]	; (8006e14 <DMA_SetConfig+0x278>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d018      	beq.n	8006ca6 <DMA_SetConfig+0x10a>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a67      	ldr	r2, [pc, #412]	; (8006e18 <DMA_SetConfig+0x27c>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d013      	beq.n	8006ca6 <DMA_SetConfig+0x10a>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a66      	ldr	r2, [pc, #408]	; (8006e1c <DMA_SetConfig+0x280>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d00e      	beq.n	8006ca6 <DMA_SetConfig+0x10a>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a64      	ldr	r2, [pc, #400]	; (8006e20 <DMA_SetConfig+0x284>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d009      	beq.n	8006ca6 <DMA_SetConfig+0x10a>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a63      	ldr	r2, [pc, #396]	; (8006e24 <DMA_SetConfig+0x288>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d004      	beq.n	8006ca6 <DMA_SetConfig+0x10a>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a61      	ldr	r2, [pc, #388]	; (8006e28 <DMA_SetConfig+0x28c>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d101      	bne.n	8006caa <DMA_SetConfig+0x10e>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e000      	b.n	8006cac <DMA_SetConfig+0x110>
 8006caa:	2300      	movs	r3, #0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00d      	beq.n	8006ccc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006cb8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d004      	beq.n	8006ccc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006cca:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a3e      	ldr	r2, [pc, #248]	; (8006dcc <DMA_SetConfig+0x230>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d04a      	beq.n	8006d6c <DMA_SetConfig+0x1d0>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a3d      	ldr	r2, [pc, #244]	; (8006dd0 <DMA_SetConfig+0x234>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d045      	beq.n	8006d6c <DMA_SetConfig+0x1d0>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a3b      	ldr	r2, [pc, #236]	; (8006dd4 <DMA_SetConfig+0x238>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d040      	beq.n	8006d6c <DMA_SetConfig+0x1d0>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a3a      	ldr	r2, [pc, #232]	; (8006dd8 <DMA_SetConfig+0x23c>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d03b      	beq.n	8006d6c <DMA_SetConfig+0x1d0>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a38      	ldr	r2, [pc, #224]	; (8006ddc <DMA_SetConfig+0x240>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d036      	beq.n	8006d6c <DMA_SetConfig+0x1d0>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a37      	ldr	r2, [pc, #220]	; (8006de0 <DMA_SetConfig+0x244>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d031      	beq.n	8006d6c <DMA_SetConfig+0x1d0>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a35      	ldr	r2, [pc, #212]	; (8006de4 <DMA_SetConfig+0x248>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d02c      	beq.n	8006d6c <DMA_SetConfig+0x1d0>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a34      	ldr	r2, [pc, #208]	; (8006de8 <DMA_SetConfig+0x24c>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d027      	beq.n	8006d6c <DMA_SetConfig+0x1d0>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a32      	ldr	r2, [pc, #200]	; (8006dec <DMA_SetConfig+0x250>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d022      	beq.n	8006d6c <DMA_SetConfig+0x1d0>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a31      	ldr	r2, [pc, #196]	; (8006df0 <DMA_SetConfig+0x254>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d01d      	beq.n	8006d6c <DMA_SetConfig+0x1d0>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a2f      	ldr	r2, [pc, #188]	; (8006df4 <DMA_SetConfig+0x258>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d018      	beq.n	8006d6c <DMA_SetConfig+0x1d0>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a2e      	ldr	r2, [pc, #184]	; (8006df8 <DMA_SetConfig+0x25c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d013      	beq.n	8006d6c <DMA_SetConfig+0x1d0>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a2c      	ldr	r2, [pc, #176]	; (8006dfc <DMA_SetConfig+0x260>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d00e      	beq.n	8006d6c <DMA_SetConfig+0x1d0>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a2b      	ldr	r2, [pc, #172]	; (8006e00 <DMA_SetConfig+0x264>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d009      	beq.n	8006d6c <DMA_SetConfig+0x1d0>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a29      	ldr	r2, [pc, #164]	; (8006e04 <DMA_SetConfig+0x268>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d004      	beq.n	8006d6c <DMA_SetConfig+0x1d0>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a28      	ldr	r2, [pc, #160]	; (8006e08 <DMA_SetConfig+0x26c>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d101      	bne.n	8006d70 <DMA_SetConfig+0x1d4>
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e000      	b.n	8006d72 <DMA_SetConfig+0x1d6>
 8006d70:	2300      	movs	r3, #0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d05a      	beq.n	8006e2c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d7a:	f003 031f 	and.w	r3, r3, #31
 8006d7e:	223f      	movs	r2, #63	; 0x3f
 8006d80:	409a      	lsls	r2, r3
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d94:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	2b40      	cmp	r3, #64	; 0x40
 8006da4:	d108      	bne.n	8006db8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006db6:	e087      	b.n	8006ec8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	60da      	str	r2, [r3, #12]
}
 8006dc8:	e07e      	b.n	8006ec8 <DMA_SetConfig+0x32c>
 8006dca:	bf00      	nop
 8006dcc:	40020010 	.word	0x40020010
 8006dd0:	40020028 	.word	0x40020028
 8006dd4:	40020040 	.word	0x40020040
 8006dd8:	40020058 	.word	0x40020058
 8006ddc:	40020070 	.word	0x40020070
 8006de0:	40020088 	.word	0x40020088
 8006de4:	400200a0 	.word	0x400200a0
 8006de8:	400200b8 	.word	0x400200b8
 8006dec:	40020410 	.word	0x40020410
 8006df0:	40020428 	.word	0x40020428
 8006df4:	40020440 	.word	0x40020440
 8006df8:	40020458 	.word	0x40020458
 8006dfc:	40020470 	.word	0x40020470
 8006e00:	40020488 	.word	0x40020488
 8006e04:	400204a0 	.word	0x400204a0
 8006e08:	400204b8 	.word	0x400204b8
 8006e0c:	58025408 	.word	0x58025408
 8006e10:	5802541c 	.word	0x5802541c
 8006e14:	58025430 	.word	0x58025430
 8006e18:	58025444 	.word	0x58025444
 8006e1c:	58025458 	.word	0x58025458
 8006e20:	5802546c 	.word	0x5802546c
 8006e24:	58025480 	.word	0x58025480
 8006e28:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a28      	ldr	r2, [pc, #160]	; (8006ed4 <DMA_SetConfig+0x338>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d022      	beq.n	8006e7c <DMA_SetConfig+0x2e0>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a27      	ldr	r2, [pc, #156]	; (8006ed8 <DMA_SetConfig+0x33c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d01d      	beq.n	8006e7c <DMA_SetConfig+0x2e0>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a25      	ldr	r2, [pc, #148]	; (8006edc <DMA_SetConfig+0x340>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d018      	beq.n	8006e7c <DMA_SetConfig+0x2e0>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a24      	ldr	r2, [pc, #144]	; (8006ee0 <DMA_SetConfig+0x344>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d013      	beq.n	8006e7c <DMA_SetConfig+0x2e0>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a22      	ldr	r2, [pc, #136]	; (8006ee4 <DMA_SetConfig+0x348>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d00e      	beq.n	8006e7c <DMA_SetConfig+0x2e0>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a21      	ldr	r2, [pc, #132]	; (8006ee8 <DMA_SetConfig+0x34c>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d009      	beq.n	8006e7c <DMA_SetConfig+0x2e0>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a1f      	ldr	r2, [pc, #124]	; (8006eec <DMA_SetConfig+0x350>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d004      	beq.n	8006e7c <DMA_SetConfig+0x2e0>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a1e      	ldr	r2, [pc, #120]	; (8006ef0 <DMA_SetConfig+0x354>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d101      	bne.n	8006e80 <DMA_SetConfig+0x2e4>
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e000      	b.n	8006e82 <DMA_SetConfig+0x2e6>
 8006e80:	2300      	movs	r3, #0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d020      	beq.n	8006ec8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e8a:	f003 031f 	and.w	r3, r3, #31
 8006e8e:	2201      	movs	r2, #1
 8006e90:	409a      	lsls	r2, r3
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	2b40      	cmp	r3, #64	; 0x40
 8006ea4:	d108      	bne.n	8006eb8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	60da      	str	r2, [r3, #12]
}
 8006eb6:	e007      	b.n	8006ec8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	60da      	str	r2, [r3, #12]
}
 8006ec8:	bf00      	nop
 8006eca:	371c      	adds	r7, #28
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	58025408 	.word	0x58025408
 8006ed8:	5802541c 	.word	0x5802541c
 8006edc:	58025430 	.word	0x58025430
 8006ee0:	58025444 	.word	0x58025444
 8006ee4:	58025458 	.word	0x58025458
 8006ee8:	5802546c 	.word	0x5802546c
 8006eec:	58025480 	.word	0x58025480
 8006ef0:	58025494 	.word	0x58025494

08006ef4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a42      	ldr	r2, [pc, #264]	; (800700c <DMA_CalcBaseAndBitshift+0x118>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d04a      	beq.n	8006f9c <DMA_CalcBaseAndBitshift+0xa8>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a41      	ldr	r2, [pc, #260]	; (8007010 <DMA_CalcBaseAndBitshift+0x11c>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d045      	beq.n	8006f9c <DMA_CalcBaseAndBitshift+0xa8>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a3f      	ldr	r2, [pc, #252]	; (8007014 <DMA_CalcBaseAndBitshift+0x120>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d040      	beq.n	8006f9c <DMA_CalcBaseAndBitshift+0xa8>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a3e      	ldr	r2, [pc, #248]	; (8007018 <DMA_CalcBaseAndBitshift+0x124>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d03b      	beq.n	8006f9c <DMA_CalcBaseAndBitshift+0xa8>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a3c      	ldr	r2, [pc, #240]	; (800701c <DMA_CalcBaseAndBitshift+0x128>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d036      	beq.n	8006f9c <DMA_CalcBaseAndBitshift+0xa8>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a3b      	ldr	r2, [pc, #236]	; (8007020 <DMA_CalcBaseAndBitshift+0x12c>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d031      	beq.n	8006f9c <DMA_CalcBaseAndBitshift+0xa8>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a39      	ldr	r2, [pc, #228]	; (8007024 <DMA_CalcBaseAndBitshift+0x130>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d02c      	beq.n	8006f9c <DMA_CalcBaseAndBitshift+0xa8>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a38      	ldr	r2, [pc, #224]	; (8007028 <DMA_CalcBaseAndBitshift+0x134>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d027      	beq.n	8006f9c <DMA_CalcBaseAndBitshift+0xa8>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a36      	ldr	r2, [pc, #216]	; (800702c <DMA_CalcBaseAndBitshift+0x138>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d022      	beq.n	8006f9c <DMA_CalcBaseAndBitshift+0xa8>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a35      	ldr	r2, [pc, #212]	; (8007030 <DMA_CalcBaseAndBitshift+0x13c>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d01d      	beq.n	8006f9c <DMA_CalcBaseAndBitshift+0xa8>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a33      	ldr	r2, [pc, #204]	; (8007034 <DMA_CalcBaseAndBitshift+0x140>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d018      	beq.n	8006f9c <DMA_CalcBaseAndBitshift+0xa8>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a32      	ldr	r2, [pc, #200]	; (8007038 <DMA_CalcBaseAndBitshift+0x144>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d013      	beq.n	8006f9c <DMA_CalcBaseAndBitshift+0xa8>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a30      	ldr	r2, [pc, #192]	; (800703c <DMA_CalcBaseAndBitshift+0x148>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d00e      	beq.n	8006f9c <DMA_CalcBaseAndBitshift+0xa8>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a2f      	ldr	r2, [pc, #188]	; (8007040 <DMA_CalcBaseAndBitshift+0x14c>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d009      	beq.n	8006f9c <DMA_CalcBaseAndBitshift+0xa8>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a2d      	ldr	r2, [pc, #180]	; (8007044 <DMA_CalcBaseAndBitshift+0x150>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d004      	beq.n	8006f9c <DMA_CalcBaseAndBitshift+0xa8>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a2c      	ldr	r2, [pc, #176]	; (8007048 <DMA_CalcBaseAndBitshift+0x154>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d101      	bne.n	8006fa0 <DMA_CalcBaseAndBitshift+0xac>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e000      	b.n	8006fa2 <DMA_CalcBaseAndBitshift+0xae>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d024      	beq.n	8006ff0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	3b10      	subs	r3, #16
 8006fae:	4a27      	ldr	r2, [pc, #156]	; (800704c <DMA_CalcBaseAndBitshift+0x158>)
 8006fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006fb4:	091b      	lsrs	r3, r3, #4
 8006fb6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f003 0307 	and.w	r3, r3, #7
 8006fbe:	4a24      	ldr	r2, [pc, #144]	; (8007050 <DMA_CalcBaseAndBitshift+0x15c>)
 8006fc0:	5cd3      	ldrb	r3, [r2, r3]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2b03      	cmp	r3, #3
 8006fcc:	d908      	bls.n	8006fe0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	4b1f      	ldr	r3, [pc, #124]	; (8007054 <DMA_CalcBaseAndBitshift+0x160>)
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	1d1a      	adds	r2, r3, #4
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	659a      	str	r2, [r3, #88]	; 0x58
 8006fde:	e00d      	b.n	8006ffc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	4b1b      	ldr	r3, [pc, #108]	; (8007054 <DMA_CalcBaseAndBitshift+0x160>)
 8006fe8:	4013      	ands	r3, r2
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	6593      	str	r3, [r2, #88]	; 0x58
 8006fee:	e005      	b.n	8006ffc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007000:	4618      	mov	r0, r3
 8007002:	3714      	adds	r7, #20
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	40020010 	.word	0x40020010
 8007010:	40020028 	.word	0x40020028
 8007014:	40020040 	.word	0x40020040
 8007018:	40020058 	.word	0x40020058
 800701c:	40020070 	.word	0x40020070
 8007020:	40020088 	.word	0x40020088
 8007024:	400200a0 	.word	0x400200a0
 8007028:	400200b8 	.word	0x400200b8
 800702c:	40020410 	.word	0x40020410
 8007030:	40020428 	.word	0x40020428
 8007034:	40020440 	.word	0x40020440
 8007038:	40020458 	.word	0x40020458
 800703c:	40020470 	.word	0x40020470
 8007040:	40020488 	.word	0x40020488
 8007044:	400204a0 	.word	0x400204a0
 8007048:	400204b8 	.word	0x400204b8
 800704c:	aaaaaaab 	.word	0xaaaaaaab
 8007050:	08012f08 	.word	0x08012f08
 8007054:	fffffc00 	.word	0xfffffc00

08007058 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007060:	2300      	movs	r3, #0
 8007062:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d120      	bne.n	80070ae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007070:	2b03      	cmp	r3, #3
 8007072:	d858      	bhi.n	8007126 <DMA_CheckFifoParam+0xce>
 8007074:	a201      	add	r2, pc, #4	; (adr r2, 800707c <DMA_CheckFifoParam+0x24>)
 8007076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707a:	bf00      	nop
 800707c:	0800708d 	.word	0x0800708d
 8007080:	0800709f 	.word	0x0800709f
 8007084:	0800708d 	.word	0x0800708d
 8007088:	08007127 	.word	0x08007127
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d048      	beq.n	800712a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800709c:	e045      	b.n	800712a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80070a6:	d142      	bne.n	800712e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80070ac:	e03f      	b.n	800712e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070b6:	d123      	bne.n	8007100 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070bc:	2b03      	cmp	r3, #3
 80070be:	d838      	bhi.n	8007132 <DMA_CheckFifoParam+0xda>
 80070c0:	a201      	add	r2, pc, #4	; (adr r2, 80070c8 <DMA_CheckFifoParam+0x70>)
 80070c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c6:	bf00      	nop
 80070c8:	080070d9 	.word	0x080070d9
 80070cc:	080070df 	.word	0x080070df
 80070d0:	080070d9 	.word	0x080070d9
 80070d4:	080070f1 	.word	0x080070f1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	73fb      	strb	r3, [r7, #15]
        break;
 80070dc:	e030      	b.n	8007140 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d025      	beq.n	8007136 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80070ee:	e022      	b.n	8007136 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80070f8:	d11f      	bne.n	800713a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80070fe:	e01c      	b.n	800713a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007104:	2b02      	cmp	r3, #2
 8007106:	d902      	bls.n	800710e <DMA_CheckFifoParam+0xb6>
 8007108:	2b03      	cmp	r3, #3
 800710a:	d003      	beq.n	8007114 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800710c:	e018      	b.n	8007140 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	73fb      	strb	r3, [r7, #15]
        break;
 8007112:	e015      	b.n	8007140 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00e      	beq.n	800713e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	73fb      	strb	r3, [r7, #15]
    break;
 8007124:	e00b      	b.n	800713e <DMA_CheckFifoParam+0xe6>
        break;
 8007126:	bf00      	nop
 8007128:	e00a      	b.n	8007140 <DMA_CheckFifoParam+0xe8>
        break;
 800712a:	bf00      	nop
 800712c:	e008      	b.n	8007140 <DMA_CheckFifoParam+0xe8>
        break;
 800712e:	bf00      	nop
 8007130:	e006      	b.n	8007140 <DMA_CheckFifoParam+0xe8>
        break;
 8007132:	bf00      	nop
 8007134:	e004      	b.n	8007140 <DMA_CheckFifoParam+0xe8>
        break;
 8007136:	bf00      	nop
 8007138:	e002      	b.n	8007140 <DMA_CheckFifoParam+0xe8>
        break;
 800713a:	bf00      	nop
 800713c:	e000      	b.n	8007140 <DMA_CheckFifoParam+0xe8>
    break;
 800713e:	bf00      	nop
    }
  }

  return status;
 8007140:	7bfb      	ldrb	r3, [r7, #15]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop

08007150 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a38      	ldr	r2, [pc, #224]	; (8007244 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d022      	beq.n	80071ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a36      	ldr	r2, [pc, #216]	; (8007248 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d01d      	beq.n	80071ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a35      	ldr	r2, [pc, #212]	; (800724c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d018      	beq.n	80071ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a33      	ldr	r2, [pc, #204]	; (8007250 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d013      	beq.n	80071ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a32      	ldr	r2, [pc, #200]	; (8007254 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d00e      	beq.n	80071ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a30      	ldr	r2, [pc, #192]	; (8007258 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d009      	beq.n	80071ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a2f      	ldr	r2, [pc, #188]	; (800725c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d004      	beq.n	80071ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a2d      	ldr	r2, [pc, #180]	; (8007260 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d101      	bne.n	80071b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80071ae:	2301      	movs	r3, #1
 80071b0:	e000      	b.n	80071b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80071b2:	2300      	movs	r3, #0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d01a      	beq.n	80071ee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	3b08      	subs	r3, #8
 80071c0:	4a28      	ldr	r2, [pc, #160]	; (8007264 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80071c2:	fba2 2303 	umull	r2, r3, r2, r3
 80071c6:	091b      	lsrs	r3, r3, #4
 80071c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	4b26      	ldr	r3, [pc, #152]	; (8007268 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80071ce:	4413      	add	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	461a      	mov	r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a24      	ldr	r2, [pc, #144]	; (800726c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80071dc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f003 031f 	and.w	r3, r3, #31
 80071e4:	2201      	movs	r2, #1
 80071e6:	409a      	lsls	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80071ec:	e024      	b.n	8007238 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	3b10      	subs	r3, #16
 80071f6:	4a1e      	ldr	r2, [pc, #120]	; (8007270 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80071f8:	fba2 2303 	umull	r2, r3, r2, r3
 80071fc:	091b      	lsrs	r3, r3, #4
 80071fe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	4a1c      	ldr	r2, [pc, #112]	; (8007274 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d806      	bhi.n	8007216 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	4a1b      	ldr	r2, [pc, #108]	; (8007278 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d902      	bls.n	8007216 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	3308      	adds	r3, #8
 8007214:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	4b18      	ldr	r3, [pc, #96]	; (800727c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800721a:	4413      	add	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	461a      	mov	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a16      	ldr	r2, [pc, #88]	; (8007280 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007228:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f003 031f 	and.w	r3, r3, #31
 8007230:	2201      	movs	r2, #1
 8007232:	409a      	lsls	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007238:	bf00      	nop
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr
 8007244:	58025408 	.word	0x58025408
 8007248:	5802541c 	.word	0x5802541c
 800724c:	58025430 	.word	0x58025430
 8007250:	58025444 	.word	0x58025444
 8007254:	58025458 	.word	0x58025458
 8007258:	5802546c 	.word	0x5802546c
 800725c:	58025480 	.word	0x58025480
 8007260:	58025494 	.word	0x58025494
 8007264:	cccccccd 	.word	0xcccccccd
 8007268:	16009600 	.word	0x16009600
 800726c:	58025880 	.word	0x58025880
 8007270:	aaaaaaab 	.word	0xaaaaaaab
 8007274:	400204b8 	.word	0x400204b8
 8007278:	4002040f 	.word	0x4002040f
 800727c:	10008200 	.word	0x10008200
 8007280:	40020880 	.word	0x40020880

08007284 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	b2db      	uxtb	r3, r3
 8007292:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d04a      	beq.n	8007330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2b08      	cmp	r3, #8
 800729e:	d847      	bhi.n	8007330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a25      	ldr	r2, [pc, #148]	; (800733c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d022      	beq.n	80072f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a24      	ldr	r2, [pc, #144]	; (8007340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d01d      	beq.n	80072f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a22      	ldr	r2, [pc, #136]	; (8007344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d018      	beq.n	80072f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a21      	ldr	r2, [pc, #132]	; (8007348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d013      	beq.n	80072f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a1f      	ldr	r2, [pc, #124]	; (800734c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d00e      	beq.n	80072f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a1e      	ldr	r2, [pc, #120]	; (8007350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d009      	beq.n	80072f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a1c      	ldr	r2, [pc, #112]	; (8007354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d004      	beq.n	80072f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a1b      	ldr	r2, [pc, #108]	; (8007358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d101      	bne.n	80072f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80072f0:	2301      	movs	r3, #1
 80072f2:	e000      	b.n	80072f6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80072f4:	2300      	movs	r3, #0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00a      	beq.n	8007310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	4b17      	ldr	r3, [pc, #92]	; (800735c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80072fe:	4413      	add	r3, r2
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	461a      	mov	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a15      	ldr	r2, [pc, #84]	; (8007360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800730c:	671a      	str	r2, [r3, #112]	; 0x70
 800730e:	e009      	b.n	8007324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	4b14      	ldr	r3, [pc, #80]	; (8007364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007314:	4413      	add	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	461a      	mov	r2, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a11      	ldr	r2, [pc, #68]	; (8007368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007322:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	3b01      	subs	r3, #1
 8007328:	2201      	movs	r2, #1
 800732a:	409a      	lsls	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007330:	bf00      	nop
 8007332:	3714      	adds	r7, #20
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr
 800733c:	58025408 	.word	0x58025408
 8007340:	5802541c 	.word	0x5802541c
 8007344:	58025430 	.word	0x58025430
 8007348:	58025444 	.word	0x58025444
 800734c:	58025458 	.word	0x58025458
 8007350:	5802546c 	.word	0x5802546c
 8007354:	58025480 	.word	0x58025480
 8007358:	58025494 	.word	0x58025494
 800735c:	1600963f 	.word	0x1600963f
 8007360:	58025940 	.word	0x58025940
 8007364:	1000823f 	.word	0x1000823f
 8007368:	40020940 	.word	0x40020940

0800736c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800736c:	b480      	push	{r7}
 800736e:	b089      	sub	sp, #36	; 0x24
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007376:	2300      	movs	r3, #0
 8007378:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800737a:	4b89      	ldr	r3, [pc, #548]	; (80075a0 <HAL_GPIO_Init+0x234>)
 800737c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800737e:	e194      	b.n	80076aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	2101      	movs	r1, #1
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	fa01 f303 	lsl.w	r3, r1, r3
 800738c:	4013      	ands	r3, r2
 800738e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	2b00      	cmp	r3, #0
 8007394:	f000 8186 	beq.w	80076a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d00b      	beq.n	80073b8 <HAL_GPIO_Init+0x4c>
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d007      	beq.n	80073b8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80073ac:	2b11      	cmp	r3, #17
 80073ae:	d003      	beq.n	80073b8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	2b12      	cmp	r3, #18
 80073b6:	d130      	bne.n	800741a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	005b      	lsls	r3, r3, #1
 80073c2:	2203      	movs	r2, #3
 80073c4:	fa02 f303 	lsl.w	r3, r2, r3
 80073c8:	43db      	mvns	r3, r3
 80073ca:	69ba      	ldr	r2, [r7, #24]
 80073cc:	4013      	ands	r3, r2
 80073ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	68da      	ldr	r2, [r3, #12]
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	005b      	lsls	r3, r3, #1
 80073d8:	fa02 f303 	lsl.w	r3, r2, r3
 80073dc:	69ba      	ldr	r2, [r7, #24]
 80073de:	4313      	orrs	r3, r2
 80073e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80073ee:	2201      	movs	r2, #1
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	fa02 f303 	lsl.w	r3, r2, r3
 80073f6:	43db      	mvns	r3, r3
 80073f8:	69ba      	ldr	r2, [r7, #24]
 80073fa:	4013      	ands	r3, r2
 80073fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	091b      	lsrs	r3, r3, #4
 8007404:	f003 0201 	and.w	r2, r3, #1
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	fa02 f303 	lsl.w	r3, r2, r3
 800740e:	69ba      	ldr	r2, [r7, #24]
 8007410:	4313      	orrs	r3, r2
 8007412:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	69ba      	ldr	r2, [r7, #24]
 8007418:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	005b      	lsls	r3, r3, #1
 8007424:	2203      	movs	r2, #3
 8007426:	fa02 f303 	lsl.w	r3, r2, r3
 800742a:	43db      	mvns	r3, r3
 800742c:	69ba      	ldr	r2, [r7, #24]
 800742e:	4013      	ands	r3, r2
 8007430:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	689a      	ldr	r2, [r3, #8]
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	005b      	lsls	r3, r3, #1
 800743a:	fa02 f303 	lsl.w	r3, r2, r3
 800743e:	69ba      	ldr	r2, [r7, #24]
 8007440:	4313      	orrs	r3, r2
 8007442:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	69ba      	ldr	r2, [r7, #24]
 8007448:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	2b02      	cmp	r3, #2
 8007450:	d003      	beq.n	800745a <HAL_GPIO_Init+0xee>
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	2b12      	cmp	r3, #18
 8007458:	d123      	bne.n	80074a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	08da      	lsrs	r2, r3, #3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	3208      	adds	r2, #8
 8007462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	f003 0307 	and.w	r3, r3, #7
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	220f      	movs	r2, #15
 8007472:	fa02 f303 	lsl.w	r3, r2, r3
 8007476:	43db      	mvns	r3, r3
 8007478:	69ba      	ldr	r2, [r7, #24]
 800747a:	4013      	ands	r3, r2
 800747c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	691a      	ldr	r2, [r3, #16]
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	f003 0307 	and.w	r3, r3, #7
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	fa02 f303 	lsl.w	r3, r2, r3
 800748e:	69ba      	ldr	r2, [r7, #24]
 8007490:	4313      	orrs	r3, r2
 8007492:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	08da      	lsrs	r2, r3, #3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	3208      	adds	r2, #8
 800749c:	69b9      	ldr	r1, [r7, #24]
 800749e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	005b      	lsls	r3, r3, #1
 80074ac:	2203      	movs	r2, #3
 80074ae:	fa02 f303 	lsl.w	r3, r2, r3
 80074b2:	43db      	mvns	r3, r3
 80074b4:	69ba      	ldr	r2, [r7, #24]
 80074b6:	4013      	ands	r3, r2
 80074b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f003 0203 	and.w	r2, r3, #3
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	005b      	lsls	r3, r3, #1
 80074c6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ca:	69ba      	ldr	r2, [r7, #24]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	69ba      	ldr	r2, [r7, #24]
 80074d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f000 80e0 	beq.w	80076a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80074e4:	4b2f      	ldr	r3, [pc, #188]	; (80075a4 <HAL_GPIO_Init+0x238>)
 80074e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80074ea:	4a2e      	ldr	r2, [pc, #184]	; (80075a4 <HAL_GPIO_Init+0x238>)
 80074ec:	f043 0302 	orr.w	r3, r3, #2
 80074f0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80074f4:	4b2b      	ldr	r3, [pc, #172]	; (80075a4 <HAL_GPIO_Init+0x238>)
 80074f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80074fa:	f003 0302 	and.w	r3, r3, #2
 80074fe:	60fb      	str	r3, [r7, #12]
 8007500:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007502:	4a29      	ldr	r2, [pc, #164]	; (80075a8 <HAL_GPIO_Init+0x23c>)
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	089b      	lsrs	r3, r3, #2
 8007508:	3302      	adds	r3, #2
 800750a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800750e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	f003 0303 	and.w	r3, r3, #3
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	220f      	movs	r2, #15
 800751a:	fa02 f303 	lsl.w	r3, r2, r3
 800751e:	43db      	mvns	r3, r3
 8007520:	69ba      	ldr	r2, [r7, #24]
 8007522:	4013      	ands	r3, r2
 8007524:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a20      	ldr	r2, [pc, #128]	; (80075ac <HAL_GPIO_Init+0x240>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d052      	beq.n	80075d4 <HAL_GPIO_Init+0x268>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a1f      	ldr	r2, [pc, #124]	; (80075b0 <HAL_GPIO_Init+0x244>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d031      	beq.n	800759a <HAL_GPIO_Init+0x22e>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a1e      	ldr	r2, [pc, #120]	; (80075b4 <HAL_GPIO_Init+0x248>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d02b      	beq.n	8007596 <HAL_GPIO_Init+0x22a>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a1d      	ldr	r2, [pc, #116]	; (80075b8 <HAL_GPIO_Init+0x24c>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d025      	beq.n	8007592 <HAL_GPIO_Init+0x226>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a1c      	ldr	r2, [pc, #112]	; (80075bc <HAL_GPIO_Init+0x250>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d01f      	beq.n	800758e <HAL_GPIO_Init+0x222>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a1b      	ldr	r2, [pc, #108]	; (80075c0 <HAL_GPIO_Init+0x254>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d019      	beq.n	800758a <HAL_GPIO_Init+0x21e>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a1a      	ldr	r2, [pc, #104]	; (80075c4 <HAL_GPIO_Init+0x258>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d013      	beq.n	8007586 <HAL_GPIO_Init+0x21a>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a19      	ldr	r2, [pc, #100]	; (80075c8 <HAL_GPIO_Init+0x25c>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d00d      	beq.n	8007582 <HAL_GPIO_Init+0x216>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a18      	ldr	r2, [pc, #96]	; (80075cc <HAL_GPIO_Init+0x260>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d007      	beq.n	800757e <HAL_GPIO_Init+0x212>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a17      	ldr	r2, [pc, #92]	; (80075d0 <HAL_GPIO_Init+0x264>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d101      	bne.n	800757a <HAL_GPIO_Init+0x20e>
 8007576:	2309      	movs	r3, #9
 8007578:	e02d      	b.n	80075d6 <HAL_GPIO_Init+0x26a>
 800757a:	230a      	movs	r3, #10
 800757c:	e02b      	b.n	80075d6 <HAL_GPIO_Init+0x26a>
 800757e:	2308      	movs	r3, #8
 8007580:	e029      	b.n	80075d6 <HAL_GPIO_Init+0x26a>
 8007582:	2307      	movs	r3, #7
 8007584:	e027      	b.n	80075d6 <HAL_GPIO_Init+0x26a>
 8007586:	2306      	movs	r3, #6
 8007588:	e025      	b.n	80075d6 <HAL_GPIO_Init+0x26a>
 800758a:	2305      	movs	r3, #5
 800758c:	e023      	b.n	80075d6 <HAL_GPIO_Init+0x26a>
 800758e:	2304      	movs	r3, #4
 8007590:	e021      	b.n	80075d6 <HAL_GPIO_Init+0x26a>
 8007592:	2303      	movs	r3, #3
 8007594:	e01f      	b.n	80075d6 <HAL_GPIO_Init+0x26a>
 8007596:	2302      	movs	r3, #2
 8007598:	e01d      	b.n	80075d6 <HAL_GPIO_Init+0x26a>
 800759a:	2301      	movs	r3, #1
 800759c:	e01b      	b.n	80075d6 <HAL_GPIO_Init+0x26a>
 800759e:	bf00      	nop
 80075a0:	58000080 	.word	0x58000080
 80075a4:	58024400 	.word	0x58024400
 80075a8:	58000400 	.word	0x58000400
 80075ac:	58020000 	.word	0x58020000
 80075b0:	58020400 	.word	0x58020400
 80075b4:	58020800 	.word	0x58020800
 80075b8:	58020c00 	.word	0x58020c00
 80075bc:	58021000 	.word	0x58021000
 80075c0:	58021400 	.word	0x58021400
 80075c4:	58021800 	.word	0x58021800
 80075c8:	58021c00 	.word	0x58021c00
 80075cc:	58022000 	.word	0x58022000
 80075d0:	58022400 	.word	0x58022400
 80075d4:	2300      	movs	r3, #0
 80075d6:	69fa      	ldr	r2, [r7, #28]
 80075d8:	f002 0203 	and.w	r2, r2, #3
 80075dc:	0092      	lsls	r2, r2, #2
 80075de:	4093      	lsls	r3, r2
 80075e0:	69ba      	ldr	r2, [r7, #24]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80075e6:	4938      	ldr	r1, [pc, #224]	; (80076c8 <HAL_GPIO_Init+0x35c>)
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	089b      	lsrs	r3, r3, #2
 80075ec:	3302      	adds	r3, #2
 80075ee:	69ba      	ldr	r2, [r7, #24]
 80075f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	43db      	mvns	r3, r3
 80075fe:	69ba      	ldr	r2, [r7, #24]
 8007600:	4013      	ands	r3, r2
 8007602:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d003      	beq.n	8007618 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007610:	69ba      	ldr	r2, [r7, #24]
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	4313      	orrs	r3, r2
 8007616:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	69ba      	ldr	r2, [r7, #24]
 800761c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	43db      	mvns	r3, r3
 8007628:	69ba      	ldr	r2, [r7, #24]
 800762a:	4013      	ands	r3, r2
 800762c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d003      	beq.n	8007642 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800763a:	69ba      	ldr	r2, [r7, #24]
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	4313      	orrs	r3, r2
 8007640:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	69ba      	ldr	r2, [r7, #24]
 8007646:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	43db      	mvns	r3, r3
 8007654:	69ba      	ldr	r2, [r7, #24]
 8007656:	4013      	ands	r3, r2
 8007658:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d003      	beq.n	800766e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8007666:	69ba      	ldr	r2, [r7, #24]
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	4313      	orrs	r3, r2
 800766c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800766e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	43db      	mvns	r3, r3
 8007682:	69ba      	ldr	r2, [r7, #24]
 8007684:	4013      	ands	r3, r2
 8007686:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d003      	beq.n	800769c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8007694:	69ba      	ldr	r2, [r7, #24]
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	4313      	orrs	r3, r2
 800769a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800769c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	3301      	adds	r3, #1
 80076a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	fa22 f303 	lsr.w	r3, r2, r3
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f47f ae63 	bne.w	8007380 <HAL_GPIO_Init+0x14>
  }
}
 80076ba:	bf00      	nop
 80076bc:	bf00      	nop
 80076be:	3724      	adds	r7, #36	; 0x24
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr
 80076c8:	58000400 	.word	0x58000400

080076cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	460b      	mov	r3, r1
 80076d6:	807b      	strh	r3, [r7, #2]
 80076d8:	4613      	mov	r3, r2
 80076da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80076dc:	787b      	ldrb	r3, [r7, #1]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80076e2:	887a      	ldrh	r2, [r7, #2]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80076e8:	e003      	b.n	80076f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80076ea:	887b      	ldrh	r3, [r7, #2]
 80076ec:	041a      	lsls	r2, r3, #16
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	619a      	str	r2, [r3, #24]
}
 80076f2:	bf00      	nop
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80076fe:	b480      	push	{r7}
 8007700:	b085      	sub	sp, #20
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	460b      	mov	r3, r1
 8007708:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007710:	887a      	ldrh	r2, [r7, #2]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	4013      	ands	r3, r2
 8007716:	041a      	lsls	r2, r3, #16
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	43d9      	mvns	r1, r3
 800771c:	887b      	ldrh	r3, [r7, #2]
 800771e:	400b      	ands	r3, r1
 8007720:	431a      	orrs	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	619a      	str	r2, [r3, #24]
}
 8007726:	bf00      	nop
 8007728:	3714      	adds	r7, #20
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
	...

08007734 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d101      	bne.n	8007746 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e07f      	b.n	8007846 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b00      	cmp	r3, #0
 8007750:	d106      	bne.n	8007760 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f7fb fdf4 	bl	8003348 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2224      	movs	r2, #36	; 0x24
 8007764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f022 0201 	bic.w	r2, r2, #1
 8007776:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007784:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689a      	ldr	r2, [r3, #8]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007794:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d107      	bne.n	80077ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	689a      	ldr	r2, [r3, #8]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077aa:	609a      	str	r2, [r3, #8]
 80077ac:	e006      	b.n	80077bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	689a      	ldr	r2, [r3, #8]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80077ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d104      	bne.n	80077ce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	6859      	ldr	r1, [r3, #4]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	4b1d      	ldr	r3, [pc, #116]	; (8007850 <HAL_I2C_Init+0x11c>)
 80077da:	430b      	orrs	r3, r1
 80077dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68da      	ldr	r2, [r3, #12]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	691a      	ldr	r2, [r3, #16]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	ea42 0103 	orr.w	r1, r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	699b      	ldr	r3, [r3, #24]
 80077fe:	021a      	lsls	r2, r3, #8
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	430a      	orrs	r2, r1
 8007806:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	69d9      	ldr	r1, [r3, #28]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a1a      	ldr	r2, [r3, #32]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	430a      	orrs	r2, r1
 8007816:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f042 0201 	orr.w	r2, r2, #1
 8007826:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2220      	movs	r2, #32
 8007832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3708      	adds	r7, #8
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	02008000 	.word	0x02008000

08007854 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b088      	sub	sp, #32
 8007858:	af02      	add	r7, sp, #8
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	4608      	mov	r0, r1
 800785e:	4611      	mov	r1, r2
 8007860:	461a      	mov	r2, r3
 8007862:	4603      	mov	r3, r0
 8007864:	817b      	strh	r3, [r7, #10]
 8007866:	460b      	mov	r3, r1
 8007868:	813b      	strh	r3, [r7, #8]
 800786a:	4613      	mov	r3, r2
 800786c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b20      	cmp	r3, #32
 8007878:	f040 80f9 	bne.w	8007a6e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800787c:	6a3b      	ldr	r3, [r7, #32]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d002      	beq.n	8007888 <HAL_I2C_Mem_Write+0x34>
 8007882:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007884:	2b00      	cmp	r3, #0
 8007886:	d105      	bne.n	8007894 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800788e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e0ed      	b.n	8007a70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800789a:	2b01      	cmp	r3, #1
 800789c:	d101      	bne.n	80078a2 <HAL_I2C_Mem_Write+0x4e>
 800789e:	2302      	movs	r3, #2
 80078a0:	e0e6      	b.n	8007a70 <HAL_I2C_Mem_Write+0x21c>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80078aa:	f7fc fdbf 	bl	800442c <HAL_GetTick>
 80078ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	9300      	str	r3, [sp, #0]
 80078b4:	2319      	movs	r3, #25
 80078b6:	2201      	movs	r2, #1
 80078b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f001 fee3 	bl	8009688 <I2C_WaitOnFlagUntilTimeout>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e0d1      	b.n	8007a70 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2221      	movs	r2, #33	; 0x21
 80078d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2240      	movs	r2, #64	; 0x40
 80078d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6a3a      	ldr	r2, [r7, #32]
 80078e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80078ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80078f4:	88f8      	ldrh	r0, [r7, #6]
 80078f6:	893a      	ldrh	r2, [r7, #8]
 80078f8:	8979      	ldrh	r1, [r7, #10]
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	9301      	str	r3, [sp, #4]
 80078fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	4603      	mov	r3, r0
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f000 ff23 	bl	8008750 <I2C_RequestMemoryWrite>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d005      	beq.n	800791c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	e0a9      	b.n	8007a70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007920:	b29b      	uxth	r3, r3
 8007922:	2bff      	cmp	r3, #255	; 0xff
 8007924:	d90e      	bls.n	8007944 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	22ff      	movs	r2, #255	; 0xff
 800792a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007930:	b2da      	uxtb	r2, r3
 8007932:	8979      	ldrh	r1, [r7, #10]
 8007934:	2300      	movs	r3, #0
 8007936:	9300      	str	r3, [sp, #0]
 8007938:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f001 ffc5 	bl	80098cc <I2C_TransferConfig>
 8007942:	e00f      	b.n	8007964 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007948:	b29a      	uxth	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007952:	b2da      	uxtb	r2, r3
 8007954:	8979      	ldrh	r1, [r7, #10]
 8007956:	2300      	movs	r3, #0
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f001 ffb4 	bl	80098cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007964:	697a      	ldr	r2, [r7, #20]
 8007966:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f001 fecd 	bl	8009708 <I2C_WaitOnTXISFlagUntilTimeout>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d001      	beq.n	8007978 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	e07b      	b.n	8007a70 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797c:	781a      	ldrb	r2, [r3, #0]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007988:	1c5a      	adds	r2, r3, #1
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007992:	b29b      	uxth	r3, r3
 8007994:	3b01      	subs	r3, #1
 8007996:	b29a      	uxth	r2, r3
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079a0:	3b01      	subs	r3, #1
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d034      	beq.n	8007a1c <HAL_I2C_Mem_Write+0x1c8>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d130      	bne.n	8007a1c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c0:	2200      	movs	r2, #0
 80079c2:	2180      	movs	r1, #128	; 0x80
 80079c4:	68f8      	ldr	r0, [r7, #12]
 80079c6:	f001 fe5f 	bl	8009688 <I2C_WaitOnFlagUntilTimeout>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e04d      	b.n	8007a70 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d8:	b29b      	uxth	r3, r3
 80079da:	2bff      	cmp	r3, #255	; 0xff
 80079dc:	d90e      	bls.n	80079fc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	22ff      	movs	r2, #255	; 0xff
 80079e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079e8:	b2da      	uxtb	r2, r3
 80079ea:	8979      	ldrh	r1, [r7, #10]
 80079ec:	2300      	movs	r3, #0
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f001 ff69 	bl	80098cc <I2C_TransferConfig>
 80079fa:	e00f      	b.n	8007a1c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a0a:	b2da      	uxtb	r2, r3
 8007a0c:	8979      	ldrh	r1, [r7, #10]
 8007a0e:	2300      	movs	r3, #0
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f001 ff58 	bl	80098cc <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d19e      	bne.n	8007964 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	f001 feac 	bl	8009788 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d001      	beq.n	8007a3a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e01a      	b.n	8007a70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2220      	movs	r2, #32
 8007a40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	6859      	ldr	r1, [r3, #4]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	4b0a      	ldr	r3, [pc, #40]	; (8007a78 <HAL_I2C_Mem_Write+0x224>)
 8007a4e:	400b      	ands	r3, r1
 8007a50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2220      	movs	r2, #32
 8007a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	e000      	b.n	8007a70 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007a6e:	2302      	movs	r3, #2
  }
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3718      	adds	r7, #24
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	fe00e800 	.word	0xfe00e800

08007a7c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b088      	sub	sp, #32
 8007a80:	af02      	add	r7, sp, #8
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	4608      	mov	r0, r1
 8007a86:	4611      	mov	r1, r2
 8007a88:	461a      	mov	r2, r3
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	817b      	strh	r3, [r7, #10]
 8007a8e:	460b      	mov	r3, r1
 8007a90:	813b      	strh	r3, [r7, #8]
 8007a92:	4613      	mov	r3, r2
 8007a94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	2b20      	cmp	r3, #32
 8007aa0:	f040 80fd 	bne.w	8007c9e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007aa4:	6a3b      	ldr	r3, [r7, #32]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d002      	beq.n	8007ab0 <HAL_I2C_Mem_Read+0x34>
 8007aaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d105      	bne.n	8007abc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ab6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e0f1      	b.n	8007ca0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d101      	bne.n	8007aca <HAL_I2C_Mem_Read+0x4e>
 8007ac6:	2302      	movs	r3, #2
 8007ac8:	e0ea      	b.n	8007ca0 <HAL_I2C_Mem_Read+0x224>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007ad2:	f7fc fcab 	bl	800442c <HAL_GetTick>
 8007ad6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	2319      	movs	r3, #25
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f001 fdcf 	bl	8009688 <I2C_WaitOnFlagUntilTimeout>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d001      	beq.n	8007af4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	e0d5      	b.n	8007ca0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2222      	movs	r2, #34	; 0x22
 8007af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2240      	movs	r2, #64	; 0x40
 8007b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2200      	movs	r2, #0
 8007b08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6a3a      	ldr	r2, [r7, #32]
 8007b0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007b14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007b1c:	88f8      	ldrh	r0, [r7, #6]
 8007b1e:	893a      	ldrh	r2, [r7, #8]
 8007b20:	8979      	ldrh	r1, [r7, #10]
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	9301      	str	r3, [sp, #4]
 8007b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b28:	9300      	str	r3, [sp, #0]
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f000 fe63 	bl	80087f8 <I2C_RequestMemoryRead>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d005      	beq.n	8007b44 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e0ad      	b.n	8007ca0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	2bff      	cmp	r3, #255	; 0xff
 8007b4c:	d90e      	bls.n	8007b6c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	22ff      	movs	r2, #255	; 0xff
 8007b52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b58:	b2da      	uxtb	r2, r3
 8007b5a:	8979      	ldrh	r1, [r7, #10]
 8007b5c:	4b52      	ldr	r3, [pc, #328]	; (8007ca8 <HAL_I2C_Mem_Read+0x22c>)
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f001 feb1 	bl	80098cc <I2C_TransferConfig>
 8007b6a:	e00f      	b.n	8007b8c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b7a:	b2da      	uxtb	r2, r3
 8007b7c:	8979      	ldrh	r1, [r7, #10]
 8007b7e:	4b4a      	ldr	r3, [pc, #296]	; (8007ca8 <HAL_I2C_Mem_Read+0x22c>)
 8007b80:	9300      	str	r3, [sp, #0]
 8007b82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f001 fea0 	bl	80098cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b92:	2200      	movs	r2, #0
 8007b94:	2104      	movs	r1, #4
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f001 fd76 	bl	8009688 <I2C_WaitOnFlagUntilTimeout>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d001      	beq.n	8007ba6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e07c      	b.n	8007ca0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb0:	b2d2      	uxtb	r2, r2
 8007bb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb8:	1c5a      	adds	r2, r3, #1
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d034      	beq.n	8007c4c <HAL_I2C_Mem_Read+0x1d0>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d130      	bne.n	8007c4c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	2180      	movs	r1, #128	; 0x80
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f001 fd47 	bl	8009688 <I2C_WaitOnFlagUntilTimeout>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d001      	beq.n	8007c04 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e04d      	b.n	8007ca0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	2bff      	cmp	r3, #255	; 0xff
 8007c0c:	d90e      	bls.n	8007c2c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	22ff      	movs	r2, #255	; 0xff
 8007c12:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	8979      	ldrh	r1, [r7, #10]
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	9300      	str	r3, [sp, #0]
 8007c20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f001 fe51 	bl	80098cc <I2C_TransferConfig>
 8007c2a:	e00f      	b.n	8007c4c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c3a:	b2da      	uxtb	r2, r3
 8007c3c:	8979      	ldrh	r1, [r7, #10]
 8007c3e:	2300      	movs	r3, #0
 8007c40:	9300      	str	r3, [sp, #0]
 8007c42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f001 fe40 	bl	80098cc <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d19a      	bne.n	8007b8c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c56:	697a      	ldr	r2, [r7, #20]
 8007c58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f001 fd94 	bl	8009788 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d001      	beq.n	8007c6a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	e01a      	b.n	8007ca0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2220      	movs	r2, #32
 8007c70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	6859      	ldr	r1, [r3, #4]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	4b0b      	ldr	r3, [pc, #44]	; (8007cac <HAL_I2C_Mem_Read+0x230>)
 8007c7e:	400b      	ands	r3, r1
 8007c80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2220      	movs	r2, #32
 8007c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	e000      	b.n	8007ca0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007c9e:	2302      	movs	r3, #2
  }
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3718      	adds	r7, #24
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	80002400 	.word	0x80002400
 8007cac:	fe00e800 	.word	0xfe00e800

08007cb0 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b08a      	sub	sp, #40	; 0x28
 8007cb4:	af02      	add	r7, sp, #8
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	4608      	mov	r0, r1
 8007cba:	4611      	mov	r1, r2
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	817b      	strh	r3, [r7, #10]
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	813b      	strh	r3, [r7, #8]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b20      	cmp	r3, #32
 8007cd4:	f040 80d5 	bne.w	8007e82 <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d002      	beq.n	8007ce4 <HAL_I2C_Mem_Read_DMA+0x34>
 8007cde:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d105      	bne.n	8007cf0 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e0c9      	b.n	8007e84 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cfe:	d101      	bne.n	8007d04 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8007d00:	2302      	movs	r3, #2
 8007d02:	e0bf      	b.n	8007e84 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d101      	bne.n	8007d12 <HAL_I2C_Mem_Read_DMA+0x62>
 8007d0e:	2302      	movs	r3, #2
 8007d10:	e0b8      	b.n	8007e84 <HAL_I2C_Mem_Read_DMA+0x1d4>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007d1a:	f7fc fb87 	bl	800442c <HAL_GetTick>
 8007d1e:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2222      	movs	r2, #34	; 0x22
 8007d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2240      	movs	r2, #64	; 0x40
 8007d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2200      	movs	r2, #0
 8007d34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007d40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	4a51      	ldr	r2, [pc, #324]	; (8007e8c <HAL_I2C_Mem_Read_DMA+0x1dc>)
 8007d46:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	4a51      	ldr	r2, [pc, #324]	; (8007e90 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 8007d4c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	2bff      	cmp	r3, #255	; 0xff
 8007d56:	d906      	bls.n	8007d66 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	22ff      	movs	r2, #255	; 0xff
 8007d5c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007d5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d62:	61fb      	str	r3, [r7, #28]
 8007d64:	e007      	b.n	8007d76 <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007d70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d74:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8007d76:	88f8      	ldrh	r0, [r7, #6]
 8007d78:	893a      	ldrh	r2, [r7, #8]
 8007d7a:	8979      	ldrh	r1, [r7, #10]
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	9301      	str	r3, [sp, #4]
 8007d80:	2319      	movs	r3, #25
 8007d82:	9300      	str	r3, [sp, #0]
 8007d84:	4603      	mov	r3, r0
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f000 fd36 	bl	80087f8 <I2C_RequestMemoryRead>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d005      	beq.n	8007d9e <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e072      	b.n	8007e84 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d020      	beq.n	8007de8 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007daa:	4a3a      	ldr	r2, [pc, #232]	; (8007e94 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8007dac:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007db2:	4a39      	ldr	r2, [pc, #228]	; (8007e98 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8007db4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dba:	2200      	movs	r2, #0
 8007dbc:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	3324      	adds	r3, #36	; 0x24
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dd8:	f7fc ffd0 	bl	8004d7c <HAL_DMA_Start_IT>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8007de0:	7dfb      	ldrb	r3, [r7, #23]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d139      	bne.n	8007e5a <HAL_I2C_Mem_Read_DMA+0x1aa>
 8007de6:	e013      	b.n	8007e10 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2220      	movs	r2, #32
 8007dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dfc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e039      	b.n	8007e84 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	8979      	ldrh	r1, [r7, #10]
 8007e18:	4b20      	ldr	r3, [pc, #128]	; (8007e9c <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8007e1a:	9300      	str	r3, [sp, #0]
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f001 fd54 	bl	80098cc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e28:	b29a      	uxth	r2, r3
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e2e:	1ad3      	subs	r3, r2, r3
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007e3e:	2110      	movs	r1, #16
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f001 fd71 	bl	8009928 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e54:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	e014      	b.n	8007e84 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2220      	movs	r2, #32
 8007e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e6e:	f043 0210 	orr.w	r2, r3, #16
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e000      	b.n	8007e84 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8007e82:	2302      	movs	r3, #2
  }
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3720      	adds	r7, #32
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	ffff0000 	.word	0xffff0000
 8007e90:	080081ab 	.word	0x080081ab
 8007e94:	08009347 	.word	0x08009347
 8007e98:	080093dd 	.word	0x080093dd
 8007e9c:	80002400 	.word	0x80002400

08007ea0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	699b      	ldr	r3, [r3, #24]
 8007eae:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d005      	beq.n	8007ecc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec4:	68ba      	ldr	r2, [r7, #8]
 8007ec6:	68f9      	ldr	r1, [r7, #12]
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	4798      	blx	r3
  }
}
 8007ecc:	bf00      	nop
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	70fb      	strb	r3, [r7, #3]
 8007f30:	4613      	mov	r3, r2
 8007f32:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007f34:	bf00      	nop
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007f48:	bf00      	nop
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007f98:	bf00      	nop
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d101      	bne.n	8007fc8 <I2C_Slave_ISR_IT+0x24>
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	e0ec      	b.n	80081a2 <I2C_Slave_ISR_IT+0x1fe>
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	095b      	lsrs	r3, r3, #5
 8007fd4:	f003 0301 	and.w	r3, r3, #1
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d009      	beq.n	8007ff0 <I2C_Slave_ISR_IT+0x4c>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	095b      	lsrs	r3, r3, #5
 8007fe0:	f003 0301 	and.w	r3, r3, #1
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d003      	beq.n	8007ff0 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007fe8:	6939      	ldr	r1, [r7, #16]
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f000 fe42 	bl	8008c74 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	091b      	lsrs	r3, r3, #4
 8007ff4:	f003 0301 	and.w	r3, r3, #1
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d04d      	beq.n	8008098 <I2C_Slave_ISR_IT+0xf4>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	091b      	lsrs	r3, r3, #4
 8008000:	f003 0301 	and.w	r3, r3, #1
 8008004:	2b00      	cmp	r3, #0
 8008006:	d047      	beq.n	8008098 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800800c:	b29b      	uxth	r3, r3
 800800e:	2b00      	cmp	r3, #0
 8008010:	d128      	bne.n	8008064 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008018:	b2db      	uxtb	r3, r3
 800801a:	2b28      	cmp	r3, #40	; 0x28
 800801c:	d108      	bne.n	8008030 <I2C_Slave_ISR_IT+0x8c>
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008024:	d104      	bne.n	8008030 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008026:	6939      	ldr	r1, [r7, #16]
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f001 f81b 	bl	8009064 <I2C_ITListenCplt>
 800802e:	e032      	b.n	8008096 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b29      	cmp	r3, #41	; 0x29
 800803a:	d10e      	bne.n	800805a <I2C_Slave_ISR_IT+0xb6>
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008042:	d00a      	beq.n	800805a <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2210      	movs	r2, #16
 800804a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f001 f956 	bl	80092fe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008052:	68f8      	ldr	r0, [r7, #12]
 8008054:	f000 fce5 	bl	8008a22 <I2C_ITSlaveSeqCplt>
 8008058:	e01d      	b.n	8008096 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2210      	movs	r2, #16
 8008060:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008062:	e096      	b.n	8008192 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2210      	movs	r2, #16
 800806a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008070:	f043 0204 	orr.w	r2, r3, #4
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d004      	beq.n	8008088 <I2C_Slave_ISR_IT+0xe4>
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008084:	f040 8085 	bne.w	8008192 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800808c:	4619      	mov	r1, r3
 800808e:	68f8      	ldr	r0, [r7, #12]
 8008090:	f001 f83e 	bl	8009110 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008094:	e07d      	b.n	8008192 <I2C_Slave_ISR_IT+0x1ee>
 8008096:	e07c      	b.n	8008192 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	089b      	lsrs	r3, r3, #2
 800809c:	f003 0301 	and.w	r3, r3, #1
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d030      	beq.n	8008106 <I2C_Slave_ISR_IT+0x162>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	089b      	lsrs	r3, r3, #2
 80080a8:	f003 0301 	and.w	r3, r3, #1
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d02a      	beq.n	8008106 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d018      	beq.n	80080ec <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c4:	b2d2      	uxtb	r2, r2
 80080c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080cc:	1c5a      	adds	r2, r3, #1
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080d6:	3b01      	subs	r3, #1
 80080d8:	b29a      	uxth	r2, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	3b01      	subs	r3, #1
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d14f      	bne.n	8008196 <I2C_Slave_ISR_IT+0x1f2>
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80080fc:	d04b      	beq.n	8008196 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f000 fc8f 	bl	8008a22 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008104:	e047      	b.n	8008196 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	08db      	lsrs	r3, r3, #3
 800810a:	f003 0301 	and.w	r3, r3, #1
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00a      	beq.n	8008128 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	08db      	lsrs	r3, r3, #3
 8008116:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800811a:	2b00      	cmp	r3, #0
 800811c:	d004      	beq.n	8008128 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800811e:	6939      	ldr	r1, [r7, #16]
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f000 fbbd 	bl	80088a0 <I2C_ITAddrCplt>
 8008126:	e037      	b.n	8008198 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	085b      	lsrs	r3, r3, #1
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	2b00      	cmp	r3, #0
 8008132:	d031      	beq.n	8008198 <I2C_Slave_ISR_IT+0x1f4>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	085b      	lsrs	r3, r3, #1
 8008138:	f003 0301 	and.w	r3, r3, #1
 800813c:	2b00      	cmp	r3, #0
 800813e:	d02b      	beq.n	8008198 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008144:	b29b      	uxth	r3, r3
 8008146:	2b00      	cmp	r3, #0
 8008148:	d018      	beq.n	800817c <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814e:	781a      	ldrb	r2, [r3, #0]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815a:	1c5a      	adds	r2, r3, #1
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008164:	b29b      	uxth	r3, r3
 8008166:	3b01      	subs	r3, #1
 8008168:	b29a      	uxth	r2, r3
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008172:	3b01      	subs	r3, #1
 8008174:	b29a      	uxth	r2, r3
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	851a      	strh	r2, [r3, #40]	; 0x28
 800817a:	e00d      	b.n	8008198 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008182:	d002      	beq.n	800818a <I2C_Slave_ISR_IT+0x1e6>
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d106      	bne.n	8008198 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f000 fc49 	bl	8008a22 <I2C_ITSlaveSeqCplt>
 8008190:	e002      	b.n	8008198 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8008192:	bf00      	nop
 8008194:	e000      	b.n	8008198 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8008196:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3718      	adds	r7, #24
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b088      	sub	sp, #32
 80081ae:	af02      	add	r7, sp, #8
 80081b0:	60f8      	str	r0, [r7, #12]
 80081b2:	60b9      	str	r1, [r7, #8]
 80081b4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d101      	bne.n	80081c4 <I2C_Master_ISR_DMA+0x1a>
 80081c0:	2302      	movs	r3, #2
 80081c2:	e0e1      	b.n	8008388 <I2C_Master_ISR_DMA+0x1de>
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	091b      	lsrs	r3, r3, #4
 80081d0:	f003 0301 	and.w	r3, r3, #1
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d017      	beq.n	8008208 <I2C_Master_ISR_DMA+0x5e>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	091b      	lsrs	r3, r3, #4
 80081dc:	f003 0301 	and.w	r3, r3, #1
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d011      	beq.n	8008208 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2210      	movs	r2, #16
 80081ea:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081f0:	f043 0204 	orr.w	r2, r3, #4
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80081f8:	2120      	movs	r1, #32
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f001 fb94 	bl	8009928 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f001 f87c 	bl	80092fe <I2C_Flush_TXDR>
 8008206:	e0ba      	b.n	800837e <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	09db      	lsrs	r3, r3, #7
 800820c:	f003 0301 	and.w	r3, r3, #1
 8008210:	2b00      	cmp	r3, #0
 8008212:	d072      	beq.n	80082fa <I2C_Master_ISR_DMA+0x150>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	099b      	lsrs	r3, r3, #6
 8008218:	f003 0301 	and.w	r3, r3, #1
 800821c:	2b00      	cmp	r3, #0
 800821e:	d06c      	beq.n	80082fa <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800822e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008234:	b29b      	uxth	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d04e      	beq.n	80082d8 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	b29b      	uxth	r3, r3
 8008242:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008246:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800824c:	b29b      	uxth	r3, r3
 800824e:	2bff      	cmp	r3, #255	; 0xff
 8008250:	d906      	bls.n	8008260 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	22ff      	movs	r2, #255	; 0xff
 8008256:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8008258:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800825c:	617b      	str	r3, [r7, #20]
 800825e:	e010      	b.n	8008282 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008264:	b29a      	uxth	r2, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800826e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008272:	d003      	beq.n	800827c <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008278:	617b      	str	r3, [r7, #20]
 800827a:	e002      	b.n	8008282 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800827c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008280:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008286:	b2da      	uxtb	r2, r3
 8008288:	8a79      	ldrh	r1, [r7, #18]
 800828a:	2300      	movs	r3, #0
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f001 fb1b 	bl	80098cc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800829a:	b29a      	uxth	r2, r3
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	2b22      	cmp	r3, #34	; 0x22
 80082b2:	d108      	bne.n	80082c6 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082c2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80082c4:	e05b      	b.n	800837e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082d4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80082d6:	e052      	b.n	800837e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082e6:	d003      	beq.n	80082f0 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f000 fb5d 	bl	80089a8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80082ee:	e046      	b.n	800837e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80082f0:	2140      	movs	r1, #64	; 0x40
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f000 ff0c 	bl	8009110 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80082f8:	e041      	b.n	800837e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	099b      	lsrs	r3, r3, #6
 80082fe:	f003 0301 	and.w	r3, r3, #1
 8008302:	2b00      	cmp	r3, #0
 8008304:	d029      	beq.n	800835a <I2C_Master_ISR_DMA+0x1b0>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	099b      	lsrs	r3, r3, #6
 800830a:	f003 0301 	and.w	r3, r3, #1
 800830e:	2b00      	cmp	r3, #0
 8008310:	d023      	beq.n	800835a <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008316:	b29b      	uxth	r3, r3
 8008318:	2b00      	cmp	r3, #0
 800831a:	d119      	bne.n	8008350 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008326:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800832a:	d027      	beq.n	800837c <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008330:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008334:	d108      	bne.n	8008348 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	685a      	ldr	r2, [r3, #4]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008344:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8008346:	e019      	b.n	800837c <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f000 fb2d 	bl	80089a8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800834e:	e015      	b.n	800837c <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008350:	2140      	movs	r1, #64	; 0x40
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f000 fedc 	bl	8009110 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008358:	e010      	b.n	800837c <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	095b      	lsrs	r3, r3, #5
 800835e:	f003 0301 	and.w	r3, r3, #1
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00b      	beq.n	800837e <I2C_Master_ISR_DMA+0x1d4>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	095b      	lsrs	r3, r3, #5
 800836a:	f003 0301 	and.w	r3, r3, #1
 800836e:	2b00      	cmp	r3, #0
 8008370:	d005      	beq.n	800837e <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008372:	68b9      	ldr	r1, [r7, #8]
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	f000 fbb3 	bl	8008ae0 <I2C_ITMasterCplt>
 800837a:	e000      	b.n	800837e <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800837c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3718      	adds	r7, #24
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b088      	sub	sp, #32
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80083a2:	2300      	movs	r3, #0
 80083a4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d101      	bne.n	80083b4 <I2C_Slave_ISR_DMA+0x24>
 80083b0:	2302      	movs	r3, #2
 80083b2:	e1c8      	b.n	8008746 <I2C_Slave_ISR_DMA+0x3b6>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	095b      	lsrs	r3, r3, #5
 80083c0:	f003 0301 	and.w	r3, r3, #1
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d009      	beq.n	80083dc <I2C_Slave_ISR_DMA+0x4c>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	095b      	lsrs	r3, r3, #5
 80083cc:	f003 0301 	and.w	r3, r3, #1
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d003      	beq.n	80083dc <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80083d4:	68b9      	ldr	r1, [r7, #8]
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	f000 fc4c 	bl	8008c74 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	091b      	lsrs	r3, r3, #4
 80083e0:	f003 0301 	and.w	r3, r3, #1
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f000 8199 	beq.w	800871c <I2C_Slave_ISR_DMA+0x38c>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	091b      	lsrs	r3, r3, #4
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f000 8192 	beq.w	800871c <I2C_Slave_ISR_DMA+0x38c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	0b9b      	lsrs	r3, r3, #14
 80083fc:	f003 0301 	and.w	r3, r3, #1
 8008400:	2b00      	cmp	r3, #0
 8008402:	d106      	bne.n	8008412 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	0bdb      	lsrs	r3, r3, #15
 8008408:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800840c:	2b00      	cmp	r3, #0
 800840e:	f000 817e 	beq.w	800870e <I2C_Slave_ISR_DMA+0x37e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008416:	2b00      	cmp	r3, #0
 8008418:	d07c      	beq.n	8008514 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	0bdb      	lsrs	r3, r3, #15
 800841e:	f003 0301 	and.w	r3, r3, #1
 8008422:	2b00      	cmp	r3, #0
 8008424:	d076      	beq.n	8008514 <I2C_Slave_ISR_DMA+0x184>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a8d      	ldr	r2, [pc, #564]	; (8008664 <I2C_Slave_ISR_DMA+0x2d4>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d059      	beq.n	80084e6 <I2C_Slave_ISR_DMA+0x156>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a8b      	ldr	r2, [pc, #556]	; (8008668 <I2C_Slave_ISR_DMA+0x2d8>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d053      	beq.n	80084e6 <I2C_Slave_ISR_DMA+0x156>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a89      	ldr	r2, [pc, #548]	; (800866c <I2C_Slave_ISR_DMA+0x2dc>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d04d      	beq.n	80084e6 <I2C_Slave_ISR_DMA+0x156>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a87      	ldr	r2, [pc, #540]	; (8008670 <I2C_Slave_ISR_DMA+0x2e0>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d047      	beq.n	80084e6 <I2C_Slave_ISR_DMA+0x156>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a85      	ldr	r2, [pc, #532]	; (8008674 <I2C_Slave_ISR_DMA+0x2e4>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d041      	beq.n	80084e6 <I2C_Slave_ISR_DMA+0x156>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a83      	ldr	r2, [pc, #524]	; (8008678 <I2C_Slave_ISR_DMA+0x2e8>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d03b      	beq.n	80084e6 <I2C_Slave_ISR_DMA+0x156>
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a81      	ldr	r2, [pc, #516]	; (800867c <I2C_Slave_ISR_DMA+0x2ec>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d035      	beq.n	80084e6 <I2C_Slave_ISR_DMA+0x156>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a7f      	ldr	r2, [pc, #508]	; (8008680 <I2C_Slave_ISR_DMA+0x2f0>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d02f      	beq.n	80084e6 <I2C_Slave_ISR_DMA+0x156>
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a7d      	ldr	r2, [pc, #500]	; (8008684 <I2C_Slave_ISR_DMA+0x2f4>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d029      	beq.n	80084e6 <I2C_Slave_ISR_DMA+0x156>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a7b      	ldr	r2, [pc, #492]	; (8008688 <I2C_Slave_ISR_DMA+0x2f8>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d023      	beq.n	80084e6 <I2C_Slave_ISR_DMA+0x156>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a79      	ldr	r2, [pc, #484]	; (800868c <I2C_Slave_ISR_DMA+0x2fc>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d01d      	beq.n	80084e6 <I2C_Slave_ISR_DMA+0x156>
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a77      	ldr	r2, [pc, #476]	; (8008690 <I2C_Slave_ISR_DMA+0x300>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d017      	beq.n	80084e6 <I2C_Slave_ISR_DMA+0x156>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a75      	ldr	r2, [pc, #468]	; (8008694 <I2C_Slave_ISR_DMA+0x304>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d011      	beq.n	80084e6 <I2C_Slave_ISR_DMA+0x156>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a73      	ldr	r2, [pc, #460]	; (8008698 <I2C_Slave_ISR_DMA+0x308>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d00b      	beq.n	80084e6 <I2C_Slave_ISR_DMA+0x156>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a71      	ldr	r2, [pc, #452]	; (800869c <I2C_Slave_ISR_DMA+0x30c>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d005      	beq.n	80084e6 <I2C_Slave_ISR_DMA+0x156>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a6f      	ldr	r2, [pc, #444]	; (80086a0 <I2C_Slave_ISR_DMA+0x310>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d109      	bne.n	80084fa <I2C_Slave_ISR_DMA+0x16a>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	bf0c      	ite	eq
 80084f2:	2301      	moveq	r3, #1
 80084f4:	2300      	movne	r3, #0
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	e008      	b.n	800850c <I2C_Slave_ISR_DMA+0x17c>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	2b00      	cmp	r3, #0
 8008504:	bf0c      	ite	eq
 8008506:	2301      	moveq	r3, #1
 8008508:	2300      	movne	r3, #0
 800850a:	b2db      	uxtb	r3, r3
 800850c:	2b00      	cmp	r3, #0
 800850e:	d001      	beq.n	8008514 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 8008510:	2301      	movs	r3, #1
 8008512:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008518:	2b00      	cmp	r3, #0
 800851a:	d07c      	beq.n	8008616 <I2C_Slave_ISR_DMA+0x286>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	0b9b      	lsrs	r3, r3, #14
 8008520:	f003 0301 	and.w	r3, r3, #1
 8008524:	2b00      	cmp	r3, #0
 8008526:	d076      	beq.n	8008616 <I2C_Slave_ISR_DMA+0x286>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a4d      	ldr	r2, [pc, #308]	; (8008664 <I2C_Slave_ISR_DMA+0x2d4>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d059      	beq.n	80085e8 <I2C_Slave_ISR_DMA+0x258>
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a4b      	ldr	r2, [pc, #300]	; (8008668 <I2C_Slave_ISR_DMA+0x2d8>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d053      	beq.n	80085e8 <I2C_Slave_ISR_DMA+0x258>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a49      	ldr	r2, [pc, #292]	; (800866c <I2C_Slave_ISR_DMA+0x2dc>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d04d      	beq.n	80085e8 <I2C_Slave_ISR_DMA+0x258>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a47      	ldr	r2, [pc, #284]	; (8008670 <I2C_Slave_ISR_DMA+0x2e0>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d047      	beq.n	80085e8 <I2C_Slave_ISR_DMA+0x258>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a45      	ldr	r2, [pc, #276]	; (8008674 <I2C_Slave_ISR_DMA+0x2e4>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d041      	beq.n	80085e8 <I2C_Slave_ISR_DMA+0x258>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a43      	ldr	r2, [pc, #268]	; (8008678 <I2C_Slave_ISR_DMA+0x2e8>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d03b      	beq.n	80085e8 <I2C_Slave_ISR_DMA+0x258>
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a41      	ldr	r2, [pc, #260]	; (800867c <I2C_Slave_ISR_DMA+0x2ec>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d035      	beq.n	80085e8 <I2C_Slave_ISR_DMA+0x258>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a3f      	ldr	r2, [pc, #252]	; (8008680 <I2C_Slave_ISR_DMA+0x2f0>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d02f      	beq.n	80085e8 <I2C_Slave_ISR_DMA+0x258>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a3d      	ldr	r2, [pc, #244]	; (8008684 <I2C_Slave_ISR_DMA+0x2f4>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d029      	beq.n	80085e8 <I2C_Slave_ISR_DMA+0x258>
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a3b      	ldr	r2, [pc, #236]	; (8008688 <I2C_Slave_ISR_DMA+0x2f8>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d023      	beq.n	80085e8 <I2C_Slave_ISR_DMA+0x258>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a39      	ldr	r2, [pc, #228]	; (800868c <I2C_Slave_ISR_DMA+0x2fc>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d01d      	beq.n	80085e8 <I2C_Slave_ISR_DMA+0x258>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a37      	ldr	r2, [pc, #220]	; (8008690 <I2C_Slave_ISR_DMA+0x300>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d017      	beq.n	80085e8 <I2C_Slave_ISR_DMA+0x258>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a35      	ldr	r2, [pc, #212]	; (8008694 <I2C_Slave_ISR_DMA+0x304>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d011      	beq.n	80085e8 <I2C_Slave_ISR_DMA+0x258>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a33      	ldr	r2, [pc, #204]	; (8008698 <I2C_Slave_ISR_DMA+0x308>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d00b      	beq.n	80085e8 <I2C_Slave_ISR_DMA+0x258>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a31      	ldr	r2, [pc, #196]	; (800869c <I2C_Slave_ISR_DMA+0x30c>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d005      	beq.n	80085e8 <I2C_Slave_ISR_DMA+0x258>
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a2f      	ldr	r2, [pc, #188]	; (80086a0 <I2C_Slave_ISR_DMA+0x310>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d109      	bne.n	80085fc <I2C_Slave_ISR_DMA+0x26c>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	bf0c      	ite	eq
 80085f4:	2301      	moveq	r3, #1
 80085f6:	2300      	movne	r3, #0
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	e008      	b.n	800860e <I2C_Slave_ISR_DMA+0x27e>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	bf0c      	ite	eq
 8008608:	2301      	moveq	r3, #1
 800860a:	2300      	movne	r3, #0
 800860c:	b2db      	uxtb	r3, r3
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <I2C_Slave_ISR_DMA+0x286>
          {
            treatdmanack = 1U;
 8008612:	2301      	movs	r3, #1
 8008614:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d148      	bne.n	80086ae <I2C_Slave_ISR_DMA+0x31e>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008622:	b2db      	uxtb	r3, r3
 8008624:	2b28      	cmp	r3, #40	; 0x28
 8008626:	d108      	bne.n	800863a <I2C_Slave_ISR_DMA+0x2aa>
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800862e:	d104      	bne.n	800863a <I2C_Slave_ISR_DMA+0x2aa>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8008630:	68b9      	ldr	r1, [r7, #8]
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f000 fd16 	bl	8009064 <I2C_ITListenCplt>
 8008638:	e068      	b.n	800870c <I2C_Slave_ISR_DMA+0x37c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008640:	b2db      	uxtb	r3, r3
 8008642:	2b29      	cmp	r3, #41	; 0x29
 8008644:	d12e      	bne.n	80086a4 <I2C_Slave_ISR_DMA+0x314>
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800864c:	d02a      	beq.n	80086a4 <I2C_Slave_ISR_DMA+0x314>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2210      	movs	r2, #16
 8008654:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f000 fe51 	bl	80092fe <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f000 f9e0 	bl	8008a22 <I2C_ITSlaveSeqCplt>
 8008662:	e053      	b.n	800870c <I2C_Slave_ISR_DMA+0x37c>
 8008664:	40020010 	.word	0x40020010
 8008668:	40020028 	.word	0x40020028
 800866c:	40020040 	.word	0x40020040
 8008670:	40020058 	.word	0x40020058
 8008674:	40020070 	.word	0x40020070
 8008678:	40020088 	.word	0x40020088
 800867c:	400200a0 	.word	0x400200a0
 8008680:	400200b8 	.word	0x400200b8
 8008684:	40020410 	.word	0x40020410
 8008688:	40020428 	.word	0x40020428
 800868c:	40020440 	.word	0x40020440
 8008690:	40020458 	.word	0x40020458
 8008694:	40020470 	.word	0x40020470
 8008698:	40020488 	.word	0x40020488
 800869c:	400204a0 	.word	0x400204a0
 80086a0:	400204b8 	.word	0x400204b8
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2210      	movs	r2, #16
 80086aa:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80086ac:	e034      	b.n	8008718 <I2C_Slave_ISR_DMA+0x388>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2210      	movs	r2, #16
 80086b4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ba:	f043 0204 	orr.w	r2, r3, #4
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086c8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d003      	beq.n	80086d8 <I2C_Slave_ISR_DMA+0x348>
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80086d6:	d11f      	bne.n	8008718 <I2C_Slave_ISR_DMA+0x388>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80086d8:	7dfb      	ldrb	r3, [r7, #23]
 80086da:	2b21      	cmp	r3, #33	; 0x21
 80086dc:	d002      	beq.n	80086e4 <I2C_Slave_ISR_DMA+0x354>
 80086de:	7dfb      	ldrb	r3, [r7, #23]
 80086e0:	2b29      	cmp	r3, #41	; 0x29
 80086e2:	d103      	bne.n	80086ec <I2C_Slave_ISR_DMA+0x35c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2221      	movs	r2, #33	; 0x21
 80086e8:	631a      	str	r2, [r3, #48]	; 0x30
 80086ea:	e008      	b.n	80086fe <I2C_Slave_ISR_DMA+0x36e>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80086ec:	7dfb      	ldrb	r3, [r7, #23]
 80086ee:	2b22      	cmp	r3, #34	; 0x22
 80086f0:	d002      	beq.n	80086f8 <I2C_Slave_ISR_DMA+0x368>
 80086f2:	7dfb      	ldrb	r3, [r7, #23]
 80086f4:	2b2a      	cmp	r3, #42	; 0x2a
 80086f6:	d102      	bne.n	80086fe <I2C_Slave_ISR_DMA+0x36e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2222      	movs	r2, #34	; 0x22
 80086fc:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008702:	4619      	mov	r1, r3
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	f000 fd03 	bl	8009110 <I2C_ITError>
      if (treatdmanack == 1U)
 800870a:	e005      	b.n	8008718 <I2C_Slave_ISR_DMA+0x388>
 800870c:	e004      	b.n	8008718 <I2C_Slave_ISR_DMA+0x388>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2210      	movs	r2, #16
 8008714:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008716:	e011      	b.n	800873c <I2C_Slave_ISR_DMA+0x3ac>
      if (treatdmanack == 1U)
 8008718:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800871a:	e00f      	b.n	800873c <I2C_Slave_ISR_DMA+0x3ac>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	08db      	lsrs	r3, r3, #3
 8008720:	f003 0301 	and.w	r3, r3, #1
 8008724:	2b00      	cmp	r3, #0
 8008726:	d009      	beq.n	800873c <I2C_Slave_ISR_DMA+0x3ac>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	08db      	lsrs	r3, r3, #3
 800872c:	f003 0301 	and.w	r3, r3, #1
 8008730:	2b00      	cmp	r3, #0
 8008732:	d003      	beq.n	800873c <I2C_Slave_ISR_DMA+0x3ac>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008734:	68b9      	ldr	r1, [r7, #8]
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f000 f8b2 	bl	80088a0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3720      	adds	r7, #32
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop

08008750 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b086      	sub	sp, #24
 8008754:	af02      	add	r7, sp, #8
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	4608      	mov	r0, r1
 800875a:	4611      	mov	r1, r2
 800875c:	461a      	mov	r2, r3
 800875e:	4603      	mov	r3, r0
 8008760:	817b      	strh	r3, [r7, #10]
 8008762:	460b      	mov	r3, r1
 8008764:	813b      	strh	r3, [r7, #8]
 8008766:	4613      	mov	r3, r2
 8008768:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800876a:	88fb      	ldrh	r3, [r7, #6]
 800876c:	b2da      	uxtb	r2, r3
 800876e:	8979      	ldrh	r1, [r7, #10]
 8008770:	4b20      	ldr	r3, [pc, #128]	; (80087f4 <I2C_RequestMemoryWrite+0xa4>)
 8008772:	9300      	str	r3, [sp, #0]
 8008774:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f001 f8a7 	bl	80098cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800877e:	69fa      	ldr	r2, [r7, #28]
 8008780:	69b9      	ldr	r1, [r7, #24]
 8008782:	68f8      	ldr	r0, [r7, #12]
 8008784:	f000 ffc0 	bl	8009708 <I2C_WaitOnTXISFlagUntilTimeout>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d001      	beq.n	8008792 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e02c      	b.n	80087ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008792:	88fb      	ldrh	r3, [r7, #6]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d105      	bne.n	80087a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008798:	893b      	ldrh	r3, [r7, #8]
 800879a:	b2da      	uxtb	r2, r3
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	629a      	str	r2, [r3, #40]	; 0x28
 80087a2:	e015      	b.n	80087d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80087a4:	893b      	ldrh	r3, [r7, #8]
 80087a6:	0a1b      	lsrs	r3, r3, #8
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	b2da      	uxtb	r2, r3
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087b2:	69fa      	ldr	r2, [r7, #28]
 80087b4:	69b9      	ldr	r1, [r7, #24]
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f000 ffa6 	bl	8009708 <I2C_WaitOnTXISFlagUntilTimeout>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d001      	beq.n	80087c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	e012      	b.n	80087ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80087c6:	893b      	ldrh	r3, [r7, #8]
 80087c8:	b2da      	uxtb	r2, r3
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	2200      	movs	r2, #0
 80087d8:	2180      	movs	r1, #128	; 0x80
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f000 ff54 	bl	8009688 <I2C_WaitOnFlagUntilTimeout>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d001      	beq.n	80087ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	e000      	b.n	80087ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3710      	adds	r7, #16
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	80002000 	.word	0x80002000

080087f8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b086      	sub	sp, #24
 80087fc:	af02      	add	r7, sp, #8
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	4608      	mov	r0, r1
 8008802:	4611      	mov	r1, r2
 8008804:	461a      	mov	r2, r3
 8008806:	4603      	mov	r3, r0
 8008808:	817b      	strh	r3, [r7, #10]
 800880a:	460b      	mov	r3, r1
 800880c:	813b      	strh	r3, [r7, #8]
 800880e:	4613      	mov	r3, r2
 8008810:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008812:	88fb      	ldrh	r3, [r7, #6]
 8008814:	b2da      	uxtb	r2, r3
 8008816:	8979      	ldrh	r1, [r7, #10]
 8008818:	4b20      	ldr	r3, [pc, #128]	; (800889c <I2C_RequestMemoryRead+0xa4>)
 800881a:	9300      	str	r3, [sp, #0]
 800881c:	2300      	movs	r3, #0
 800881e:	68f8      	ldr	r0, [r7, #12]
 8008820:	f001 f854 	bl	80098cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008824:	69fa      	ldr	r2, [r7, #28]
 8008826:	69b9      	ldr	r1, [r7, #24]
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f000 ff6d 	bl	8009708 <I2C_WaitOnTXISFlagUntilTimeout>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d001      	beq.n	8008838 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	e02c      	b.n	8008892 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008838:	88fb      	ldrh	r3, [r7, #6]
 800883a:	2b01      	cmp	r3, #1
 800883c:	d105      	bne.n	800884a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800883e:	893b      	ldrh	r3, [r7, #8]
 8008840:	b2da      	uxtb	r2, r3
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	629a      	str	r2, [r3, #40]	; 0x28
 8008848:	e015      	b.n	8008876 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800884a:	893b      	ldrh	r3, [r7, #8]
 800884c:	0a1b      	lsrs	r3, r3, #8
 800884e:	b29b      	uxth	r3, r3
 8008850:	b2da      	uxtb	r2, r3
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008858:	69fa      	ldr	r2, [r7, #28]
 800885a:	69b9      	ldr	r1, [r7, #24]
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f000 ff53 	bl	8009708 <I2C_WaitOnTXISFlagUntilTimeout>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d001      	beq.n	800886c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	e012      	b.n	8008892 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800886c:	893b      	ldrh	r3, [r7, #8]
 800886e:	b2da      	uxtb	r2, r3
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	2200      	movs	r2, #0
 800887e:	2140      	movs	r1, #64	; 0x40
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f000 ff01 	bl	8009688 <I2C_WaitOnFlagUntilTimeout>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d001      	beq.n	8008890 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	e000      	b.n	8008892 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	80002000 	.word	0x80002000

080088a0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80088b6:	2b28      	cmp	r3, #40	; 0x28
 80088b8:	d16a      	bne.n	8008990 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	699b      	ldr	r3, [r3, #24]
 80088c0:	0c1b      	lsrs	r3, r3, #16
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	f003 0301 	and.w	r3, r3, #1
 80088c8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	0c1b      	lsrs	r3, r3, #16
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80088d8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088e6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80088f4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d138      	bne.n	8008970 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80088fe:	897b      	ldrh	r3, [r7, #10]
 8008900:	09db      	lsrs	r3, r3, #7
 8008902:	b29a      	uxth	r2, r3
 8008904:	89bb      	ldrh	r3, [r7, #12]
 8008906:	4053      	eors	r3, r2
 8008908:	b29b      	uxth	r3, r3
 800890a:	f003 0306 	and.w	r3, r3, #6
 800890e:	2b00      	cmp	r3, #0
 8008910:	d11c      	bne.n	800894c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008912:	897b      	ldrh	r3, [r7, #10]
 8008914:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800891a:	1c5a      	adds	r2, r3, #1
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008924:	2b02      	cmp	r3, #2
 8008926:	d13b      	bne.n	80089a0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2208      	movs	r2, #8
 8008934:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800893e:	89ba      	ldrh	r2, [r7, #12]
 8008940:	7bfb      	ldrb	r3, [r7, #15]
 8008942:	4619      	mov	r1, r3
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f7ff faed 	bl	8007f24 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800894a:	e029      	b.n	80089a0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800894c:	893b      	ldrh	r3, [r7, #8]
 800894e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008950:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f001 f84b 	bl	80099f0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008962:	89ba      	ldrh	r2, [r7, #12]
 8008964:	7bfb      	ldrb	r3, [r7, #15]
 8008966:	4619      	mov	r1, r3
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f7ff fadb 	bl	8007f24 <HAL_I2C_AddrCallback>
}
 800896e:	e017      	b.n	80089a0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008970:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f001 f83b 	bl	80099f0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008982:	89ba      	ldrh	r2, [r7, #12]
 8008984:	7bfb      	ldrb	r3, [r7, #15]
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f7ff facb 	bl	8007f24 <HAL_I2C_AddrCallback>
}
 800898e:	e007      	b.n	80089a0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2208      	movs	r2, #8
 8008996:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80089a0:	bf00      	nop
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	2b21      	cmp	r3, #33	; 0x21
 80089c2:	d115      	bne.n	80089f0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2220      	movs	r2, #32
 80089c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2211      	movs	r2, #17
 80089d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80089d8:	2101      	movs	r1, #1
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f001 f808 	bl	80099f0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f7ff fa73 	bl	8007ed4 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80089ee:	e014      	b.n	8008a1a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2220      	movs	r2, #32
 80089f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2212      	movs	r2, #18
 80089fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008a04:	2102      	movs	r1, #2
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 fff2 	bl	80099f0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f7ff fa67 	bl	8007ee8 <HAL_I2C_MasterRxCpltCallback>
}
 8008a1a:	bf00      	nop
 8008a1c:	3708      	adds	r7, #8
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b084      	sub	sp, #16
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	0b9b      	lsrs	r3, r3, #14
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d008      	beq.n	8008a58 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008a54:	601a      	str	r2, [r3, #0]
 8008a56:	e00d      	b.n	8008a74 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	0bdb      	lsrs	r3, r3, #15
 8008a5c:	f003 0301 	and.w	r3, r3, #1
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d007      	beq.n	8008a74 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008a72:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	2b29      	cmp	r3, #41	; 0x29
 8008a7e:	d112      	bne.n	8008aa6 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2228      	movs	r2, #40	; 0x28
 8008a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2221      	movs	r2, #33	; 0x21
 8008a8c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008a8e:	2101      	movs	r1, #1
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 ffad 	bl	80099f0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f7ff fa2c 	bl	8007efc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008aa4:	e017      	b.n	8008ad6 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	2b2a      	cmp	r3, #42	; 0x2a
 8008ab0:	d111      	bne.n	8008ad6 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2228      	movs	r2, #40	; 0x28
 8008ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2222      	movs	r2, #34	; 0x22
 8008abe:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008ac0:	2102      	movs	r1, #2
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 ff94 	bl	80099f0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f7ff fa1d 	bl	8007f10 <HAL_I2C_SlaveRxCpltCallback>
}
 8008ad6:	bf00      	nop
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
	...

08008ae0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2220      	movs	r2, #32
 8008af4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	2b21      	cmp	r3, #33	; 0x21
 8008b00:	d107      	bne.n	8008b12 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008b02:	2101      	movs	r1, #1
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 ff73 	bl	80099f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2211      	movs	r2, #17
 8008b0e:	631a      	str	r2, [r3, #48]	; 0x30
 8008b10:	e00c      	b.n	8008b2c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	2b22      	cmp	r3, #34	; 0x22
 8008b1c:	d106      	bne.n	8008b2c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008b1e:	2102      	movs	r1, #2
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 ff65 	bl	80099f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2212      	movs	r2, #18
 8008b2a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	6859      	ldr	r1, [r3, #4]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	4b4d      	ldr	r3, [pc, #308]	; (8008c6c <I2C_ITMasterCplt+0x18c>)
 8008b38:	400b      	ands	r3, r1
 8008b3a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a4a      	ldr	r2, [pc, #296]	; (8008c70 <I2C_ITMasterCplt+0x190>)
 8008b46:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	091b      	lsrs	r3, r3, #4
 8008b4c:	f003 0301 	and.w	r3, r3, #1
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d009      	beq.n	8008b68 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2210      	movs	r2, #16
 8008b5a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b60:	f043 0204 	orr.w	r2, r3, #4
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	2b60      	cmp	r3, #96	; 0x60
 8008b72:	d10b      	bne.n	8008b8c <I2C_ITMasterCplt+0xac>
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	089b      	lsrs	r3, r3, #2
 8008b78:	f003 0301 	and.w	r3, r3, #1
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d005      	beq.n	8008b8c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 fbb6 	bl	80092fe <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b96:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	2b60      	cmp	r3, #96	; 0x60
 8008ba2:	d002      	beq.n	8008baa <I2C_ITMasterCplt+0xca>
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d006      	beq.n	8008bb8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bae:	4619      	mov	r1, r3
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 faad 	bl	8009110 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008bb6:	e054      	b.n	8008c62 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	2b21      	cmp	r3, #33	; 0x21
 8008bc2:	d124      	bne.n	8008c0e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2220      	movs	r2, #32
 8008bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b40      	cmp	r3, #64	; 0x40
 8008bdc:	d10b      	bne.n	8008bf6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f7ff f9b0 	bl	8007f54 <HAL_I2C_MemTxCpltCallback>
}
 8008bf4:	e035      	b.n	8008c62 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7ff f964 	bl	8007ed4 <HAL_I2C_MasterTxCpltCallback>
}
 8008c0c:	e029      	b.n	8008c62 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	2b22      	cmp	r3, #34	; 0x22
 8008c18:	d123      	bne.n	8008c62 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2220      	movs	r2, #32
 8008c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	2b40      	cmp	r3, #64	; 0x40
 8008c32:	d10b      	bne.n	8008c4c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f7ff f98f 	bl	8007f68 <HAL_I2C_MemRxCpltCallback>
}
 8008c4a:	e00a      	b.n	8008c62 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f7ff f943 	bl	8007ee8 <HAL_I2C_MasterRxCpltCallback>
}
 8008c62:	bf00      	nop
 8008c64:	3718      	adds	r7, #24
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	fe00e800 	.word	0xfe00e800
 8008c70:	ffff0000 	.word	0xffff0000

08008c74 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b086      	sub	sp, #24
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c90:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2220      	movs	r2, #32
 8008c98:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008c9a:	7bfb      	ldrb	r3, [r7, #15]
 8008c9c:	2b21      	cmp	r3, #33	; 0x21
 8008c9e:	d002      	beq.n	8008ca6 <I2C_ITSlaveCplt+0x32>
 8008ca0:	7bfb      	ldrb	r3, [r7, #15]
 8008ca2:	2b29      	cmp	r3, #41	; 0x29
 8008ca4:	d108      	bne.n	8008cb8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008ca6:	f248 0101 	movw	r1, #32769	; 0x8001
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 fea0 	bl	80099f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2221      	movs	r2, #33	; 0x21
 8008cb4:	631a      	str	r2, [r3, #48]	; 0x30
 8008cb6:	e00d      	b.n	8008cd4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
 8008cba:	2b22      	cmp	r3, #34	; 0x22
 8008cbc:	d002      	beq.n	8008cc4 <I2C_ITSlaveCplt+0x50>
 8008cbe:	7bfb      	ldrb	r3, [r7, #15]
 8008cc0:	2b2a      	cmp	r3, #42	; 0x2a
 8008cc2:	d107      	bne.n	8008cd4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008cc4:	f248 0102 	movw	r1, #32770	; 0x8002
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 fe91 	bl	80099f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2222      	movs	r2, #34	; 0x22
 8008cd2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	685a      	ldr	r2, [r3, #4]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ce2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	6859      	ldr	r1, [r3, #4]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	4b80      	ldr	r3, [pc, #512]	; (8008ef0 <I2C_ITSlaveCplt+0x27c>)
 8008cf0:	400b      	ands	r3, r1
 8008cf2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fb02 	bl	80092fe <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	0b9b      	lsrs	r3, r3, #14
 8008cfe:	f003 0301 	and.w	r3, r3, #1
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d07a      	beq.n	8008dfc <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008d14:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f000 8111 	beq.w	8008f42 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a73      	ldr	r2, [pc, #460]	; (8008ef4 <I2C_ITSlaveCplt+0x280>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d059      	beq.n	8008de0 <I2C_ITSlaveCplt+0x16c>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a71      	ldr	r2, [pc, #452]	; (8008ef8 <I2C_ITSlaveCplt+0x284>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d053      	beq.n	8008de0 <I2C_ITSlaveCplt+0x16c>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a6f      	ldr	r2, [pc, #444]	; (8008efc <I2C_ITSlaveCplt+0x288>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d04d      	beq.n	8008de0 <I2C_ITSlaveCplt+0x16c>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a6d      	ldr	r2, [pc, #436]	; (8008f00 <I2C_ITSlaveCplt+0x28c>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d047      	beq.n	8008de0 <I2C_ITSlaveCplt+0x16c>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a6b      	ldr	r2, [pc, #428]	; (8008f04 <I2C_ITSlaveCplt+0x290>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d041      	beq.n	8008de0 <I2C_ITSlaveCplt+0x16c>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a69      	ldr	r2, [pc, #420]	; (8008f08 <I2C_ITSlaveCplt+0x294>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d03b      	beq.n	8008de0 <I2C_ITSlaveCplt+0x16c>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a67      	ldr	r2, [pc, #412]	; (8008f0c <I2C_ITSlaveCplt+0x298>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d035      	beq.n	8008de0 <I2C_ITSlaveCplt+0x16c>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a65      	ldr	r2, [pc, #404]	; (8008f10 <I2C_ITSlaveCplt+0x29c>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d02f      	beq.n	8008de0 <I2C_ITSlaveCplt+0x16c>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a63      	ldr	r2, [pc, #396]	; (8008f14 <I2C_ITSlaveCplt+0x2a0>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d029      	beq.n	8008de0 <I2C_ITSlaveCplt+0x16c>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a61      	ldr	r2, [pc, #388]	; (8008f18 <I2C_ITSlaveCplt+0x2a4>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d023      	beq.n	8008de0 <I2C_ITSlaveCplt+0x16c>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a5f      	ldr	r2, [pc, #380]	; (8008f1c <I2C_ITSlaveCplt+0x2a8>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d01d      	beq.n	8008de0 <I2C_ITSlaveCplt+0x16c>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a5d      	ldr	r2, [pc, #372]	; (8008f20 <I2C_ITSlaveCplt+0x2ac>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d017      	beq.n	8008de0 <I2C_ITSlaveCplt+0x16c>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a5b      	ldr	r2, [pc, #364]	; (8008f24 <I2C_ITSlaveCplt+0x2b0>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d011      	beq.n	8008de0 <I2C_ITSlaveCplt+0x16c>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a59      	ldr	r2, [pc, #356]	; (8008f28 <I2C_ITSlaveCplt+0x2b4>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d00b      	beq.n	8008de0 <I2C_ITSlaveCplt+0x16c>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a57      	ldr	r2, [pc, #348]	; (8008f2c <I2C_ITSlaveCplt+0x2b8>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d005      	beq.n	8008de0 <I2C_ITSlaveCplt+0x16c>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a55      	ldr	r2, [pc, #340]	; (8008f30 <I2C_ITSlaveCplt+0x2bc>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d105      	bne.n	8008dec <I2C_ITSlaveCplt+0x178>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	e004      	b.n	8008df6 <I2C_ITSlaveCplt+0x182>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	8553      	strh	r3, [r2, #42]	; 0x2a
 8008dfa:	e0a2      	b.n	8008f42 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	0bdb      	lsrs	r3, r3, #15
 8008e00:	f003 0301 	and.w	r3, r3, #1
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f000 809c 	beq.w	8008f42 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008e18:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	f000 808f 	beq.w	8008f42 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a32      	ldr	r2, [pc, #200]	; (8008ef4 <I2C_ITSlaveCplt+0x280>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d059      	beq.n	8008ee4 <I2C_ITSlaveCplt+0x270>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a30      	ldr	r2, [pc, #192]	; (8008ef8 <I2C_ITSlaveCplt+0x284>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d053      	beq.n	8008ee4 <I2C_ITSlaveCplt+0x270>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a2e      	ldr	r2, [pc, #184]	; (8008efc <I2C_ITSlaveCplt+0x288>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d04d      	beq.n	8008ee4 <I2C_ITSlaveCplt+0x270>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a2c      	ldr	r2, [pc, #176]	; (8008f00 <I2C_ITSlaveCplt+0x28c>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d047      	beq.n	8008ee4 <I2C_ITSlaveCplt+0x270>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a2a      	ldr	r2, [pc, #168]	; (8008f04 <I2C_ITSlaveCplt+0x290>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d041      	beq.n	8008ee4 <I2C_ITSlaveCplt+0x270>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a28      	ldr	r2, [pc, #160]	; (8008f08 <I2C_ITSlaveCplt+0x294>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d03b      	beq.n	8008ee4 <I2C_ITSlaveCplt+0x270>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a26      	ldr	r2, [pc, #152]	; (8008f0c <I2C_ITSlaveCplt+0x298>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d035      	beq.n	8008ee4 <I2C_ITSlaveCplt+0x270>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a24      	ldr	r2, [pc, #144]	; (8008f10 <I2C_ITSlaveCplt+0x29c>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d02f      	beq.n	8008ee4 <I2C_ITSlaveCplt+0x270>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a22      	ldr	r2, [pc, #136]	; (8008f14 <I2C_ITSlaveCplt+0x2a0>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d029      	beq.n	8008ee4 <I2C_ITSlaveCplt+0x270>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a20      	ldr	r2, [pc, #128]	; (8008f18 <I2C_ITSlaveCplt+0x2a4>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d023      	beq.n	8008ee4 <I2C_ITSlaveCplt+0x270>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a1e      	ldr	r2, [pc, #120]	; (8008f1c <I2C_ITSlaveCplt+0x2a8>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d01d      	beq.n	8008ee4 <I2C_ITSlaveCplt+0x270>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a1c      	ldr	r2, [pc, #112]	; (8008f20 <I2C_ITSlaveCplt+0x2ac>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d017      	beq.n	8008ee4 <I2C_ITSlaveCplt+0x270>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a1a      	ldr	r2, [pc, #104]	; (8008f24 <I2C_ITSlaveCplt+0x2b0>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d011      	beq.n	8008ee4 <I2C_ITSlaveCplt+0x270>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a18      	ldr	r2, [pc, #96]	; (8008f28 <I2C_ITSlaveCplt+0x2b4>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d00b      	beq.n	8008ee4 <I2C_ITSlaveCplt+0x270>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a16      	ldr	r2, [pc, #88]	; (8008f2c <I2C_ITSlaveCplt+0x2b8>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d005      	beq.n	8008ee4 <I2C_ITSlaveCplt+0x270>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a14      	ldr	r2, [pc, #80]	; (8008f30 <I2C_ITSlaveCplt+0x2bc>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d127      	bne.n	8008f34 <I2C_ITSlaveCplt+0x2c0>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	e026      	b.n	8008f3e <I2C_ITSlaveCplt+0x2ca>
 8008ef0:	fe00e800 	.word	0xfe00e800
 8008ef4:	40020010 	.word	0x40020010
 8008ef8:	40020028 	.word	0x40020028
 8008efc:	40020040 	.word	0x40020040
 8008f00:	40020058 	.word	0x40020058
 8008f04:	40020070 	.word	0x40020070
 8008f08:	40020088 	.word	0x40020088
 8008f0c:	400200a0 	.word	0x400200a0
 8008f10:	400200b8 	.word	0x400200b8
 8008f14:	40020410 	.word	0x40020410
 8008f18:	40020428 	.word	0x40020428
 8008f1c:	40020440 	.word	0x40020440
 8008f20:	40020458 	.word	0x40020458
 8008f24:	40020470 	.word	0x40020470
 8008f28:	40020488 	.word	0x40020488
 8008f2c:	400204a0 	.word	0x400204a0
 8008f30:	400204b8 	.word	0x400204b8
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	089b      	lsrs	r3, r3, #2
 8008f46:	f003 0301 	and.w	r3, r3, #1
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d020      	beq.n	8008f90 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	f023 0304 	bic.w	r3, r3, #4
 8008f54:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f60:	b2d2      	uxtb	r2, r2
 8008f62:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f68:	1c5a      	adds	r2, r3, #1
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00c      	beq.n	8008f90 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	b29a      	uxth	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	3b01      	subs	r3, #1
 8008f8a:	b29a      	uxth	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d005      	beq.n	8008fa6 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f9e:	f043 0204 	orr.w	r2, r3, #4
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d010      	beq.n	8008fde <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 f8a4 	bl	8009110 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	2b28      	cmp	r3, #40	; 0x28
 8008fd2:	d141      	bne.n	8009058 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008fd4:	6979      	ldr	r1, [r7, #20]
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 f844 	bl	8009064 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008fdc:	e03c      	b.n	8009058 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008fe6:	d014      	beq.n	8009012 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f7ff fd1a 	bl	8008a22 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4a1b      	ldr	r2, [pc, #108]	; (8009060 <I2C_ITSlaveCplt+0x3ec>)
 8008ff2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2220      	movs	r2, #32
 8008ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f7fe ff98 	bl	8007f40 <HAL_I2C_ListenCpltCallback>
}
 8009010:	e022      	b.n	8009058 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009018:	b2db      	uxtb	r3, r3
 800901a:	2b22      	cmp	r3, #34	; 0x22
 800901c:	d10e      	bne.n	800903c <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2220      	movs	r2, #32
 8009022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f7fe ff6b 	bl	8007f10 <HAL_I2C_SlaveRxCpltCallback>
}
 800903a:	e00d      	b.n	8009058 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2220      	movs	r2, #32
 8009040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f7fe ff52 	bl	8007efc <HAL_I2C_SlaveTxCpltCallback>
}
 8009058:	bf00      	nop
 800905a:	3718      	adds	r7, #24
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}
 8009060:	ffff0000 	.word	0xffff0000

08009064 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4a26      	ldr	r2, [pc, #152]	; (800910c <I2C_ITListenCplt+0xa8>)
 8009072:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2220      	movs	r2, #32
 800907e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	089b      	lsrs	r3, r3, #2
 8009094:	f003 0301 	and.w	r3, r3, #1
 8009098:	2b00      	cmp	r3, #0
 800909a:	d022      	beq.n	80090e2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a6:	b2d2      	uxtb	r2, r2
 80090a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ae:	1c5a      	adds	r2, r3, #1
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d012      	beq.n	80090e2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090c0:	3b01      	subs	r3, #1
 80090c2:	b29a      	uxth	r2, r3
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	3b01      	subs	r3, #1
 80090d0:	b29a      	uxth	r2, r3
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090da:	f043 0204 	orr.w	r2, r3, #4
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80090e2:	f248 0103 	movw	r1, #32771	; 0x8003
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 fc82 	bl	80099f0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2210      	movs	r2, #16
 80090f2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f7fe ff1f 	bl	8007f40 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009102:	bf00      	nop
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	ffff0000 	.word	0xffff0000

08009110 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009120:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4a5d      	ldr	r2, [pc, #372]	; (80092a4 <I2C_ITError+0x194>)
 800912e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	431a      	orrs	r2, r3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009142:	7bfb      	ldrb	r3, [r7, #15]
 8009144:	2b28      	cmp	r3, #40	; 0x28
 8009146:	d005      	beq.n	8009154 <I2C_ITError+0x44>
 8009148:	7bfb      	ldrb	r3, [r7, #15]
 800914a:	2b29      	cmp	r3, #41	; 0x29
 800914c:	d002      	beq.n	8009154 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800914e:	7bfb      	ldrb	r3, [r7, #15]
 8009150:	2b2a      	cmp	r3, #42	; 0x2a
 8009152:	d10b      	bne.n	800916c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009154:	2103      	movs	r1, #3
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 fc4a 	bl	80099f0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2228      	movs	r2, #40	; 0x28
 8009160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a50      	ldr	r2, [pc, #320]	; (80092a8 <I2C_ITError+0x198>)
 8009168:	635a      	str	r2, [r3, #52]	; 0x34
 800916a:	e011      	b.n	8009190 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800916c:	f248 0103 	movw	r1, #32771	; 0x8003
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fc3d 	bl	80099f0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800917c:	b2db      	uxtb	r3, r3
 800917e:	2b60      	cmp	r3, #96	; 0x60
 8009180:	d003      	beq.n	800918a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2220      	movs	r2, #32
 8009186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009194:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800919a:	2b00      	cmp	r3, #0
 800919c:	d039      	beq.n	8009212 <I2C_ITError+0x102>
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	2b11      	cmp	r3, #17
 80091a2:	d002      	beq.n	80091aa <I2C_ITError+0x9a>
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	2b21      	cmp	r3, #33	; 0x21
 80091a8:	d133      	bne.n	8009212 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091b8:	d107      	bne.n	80091ca <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80091c8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7fd fcca 	bl	8006b68 <HAL_DMA_GetState>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d017      	beq.n	800920a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091de:	4a33      	ldr	r2, [pc, #204]	; (80092ac <I2C_ITError+0x19c>)
 80091e0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7fc fb4c 	bl	800588c <HAL_DMA_Abort_IT>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d04d      	beq.n	8009296 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009204:	4610      	mov	r0, r2
 8009206:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009208:	e045      	b.n	8009296 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f850 	bl	80092b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009210:	e041      	b.n	8009296 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009216:	2b00      	cmp	r3, #0
 8009218:	d039      	beq.n	800928e <I2C_ITError+0x17e>
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	2b12      	cmp	r3, #18
 800921e:	d002      	beq.n	8009226 <I2C_ITError+0x116>
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	2b22      	cmp	r3, #34	; 0x22
 8009224:	d133      	bne.n	800928e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009234:	d107      	bne.n	8009246 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009244:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800924a:	4618      	mov	r0, r3
 800924c:	f7fd fc8c 	bl	8006b68 <HAL_DMA_GetState>
 8009250:	4603      	mov	r3, r0
 8009252:	2b01      	cmp	r3, #1
 8009254:	d017      	beq.n	8009286 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800925a:	4a14      	ldr	r2, [pc, #80]	; (80092ac <I2C_ITError+0x19c>)
 800925c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800926a:	4618      	mov	r0, r3
 800926c:	f7fc fb0e 	bl	800588c <HAL_DMA_Abort_IT>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d011      	beq.n	800929a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800927a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009280:	4610      	mov	r0, r2
 8009282:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009284:	e009      	b.n	800929a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 f812 	bl	80092b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800928c:	e005      	b.n	800929a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 f80e 	bl	80092b0 <I2C_TreatErrorCallback>
  }
}
 8009294:	e002      	b.n	800929c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009296:	bf00      	nop
 8009298:	e000      	b.n	800929c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800929a:	bf00      	nop
}
 800929c:	bf00      	nop
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	ffff0000 	.word	0xffff0000
 80092a8:	08007fa5 	.word	0x08007fa5
 80092ac:	0800964d 	.word	0x0800964d

080092b0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	2b60      	cmp	r3, #96	; 0x60
 80092c2:	d10e      	bne.n	80092e2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2220      	movs	r2, #32
 80092c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f7fe fe58 	bl	8007f90 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80092e0:	e009      	b.n	80092f6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f7fe fe43 	bl	8007f7c <HAL_I2C_ErrorCallback>
}
 80092f6:	bf00      	nop
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80092fe:	b480      	push	{r7}
 8009300:	b083      	sub	sp, #12
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	699b      	ldr	r3, [r3, #24]
 800930c:	f003 0302 	and.w	r3, r3, #2
 8009310:	2b02      	cmp	r3, #2
 8009312:	d103      	bne.n	800931c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2200      	movs	r2, #0
 800931a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	699b      	ldr	r3, [r3, #24]
 8009322:	f003 0301 	and.w	r3, r3, #1
 8009326:	2b01      	cmp	r3, #1
 8009328:	d007      	beq.n	800933a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	699a      	ldr	r2, [r3, #24]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f042 0201 	orr.w	r2, r2, #1
 8009338:	619a      	str	r2, [r3, #24]
  }
}
 800933a:	bf00      	nop
 800933c:	370c      	adds	r7, #12
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr

08009346 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b084      	sub	sp, #16
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009352:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009362:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009368:	b29b      	uxth	r3, r3
 800936a:	2b00      	cmp	r3, #0
 800936c:	d104      	bne.n	8009378 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800936e:	2120      	movs	r1, #32
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f000 fad9 	bl	8009928 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8009376:	e02d      	b.n	80093d4 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009380:	441a      	add	r2, r3
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800938a:	b29b      	uxth	r3, r3
 800938c:	2bff      	cmp	r3, #255	; 0xff
 800938e:	d903      	bls.n	8009398 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	22ff      	movs	r2, #255	; 0xff
 8009394:	851a      	strh	r2, [r3, #40]	; 0x28
 8009396:	e004      	b.n	80093a2 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800939c:	b29a      	uxth	r2, r3
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	3324      	adds	r3, #36	; 0x24
 80093ac:	4619      	mov	r1, r3
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b2:	461a      	mov	r2, r3
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093b8:	f7fb fce0 	bl	8004d7c <HAL_DMA_Start_IT>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d004      	beq.n	80093cc <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80093c2:	2110      	movs	r1, #16
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f7ff fea3 	bl	8009110 <I2C_ITError>
}
 80093ca:	e003      	b.n	80093d4 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80093cc:	2140      	movs	r1, #64	; 0x40
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	f000 faaa 	bl	8009928 <I2C_Enable_IRQ>
}
 80093d4:	bf00      	nop
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 80093e4:	2300      	movs	r3, #0
 80093e6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ec:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d076      	beq.n	80094e4 <I2C_DMAError+0x108>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a83      	ldr	r2, [pc, #524]	; (800960c <I2C_DMAError+0x230>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d059      	beq.n	80094b6 <I2C_DMAError+0xda>
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a81      	ldr	r2, [pc, #516]	; (8009610 <I2C_DMAError+0x234>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d053      	beq.n	80094b6 <I2C_DMAError+0xda>
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a7f      	ldr	r2, [pc, #508]	; (8009614 <I2C_DMAError+0x238>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d04d      	beq.n	80094b6 <I2C_DMAError+0xda>
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a7d      	ldr	r2, [pc, #500]	; (8009618 <I2C_DMAError+0x23c>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d047      	beq.n	80094b6 <I2C_DMAError+0xda>
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a7b      	ldr	r2, [pc, #492]	; (800961c <I2C_DMAError+0x240>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d041      	beq.n	80094b6 <I2C_DMAError+0xda>
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a79      	ldr	r2, [pc, #484]	; (8009620 <I2C_DMAError+0x244>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d03b      	beq.n	80094b6 <I2C_DMAError+0xda>
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a77      	ldr	r2, [pc, #476]	; (8009624 <I2C_DMAError+0x248>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d035      	beq.n	80094b6 <I2C_DMAError+0xda>
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a75      	ldr	r2, [pc, #468]	; (8009628 <I2C_DMAError+0x24c>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d02f      	beq.n	80094b6 <I2C_DMAError+0xda>
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a73      	ldr	r2, [pc, #460]	; (800962c <I2C_DMAError+0x250>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d029      	beq.n	80094b6 <I2C_DMAError+0xda>
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a71      	ldr	r2, [pc, #452]	; (8009630 <I2C_DMAError+0x254>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d023      	beq.n	80094b6 <I2C_DMAError+0xda>
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a6f      	ldr	r2, [pc, #444]	; (8009634 <I2C_DMAError+0x258>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d01d      	beq.n	80094b6 <I2C_DMAError+0xda>
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a6d      	ldr	r2, [pc, #436]	; (8009638 <I2C_DMAError+0x25c>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d017      	beq.n	80094b6 <I2C_DMAError+0xda>
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a6b      	ldr	r2, [pc, #428]	; (800963c <I2C_DMAError+0x260>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d011      	beq.n	80094b6 <I2C_DMAError+0xda>
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a69      	ldr	r2, [pc, #420]	; (8009640 <I2C_DMAError+0x264>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d00b      	beq.n	80094b6 <I2C_DMAError+0xda>
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a67      	ldr	r2, [pc, #412]	; (8009644 <I2C_DMAError+0x268>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d005      	beq.n	80094b6 <I2C_DMAError+0xda>
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a65      	ldr	r2, [pc, #404]	; (8009648 <I2C_DMAError+0x26c>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d109      	bne.n	80094ca <I2C_DMAError+0xee>
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	bf0c      	ite	eq
 80094c2:	2301      	moveq	r3, #1
 80094c4:	2300      	movne	r3, #0
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	e008      	b.n	80094dc <I2C_DMAError+0x100>
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	bf0c      	ite	eq
 80094d6:	2301      	moveq	r3, #1
 80094d8:	2300      	movne	r3, #0
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d001      	beq.n	80094e4 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 80094e0:	2301      	movs	r3, #1
 80094e2:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d076      	beq.n	80095da <I2C_DMAError+0x1fe>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a46      	ldr	r2, [pc, #280]	; (800960c <I2C_DMAError+0x230>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d059      	beq.n	80095ac <I2C_DMAError+0x1d0>
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a44      	ldr	r2, [pc, #272]	; (8009610 <I2C_DMAError+0x234>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d053      	beq.n	80095ac <I2C_DMAError+0x1d0>
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a42      	ldr	r2, [pc, #264]	; (8009614 <I2C_DMAError+0x238>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d04d      	beq.n	80095ac <I2C_DMAError+0x1d0>
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a40      	ldr	r2, [pc, #256]	; (8009618 <I2C_DMAError+0x23c>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d047      	beq.n	80095ac <I2C_DMAError+0x1d0>
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a3e      	ldr	r2, [pc, #248]	; (800961c <I2C_DMAError+0x240>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d041      	beq.n	80095ac <I2C_DMAError+0x1d0>
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a3c      	ldr	r2, [pc, #240]	; (8009620 <I2C_DMAError+0x244>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d03b      	beq.n	80095ac <I2C_DMAError+0x1d0>
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a3a      	ldr	r2, [pc, #232]	; (8009624 <I2C_DMAError+0x248>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d035      	beq.n	80095ac <I2C_DMAError+0x1d0>
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a38      	ldr	r2, [pc, #224]	; (8009628 <I2C_DMAError+0x24c>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d02f      	beq.n	80095ac <I2C_DMAError+0x1d0>
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a36      	ldr	r2, [pc, #216]	; (800962c <I2C_DMAError+0x250>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d029      	beq.n	80095ac <I2C_DMAError+0x1d0>
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a34      	ldr	r2, [pc, #208]	; (8009630 <I2C_DMAError+0x254>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d023      	beq.n	80095ac <I2C_DMAError+0x1d0>
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a32      	ldr	r2, [pc, #200]	; (8009634 <I2C_DMAError+0x258>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d01d      	beq.n	80095ac <I2C_DMAError+0x1d0>
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a30      	ldr	r2, [pc, #192]	; (8009638 <I2C_DMAError+0x25c>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d017      	beq.n	80095ac <I2C_DMAError+0x1d0>
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a2e      	ldr	r2, [pc, #184]	; (800963c <I2C_DMAError+0x260>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d011      	beq.n	80095ac <I2C_DMAError+0x1d0>
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a2c      	ldr	r2, [pc, #176]	; (8009640 <I2C_DMAError+0x264>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d00b      	beq.n	80095ac <I2C_DMAError+0x1d0>
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a2a      	ldr	r2, [pc, #168]	; (8009644 <I2C_DMAError+0x268>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d005      	beq.n	80095ac <I2C_DMAError+0x1d0>
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a28      	ldr	r2, [pc, #160]	; (8009648 <I2C_DMAError+0x26c>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d109      	bne.n	80095c0 <I2C_DMAError+0x1e4>
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	bf0c      	ite	eq
 80095b8:	2301      	moveq	r3, #1
 80095ba:	2300      	movne	r3, #0
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	e008      	b.n	80095d2 <I2C_DMAError+0x1f6>
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	bf0c      	ite	eq
 80095cc:	2301      	moveq	r3, #1
 80095ce:	2300      	movne	r3, #0
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d001      	beq.n	80095da <I2C_DMAError+0x1fe>
    {
      treatdmaerror = 1U;
 80095d6:	2301      	movs	r3, #1
 80095d8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7fd fad2 	bl	8006b84 <HAL_DMA_GetError>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	d00e      	beq.n	8009604 <I2C_DMAError+0x228>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00b      	beq.n	8009604 <I2C_DMAError+0x228>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	685a      	ldr	r2, [r3, #4]
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80095fa:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80095fc:	2110      	movs	r1, #16
 80095fe:	68b8      	ldr	r0, [r7, #8]
 8009600:	f7ff fd86 	bl	8009110 <I2C_ITError>
  }
}
 8009604:	bf00      	nop
 8009606:	3710      	adds	r7, #16
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	40020010 	.word	0x40020010
 8009610:	40020028 	.word	0x40020028
 8009614:	40020040 	.word	0x40020040
 8009618:	40020058 	.word	0x40020058
 800961c:	40020070 	.word	0x40020070
 8009620:	40020088 	.word	0x40020088
 8009624:	400200a0 	.word	0x400200a0
 8009628:	400200b8 	.word	0x400200b8
 800962c:	40020410 	.word	0x40020410
 8009630:	40020428 	.word	0x40020428
 8009634:	40020440 	.word	0x40020440
 8009638:	40020458 	.word	0x40020458
 800963c:	40020470 	.word	0x40020470
 8009640:	40020488 	.word	0x40020488
 8009644:	400204a0 	.word	0x400204a0
 8009648:	400204b8 	.word	0x400204b8

0800964c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009658:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800965e:	2b00      	cmp	r3, #0
 8009660:	d003      	beq.n	800966a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009666:	2200      	movs	r2, #0
 8009668:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800966e:	2b00      	cmp	r3, #0
 8009670:	d003      	beq.n	800967a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009676:	2200      	movs	r2, #0
 8009678:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	f7ff fe18 	bl	80092b0 <I2C_TreatErrorCallback>
}
 8009680:	bf00      	nop
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	603b      	str	r3, [r7, #0]
 8009694:	4613      	mov	r3, r2
 8009696:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009698:	e022      	b.n	80096e0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a0:	d01e      	beq.n	80096e0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096a2:	f7fa fec3 	bl	800442c <HAL_GetTick>
 80096a6:	4602      	mov	r2, r0
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	1ad3      	subs	r3, r2, r3
 80096ac:	683a      	ldr	r2, [r7, #0]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d302      	bcc.n	80096b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d113      	bne.n	80096e0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096bc:	f043 0220 	orr.w	r2, r3, #32
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2220      	movs	r2, #32
 80096c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2200      	movs	r2, #0
 80096d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e00f      	b.n	8009700 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	699a      	ldr	r2, [r3, #24]
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	4013      	ands	r3, r2
 80096ea:	68ba      	ldr	r2, [r7, #8]
 80096ec:	429a      	cmp	r2, r3
 80096ee:	bf0c      	ite	eq
 80096f0:	2301      	moveq	r3, #1
 80096f2:	2300      	movne	r3, #0
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	461a      	mov	r2, r3
 80096f8:	79fb      	ldrb	r3, [r7, #7]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d0cd      	beq.n	800969a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80096fe:	2300      	movs	r3, #0
}
 8009700:	4618      	mov	r0, r3
 8009702:	3710      	adds	r7, #16
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009714:	e02c      	b.n	8009770 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	68b9      	ldr	r1, [r7, #8]
 800971a:	68f8      	ldr	r0, [r7, #12]
 800971c:	f000 f870 	bl	8009800 <I2C_IsAcknowledgeFailed>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d001      	beq.n	800972a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e02a      	b.n	8009780 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009730:	d01e      	beq.n	8009770 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009732:	f7fa fe7b 	bl	800442c <HAL_GetTick>
 8009736:	4602      	mov	r2, r0
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	1ad3      	subs	r3, r2, r3
 800973c:	68ba      	ldr	r2, [r7, #8]
 800973e:	429a      	cmp	r2, r3
 8009740:	d302      	bcc.n	8009748 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d113      	bne.n	8009770 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800974c:	f043 0220 	orr.w	r2, r3, #32
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2220      	movs	r2, #32
 8009758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2200      	movs	r2, #0
 8009760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2200      	movs	r2, #0
 8009768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	e007      	b.n	8009780 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	699b      	ldr	r3, [r3, #24]
 8009776:	f003 0302 	and.w	r3, r3, #2
 800977a:	2b02      	cmp	r3, #2
 800977c:	d1cb      	bne.n	8009716 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800977e:	2300      	movs	r3, #0
}
 8009780:	4618      	mov	r0, r3
 8009782:	3710      	adds	r7, #16
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009794:	e028      	b.n	80097e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	68b9      	ldr	r1, [r7, #8]
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f000 f830 	bl	8009800 <I2C_IsAcknowledgeFailed>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d001      	beq.n	80097aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	e026      	b.n	80097f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097aa:	f7fa fe3f 	bl	800442c <HAL_GetTick>
 80097ae:	4602      	mov	r2, r0
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	1ad3      	subs	r3, r2, r3
 80097b4:	68ba      	ldr	r2, [r7, #8]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d302      	bcc.n	80097c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d113      	bne.n	80097e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097c4:	f043 0220 	orr.w	r2, r3, #32
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2220      	movs	r2, #32
 80097d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2200      	movs	r2, #0
 80097d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2200      	movs	r2, #0
 80097e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	e007      	b.n	80097f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	699b      	ldr	r3, [r3, #24]
 80097ee:	f003 0320 	and.w	r3, r3, #32
 80097f2:	2b20      	cmp	r3, #32
 80097f4:	d1cf      	bne.n	8009796 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3710      	adds	r7, #16
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	699b      	ldr	r3, [r3, #24]
 8009812:	f003 0310 	and.w	r3, r3, #16
 8009816:	2b10      	cmp	r3, #16
 8009818:	d151      	bne.n	80098be <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800981a:	e022      	b.n	8009862 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009822:	d01e      	beq.n	8009862 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009824:	f7fa fe02 	bl	800442c <HAL_GetTick>
 8009828:	4602      	mov	r2, r0
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	1ad3      	subs	r3, r2, r3
 800982e:	68ba      	ldr	r2, [r7, #8]
 8009830:	429a      	cmp	r2, r3
 8009832:	d302      	bcc.n	800983a <I2C_IsAcknowledgeFailed+0x3a>
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d113      	bne.n	8009862 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800983e:	f043 0220 	orr.w	r2, r3, #32
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2220      	movs	r2, #32
 800984a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2200      	movs	r2, #0
 8009852:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2200      	movs	r2, #0
 800985a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	e02e      	b.n	80098c0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	699b      	ldr	r3, [r3, #24]
 8009868:	f003 0320 	and.w	r3, r3, #32
 800986c:	2b20      	cmp	r3, #32
 800986e:	d1d5      	bne.n	800981c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2210      	movs	r2, #16
 8009876:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2220      	movs	r2, #32
 800987e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009880:	68f8      	ldr	r0, [r7, #12]
 8009882:	f7ff fd3c 	bl	80092fe <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	6859      	ldr	r1, [r3, #4]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	4b0d      	ldr	r3, [pc, #52]	; (80098c8 <I2C_IsAcknowledgeFailed+0xc8>)
 8009892:	400b      	ands	r3, r1
 8009894:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800989a:	f043 0204 	orr.w	r2, r3, #4
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2220      	movs	r2, #32
 80098a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2200      	movs	r2, #0
 80098ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2200      	movs	r2, #0
 80098b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	e000      	b.n	80098c0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3710      	adds	r7, #16
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	fe00e800 	.word	0xfe00e800

080098cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	607b      	str	r3, [r7, #4]
 80098d6:	460b      	mov	r3, r1
 80098d8:	817b      	strh	r3, [r7, #10]
 80098da:	4613      	mov	r3, r2
 80098dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	685a      	ldr	r2, [r3, #4]
 80098e4:	69bb      	ldr	r3, [r7, #24]
 80098e6:	0d5b      	lsrs	r3, r3, #21
 80098e8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80098ec:	4b0d      	ldr	r3, [pc, #52]	; (8009924 <I2C_TransferConfig+0x58>)
 80098ee:	430b      	orrs	r3, r1
 80098f0:	43db      	mvns	r3, r3
 80098f2:	ea02 0103 	and.w	r1, r2, r3
 80098f6:	897b      	ldrh	r3, [r7, #10]
 80098f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80098fc:	7a7b      	ldrb	r3, [r7, #9]
 80098fe:	041b      	lsls	r3, r3, #16
 8009900:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009904:	431a      	orrs	r2, r3
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	431a      	orrs	r2, r3
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	431a      	orrs	r2, r3
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	430a      	orrs	r2, r1
 8009914:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8009916:	bf00      	nop
 8009918:	3714      	adds	r7, #20
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	03ff63ff 	.word	0x03ff63ff

08009928 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	460b      	mov	r3, r1
 8009932:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009934:	2300      	movs	r3, #0
 8009936:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800993c:	4a2a      	ldr	r2, [pc, #168]	; (80099e8 <I2C_Enable_IRQ+0xc0>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d004      	beq.n	800994c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8009946:	4a29      	ldr	r2, [pc, #164]	; (80099ec <I2C_Enable_IRQ+0xc4>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d11d      	bne.n	8009988 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800994c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009950:	2b00      	cmp	r3, #0
 8009952:	da03      	bge.n	800995c <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800995a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800995c:	887b      	ldrh	r3, [r7, #2]
 800995e:	2b10      	cmp	r3, #16
 8009960:	d103      	bne.n	800996a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009968:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800996a:	887b      	ldrh	r3, [r7, #2]
 800996c:	2b20      	cmp	r3, #32
 800996e:	d103      	bne.n	8009978 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009976:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009978:	887b      	ldrh	r3, [r7, #2]
 800997a:	2b40      	cmp	r3, #64	; 0x40
 800997c:	d125      	bne.n	80099ca <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009984:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009986:	e020      	b.n	80099ca <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009988:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800998c:	2b00      	cmp	r3, #0
 800998e:	da03      	bge.n	8009998 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009996:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009998:	887b      	ldrh	r3, [r7, #2]
 800999a:	f003 0301 	and.w	r3, r3, #1
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d003      	beq.n	80099aa <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80099a8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80099aa:	887b      	ldrh	r3, [r7, #2]
 80099ac:	f003 0302 	and.w	r3, r3, #2
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d003      	beq.n	80099bc <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80099ba:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80099bc:	887b      	ldrh	r3, [r7, #2]
 80099be:	2b20      	cmp	r3, #32
 80099c0:	d103      	bne.n	80099ca <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f043 0320 	orr.w	r3, r3, #32
 80099c8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	6819      	ldr	r1, [r3, #0]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	430a      	orrs	r2, r1
 80099d8:	601a      	str	r2, [r3, #0]
}
 80099da:	bf00      	nop
 80099dc:	3714      	adds	r7, #20
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr
 80099e6:	bf00      	nop
 80099e8:	080081ab 	.word	0x080081ab
 80099ec:	08008391 	.word	0x08008391

080099f0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b085      	sub	sp, #20
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	460b      	mov	r3, r1
 80099fa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80099fc:	2300      	movs	r3, #0
 80099fe:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009a00:	887b      	ldrh	r3, [r7, #2]
 8009a02:	f003 0301 	and.w	r3, r3, #1
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00f      	beq.n	8009a2a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8009a10:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009a1e:	2b28      	cmp	r3, #40	; 0x28
 8009a20:	d003      	beq.n	8009a2a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009a28:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009a2a:	887b      	ldrh	r3, [r7, #2]
 8009a2c:	f003 0302 	and.w	r3, r3, #2
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d00f      	beq.n	8009a54 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8009a3a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009a48:	2b28      	cmp	r3, #40	; 0x28
 8009a4a:	d003      	beq.n	8009a54 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009a52:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009a54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	da03      	bge.n	8009a64 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009a62:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009a64:	887b      	ldrh	r3, [r7, #2]
 8009a66:	2b10      	cmp	r3, #16
 8009a68:	d103      	bne.n	8009a72 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009a70:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009a72:	887b      	ldrh	r3, [r7, #2]
 8009a74:	2b20      	cmp	r3, #32
 8009a76:	d103      	bne.n	8009a80 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f043 0320 	orr.w	r3, r3, #32
 8009a7e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009a80:	887b      	ldrh	r3, [r7, #2]
 8009a82:	2b40      	cmp	r3, #64	; 0x40
 8009a84:	d103      	bne.n	8009a8e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a8c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	6819      	ldr	r1, [r3, #0]
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	43da      	mvns	r2, r3
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	400a      	ands	r2, r1
 8009a9e:	601a      	str	r2, [r3, #0]
}
 8009aa0:	bf00      	nop
 8009aa2:	3714      	adds	r7, #20
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr

08009aac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	2b20      	cmp	r3, #32
 8009ac0:	d138      	bne.n	8009b34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d101      	bne.n	8009ad0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009acc:	2302      	movs	r3, #2
 8009ace:	e032      	b.n	8009b36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2224      	movs	r2, #36	; 0x24
 8009adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f022 0201 	bic.w	r2, r2, #1
 8009aee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009afe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	6819      	ldr	r1, [r3, #0]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	683a      	ldr	r2, [r7, #0]
 8009b0c:	430a      	orrs	r2, r1
 8009b0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f042 0201 	orr.w	r2, r2, #1
 8009b1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2220      	movs	r2, #32
 8009b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009b30:	2300      	movs	r3, #0
 8009b32:	e000      	b.n	8009b36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009b34:	2302      	movs	r3, #2
  }
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	370c      	adds	r7, #12
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr

08009b42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009b42:	b480      	push	{r7}
 8009b44:	b085      	sub	sp, #20
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
 8009b4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	2b20      	cmp	r3, #32
 8009b56:	d139      	bne.n	8009bcc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d101      	bne.n	8009b66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009b62:	2302      	movs	r3, #2
 8009b64:	e033      	b.n	8009bce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2224      	movs	r2, #36	; 0x24
 8009b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f022 0201 	bic.w	r2, r2, #1
 8009b84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009b94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	021b      	lsls	r3, r3, #8
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	68fa      	ldr	r2, [r7, #12]
 8009ba6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f042 0201 	orr.w	r2, r2, #1
 8009bb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2220      	movs	r2, #32
 8009bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	e000      	b.n	8009bce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009bcc:	2302      	movs	r3, #2
  }
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3714      	adds	r7, #20
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr
	...

08009bdc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009be4:	4b19      	ldr	r3, [pc, #100]	; (8009c4c <HAL_PWREx_ConfigSupply+0x70>)
 8009be6:	68db      	ldr	r3, [r3, #12]
 8009be8:	f003 0304 	and.w	r3, r3, #4
 8009bec:	2b04      	cmp	r3, #4
 8009bee:	d00a      	beq.n	8009c06 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009bf0:	4b16      	ldr	r3, [pc, #88]	; (8009c4c <HAL_PWREx_ConfigSupply+0x70>)
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	f003 0307 	and.w	r3, r3, #7
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d001      	beq.n	8009c02 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e01f      	b.n	8009c42 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009c02:	2300      	movs	r3, #0
 8009c04:	e01d      	b.n	8009c42 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009c06:	4b11      	ldr	r3, [pc, #68]	; (8009c4c <HAL_PWREx_ConfigSupply+0x70>)
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	f023 0207 	bic.w	r2, r3, #7
 8009c0e:	490f      	ldr	r1, [pc, #60]	; (8009c4c <HAL_PWREx_ConfigSupply+0x70>)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	4313      	orrs	r3, r2
 8009c14:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009c16:	f7fa fc09 	bl	800442c <HAL_GetTick>
 8009c1a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009c1c:	e009      	b.n	8009c32 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009c1e:	f7fa fc05 	bl	800442c <HAL_GetTick>
 8009c22:	4602      	mov	r2, r0
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	1ad3      	subs	r3, r2, r3
 8009c28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c2c:	d901      	bls.n	8009c32 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e007      	b.n	8009c42 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009c32:	4b06      	ldr	r3, [pc, #24]	; (8009c4c <HAL_PWREx_ConfigSupply+0x70>)
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c3e:	d1ee      	bne.n	8009c1e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009c40:	2300      	movs	r3, #0
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	58024800 	.word	0x58024800

08009c50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b08c      	sub	sp, #48	; 0x30
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d101      	bne.n	8009c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e3ff      	b.n	800a462 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f003 0301 	and.w	r3, r3, #1
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	f000 8087 	beq.w	8009d7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c70:	4b99      	ldr	r3, [pc, #612]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009c72:	691b      	ldr	r3, [r3, #16]
 8009c74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009c7a:	4b97      	ldr	r3, [pc, #604]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c82:	2b10      	cmp	r3, #16
 8009c84:	d007      	beq.n	8009c96 <HAL_RCC_OscConfig+0x46>
 8009c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c88:	2b18      	cmp	r3, #24
 8009c8a:	d110      	bne.n	8009cae <HAL_RCC_OscConfig+0x5e>
 8009c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8e:	f003 0303 	and.w	r3, r3, #3
 8009c92:	2b02      	cmp	r3, #2
 8009c94:	d10b      	bne.n	8009cae <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c96:	4b90      	ldr	r3, [pc, #576]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d06c      	beq.n	8009d7c <HAL_RCC_OscConfig+0x12c>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d168      	bne.n	8009d7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009caa:	2301      	movs	r3, #1
 8009cac:	e3d9      	b.n	800a462 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cb6:	d106      	bne.n	8009cc6 <HAL_RCC_OscConfig+0x76>
 8009cb8:	4b87      	ldr	r3, [pc, #540]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a86      	ldr	r2, [pc, #536]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009cc2:	6013      	str	r3, [r2, #0]
 8009cc4:	e02e      	b.n	8009d24 <HAL_RCC_OscConfig+0xd4>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d10c      	bne.n	8009ce8 <HAL_RCC_OscConfig+0x98>
 8009cce:	4b82      	ldr	r3, [pc, #520]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a81      	ldr	r2, [pc, #516]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cd8:	6013      	str	r3, [r2, #0]
 8009cda:	4b7f      	ldr	r3, [pc, #508]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a7e      	ldr	r2, [pc, #504]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009ce0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ce4:	6013      	str	r3, [r2, #0]
 8009ce6:	e01d      	b.n	8009d24 <HAL_RCC_OscConfig+0xd4>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009cf0:	d10c      	bne.n	8009d0c <HAL_RCC_OscConfig+0xbc>
 8009cf2:	4b79      	ldr	r3, [pc, #484]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a78      	ldr	r2, [pc, #480]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009cfc:	6013      	str	r3, [r2, #0]
 8009cfe:	4b76      	ldr	r3, [pc, #472]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a75      	ldr	r2, [pc, #468]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d08:	6013      	str	r3, [r2, #0]
 8009d0a:	e00b      	b.n	8009d24 <HAL_RCC_OscConfig+0xd4>
 8009d0c:	4b72      	ldr	r3, [pc, #456]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a71      	ldr	r2, [pc, #452]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d16:	6013      	str	r3, [r2, #0]
 8009d18:	4b6f      	ldr	r3, [pc, #444]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a6e      	ldr	r2, [pc, #440]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d013      	beq.n	8009d54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d2c:	f7fa fb7e 	bl	800442c <HAL_GetTick>
 8009d30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009d32:	e008      	b.n	8009d46 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009d34:	f7fa fb7a 	bl	800442c <HAL_GetTick>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3c:	1ad3      	subs	r3, r2, r3
 8009d3e:	2b64      	cmp	r3, #100	; 0x64
 8009d40:	d901      	bls.n	8009d46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009d42:	2303      	movs	r3, #3
 8009d44:	e38d      	b.n	800a462 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009d46:	4b64      	ldr	r3, [pc, #400]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d0f0      	beq.n	8009d34 <HAL_RCC_OscConfig+0xe4>
 8009d52:	e014      	b.n	8009d7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d54:	f7fa fb6a 	bl	800442c <HAL_GetTick>
 8009d58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009d5a:	e008      	b.n	8009d6e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009d5c:	f7fa fb66 	bl	800442c <HAL_GetTick>
 8009d60:	4602      	mov	r2, r0
 8009d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d64:	1ad3      	subs	r3, r2, r3
 8009d66:	2b64      	cmp	r3, #100	; 0x64
 8009d68:	d901      	bls.n	8009d6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009d6a:	2303      	movs	r3, #3
 8009d6c:	e379      	b.n	800a462 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009d6e:	4b5a      	ldr	r3, [pc, #360]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d1f0      	bne.n	8009d5c <HAL_RCC_OscConfig+0x10c>
 8009d7a:	e000      	b.n	8009d7e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f003 0302 	and.w	r3, r3, #2
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	f000 80ae 	beq.w	8009ee8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d8c:	4b52      	ldr	r3, [pc, #328]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009d8e:	691b      	ldr	r3, [r3, #16]
 8009d90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d94:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009d96:	4b50      	ldr	r3, [pc, #320]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d9a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009d9c:	6a3b      	ldr	r3, [r7, #32]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d007      	beq.n	8009db2 <HAL_RCC_OscConfig+0x162>
 8009da2:	6a3b      	ldr	r3, [r7, #32]
 8009da4:	2b18      	cmp	r3, #24
 8009da6:	d13a      	bne.n	8009e1e <HAL_RCC_OscConfig+0x1ce>
 8009da8:	69fb      	ldr	r3, [r7, #28]
 8009daa:	f003 0303 	and.w	r3, r3, #3
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d135      	bne.n	8009e1e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009db2:	4b49      	ldr	r3, [pc, #292]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f003 0304 	and.w	r3, r3, #4
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d005      	beq.n	8009dca <HAL_RCC_OscConfig+0x17a>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d101      	bne.n	8009dca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e34b      	b.n	800a462 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009dca:	f7fa fb5f 	bl	800448c <HAL_GetREVID>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	f241 0203 	movw	r2, #4099	; 0x1003
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d817      	bhi.n	8009e08 <HAL_RCC_OscConfig+0x1b8>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	691b      	ldr	r3, [r3, #16]
 8009ddc:	2b40      	cmp	r3, #64	; 0x40
 8009dde:	d108      	bne.n	8009df2 <HAL_RCC_OscConfig+0x1a2>
 8009de0:	4b3d      	ldr	r3, [pc, #244]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009de8:	4a3b      	ldr	r2, [pc, #236]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dee:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009df0:	e07a      	b.n	8009ee8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009df2:	4b39      	ldr	r3, [pc, #228]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	031b      	lsls	r3, r3, #12
 8009e00:	4935      	ldr	r1, [pc, #212]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009e02:	4313      	orrs	r3, r2
 8009e04:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e06:	e06f      	b.n	8009ee8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e08:	4b33      	ldr	r3, [pc, #204]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	691b      	ldr	r3, [r3, #16]
 8009e14:	061b      	lsls	r3, r3, #24
 8009e16:	4930      	ldr	r1, [pc, #192]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e1c:	e064      	b.n	8009ee8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d045      	beq.n	8009eb2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009e26:	4b2c      	ldr	r3, [pc, #176]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f023 0219 	bic.w	r2, r3, #25
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	4929      	ldr	r1, [pc, #164]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009e34:	4313      	orrs	r3, r2
 8009e36:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e38:	f7fa faf8 	bl	800442c <HAL_GetTick>
 8009e3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e3e:	e008      	b.n	8009e52 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009e40:	f7fa faf4 	bl	800442c <HAL_GetTick>
 8009e44:	4602      	mov	r2, r0
 8009e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e48:	1ad3      	subs	r3, r2, r3
 8009e4a:	2b02      	cmp	r3, #2
 8009e4c:	d901      	bls.n	8009e52 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8009e4e:	2303      	movs	r3, #3
 8009e50:	e307      	b.n	800a462 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e52:	4b21      	ldr	r3, [pc, #132]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f003 0304 	and.w	r3, r3, #4
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d0f0      	beq.n	8009e40 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e5e:	f7fa fb15 	bl	800448c <HAL_GetREVID>
 8009e62:	4603      	mov	r3, r0
 8009e64:	f241 0203 	movw	r2, #4099	; 0x1003
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d817      	bhi.n	8009e9c <HAL_RCC_OscConfig+0x24c>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	691b      	ldr	r3, [r3, #16]
 8009e70:	2b40      	cmp	r3, #64	; 0x40
 8009e72:	d108      	bne.n	8009e86 <HAL_RCC_OscConfig+0x236>
 8009e74:	4b18      	ldr	r3, [pc, #96]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009e7c:	4a16      	ldr	r2, [pc, #88]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009e7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e82:	6053      	str	r3, [r2, #4]
 8009e84:	e030      	b.n	8009ee8 <HAL_RCC_OscConfig+0x298>
 8009e86:	4b14      	ldr	r3, [pc, #80]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	031b      	lsls	r3, r3, #12
 8009e94:	4910      	ldr	r1, [pc, #64]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009e96:	4313      	orrs	r3, r2
 8009e98:	604b      	str	r3, [r1, #4]
 8009e9a:	e025      	b.n	8009ee8 <HAL_RCC_OscConfig+0x298>
 8009e9c:	4b0e      	ldr	r3, [pc, #56]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	691b      	ldr	r3, [r3, #16]
 8009ea8:	061b      	lsls	r3, r3, #24
 8009eaa:	490b      	ldr	r1, [pc, #44]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009eac:	4313      	orrs	r3, r2
 8009eae:	604b      	str	r3, [r1, #4]
 8009eb0:	e01a      	b.n	8009ee8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009eb2:	4b09      	ldr	r3, [pc, #36]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a08      	ldr	r2, [pc, #32]	; (8009ed8 <HAL_RCC_OscConfig+0x288>)
 8009eb8:	f023 0301 	bic.w	r3, r3, #1
 8009ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ebe:	f7fa fab5 	bl	800442c <HAL_GetTick>
 8009ec2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009ec4:	e00a      	b.n	8009edc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009ec6:	f7fa fab1 	bl	800442c <HAL_GetTick>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ece:	1ad3      	subs	r3, r2, r3
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	d903      	bls.n	8009edc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8009ed4:	2303      	movs	r3, #3
 8009ed6:	e2c4      	b.n	800a462 <HAL_RCC_OscConfig+0x812>
 8009ed8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009edc:	4ba4      	ldr	r3, [pc, #656]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f003 0304 	and.w	r3, r3, #4
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d1ee      	bne.n	8009ec6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f003 0310 	and.w	r3, r3, #16
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	f000 80a9 	beq.w	800a048 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ef6:	4b9e      	ldr	r3, [pc, #632]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 8009ef8:	691b      	ldr	r3, [r3, #16]
 8009efa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009efe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f00:	4b9b      	ldr	r3, [pc, #620]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 8009f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f04:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	2b08      	cmp	r3, #8
 8009f0a:	d007      	beq.n	8009f1c <HAL_RCC_OscConfig+0x2cc>
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	2b18      	cmp	r3, #24
 8009f10:	d13a      	bne.n	8009f88 <HAL_RCC_OscConfig+0x338>
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	f003 0303 	and.w	r3, r3, #3
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d135      	bne.n	8009f88 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009f1c:	4b94      	ldr	r3, [pc, #592]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d005      	beq.n	8009f34 <HAL_RCC_OscConfig+0x2e4>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	69db      	ldr	r3, [r3, #28]
 8009f2c:	2b80      	cmp	r3, #128	; 0x80
 8009f2e:	d001      	beq.n	8009f34 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	e296      	b.n	800a462 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009f34:	f7fa faaa 	bl	800448c <HAL_GetREVID>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	f241 0203 	movw	r2, #4099	; 0x1003
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d817      	bhi.n	8009f72 <HAL_RCC_OscConfig+0x322>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a1b      	ldr	r3, [r3, #32]
 8009f46:	2b20      	cmp	r3, #32
 8009f48:	d108      	bne.n	8009f5c <HAL_RCC_OscConfig+0x30c>
 8009f4a:	4b89      	ldr	r3, [pc, #548]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009f52:	4a87      	ldr	r2, [pc, #540]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 8009f54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f58:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009f5a:	e075      	b.n	800a048 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009f5c:	4b84      	ldr	r3, [pc, #528]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6a1b      	ldr	r3, [r3, #32]
 8009f68:	069b      	lsls	r3, r3, #26
 8009f6a:	4981      	ldr	r1, [pc, #516]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009f70:	e06a      	b.n	800a048 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009f72:	4b7f      	ldr	r3, [pc, #508]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 8009f74:	68db      	ldr	r3, [r3, #12]
 8009f76:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6a1b      	ldr	r3, [r3, #32]
 8009f7e:	061b      	lsls	r3, r3, #24
 8009f80:	497b      	ldr	r1, [pc, #492]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 8009f82:	4313      	orrs	r3, r2
 8009f84:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009f86:	e05f      	b.n	800a048 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	69db      	ldr	r3, [r3, #28]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d042      	beq.n	800a016 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009f90:	4b77      	ldr	r3, [pc, #476]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a76      	ldr	r2, [pc, #472]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 8009f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f9c:	f7fa fa46 	bl	800442c <HAL_GetTick>
 8009fa0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009fa2:	e008      	b.n	8009fb6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009fa4:	f7fa fa42 	bl	800442c <HAL_GetTick>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fac:	1ad3      	subs	r3, r2, r3
 8009fae:	2b02      	cmp	r3, #2
 8009fb0:	d901      	bls.n	8009fb6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8009fb2:	2303      	movs	r3, #3
 8009fb4:	e255      	b.n	800a462 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009fb6:	4b6e      	ldr	r3, [pc, #440]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d0f0      	beq.n	8009fa4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009fc2:	f7fa fa63 	bl	800448c <HAL_GetREVID>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	f241 0203 	movw	r2, #4099	; 0x1003
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d817      	bhi.n	800a000 <HAL_RCC_OscConfig+0x3b0>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6a1b      	ldr	r3, [r3, #32]
 8009fd4:	2b20      	cmp	r3, #32
 8009fd6:	d108      	bne.n	8009fea <HAL_RCC_OscConfig+0x39a>
 8009fd8:	4b65      	ldr	r3, [pc, #404]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009fe0:	4a63      	ldr	r2, [pc, #396]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 8009fe2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fe6:	6053      	str	r3, [r2, #4]
 8009fe8:	e02e      	b.n	800a048 <HAL_RCC_OscConfig+0x3f8>
 8009fea:	4b61      	ldr	r3, [pc, #388]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a1b      	ldr	r3, [r3, #32]
 8009ff6:	069b      	lsls	r3, r3, #26
 8009ff8:	495d      	ldr	r1, [pc, #372]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	604b      	str	r3, [r1, #4]
 8009ffe:	e023      	b.n	800a048 <HAL_RCC_OscConfig+0x3f8>
 800a000:	4b5b      	ldr	r3, [pc, #364]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6a1b      	ldr	r3, [r3, #32]
 800a00c:	061b      	lsls	r3, r3, #24
 800a00e:	4958      	ldr	r1, [pc, #352]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 800a010:	4313      	orrs	r3, r2
 800a012:	60cb      	str	r3, [r1, #12]
 800a014:	e018      	b.n	800a048 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a016:	4b56      	ldr	r3, [pc, #344]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a55      	ldr	r2, [pc, #340]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 800a01c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a022:	f7fa fa03 	bl	800442c <HAL_GetTick>
 800a026:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a028:	e008      	b.n	800a03c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a02a:	f7fa f9ff 	bl	800442c <HAL_GetTick>
 800a02e:	4602      	mov	r2, r0
 800a030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a032:	1ad3      	subs	r3, r2, r3
 800a034:	2b02      	cmp	r3, #2
 800a036:	d901      	bls.n	800a03c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800a038:	2303      	movs	r3, #3
 800a03a:	e212      	b.n	800a462 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a03c:	4b4c      	ldr	r3, [pc, #304]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a044:	2b00      	cmp	r3, #0
 800a046:	d1f0      	bne.n	800a02a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f003 0308 	and.w	r3, r3, #8
 800a050:	2b00      	cmp	r3, #0
 800a052:	d036      	beq.n	800a0c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	695b      	ldr	r3, [r3, #20]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d019      	beq.n	800a090 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a05c:	4b44      	ldr	r3, [pc, #272]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 800a05e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a060:	4a43      	ldr	r2, [pc, #268]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 800a062:	f043 0301 	orr.w	r3, r3, #1
 800a066:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a068:	f7fa f9e0 	bl	800442c <HAL_GetTick>
 800a06c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a06e:	e008      	b.n	800a082 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a070:	f7fa f9dc 	bl	800442c <HAL_GetTick>
 800a074:	4602      	mov	r2, r0
 800a076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a078:	1ad3      	subs	r3, r2, r3
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	d901      	bls.n	800a082 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800a07e:	2303      	movs	r3, #3
 800a080:	e1ef      	b.n	800a462 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a082:	4b3b      	ldr	r3, [pc, #236]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 800a084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a086:	f003 0302 	and.w	r3, r3, #2
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d0f0      	beq.n	800a070 <HAL_RCC_OscConfig+0x420>
 800a08e:	e018      	b.n	800a0c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a090:	4b37      	ldr	r3, [pc, #220]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 800a092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a094:	4a36      	ldr	r2, [pc, #216]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 800a096:	f023 0301 	bic.w	r3, r3, #1
 800a09a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a09c:	f7fa f9c6 	bl	800442c <HAL_GetTick>
 800a0a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a0a2:	e008      	b.n	800a0b6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a0a4:	f7fa f9c2 	bl	800442c <HAL_GetTick>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ac:	1ad3      	subs	r3, r2, r3
 800a0ae:	2b02      	cmp	r3, #2
 800a0b0:	d901      	bls.n	800a0b6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800a0b2:	2303      	movs	r3, #3
 800a0b4:	e1d5      	b.n	800a462 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a0b6:	4b2e      	ldr	r3, [pc, #184]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 800a0b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0ba:	f003 0302 	and.w	r3, r3, #2
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d1f0      	bne.n	800a0a4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f003 0320 	and.w	r3, r3, #32
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d036      	beq.n	800a13c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	699b      	ldr	r3, [r3, #24]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d019      	beq.n	800a10a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a0d6:	4b26      	ldr	r3, [pc, #152]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a25      	ldr	r2, [pc, #148]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 800a0dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a0e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a0e2:	f7fa f9a3 	bl	800442c <HAL_GetTick>
 800a0e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a0e8:	e008      	b.n	800a0fc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a0ea:	f7fa f99f 	bl	800442c <HAL_GetTick>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f2:	1ad3      	subs	r3, r2, r3
 800a0f4:	2b02      	cmp	r3, #2
 800a0f6:	d901      	bls.n	800a0fc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800a0f8:	2303      	movs	r3, #3
 800a0fa:	e1b2      	b.n	800a462 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a0fc:	4b1c      	ldr	r3, [pc, #112]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a104:	2b00      	cmp	r3, #0
 800a106:	d0f0      	beq.n	800a0ea <HAL_RCC_OscConfig+0x49a>
 800a108:	e018      	b.n	800a13c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a10a:	4b19      	ldr	r3, [pc, #100]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a18      	ldr	r2, [pc, #96]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 800a110:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a114:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a116:	f7fa f989 	bl	800442c <HAL_GetTick>
 800a11a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a11c:	e008      	b.n	800a130 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a11e:	f7fa f985 	bl	800442c <HAL_GetTick>
 800a122:	4602      	mov	r2, r0
 800a124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a126:	1ad3      	subs	r3, r2, r3
 800a128:	2b02      	cmp	r3, #2
 800a12a:	d901      	bls.n	800a130 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800a12c:	2303      	movs	r3, #3
 800a12e:	e198      	b.n	800a462 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a130:	4b0f      	ldr	r3, [pc, #60]	; (800a170 <HAL_RCC_OscConfig+0x520>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d1f0      	bne.n	800a11e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f003 0304 	and.w	r3, r3, #4
 800a144:	2b00      	cmp	r3, #0
 800a146:	f000 8085 	beq.w	800a254 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a14a:	4b0a      	ldr	r3, [pc, #40]	; (800a174 <HAL_RCC_OscConfig+0x524>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a09      	ldr	r2, [pc, #36]	; (800a174 <HAL_RCC_OscConfig+0x524>)
 800a150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a154:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a156:	f7fa f969 	bl	800442c <HAL_GetTick>
 800a15a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a15c:	e00c      	b.n	800a178 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a15e:	f7fa f965 	bl	800442c <HAL_GetTick>
 800a162:	4602      	mov	r2, r0
 800a164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a166:	1ad3      	subs	r3, r2, r3
 800a168:	2b64      	cmp	r3, #100	; 0x64
 800a16a:	d905      	bls.n	800a178 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800a16c:	2303      	movs	r3, #3
 800a16e:	e178      	b.n	800a462 <HAL_RCC_OscConfig+0x812>
 800a170:	58024400 	.word	0x58024400
 800a174:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a178:	4b96      	ldr	r3, [pc, #600]	; (800a3d4 <HAL_RCC_OscConfig+0x784>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a180:	2b00      	cmp	r3, #0
 800a182:	d0ec      	beq.n	800a15e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d106      	bne.n	800a19a <HAL_RCC_OscConfig+0x54a>
 800a18c:	4b92      	ldr	r3, [pc, #584]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a18e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a190:	4a91      	ldr	r2, [pc, #580]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a192:	f043 0301 	orr.w	r3, r3, #1
 800a196:	6713      	str	r3, [r2, #112]	; 0x70
 800a198:	e02d      	b.n	800a1f6 <HAL_RCC_OscConfig+0x5a6>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d10c      	bne.n	800a1bc <HAL_RCC_OscConfig+0x56c>
 800a1a2:	4b8d      	ldr	r3, [pc, #564]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a1a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1a6:	4a8c      	ldr	r2, [pc, #560]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a1a8:	f023 0301 	bic.w	r3, r3, #1
 800a1ac:	6713      	str	r3, [r2, #112]	; 0x70
 800a1ae:	4b8a      	ldr	r3, [pc, #552]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a1b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1b2:	4a89      	ldr	r2, [pc, #548]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a1b4:	f023 0304 	bic.w	r3, r3, #4
 800a1b8:	6713      	str	r3, [r2, #112]	; 0x70
 800a1ba:	e01c      	b.n	800a1f6 <HAL_RCC_OscConfig+0x5a6>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	2b05      	cmp	r3, #5
 800a1c2:	d10c      	bne.n	800a1de <HAL_RCC_OscConfig+0x58e>
 800a1c4:	4b84      	ldr	r3, [pc, #528]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a1c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1c8:	4a83      	ldr	r2, [pc, #524]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a1ca:	f043 0304 	orr.w	r3, r3, #4
 800a1ce:	6713      	str	r3, [r2, #112]	; 0x70
 800a1d0:	4b81      	ldr	r3, [pc, #516]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a1d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1d4:	4a80      	ldr	r2, [pc, #512]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a1d6:	f043 0301 	orr.w	r3, r3, #1
 800a1da:	6713      	str	r3, [r2, #112]	; 0x70
 800a1dc:	e00b      	b.n	800a1f6 <HAL_RCC_OscConfig+0x5a6>
 800a1de:	4b7e      	ldr	r3, [pc, #504]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a1e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1e2:	4a7d      	ldr	r2, [pc, #500]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a1e4:	f023 0301 	bic.w	r3, r3, #1
 800a1e8:	6713      	str	r3, [r2, #112]	; 0x70
 800a1ea:	4b7b      	ldr	r3, [pc, #492]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a1ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ee:	4a7a      	ldr	r2, [pc, #488]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a1f0:	f023 0304 	bic.w	r3, r3, #4
 800a1f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	689b      	ldr	r3, [r3, #8]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d015      	beq.n	800a22a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1fe:	f7fa f915 	bl	800442c <HAL_GetTick>
 800a202:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a204:	e00a      	b.n	800a21c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a206:	f7fa f911 	bl	800442c <HAL_GetTick>
 800a20a:	4602      	mov	r2, r0
 800a20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20e:	1ad3      	subs	r3, r2, r3
 800a210:	f241 3288 	movw	r2, #5000	; 0x1388
 800a214:	4293      	cmp	r3, r2
 800a216:	d901      	bls.n	800a21c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800a218:	2303      	movs	r3, #3
 800a21a:	e122      	b.n	800a462 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a21c:	4b6e      	ldr	r3, [pc, #440]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a21e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a220:	f003 0302 	and.w	r3, r3, #2
 800a224:	2b00      	cmp	r3, #0
 800a226:	d0ee      	beq.n	800a206 <HAL_RCC_OscConfig+0x5b6>
 800a228:	e014      	b.n	800a254 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a22a:	f7fa f8ff 	bl	800442c <HAL_GetTick>
 800a22e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a230:	e00a      	b.n	800a248 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a232:	f7fa f8fb 	bl	800442c <HAL_GetTick>
 800a236:	4602      	mov	r2, r0
 800a238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23a:	1ad3      	subs	r3, r2, r3
 800a23c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a240:	4293      	cmp	r3, r2
 800a242:	d901      	bls.n	800a248 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800a244:	2303      	movs	r3, #3
 800a246:	e10c      	b.n	800a462 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a248:	4b63      	ldr	r3, [pc, #396]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a24a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a24c:	f003 0302 	and.w	r3, r3, #2
 800a250:	2b00      	cmp	r3, #0
 800a252:	d1ee      	bne.n	800a232 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f000 8101 	beq.w	800a460 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a25e:	4b5e      	ldr	r3, [pc, #376]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a260:	691b      	ldr	r3, [r3, #16]
 800a262:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a266:	2b18      	cmp	r3, #24
 800a268:	f000 80bc 	beq.w	800a3e4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a270:	2b02      	cmp	r3, #2
 800a272:	f040 8095 	bne.w	800a3a0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a276:	4b58      	ldr	r3, [pc, #352]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a57      	ldr	r2, [pc, #348]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a27c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a282:	f7fa f8d3 	bl	800442c <HAL_GetTick>
 800a286:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a288:	e008      	b.n	800a29c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a28a:	f7fa f8cf 	bl	800442c <HAL_GetTick>
 800a28e:	4602      	mov	r2, r0
 800a290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a292:	1ad3      	subs	r3, r2, r3
 800a294:	2b02      	cmp	r3, #2
 800a296:	d901      	bls.n	800a29c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800a298:	2303      	movs	r3, #3
 800a29a:	e0e2      	b.n	800a462 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a29c:	4b4e      	ldr	r3, [pc, #312]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d1f0      	bne.n	800a28a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a2a8:	4b4b      	ldr	r3, [pc, #300]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a2aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2ac:	4b4b      	ldr	r3, [pc, #300]	; (800a3dc <HAL_RCC_OscConfig+0x78c>)
 800a2ae:	4013      	ands	r3, r2
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a2b8:	0112      	lsls	r2, r2, #4
 800a2ba:	430a      	orrs	r2, r1
 800a2bc:	4946      	ldr	r1, [pc, #280]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	628b      	str	r3, [r1, #40]	; 0x28
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2c6:	3b01      	subs	r3, #1
 800a2c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2d0:	3b01      	subs	r3, #1
 800a2d2:	025b      	lsls	r3, r3, #9
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	431a      	orrs	r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	041b      	lsls	r3, r3, #16
 800a2e0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a2e4:	431a      	orrs	r2, r3
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ea:	3b01      	subs	r3, #1
 800a2ec:	061b      	lsls	r3, r3, #24
 800a2ee:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a2f2:	4939      	ldr	r1, [pc, #228]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a2f8:	4b37      	ldr	r3, [pc, #220]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2fc:	4a36      	ldr	r2, [pc, #216]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a2fe:	f023 0301 	bic.w	r3, r3, #1
 800a302:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a304:	4b34      	ldr	r3, [pc, #208]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a308:	4b35      	ldr	r3, [pc, #212]	; (800a3e0 <HAL_RCC_OscConfig+0x790>)
 800a30a:	4013      	ands	r3, r2
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a310:	00d2      	lsls	r2, r2, #3
 800a312:	4931      	ldr	r1, [pc, #196]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a314:	4313      	orrs	r3, r2
 800a316:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a318:	4b2f      	ldr	r3, [pc, #188]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a31c:	f023 020c 	bic.w	r2, r3, #12
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a324:	492c      	ldr	r1, [pc, #176]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a326:	4313      	orrs	r3, r2
 800a328:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a32a:	4b2b      	ldr	r3, [pc, #172]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a32e:	f023 0202 	bic.w	r2, r3, #2
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a336:	4928      	ldr	r1, [pc, #160]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a338:	4313      	orrs	r3, r2
 800a33a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a33c:	4b26      	ldr	r3, [pc, #152]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a340:	4a25      	ldr	r2, [pc, #148]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a346:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a348:	4b23      	ldr	r3, [pc, #140]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34c:	4a22      	ldr	r2, [pc, #136]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a34e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a352:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a354:	4b20      	ldr	r3, [pc, #128]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a358:	4a1f      	ldr	r2, [pc, #124]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a35a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a35e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a360:	4b1d      	ldr	r3, [pc, #116]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a364:	4a1c      	ldr	r2, [pc, #112]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a366:	f043 0301 	orr.w	r3, r3, #1
 800a36a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a36c:	4b1a      	ldr	r3, [pc, #104]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a19      	ldr	r2, [pc, #100]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a372:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a378:	f7fa f858 	bl	800442c <HAL_GetTick>
 800a37c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a37e:	e008      	b.n	800a392 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a380:	f7fa f854 	bl	800442c <HAL_GetTick>
 800a384:	4602      	mov	r2, r0
 800a386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a388:	1ad3      	subs	r3, r2, r3
 800a38a:	2b02      	cmp	r3, #2
 800a38c:	d901      	bls.n	800a392 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800a38e:	2303      	movs	r3, #3
 800a390:	e067      	b.n	800a462 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a392:	4b11      	ldr	r3, [pc, #68]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d0f0      	beq.n	800a380 <HAL_RCC_OscConfig+0x730>
 800a39e:	e05f      	b.n	800a460 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a3a0:	4b0d      	ldr	r3, [pc, #52]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a0c      	ldr	r2, [pc, #48]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a3a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a3aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3ac:	f7fa f83e 	bl	800442c <HAL_GetTick>
 800a3b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a3b2:	e008      	b.n	800a3c6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a3b4:	f7fa f83a 	bl	800442c <HAL_GetTick>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3bc:	1ad3      	subs	r3, r2, r3
 800a3be:	2b02      	cmp	r3, #2
 800a3c0:	d901      	bls.n	800a3c6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	e04d      	b.n	800a462 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a3c6:	4b04      	ldr	r3, [pc, #16]	; (800a3d8 <HAL_RCC_OscConfig+0x788>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d1f0      	bne.n	800a3b4 <HAL_RCC_OscConfig+0x764>
 800a3d2:	e045      	b.n	800a460 <HAL_RCC_OscConfig+0x810>
 800a3d4:	58024800 	.word	0x58024800
 800a3d8:	58024400 	.word	0x58024400
 800a3dc:	fffffc0c 	.word	0xfffffc0c
 800a3e0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a3e4:	4b21      	ldr	r3, [pc, #132]	; (800a46c <HAL_RCC_OscConfig+0x81c>)
 800a3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a3ea:	4b20      	ldr	r3, [pc, #128]	; (800a46c <HAL_RCC_OscConfig+0x81c>)
 800a3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ee:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d031      	beq.n	800a45c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	f003 0203 	and.w	r2, r3, #3
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a402:	429a      	cmp	r2, r3
 800a404:	d12a      	bne.n	800a45c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	091b      	lsrs	r3, r3, #4
 800a40a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a412:	429a      	cmp	r2, r3
 800a414:	d122      	bne.n	800a45c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a420:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a422:	429a      	cmp	r2, r3
 800a424:	d11a      	bne.n	800a45c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	0a5b      	lsrs	r3, r3, #9
 800a42a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a432:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a434:	429a      	cmp	r2, r3
 800a436:	d111      	bne.n	800a45c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	0c1b      	lsrs	r3, r3, #16
 800a43c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a444:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a446:	429a      	cmp	r2, r3
 800a448:	d108      	bne.n	800a45c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	0e1b      	lsrs	r3, r3, #24
 800a44e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a456:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a458:	429a      	cmp	r2, r3
 800a45a:	d001      	beq.n	800a460 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800a45c:	2301      	movs	r3, #1
 800a45e:	e000      	b.n	800a462 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800a460:	2300      	movs	r3, #0
}
 800a462:	4618      	mov	r0, r3
 800a464:	3730      	adds	r7, #48	; 0x30
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	58024400 	.word	0x58024400

0800a470 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b086      	sub	sp, #24
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d101      	bne.n	800a484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a480:	2301      	movs	r3, #1
 800a482:	e19c      	b.n	800a7be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a484:	4b8a      	ldr	r3, [pc, #552]	; (800a6b0 <HAL_RCC_ClockConfig+0x240>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f003 030f 	and.w	r3, r3, #15
 800a48c:	683a      	ldr	r2, [r7, #0]
 800a48e:	429a      	cmp	r2, r3
 800a490:	d910      	bls.n	800a4b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a492:	4b87      	ldr	r3, [pc, #540]	; (800a6b0 <HAL_RCC_ClockConfig+0x240>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f023 020f 	bic.w	r2, r3, #15
 800a49a:	4985      	ldr	r1, [pc, #532]	; (800a6b0 <HAL_RCC_ClockConfig+0x240>)
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4a2:	4b83      	ldr	r3, [pc, #524]	; (800a6b0 <HAL_RCC_ClockConfig+0x240>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f003 030f 	and.w	r3, r3, #15
 800a4aa:	683a      	ldr	r2, [r7, #0]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d001      	beq.n	800a4b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e184      	b.n	800a7be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f003 0304 	and.w	r3, r3, #4
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d010      	beq.n	800a4e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	691a      	ldr	r2, [r3, #16]
 800a4c4:	4b7b      	ldr	r3, [pc, #492]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a4c6:	699b      	ldr	r3, [r3, #24]
 800a4c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d908      	bls.n	800a4e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a4d0:	4b78      	ldr	r3, [pc, #480]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a4d2:	699b      	ldr	r3, [r3, #24]
 800a4d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	4975      	ldr	r1, [pc, #468]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f003 0308 	and.w	r3, r3, #8
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d010      	beq.n	800a510 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	695a      	ldr	r2, [r3, #20]
 800a4f2:	4b70      	ldr	r3, [pc, #448]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a4f4:	69db      	ldr	r3, [r3, #28]
 800a4f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d908      	bls.n	800a510 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a4fe:	4b6d      	ldr	r3, [pc, #436]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a500:	69db      	ldr	r3, [r3, #28]
 800a502:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	695b      	ldr	r3, [r3, #20]
 800a50a:	496a      	ldr	r1, [pc, #424]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a50c:	4313      	orrs	r3, r2
 800a50e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f003 0310 	and.w	r3, r3, #16
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d010      	beq.n	800a53e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	699a      	ldr	r2, [r3, #24]
 800a520:	4b64      	ldr	r3, [pc, #400]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a522:	69db      	ldr	r3, [r3, #28]
 800a524:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a528:	429a      	cmp	r2, r3
 800a52a:	d908      	bls.n	800a53e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a52c:	4b61      	ldr	r3, [pc, #388]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a52e:	69db      	ldr	r3, [r3, #28]
 800a530:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	699b      	ldr	r3, [r3, #24]
 800a538:	495e      	ldr	r1, [pc, #376]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a53a:	4313      	orrs	r3, r2
 800a53c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f003 0320 	and.w	r3, r3, #32
 800a546:	2b00      	cmp	r3, #0
 800a548:	d010      	beq.n	800a56c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	69da      	ldr	r2, [r3, #28]
 800a54e:	4b59      	ldr	r3, [pc, #356]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a550:	6a1b      	ldr	r3, [r3, #32]
 800a552:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a556:	429a      	cmp	r2, r3
 800a558:	d908      	bls.n	800a56c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a55a:	4b56      	ldr	r3, [pc, #344]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a55c:	6a1b      	ldr	r3, [r3, #32]
 800a55e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	69db      	ldr	r3, [r3, #28]
 800a566:	4953      	ldr	r1, [pc, #332]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a568:	4313      	orrs	r3, r2
 800a56a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f003 0302 	and.w	r3, r3, #2
 800a574:	2b00      	cmp	r3, #0
 800a576:	d010      	beq.n	800a59a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	68da      	ldr	r2, [r3, #12]
 800a57c:	4b4d      	ldr	r3, [pc, #308]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a57e:	699b      	ldr	r3, [r3, #24]
 800a580:	f003 030f 	and.w	r3, r3, #15
 800a584:	429a      	cmp	r2, r3
 800a586:	d908      	bls.n	800a59a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a588:	4b4a      	ldr	r3, [pc, #296]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a58a:	699b      	ldr	r3, [r3, #24]
 800a58c:	f023 020f 	bic.w	r2, r3, #15
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	4947      	ldr	r1, [pc, #284]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a596:	4313      	orrs	r3, r2
 800a598:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f003 0301 	and.w	r3, r3, #1
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d055      	beq.n	800a652 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a5a6:	4b43      	ldr	r3, [pc, #268]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a5a8:	699b      	ldr	r3, [r3, #24]
 800a5aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	4940      	ldr	r1, [pc, #256]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	2b02      	cmp	r3, #2
 800a5be:	d107      	bne.n	800a5d0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a5c0:	4b3c      	ldr	r3, [pc, #240]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d121      	bne.n	800a610 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e0f6      	b.n	800a7be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	2b03      	cmp	r3, #3
 800a5d6:	d107      	bne.n	800a5e8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a5d8:	4b36      	ldr	r3, [pc, #216]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d115      	bne.n	800a610 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	e0ea      	b.n	800a7be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d107      	bne.n	800a600 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a5f0:	4b30      	ldr	r3, [pc, #192]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d109      	bne.n	800a610 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	e0de      	b.n	800a7be <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a600:	4b2c      	ldr	r3, [pc, #176]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f003 0304 	and.w	r3, r3, #4
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d101      	bne.n	800a610 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a60c:	2301      	movs	r3, #1
 800a60e:	e0d6      	b.n	800a7be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a610:	4b28      	ldr	r3, [pc, #160]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a612:	691b      	ldr	r3, [r3, #16]
 800a614:	f023 0207 	bic.w	r2, r3, #7
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	4925      	ldr	r1, [pc, #148]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a61e:	4313      	orrs	r3, r2
 800a620:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a622:	f7f9 ff03 	bl	800442c <HAL_GetTick>
 800a626:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a628:	e00a      	b.n	800a640 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a62a:	f7f9 feff 	bl	800442c <HAL_GetTick>
 800a62e:	4602      	mov	r2, r0
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	1ad3      	subs	r3, r2, r3
 800a634:	f241 3288 	movw	r2, #5000	; 0x1388
 800a638:	4293      	cmp	r3, r2
 800a63a:	d901      	bls.n	800a640 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a63c:	2303      	movs	r3, #3
 800a63e:	e0be      	b.n	800a7be <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a640:	4b1c      	ldr	r3, [pc, #112]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a642:	691b      	ldr	r3, [r3, #16]
 800a644:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	00db      	lsls	r3, r3, #3
 800a64e:	429a      	cmp	r2, r3
 800a650:	d1eb      	bne.n	800a62a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f003 0302 	and.w	r3, r3, #2
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d010      	beq.n	800a680 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	68da      	ldr	r2, [r3, #12]
 800a662:	4b14      	ldr	r3, [pc, #80]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a664:	699b      	ldr	r3, [r3, #24]
 800a666:	f003 030f 	and.w	r3, r3, #15
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d208      	bcs.n	800a680 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a66e:	4b11      	ldr	r3, [pc, #68]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a670:	699b      	ldr	r3, [r3, #24]
 800a672:	f023 020f 	bic.w	r2, r3, #15
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	490e      	ldr	r1, [pc, #56]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a67c:	4313      	orrs	r3, r2
 800a67e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a680:	4b0b      	ldr	r3, [pc, #44]	; (800a6b0 <HAL_RCC_ClockConfig+0x240>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f003 030f 	and.w	r3, r3, #15
 800a688:	683a      	ldr	r2, [r7, #0]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d214      	bcs.n	800a6b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a68e:	4b08      	ldr	r3, [pc, #32]	; (800a6b0 <HAL_RCC_ClockConfig+0x240>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f023 020f 	bic.w	r2, r3, #15
 800a696:	4906      	ldr	r1, [pc, #24]	; (800a6b0 <HAL_RCC_ClockConfig+0x240>)
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	4313      	orrs	r3, r2
 800a69c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a69e:	4b04      	ldr	r3, [pc, #16]	; (800a6b0 <HAL_RCC_ClockConfig+0x240>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f003 030f 	and.w	r3, r3, #15
 800a6a6:	683a      	ldr	r2, [r7, #0]
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d005      	beq.n	800a6b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e086      	b.n	800a7be <HAL_RCC_ClockConfig+0x34e>
 800a6b0:	52002000 	.word	0x52002000
 800a6b4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f003 0304 	and.w	r3, r3, #4
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d010      	beq.n	800a6e6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	691a      	ldr	r2, [r3, #16]
 800a6c8:	4b3f      	ldr	r3, [pc, #252]	; (800a7c8 <HAL_RCC_ClockConfig+0x358>)
 800a6ca:	699b      	ldr	r3, [r3, #24]
 800a6cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d208      	bcs.n	800a6e6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a6d4:	4b3c      	ldr	r3, [pc, #240]	; (800a7c8 <HAL_RCC_ClockConfig+0x358>)
 800a6d6:	699b      	ldr	r3, [r3, #24]
 800a6d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	691b      	ldr	r3, [r3, #16]
 800a6e0:	4939      	ldr	r1, [pc, #228]	; (800a7c8 <HAL_RCC_ClockConfig+0x358>)
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f003 0308 	and.w	r3, r3, #8
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d010      	beq.n	800a714 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	695a      	ldr	r2, [r3, #20]
 800a6f6:	4b34      	ldr	r3, [pc, #208]	; (800a7c8 <HAL_RCC_ClockConfig+0x358>)
 800a6f8:	69db      	ldr	r3, [r3, #28]
 800a6fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d208      	bcs.n	800a714 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a702:	4b31      	ldr	r3, [pc, #196]	; (800a7c8 <HAL_RCC_ClockConfig+0x358>)
 800a704:	69db      	ldr	r3, [r3, #28]
 800a706:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	695b      	ldr	r3, [r3, #20]
 800a70e:	492e      	ldr	r1, [pc, #184]	; (800a7c8 <HAL_RCC_ClockConfig+0x358>)
 800a710:	4313      	orrs	r3, r2
 800a712:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f003 0310 	and.w	r3, r3, #16
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d010      	beq.n	800a742 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	699a      	ldr	r2, [r3, #24]
 800a724:	4b28      	ldr	r3, [pc, #160]	; (800a7c8 <HAL_RCC_ClockConfig+0x358>)
 800a726:	69db      	ldr	r3, [r3, #28]
 800a728:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d208      	bcs.n	800a742 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a730:	4b25      	ldr	r3, [pc, #148]	; (800a7c8 <HAL_RCC_ClockConfig+0x358>)
 800a732:	69db      	ldr	r3, [r3, #28]
 800a734:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	699b      	ldr	r3, [r3, #24]
 800a73c:	4922      	ldr	r1, [pc, #136]	; (800a7c8 <HAL_RCC_ClockConfig+0x358>)
 800a73e:	4313      	orrs	r3, r2
 800a740:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f003 0320 	and.w	r3, r3, #32
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d010      	beq.n	800a770 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	69da      	ldr	r2, [r3, #28]
 800a752:	4b1d      	ldr	r3, [pc, #116]	; (800a7c8 <HAL_RCC_ClockConfig+0x358>)
 800a754:	6a1b      	ldr	r3, [r3, #32]
 800a756:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d208      	bcs.n	800a770 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a75e:	4b1a      	ldr	r3, [pc, #104]	; (800a7c8 <HAL_RCC_ClockConfig+0x358>)
 800a760:	6a1b      	ldr	r3, [r3, #32]
 800a762:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	69db      	ldr	r3, [r3, #28]
 800a76a:	4917      	ldr	r1, [pc, #92]	; (800a7c8 <HAL_RCC_ClockConfig+0x358>)
 800a76c:	4313      	orrs	r3, r2
 800a76e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a770:	f000 f834 	bl	800a7dc <HAL_RCC_GetSysClockFreq>
 800a774:	4602      	mov	r2, r0
 800a776:	4b14      	ldr	r3, [pc, #80]	; (800a7c8 <HAL_RCC_ClockConfig+0x358>)
 800a778:	699b      	ldr	r3, [r3, #24]
 800a77a:	0a1b      	lsrs	r3, r3, #8
 800a77c:	f003 030f 	and.w	r3, r3, #15
 800a780:	4912      	ldr	r1, [pc, #72]	; (800a7cc <HAL_RCC_ClockConfig+0x35c>)
 800a782:	5ccb      	ldrb	r3, [r1, r3]
 800a784:	f003 031f 	and.w	r3, r3, #31
 800a788:	fa22 f303 	lsr.w	r3, r2, r3
 800a78c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a78e:	4b0e      	ldr	r3, [pc, #56]	; (800a7c8 <HAL_RCC_ClockConfig+0x358>)
 800a790:	699b      	ldr	r3, [r3, #24]
 800a792:	f003 030f 	and.w	r3, r3, #15
 800a796:	4a0d      	ldr	r2, [pc, #52]	; (800a7cc <HAL_RCC_ClockConfig+0x35c>)
 800a798:	5cd3      	ldrb	r3, [r2, r3]
 800a79a:	f003 031f 	and.w	r3, r3, #31
 800a79e:	693a      	ldr	r2, [r7, #16]
 800a7a0:	fa22 f303 	lsr.w	r3, r2, r3
 800a7a4:	4a0a      	ldr	r2, [pc, #40]	; (800a7d0 <HAL_RCC_ClockConfig+0x360>)
 800a7a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a7a8:	4a0a      	ldr	r2, [pc, #40]	; (800a7d4 <HAL_RCC_ClockConfig+0x364>)
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a7ae:	4b0a      	ldr	r3, [pc, #40]	; (800a7d8 <HAL_RCC_ClockConfig+0x368>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7f9 fdf0 	bl	8004398 <HAL_InitTick>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a7bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3718      	adds	r7, #24
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	58024400 	.word	0x58024400
 800a7cc:	08012ef8 	.word	0x08012ef8
 800a7d0:	24000018 	.word	0x24000018
 800a7d4:	24000014 	.word	0x24000014
 800a7d8:	2400001c 	.word	0x2400001c

0800a7dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b089      	sub	sp, #36	; 0x24
 800a7e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a7e2:	4bb3      	ldr	r3, [pc, #716]	; (800aab0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7e4:	691b      	ldr	r3, [r3, #16]
 800a7e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a7ea:	2b18      	cmp	r3, #24
 800a7ec:	f200 8155 	bhi.w	800aa9a <HAL_RCC_GetSysClockFreq+0x2be>
 800a7f0:	a201      	add	r2, pc, #4	; (adr r2, 800a7f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a7f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f6:	bf00      	nop
 800a7f8:	0800a85d 	.word	0x0800a85d
 800a7fc:	0800aa9b 	.word	0x0800aa9b
 800a800:	0800aa9b 	.word	0x0800aa9b
 800a804:	0800aa9b 	.word	0x0800aa9b
 800a808:	0800aa9b 	.word	0x0800aa9b
 800a80c:	0800aa9b 	.word	0x0800aa9b
 800a810:	0800aa9b 	.word	0x0800aa9b
 800a814:	0800aa9b 	.word	0x0800aa9b
 800a818:	0800a883 	.word	0x0800a883
 800a81c:	0800aa9b 	.word	0x0800aa9b
 800a820:	0800aa9b 	.word	0x0800aa9b
 800a824:	0800aa9b 	.word	0x0800aa9b
 800a828:	0800aa9b 	.word	0x0800aa9b
 800a82c:	0800aa9b 	.word	0x0800aa9b
 800a830:	0800aa9b 	.word	0x0800aa9b
 800a834:	0800aa9b 	.word	0x0800aa9b
 800a838:	0800a889 	.word	0x0800a889
 800a83c:	0800aa9b 	.word	0x0800aa9b
 800a840:	0800aa9b 	.word	0x0800aa9b
 800a844:	0800aa9b 	.word	0x0800aa9b
 800a848:	0800aa9b 	.word	0x0800aa9b
 800a84c:	0800aa9b 	.word	0x0800aa9b
 800a850:	0800aa9b 	.word	0x0800aa9b
 800a854:	0800aa9b 	.word	0x0800aa9b
 800a858:	0800a88f 	.word	0x0800a88f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a85c:	4b94      	ldr	r3, [pc, #592]	; (800aab0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f003 0320 	and.w	r3, r3, #32
 800a864:	2b00      	cmp	r3, #0
 800a866:	d009      	beq.n	800a87c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a868:	4b91      	ldr	r3, [pc, #580]	; (800aab0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	08db      	lsrs	r3, r3, #3
 800a86e:	f003 0303 	and.w	r3, r3, #3
 800a872:	4a90      	ldr	r2, [pc, #576]	; (800aab4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a874:	fa22 f303 	lsr.w	r3, r2, r3
 800a878:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a87a:	e111      	b.n	800aaa0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a87c:	4b8d      	ldr	r3, [pc, #564]	; (800aab4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a87e:	61bb      	str	r3, [r7, #24]
    break;
 800a880:	e10e      	b.n	800aaa0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a882:	4b8d      	ldr	r3, [pc, #564]	; (800aab8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a884:	61bb      	str	r3, [r7, #24]
    break;
 800a886:	e10b      	b.n	800aaa0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a888:	4b8c      	ldr	r3, [pc, #560]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a88a:	61bb      	str	r3, [r7, #24]
    break;
 800a88c:	e108      	b.n	800aaa0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a88e:	4b88      	ldr	r3, [pc, #544]	; (800aab0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a892:	f003 0303 	and.w	r3, r3, #3
 800a896:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a898:	4b85      	ldr	r3, [pc, #532]	; (800aab0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a89a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a89c:	091b      	lsrs	r3, r3, #4
 800a89e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8a2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a8a4:	4b82      	ldr	r3, [pc, #520]	; (800aab0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a8:	f003 0301 	and.w	r3, r3, #1
 800a8ac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a8ae:	4b80      	ldr	r3, [pc, #512]	; (800aab0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8b2:	08db      	lsrs	r3, r3, #3
 800a8b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	fb02 f303 	mul.w	r3, r2, r3
 800a8be:	ee07 3a90 	vmov	s15, r3
 800a8c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8c6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f000 80e1 	beq.w	800aa94 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	2b02      	cmp	r3, #2
 800a8d6:	f000 8083 	beq.w	800a9e0 <HAL_RCC_GetSysClockFreq+0x204>
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	2b02      	cmp	r3, #2
 800a8de:	f200 80a1 	bhi.w	800aa24 <HAL_RCC_GetSysClockFreq+0x248>
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d003      	beq.n	800a8f0 <HAL_RCC_GetSysClockFreq+0x114>
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d056      	beq.n	800a99c <HAL_RCC_GetSysClockFreq+0x1c0>
 800a8ee:	e099      	b.n	800aa24 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8f0:	4b6f      	ldr	r3, [pc, #444]	; (800aab0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f003 0320 	and.w	r3, r3, #32
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d02d      	beq.n	800a958 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a8fc:	4b6c      	ldr	r3, [pc, #432]	; (800aab0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	08db      	lsrs	r3, r3, #3
 800a902:	f003 0303 	and.w	r3, r3, #3
 800a906:	4a6b      	ldr	r2, [pc, #428]	; (800aab4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a908:	fa22 f303 	lsr.w	r3, r2, r3
 800a90c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	ee07 3a90 	vmov	s15, r3
 800a914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	ee07 3a90 	vmov	s15, r3
 800a91e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a926:	4b62      	ldr	r3, [pc, #392]	; (800aab0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a92a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a92e:	ee07 3a90 	vmov	s15, r3
 800a932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a936:	ed97 6a02 	vldr	s12, [r7, #8]
 800a93a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800aac0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a93e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a94a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a94e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a952:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a956:	e087      	b.n	800aa68 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	ee07 3a90 	vmov	s15, r3
 800a95e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a962:	eddf 6a58 	vldr	s13, [pc, #352]	; 800aac4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a96a:	4b51      	ldr	r3, [pc, #324]	; (800aab0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a96c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a96e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a972:	ee07 3a90 	vmov	s15, r3
 800a976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a97a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a97e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800aac0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a98a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a98e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a992:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a99a:	e065      	b.n	800aa68 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	ee07 3a90 	vmov	s15, r3
 800a9a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9a6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800aac8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a9aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9ae:	4b40      	ldr	r3, [pc, #256]	; (800aab0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9b6:	ee07 3a90 	vmov	s15, r3
 800a9ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9be:	ed97 6a02 	vldr	s12, [r7, #8]
 800a9c2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800aac0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a9c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9de:	e043      	b.n	800aa68 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	ee07 3a90 	vmov	s15, r3
 800a9e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ea:	eddf 6a38 	vldr	s13, [pc, #224]	; 800aacc <HAL_RCC_GetSysClockFreq+0x2f0>
 800a9ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9f2:	4b2f      	ldr	r3, [pc, #188]	; (800aab0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9fa:	ee07 3a90 	vmov	s15, r3
 800a9fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa02:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa06:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800aac0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa22:	e021      	b.n	800aa68 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	ee07 3a90 	vmov	s15, r3
 800aa2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa2e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800aac8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800aa32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa36:	4b1e      	ldr	r3, [pc, #120]	; (800aab0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa3e:	ee07 3a90 	vmov	s15, r3
 800aa42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa46:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa4a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800aac0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa66:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800aa68:	4b11      	ldr	r3, [pc, #68]	; (800aab0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa6c:	0a5b      	lsrs	r3, r3, #9
 800aa6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa72:	3301      	adds	r3, #1
 800aa74:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	ee07 3a90 	vmov	s15, r3
 800aa7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800aa80:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa8c:	ee17 3a90 	vmov	r3, s15
 800aa90:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800aa92:	e005      	b.n	800aaa0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800aa94:	2300      	movs	r3, #0
 800aa96:	61bb      	str	r3, [r7, #24]
    break;
 800aa98:	e002      	b.n	800aaa0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800aa9a:	4b07      	ldr	r3, [pc, #28]	; (800aab8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aa9c:	61bb      	str	r3, [r7, #24]
    break;
 800aa9e:	bf00      	nop
  }

  return sysclockfreq;
 800aaa0:	69bb      	ldr	r3, [r7, #24]
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3724      	adds	r7, #36	; 0x24
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop
 800aab0:	58024400 	.word	0x58024400
 800aab4:	03d09000 	.word	0x03d09000
 800aab8:	003d0900 	.word	0x003d0900
 800aabc:	017d7840 	.word	0x017d7840
 800aac0:	46000000 	.word	0x46000000
 800aac4:	4c742400 	.word	0x4c742400
 800aac8:	4a742400 	.word	0x4a742400
 800aacc:	4bbebc20 	.word	0x4bbebc20

0800aad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b082      	sub	sp, #8
 800aad4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800aad6:	f7ff fe81 	bl	800a7dc <HAL_RCC_GetSysClockFreq>
 800aada:	4602      	mov	r2, r0
 800aadc:	4b10      	ldr	r3, [pc, #64]	; (800ab20 <HAL_RCC_GetHCLKFreq+0x50>)
 800aade:	699b      	ldr	r3, [r3, #24]
 800aae0:	0a1b      	lsrs	r3, r3, #8
 800aae2:	f003 030f 	and.w	r3, r3, #15
 800aae6:	490f      	ldr	r1, [pc, #60]	; (800ab24 <HAL_RCC_GetHCLKFreq+0x54>)
 800aae8:	5ccb      	ldrb	r3, [r1, r3]
 800aaea:	f003 031f 	and.w	r3, r3, #31
 800aaee:	fa22 f303 	lsr.w	r3, r2, r3
 800aaf2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aaf4:	4b0a      	ldr	r3, [pc, #40]	; (800ab20 <HAL_RCC_GetHCLKFreq+0x50>)
 800aaf6:	699b      	ldr	r3, [r3, #24]
 800aaf8:	f003 030f 	and.w	r3, r3, #15
 800aafc:	4a09      	ldr	r2, [pc, #36]	; (800ab24 <HAL_RCC_GetHCLKFreq+0x54>)
 800aafe:	5cd3      	ldrb	r3, [r2, r3]
 800ab00:	f003 031f 	and.w	r3, r3, #31
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	fa22 f303 	lsr.w	r3, r2, r3
 800ab0a:	4a07      	ldr	r2, [pc, #28]	; (800ab28 <HAL_RCC_GetHCLKFreq+0x58>)
 800ab0c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ab0e:	4a07      	ldr	r2, [pc, #28]	; (800ab2c <HAL_RCC_GetHCLKFreq+0x5c>)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ab14:	4b04      	ldr	r3, [pc, #16]	; (800ab28 <HAL_RCC_GetHCLKFreq+0x58>)
 800ab16:	681b      	ldr	r3, [r3, #0]
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3708      	adds	r7, #8
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}
 800ab20:	58024400 	.word	0x58024400
 800ab24:	08012ef8 	.word	0x08012ef8
 800ab28:	24000018 	.word	0x24000018
 800ab2c:	24000014 	.word	0x24000014

0800ab30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ab34:	f7ff ffcc 	bl	800aad0 <HAL_RCC_GetHCLKFreq>
 800ab38:	4602      	mov	r2, r0
 800ab3a:	4b06      	ldr	r3, [pc, #24]	; (800ab54 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ab3c:	69db      	ldr	r3, [r3, #28]
 800ab3e:	091b      	lsrs	r3, r3, #4
 800ab40:	f003 0307 	and.w	r3, r3, #7
 800ab44:	4904      	ldr	r1, [pc, #16]	; (800ab58 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ab46:	5ccb      	ldrb	r3, [r1, r3]
 800ab48:	f003 031f 	and.w	r3, r3, #31
 800ab4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	bd80      	pop	{r7, pc}
 800ab54:	58024400 	.word	0x58024400
 800ab58:	08012ef8 	.word	0x08012ef8

0800ab5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ab60:	f7ff ffb6 	bl	800aad0 <HAL_RCC_GetHCLKFreq>
 800ab64:	4602      	mov	r2, r0
 800ab66:	4b06      	ldr	r3, [pc, #24]	; (800ab80 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ab68:	69db      	ldr	r3, [r3, #28]
 800ab6a:	0a1b      	lsrs	r3, r3, #8
 800ab6c:	f003 0307 	and.w	r3, r3, #7
 800ab70:	4904      	ldr	r1, [pc, #16]	; (800ab84 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ab72:	5ccb      	ldrb	r3, [r1, r3]
 800ab74:	f003 031f 	and.w	r3, r3, #31
 800ab78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	58024400 	.word	0x58024400
 800ab84:	08012ef8 	.word	0x08012ef8

0800ab88 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b086      	sub	sp, #24
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ab90:	2300      	movs	r3, #0
 800ab92:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ab94:	2300      	movs	r3, #0
 800ab96:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d03f      	beq.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aba8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800abac:	d02a      	beq.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800abae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800abb2:	d824      	bhi.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x76>
 800abb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800abb8:	d018      	beq.n	800abec <HAL_RCCEx_PeriphCLKConfig+0x64>
 800abba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800abbe:	d81e      	bhi.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x76>
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d003      	beq.n	800abcc <HAL_RCCEx_PeriphCLKConfig+0x44>
 800abc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abc8:	d007      	beq.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x52>
 800abca:	e018      	b.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abcc:	4bab      	ldr	r3, [pc, #684]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800abce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd0:	4aaa      	ldr	r2, [pc, #680]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800abd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800abd8:	e015      	b.n	800ac06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	3304      	adds	r3, #4
 800abde:	2102      	movs	r1, #2
 800abe0:	4618      	mov	r0, r3
 800abe2:	f001 f9cf 	bl	800bf84 <RCCEx_PLL2_Config>
 800abe6:	4603      	mov	r3, r0
 800abe8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800abea:	e00c      	b.n	800ac06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	3324      	adds	r3, #36	; 0x24
 800abf0:	2102      	movs	r1, #2
 800abf2:	4618      	mov	r0, r3
 800abf4:	f001 fa78 	bl	800c0e8 <RCCEx_PLL3_Config>
 800abf8:	4603      	mov	r3, r0
 800abfa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800abfc:	e003      	b.n	800ac06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800abfe:	2301      	movs	r3, #1
 800ac00:	75fb      	strb	r3, [r7, #23]
      break;
 800ac02:	e000      	b.n	800ac06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800ac04:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac06:	7dfb      	ldrb	r3, [r7, #23]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d109      	bne.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ac0c:	4b9b      	ldr	r3, [pc, #620]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac18:	4998      	ldr	r1, [pc, #608]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	650b      	str	r3, [r1, #80]	; 0x50
 800ac1e:	e001      	b.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac20:	7dfb      	ldrb	r3, [r7, #23]
 800ac22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d03d      	beq.n	800acac <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac34:	2b04      	cmp	r3, #4
 800ac36:	d826      	bhi.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800ac38:	a201      	add	r2, pc, #4	; (adr r2, 800ac40 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800ac3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac3e:	bf00      	nop
 800ac40:	0800ac55 	.word	0x0800ac55
 800ac44:	0800ac63 	.word	0x0800ac63
 800ac48:	0800ac75 	.word	0x0800ac75
 800ac4c:	0800ac8d 	.word	0x0800ac8d
 800ac50:	0800ac8d 	.word	0x0800ac8d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac54:	4b89      	ldr	r3, [pc, #548]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac58:	4a88      	ldr	r2, [pc, #544]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ac60:	e015      	b.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	3304      	adds	r3, #4
 800ac66:	2100      	movs	r1, #0
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f001 f98b 	bl	800bf84 <RCCEx_PLL2_Config>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ac72:	e00c      	b.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	3324      	adds	r3, #36	; 0x24
 800ac78:	2100      	movs	r1, #0
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f001 fa34 	bl	800c0e8 <RCCEx_PLL3_Config>
 800ac80:	4603      	mov	r3, r0
 800ac82:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ac84:	e003      	b.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	75fb      	strb	r3, [r7, #23]
      break;
 800ac8a:	e000      	b.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800ac8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac8e:	7dfb      	ldrb	r3, [r7, #23]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d109      	bne.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ac94:	4b79      	ldr	r3, [pc, #484]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac98:	f023 0207 	bic.w	r2, r3, #7
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aca0:	4976      	ldr	r1, [pc, #472]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aca2:	4313      	orrs	r3, r2
 800aca4:	650b      	str	r3, [r1, #80]	; 0x50
 800aca6:	e001      	b.n	800acac <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aca8:	7dfb      	ldrb	r3, [r7, #23]
 800acaa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d042      	beq.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acc0:	d02b      	beq.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x192>
 800acc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acc6:	d825      	bhi.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800acc8:	2bc0      	cmp	r3, #192	; 0xc0
 800acca:	d028      	beq.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800accc:	2bc0      	cmp	r3, #192	; 0xc0
 800acce:	d821      	bhi.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800acd0:	2b80      	cmp	r3, #128	; 0x80
 800acd2:	d016      	beq.n	800ad02 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800acd4:	2b80      	cmp	r3, #128	; 0x80
 800acd6:	d81d      	bhi.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d002      	beq.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800acdc:	2b40      	cmp	r3, #64	; 0x40
 800acde:	d007      	beq.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800ace0:	e018      	b.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ace2:	4b66      	ldr	r3, [pc, #408]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ace4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace6:	4a65      	ldr	r2, [pc, #404]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ace8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800acee:	e017      	b.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	3304      	adds	r3, #4
 800acf4:	2100      	movs	r1, #0
 800acf6:	4618      	mov	r0, r3
 800acf8:	f001 f944 	bl	800bf84 <RCCEx_PLL2_Config>
 800acfc:	4603      	mov	r3, r0
 800acfe:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800ad00:	e00e      	b.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	3324      	adds	r3, #36	; 0x24
 800ad06:	2100      	movs	r1, #0
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f001 f9ed 	bl	800c0e8 <RCCEx_PLL3_Config>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800ad12:	e005      	b.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad14:	2301      	movs	r3, #1
 800ad16:	75fb      	strb	r3, [r7, #23]
      break;
 800ad18:	e002      	b.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800ad1a:	bf00      	nop
 800ad1c:	e000      	b.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800ad1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad20:	7dfb      	ldrb	r3, [r7, #23]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d109      	bne.n	800ad3a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ad26:	4b55      	ldr	r3, [pc, #340]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad2a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad32:	4952      	ldr	r1, [pc, #328]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad34:	4313      	orrs	r3, r2
 800ad36:	650b      	str	r3, [r1, #80]	; 0x50
 800ad38:	e001      	b.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad3a:	7dfb      	ldrb	r3, [r7, #23]
 800ad3c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d049      	beq.n	800adde <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ad50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ad54:	d030      	beq.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800ad56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ad5a:	d82a      	bhi.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ad5c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ad60:	d02c      	beq.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x234>
 800ad62:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ad66:	d824      	bhi.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ad68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad6c:	d018      	beq.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800ad6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad72:	d81e      	bhi.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d003      	beq.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800ad78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad7c:	d007      	beq.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800ad7e:	e018      	b.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad80:	4b3e      	ldr	r3, [pc, #248]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad84:	4a3d      	ldr	r2, [pc, #244]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ad8c:	e017      	b.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	3304      	adds	r3, #4
 800ad92:	2100      	movs	r1, #0
 800ad94:	4618      	mov	r0, r3
 800ad96:	f001 f8f5 	bl	800bf84 <RCCEx_PLL2_Config>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800ad9e:	e00e      	b.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	3324      	adds	r3, #36	; 0x24
 800ada4:	2100      	movs	r1, #0
 800ada6:	4618      	mov	r0, r3
 800ada8:	f001 f99e 	bl	800c0e8 <RCCEx_PLL3_Config>
 800adac:	4603      	mov	r3, r0
 800adae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800adb0:	e005      	b.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800adb2:	2301      	movs	r3, #1
 800adb4:	75fb      	strb	r3, [r7, #23]
      break;
 800adb6:	e002      	b.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800adb8:	bf00      	nop
 800adba:	e000      	b.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800adbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800adbe:	7dfb      	ldrb	r3, [r7, #23]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d10a      	bne.n	800adda <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800adc4:	4b2d      	ldr	r3, [pc, #180]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800adc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adc8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800add2:	492a      	ldr	r1, [pc, #168]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800add4:	4313      	orrs	r3, r2
 800add6:	658b      	str	r3, [r1, #88]	; 0x58
 800add8:	e001      	b.n	800adde <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adda:	7dfb      	ldrb	r3, [r7, #23]
 800addc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d04c      	beq.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800adf0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800adf4:	d030      	beq.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800adf6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800adfa:	d82a      	bhi.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800adfc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ae00:	d02c      	beq.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800ae02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ae06:	d824      	bhi.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ae08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae0c:	d018      	beq.n	800ae40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800ae0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae12:	d81e      	bhi.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d003      	beq.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800ae18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ae1c:	d007      	beq.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800ae1e:	e018      	b.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae20:	4b16      	ldr	r3, [pc, #88]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae24:	4a15      	ldr	r2, [pc, #84]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ae2c:	e017      	b.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	3304      	adds	r3, #4
 800ae32:	2100      	movs	r1, #0
 800ae34:	4618      	mov	r0, r3
 800ae36:	f001 f8a5 	bl	800bf84 <RCCEx_PLL2_Config>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800ae3e:	e00e      	b.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	3324      	adds	r3, #36	; 0x24
 800ae44:	2100      	movs	r1, #0
 800ae46:	4618      	mov	r0, r3
 800ae48:	f001 f94e 	bl	800c0e8 <RCCEx_PLL3_Config>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ae50:	e005      	b.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800ae52:	2301      	movs	r3, #1
 800ae54:	75fb      	strb	r3, [r7, #23]
      break;
 800ae56:	e002      	b.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800ae58:	bf00      	nop
 800ae5a:	e000      	b.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800ae5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae5e:	7dfb      	ldrb	r3, [r7, #23]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d10d      	bne.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ae64:	4b05      	ldr	r3, [pc, #20]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae68:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ae72:	4902      	ldr	r1, [pc, #8]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae74:	4313      	orrs	r3, r2
 800ae76:	658b      	str	r3, [r1, #88]	; 0x58
 800ae78:	e004      	b.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800ae7a:	bf00      	nop
 800ae7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae80:	7dfb      	ldrb	r3, [r7, #23]
 800ae82:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d032      	beq.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae94:	2b30      	cmp	r3, #48	; 0x30
 800ae96:	d01c      	beq.n	800aed2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ae98:	2b30      	cmp	r3, #48	; 0x30
 800ae9a:	d817      	bhi.n	800aecc <HAL_RCCEx_PeriphCLKConfig+0x344>
 800ae9c:	2b20      	cmp	r3, #32
 800ae9e:	d00c      	beq.n	800aeba <HAL_RCCEx_PeriphCLKConfig+0x332>
 800aea0:	2b20      	cmp	r3, #32
 800aea2:	d813      	bhi.n	800aecc <HAL_RCCEx_PeriphCLKConfig+0x344>
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d016      	beq.n	800aed6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800aea8:	2b10      	cmp	r3, #16
 800aeaa:	d10f      	bne.n	800aecc <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aeac:	4baf      	ldr	r3, [pc, #700]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800aeae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeb0:	4aae      	ldr	r2, [pc, #696]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800aeb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aeb6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800aeb8:	e00e      	b.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	3304      	adds	r3, #4
 800aebe:	2102      	movs	r1, #2
 800aec0:	4618      	mov	r0, r3
 800aec2:	f001 f85f 	bl	800bf84 <RCCEx_PLL2_Config>
 800aec6:	4603      	mov	r3, r0
 800aec8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800aeca:	e005      	b.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	75fb      	strb	r3, [r7, #23]
      break;
 800aed0:	e002      	b.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800aed2:	bf00      	nop
 800aed4:	e000      	b.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800aed6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aed8:	7dfb      	ldrb	r3, [r7, #23]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d109      	bne.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800aede:	4ba3      	ldr	r3, [pc, #652]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800aee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aee2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aeea:	49a0      	ldr	r1, [pc, #640]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800aeec:	4313      	orrs	r3, r2
 800aeee:	64cb      	str	r3, [r1, #76]	; 0x4c
 800aef0:	e001      	b.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aef2:	7dfb      	ldrb	r3, [r7, #23]
 800aef4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d047      	beq.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af0a:	d030      	beq.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800af0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af10:	d82a      	bhi.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800af12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800af16:	d02c      	beq.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800af18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800af1c:	d824      	bhi.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800af1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af22:	d018      	beq.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800af24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af28:	d81e      	bhi.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d003      	beq.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800af2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af32:	d007      	beq.n	800af44 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800af34:	e018      	b.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af36:	4b8d      	ldr	r3, [pc, #564]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800af38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3a:	4a8c      	ldr	r2, [pc, #560]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800af3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800af42:	e017      	b.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	3304      	adds	r3, #4
 800af48:	2100      	movs	r1, #0
 800af4a:	4618      	mov	r0, r3
 800af4c:	f001 f81a 	bl	800bf84 <RCCEx_PLL2_Config>
 800af50:	4603      	mov	r3, r0
 800af52:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800af54:	e00e      	b.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	3324      	adds	r3, #36	; 0x24
 800af5a:	2100      	movs	r1, #0
 800af5c:	4618      	mov	r0, r3
 800af5e:	f001 f8c3 	bl	800c0e8 <RCCEx_PLL3_Config>
 800af62:	4603      	mov	r3, r0
 800af64:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800af66:	e005      	b.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af68:	2301      	movs	r3, #1
 800af6a:	75fb      	strb	r3, [r7, #23]
      break;
 800af6c:	e002      	b.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800af6e:	bf00      	nop
 800af70:	e000      	b.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800af72:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af74:	7dfb      	ldrb	r3, [r7, #23]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d109      	bne.n	800af8e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800af7a:	4b7c      	ldr	r3, [pc, #496]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800af7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af7e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af86:	4979      	ldr	r1, [pc, #484]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800af88:	4313      	orrs	r3, r2
 800af8a:	650b      	str	r3, [r1, #80]	; 0x50
 800af8c:	e001      	b.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af8e:	7dfb      	ldrb	r3, [r7, #23]
 800af90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d049      	beq.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afa2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800afa6:	d02e      	beq.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800afa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800afac:	d828      	bhi.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800afae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800afb2:	d02a      	beq.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0x482>
 800afb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800afb8:	d822      	bhi.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800afba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800afbe:	d026      	beq.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x486>
 800afc0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800afc4:	d81c      	bhi.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800afc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afca:	d010      	beq.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x466>
 800afcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afd0:	d816      	bhi.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d01d      	beq.n	800b012 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800afd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afda:	d111      	bne.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	3304      	adds	r3, #4
 800afe0:	2101      	movs	r1, #1
 800afe2:	4618      	mov	r0, r3
 800afe4:	f000 ffce 	bl	800bf84 <RCCEx_PLL2_Config>
 800afe8:	4603      	mov	r3, r0
 800afea:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800afec:	e012      	b.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	3324      	adds	r3, #36	; 0x24
 800aff2:	2101      	movs	r1, #1
 800aff4:	4618      	mov	r0, r3
 800aff6:	f001 f877 	bl	800c0e8 <RCCEx_PLL3_Config>
 800affa:	4603      	mov	r3, r0
 800affc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800affe:	e009      	b.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b000:	2301      	movs	r3, #1
 800b002:	75fb      	strb	r3, [r7, #23]
      break;
 800b004:	e006      	b.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b006:	bf00      	nop
 800b008:	e004      	b.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b00a:	bf00      	nop
 800b00c:	e002      	b.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b00e:	bf00      	nop
 800b010:	e000      	b.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b012:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b014:	7dfb      	ldrb	r3, [r7, #23]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d109      	bne.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b01a:	4b54      	ldr	r3, [pc, #336]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b01c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b01e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b026:	4951      	ldr	r1, [pc, #324]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b028:	4313      	orrs	r3, r2
 800b02a:	650b      	str	r3, [r1, #80]	; 0x50
 800b02c:	e001      	b.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b02e:	7dfb      	ldrb	r3, [r7, #23]
 800b030:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d04b      	beq.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b044:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b048:	d02e      	beq.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800b04a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b04e:	d828      	bhi.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b054:	d02a      	beq.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x524>
 800b056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b05a:	d822      	bhi.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b05c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b060:	d026      	beq.n	800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800b062:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b066:	d81c      	bhi.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b068:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b06c:	d010      	beq.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800b06e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b072:	d816      	bhi.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b074:	2b00      	cmp	r3, #0
 800b076:	d01d      	beq.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800b078:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b07c:	d111      	bne.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	3304      	adds	r3, #4
 800b082:	2101      	movs	r1, #1
 800b084:	4618      	mov	r0, r3
 800b086:	f000 ff7d 	bl	800bf84 <RCCEx_PLL2_Config>
 800b08a:	4603      	mov	r3, r0
 800b08c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b08e:	e012      	b.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	3324      	adds	r3, #36	; 0x24
 800b094:	2101      	movs	r1, #1
 800b096:	4618      	mov	r0, r3
 800b098:	f001 f826 	bl	800c0e8 <RCCEx_PLL3_Config>
 800b09c:	4603      	mov	r3, r0
 800b09e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b0a0:	e009      	b.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	75fb      	strb	r3, [r7, #23]
      break;
 800b0a6:	e006      	b.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b0a8:	bf00      	nop
 800b0aa:	e004      	b.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b0ac:	bf00      	nop
 800b0ae:	e002      	b.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b0b0:	bf00      	nop
 800b0b2:	e000      	b.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b0b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0b6:	7dfb      	ldrb	r3, [r7, #23]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d10a      	bne.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b0bc:	4b2b      	ldr	r3, [pc, #172]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b0be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0c0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b0ca:	4928      	ldr	r1, [pc, #160]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	658b      	str	r3, [r1, #88]	; 0x58
 800b0d0:	e001      	b.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0d2:	7dfb      	ldrb	r3, [r7, #23]
 800b0d4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d02f      	beq.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0ea:	d00e      	beq.n	800b10a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b0ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0f0:	d814      	bhi.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x594>
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d015      	beq.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b0f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0fa:	d10f      	bne.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0fc:	4b1b      	ldr	r3, [pc, #108]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b100:	4a1a      	ldr	r2, [pc, #104]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b102:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b106:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b108:	e00c      	b.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	3304      	adds	r3, #4
 800b10e:	2101      	movs	r1, #1
 800b110:	4618      	mov	r0, r3
 800b112:	f000 ff37 	bl	800bf84 <RCCEx_PLL2_Config>
 800b116:	4603      	mov	r3, r0
 800b118:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b11a:	e003      	b.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b11c:	2301      	movs	r3, #1
 800b11e:	75fb      	strb	r3, [r7, #23]
      break;
 800b120:	e000      	b.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800b122:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b124:	7dfb      	ldrb	r3, [r7, #23]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d109      	bne.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b12a:	4b10      	ldr	r3, [pc, #64]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b12c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b12e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b136:	490d      	ldr	r1, [pc, #52]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b138:	4313      	orrs	r3, r2
 800b13a:	650b      	str	r3, [r1, #80]	; 0x50
 800b13c:	e001      	b.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b13e:	7dfb      	ldrb	r3, [r7, #23]
 800b140:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d033      	beq.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b152:	2b03      	cmp	r3, #3
 800b154:	d81c      	bhi.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800b156:	a201      	add	r2, pc, #4	; (adr r2, 800b15c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800b158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b15c:	0800b197 	.word	0x0800b197
 800b160:	0800b171 	.word	0x0800b171
 800b164:	0800b17f 	.word	0x0800b17f
 800b168:	0800b197 	.word	0x0800b197
 800b16c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b170:	4bb8      	ldr	r3, [pc, #736]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b174:	4ab7      	ldr	r2, [pc, #732]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b17a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b17c:	e00c      	b.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	3304      	adds	r3, #4
 800b182:	2102      	movs	r1, #2
 800b184:	4618      	mov	r0, r3
 800b186:	f000 fefd 	bl	800bf84 <RCCEx_PLL2_Config>
 800b18a:	4603      	mov	r3, r0
 800b18c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b18e:	e003      	b.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b190:	2301      	movs	r3, #1
 800b192:	75fb      	strb	r3, [r7, #23]
      break;
 800b194:	e000      	b.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800b196:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b198:	7dfb      	ldrb	r3, [r7, #23]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d109      	bne.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b19e:	4bad      	ldr	r3, [pc, #692]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b1a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1a2:	f023 0203 	bic.w	r2, r3, #3
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1aa:	49aa      	ldr	r1, [pc, #680]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b1b0:	e001      	b.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1b2:	7dfb      	ldrb	r3, [r7, #23]
 800b1b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	f000 8086 	beq.w	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b1c4:	4ba4      	ldr	r3, [pc, #656]	; (800b458 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4aa3      	ldr	r2, [pc, #652]	; (800b458 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b1ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b1d0:	f7f9 f92c 	bl	800442c <HAL_GetTick>
 800b1d4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b1d6:	e009      	b.n	800b1ec <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b1d8:	f7f9 f928 	bl	800442c <HAL_GetTick>
 800b1dc:	4602      	mov	r2, r0
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	1ad3      	subs	r3, r2, r3
 800b1e2:	2b64      	cmp	r3, #100	; 0x64
 800b1e4:	d902      	bls.n	800b1ec <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800b1e6:	2303      	movs	r3, #3
 800b1e8:	75fb      	strb	r3, [r7, #23]
        break;
 800b1ea:	e005      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b1ec:	4b9a      	ldr	r3, [pc, #616]	; (800b458 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d0ef      	beq.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800b1f8:	7dfb      	ldrb	r3, [r7, #23]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d166      	bne.n	800b2cc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b1fe:	4b95      	ldr	r3, [pc, #596]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b200:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b208:	4053      	eors	r3, r2
 800b20a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d013      	beq.n	800b23a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b212:	4b90      	ldr	r3, [pc, #576]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b21a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b21c:	4b8d      	ldr	r3, [pc, #564]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b21e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b220:	4a8c      	ldr	r2, [pc, #560]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b226:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b228:	4b8a      	ldr	r3, [pc, #552]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b22a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b22c:	4a89      	ldr	r2, [pc, #548]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b22e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b232:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b234:	4a87      	ldr	r2, [pc, #540]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b244:	d115      	bne.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b246:	f7f9 f8f1 	bl	800442c <HAL_GetTick>
 800b24a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b24c:	e00b      	b.n	800b266 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b24e:	f7f9 f8ed 	bl	800442c <HAL_GetTick>
 800b252:	4602      	mov	r2, r0
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	1ad3      	subs	r3, r2, r3
 800b258:	f241 3288 	movw	r2, #5000	; 0x1388
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d902      	bls.n	800b266 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800b260:	2303      	movs	r3, #3
 800b262:	75fb      	strb	r3, [r7, #23]
            break;
 800b264:	e005      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b266:	4b7b      	ldr	r3, [pc, #492]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b26a:	f003 0302 	and.w	r3, r3, #2
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d0ed      	beq.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800b272:	7dfb      	ldrb	r3, [r7, #23]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d126      	bne.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b27e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b282:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b286:	d10d      	bne.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800b288:	4b72      	ldr	r3, [pc, #456]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b28a:	691b      	ldr	r3, [r3, #16]
 800b28c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b296:	0919      	lsrs	r1, r3, #4
 800b298:	4b70      	ldr	r3, [pc, #448]	; (800b45c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800b29a:	400b      	ands	r3, r1
 800b29c:	496d      	ldr	r1, [pc, #436]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	610b      	str	r3, [r1, #16]
 800b2a2:	e005      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800b2a4:	4b6b      	ldr	r3, [pc, #428]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b2a6:	691b      	ldr	r3, [r3, #16]
 800b2a8:	4a6a      	ldr	r2, [pc, #424]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b2aa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b2ae:	6113      	str	r3, [r2, #16]
 800b2b0:	4b68      	ldr	r3, [pc, #416]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b2b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b2ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2be:	4965      	ldr	r1, [pc, #404]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b2c0:	4313      	orrs	r3, r2
 800b2c2:	670b      	str	r3, [r1, #112]	; 0x70
 800b2c4:	e004      	b.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b2c6:	7dfb      	ldrb	r3, [r7, #23]
 800b2c8:	75bb      	strb	r3, [r7, #22]
 800b2ca:	e001      	b.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2cc:	7dfb      	ldrb	r3, [r7, #23]
 800b2ce:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f003 0301 	and.w	r3, r3, #1
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d07e      	beq.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2e0:	2b28      	cmp	r3, #40	; 0x28
 800b2e2:	d867      	bhi.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800b2e4:	a201      	add	r2, pc, #4	; (adr r2, 800b2ec <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800b2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ea:	bf00      	nop
 800b2ec:	0800b3bb 	.word	0x0800b3bb
 800b2f0:	0800b3b5 	.word	0x0800b3b5
 800b2f4:	0800b3b5 	.word	0x0800b3b5
 800b2f8:	0800b3b5 	.word	0x0800b3b5
 800b2fc:	0800b3b5 	.word	0x0800b3b5
 800b300:	0800b3b5 	.word	0x0800b3b5
 800b304:	0800b3b5 	.word	0x0800b3b5
 800b308:	0800b3b5 	.word	0x0800b3b5
 800b30c:	0800b391 	.word	0x0800b391
 800b310:	0800b3b5 	.word	0x0800b3b5
 800b314:	0800b3b5 	.word	0x0800b3b5
 800b318:	0800b3b5 	.word	0x0800b3b5
 800b31c:	0800b3b5 	.word	0x0800b3b5
 800b320:	0800b3b5 	.word	0x0800b3b5
 800b324:	0800b3b5 	.word	0x0800b3b5
 800b328:	0800b3b5 	.word	0x0800b3b5
 800b32c:	0800b3a3 	.word	0x0800b3a3
 800b330:	0800b3b5 	.word	0x0800b3b5
 800b334:	0800b3b5 	.word	0x0800b3b5
 800b338:	0800b3b5 	.word	0x0800b3b5
 800b33c:	0800b3b5 	.word	0x0800b3b5
 800b340:	0800b3b5 	.word	0x0800b3b5
 800b344:	0800b3b5 	.word	0x0800b3b5
 800b348:	0800b3b5 	.word	0x0800b3b5
 800b34c:	0800b3bb 	.word	0x0800b3bb
 800b350:	0800b3b5 	.word	0x0800b3b5
 800b354:	0800b3b5 	.word	0x0800b3b5
 800b358:	0800b3b5 	.word	0x0800b3b5
 800b35c:	0800b3b5 	.word	0x0800b3b5
 800b360:	0800b3b5 	.word	0x0800b3b5
 800b364:	0800b3b5 	.word	0x0800b3b5
 800b368:	0800b3b5 	.word	0x0800b3b5
 800b36c:	0800b3bb 	.word	0x0800b3bb
 800b370:	0800b3b5 	.word	0x0800b3b5
 800b374:	0800b3b5 	.word	0x0800b3b5
 800b378:	0800b3b5 	.word	0x0800b3b5
 800b37c:	0800b3b5 	.word	0x0800b3b5
 800b380:	0800b3b5 	.word	0x0800b3b5
 800b384:	0800b3b5 	.word	0x0800b3b5
 800b388:	0800b3b5 	.word	0x0800b3b5
 800b38c:	0800b3bb 	.word	0x0800b3bb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	3304      	adds	r3, #4
 800b394:	2101      	movs	r1, #1
 800b396:	4618      	mov	r0, r3
 800b398:	f000 fdf4 	bl	800bf84 <RCCEx_PLL2_Config>
 800b39c:	4603      	mov	r3, r0
 800b39e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b3a0:	e00c      	b.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	3324      	adds	r3, #36	; 0x24
 800b3a6:	2101      	movs	r1, #1
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f000 fe9d 	bl	800c0e8 <RCCEx_PLL3_Config>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b3b2:	e003      	b.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	75fb      	strb	r3, [r7, #23]
      break;
 800b3b8:	e000      	b.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800b3ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b3bc:	7dfb      	ldrb	r3, [r7, #23]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d109      	bne.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b3c2:	4b24      	ldr	r3, [pc, #144]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b3c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3c6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3ce:	4921      	ldr	r1, [pc, #132]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	654b      	str	r3, [r1, #84]	; 0x54
 800b3d4:	e001      	b.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3d6:	7dfb      	ldrb	r3, [r7, #23]
 800b3d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f003 0302 	and.w	r3, r3, #2
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d03e      	beq.n	800b464 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3ea:	2b05      	cmp	r3, #5
 800b3ec:	d820      	bhi.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800b3ee:	a201      	add	r2, pc, #4	; (adr r2, 800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800b3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f4:	0800b437 	.word	0x0800b437
 800b3f8:	0800b40d 	.word	0x0800b40d
 800b3fc:	0800b41f 	.word	0x0800b41f
 800b400:	0800b437 	.word	0x0800b437
 800b404:	0800b437 	.word	0x0800b437
 800b408:	0800b437 	.word	0x0800b437
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	3304      	adds	r3, #4
 800b410:	2101      	movs	r1, #1
 800b412:	4618      	mov	r0, r3
 800b414:	f000 fdb6 	bl	800bf84 <RCCEx_PLL2_Config>
 800b418:	4603      	mov	r3, r0
 800b41a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b41c:	e00c      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	3324      	adds	r3, #36	; 0x24
 800b422:	2101      	movs	r1, #1
 800b424:	4618      	mov	r0, r3
 800b426:	f000 fe5f 	bl	800c0e8 <RCCEx_PLL3_Config>
 800b42a:	4603      	mov	r3, r0
 800b42c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b42e:	e003      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b430:	2301      	movs	r3, #1
 800b432:	75fb      	strb	r3, [r7, #23]
      break;
 800b434:	e000      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800b436:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b438:	7dfb      	ldrb	r3, [r7, #23]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d110      	bne.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b43e:	4b05      	ldr	r3, [pc, #20]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b442:	f023 0207 	bic.w	r2, r3, #7
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b44a:	4902      	ldr	r1, [pc, #8]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b44c:	4313      	orrs	r3, r2
 800b44e:	654b      	str	r3, [r1, #84]	; 0x54
 800b450:	e008      	b.n	800b464 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800b452:	bf00      	nop
 800b454:	58024400 	.word	0x58024400
 800b458:	58024800 	.word	0x58024800
 800b45c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b460:	7dfb      	ldrb	r3, [r7, #23]
 800b462:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f003 0304 	and.w	r3, r3, #4
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d039      	beq.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b476:	2b05      	cmp	r3, #5
 800b478:	d820      	bhi.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0x934>
 800b47a:	a201      	add	r2, pc, #4	; (adr r2, 800b480 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800b47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b480:	0800b4c3 	.word	0x0800b4c3
 800b484:	0800b499 	.word	0x0800b499
 800b488:	0800b4ab 	.word	0x0800b4ab
 800b48c:	0800b4c3 	.word	0x0800b4c3
 800b490:	0800b4c3 	.word	0x0800b4c3
 800b494:	0800b4c3 	.word	0x0800b4c3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	3304      	adds	r3, #4
 800b49c:	2101      	movs	r1, #1
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f000 fd70 	bl	800bf84 <RCCEx_PLL2_Config>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b4a8:	e00c      	b.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	3324      	adds	r3, #36	; 0x24
 800b4ae:	2101      	movs	r1, #1
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f000 fe19 	bl	800c0e8 <RCCEx_PLL3_Config>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b4ba:	e003      	b.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	75fb      	strb	r3, [r7, #23]
      break;
 800b4c0:	e000      	b.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800b4c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b4c4:	7dfb      	ldrb	r3, [r7, #23]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d10a      	bne.n	800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b4ca:	4bb7      	ldr	r3, [pc, #732]	; (800b7a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b4cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4ce:	f023 0207 	bic.w	r2, r3, #7
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4d8:	49b3      	ldr	r1, [pc, #716]	; (800b7a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	658b      	str	r3, [r1, #88]	; 0x58
 800b4de:	e001      	b.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4e0:	7dfb      	ldrb	r3, [r7, #23]
 800b4e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f003 0320 	and.w	r3, r3, #32
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d04b      	beq.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b4f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b4fa:	d02e      	beq.n	800b55a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800b4fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b500:	d828      	bhi.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b506:	d02a      	beq.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800b508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b50c:	d822      	bhi.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b50e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b512:	d026      	beq.n	800b562 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800b514:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b518:	d81c      	bhi.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b51a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b51e:	d010      	beq.n	800b542 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800b520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b524:	d816      	bhi.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b526:	2b00      	cmp	r3, #0
 800b528:	d01d      	beq.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800b52a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b52e:	d111      	bne.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	3304      	adds	r3, #4
 800b534:	2100      	movs	r1, #0
 800b536:	4618      	mov	r0, r3
 800b538:	f000 fd24 	bl	800bf84 <RCCEx_PLL2_Config>
 800b53c:	4603      	mov	r3, r0
 800b53e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b540:	e012      	b.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	3324      	adds	r3, #36	; 0x24
 800b546:	2102      	movs	r1, #2
 800b548:	4618      	mov	r0, r3
 800b54a:	f000 fdcd 	bl	800c0e8 <RCCEx_PLL3_Config>
 800b54e:	4603      	mov	r3, r0
 800b550:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b552:	e009      	b.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b554:	2301      	movs	r3, #1
 800b556:	75fb      	strb	r3, [r7, #23]
      break;
 800b558:	e006      	b.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b55a:	bf00      	nop
 800b55c:	e004      	b.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b55e:	bf00      	nop
 800b560:	e002      	b.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b562:	bf00      	nop
 800b564:	e000      	b.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b566:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b568:	7dfb      	ldrb	r3, [r7, #23]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d10a      	bne.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b56e:	4b8e      	ldr	r3, [pc, #568]	; (800b7a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b572:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b57c:	498a      	ldr	r1, [pc, #552]	; (800b7a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b57e:	4313      	orrs	r3, r2
 800b580:	654b      	str	r3, [r1, #84]	; 0x54
 800b582:	e001      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b584:	7dfb      	ldrb	r3, [r7, #23]
 800b586:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b590:	2b00      	cmp	r3, #0
 800b592:	d04b      	beq.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b59a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b59e:	d02e      	beq.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800b5a0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b5a4:	d828      	bhi.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b5a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5aa:	d02a      	beq.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800b5ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5b0:	d822      	bhi.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b5b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b5b6:	d026      	beq.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b5b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b5bc:	d81c      	bhi.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b5be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5c2:	d010      	beq.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800b5c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5c8:	d816      	bhi.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d01d      	beq.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800b5ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5d2:	d111      	bne.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	3304      	adds	r3, #4
 800b5d8:	2100      	movs	r1, #0
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f000 fcd2 	bl	800bf84 <RCCEx_PLL2_Config>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b5e4:	e012      	b.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	3324      	adds	r3, #36	; 0x24
 800b5ea:	2102      	movs	r1, #2
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f000 fd7b 	bl	800c0e8 <RCCEx_PLL3_Config>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b5f6:	e009      	b.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	75fb      	strb	r3, [r7, #23]
      break;
 800b5fc:	e006      	b.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b5fe:	bf00      	nop
 800b600:	e004      	b.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b602:	bf00      	nop
 800b604:	e002      	b.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b606:	bf00      	nop
 800b608:	e000      	b.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b60a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b60c:	7dfb      	ldrb	r3, [r7, #23]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d10a      	bne.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b612:	4b65      	ldr	r3, [pc, #404]	; (800b7a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b616:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b620:	4961      	ldr	r1, [pc, #388]	; (800b7a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b622:	4313      	orrs	r3, r2
 800b624:	658b      	str	r3, [r1, #88]	; 0x58
 800b626:	e001      	b.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b628:	7dfb      	ldrb	r3, [r7, #23]
 800b62a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b634:	2b00      	cmp	r3, #0
 800b636:	d04b      	beq.n	800b6d0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b63e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b642:	d02e      	beq.n	800b6a2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800b644:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b648:	d828      	bhi.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b64a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b64e:	d02a      	beq.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800b650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b654:	d822      	bhi.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b656:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b65a:	d026      	beq.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800b65c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b660:	d81c      	bhi.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b662:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b666:	d010      	beq.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800b668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b66c:	d816      	bhi.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d01d      	beq.n	800b6ae <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800b672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b676:	d111      	bne.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	3304      	adds	r3, #4
 800b67c:	2100      	movs	r1, #0
 800b67e:	4618      	mov	r0, r3
 800b680:	f000 fc80 	bl	800bf84 <RCCEx_PLL2_Config>
 800b684:	4603      	mov	r3, r0
 800b686:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b688:	e012      	b.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	3324      	adds	r3, #36	; 0x24
 800b68e:	2102      	movs	r1, #2
 800b690:	4618      	mov	r0, r3
 800b692:	f000 fd29 	bl	800c0e8 <RCCEx_PLL3_Config>
 800b696:	4603      	mov	r3, r0
 800b698:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b69a:	e009      	b.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b69c:	2301      	movs	r3, #1
 800b69e:	75fb      	strb	r3, [r7, #23]
      break;
 800b6a0:	e006      	b.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b6a2:	bf00      	nop
 800b6a4:	e004      	b.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b6a6:	bf00      	nop
 800b6a8:	e002      	b.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b6aa:	bf00      	nop
 800b6ac:	e000      	b.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b6ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b6b0:	7dfb      	ldrb	r3, [r7, #23]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d10a      	bne.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b6b6:	4b3c      	ldr	r3, [pc, #240]	; (800b7a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b6b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b6c4:	4938      	ldr	r1, [pc, #224]	; (800b7a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	658b      	str	r3, [r1, #88]	; 0x58
 800b6ca:	e001      	b.n	800b6d0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6cc:	7dfb      	ldrb	r3, [r7, #23]
 800b6ce:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f003 0308 	and.w	r3, r3, #8
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d01a      	beq.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6e6:	d10a      	bne.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	3324      	adds	r3, #36	; 0x24
 800b6ec:	2102      	movs	r1, #2
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f000 fcfa 	bl	800c0e8 <RCCEx_PLL3_Config>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d001      	beq.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b6fe:	4b2a      	ldr	r3, [pc, #168]	; (800b7a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b702:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b70c:	4926      	ldr	r1, [pc, #152]	; (800b7a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b70e:	4313      	orrs	r3, r2
 800b710:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f003 0310 	and.w	r3, r3, #16
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d01a      	beq.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b728:	d10a      	bne.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	3324      	adds	r3, #36	; 0x24
 800b72e:	2102      	movs	r1, #2
 800b730:	4618      	mov	r0, r3
 800b732:	f000 fcd9 	bl	800c0e8 <RCCEx_PLL3_Config>
 800b736:	4603      	mov	r3, r0
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d001      	beq.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800b73c:	2301      	movs	r3, #1
 800b73e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b740:	4b19      	ldr	r3, [pc, #100]	; (800b7a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b744:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b74e:	4916      	ldr	r1, [pc, #88]	; (800b7a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b750:	4313      	orrs	r3, r2
 800b752:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d036      	beq.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b766:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b76a:	d01f      	beq.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800b76c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b770:	d817      	bhi.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800b772:	2b00      	cmp	r3, #0
 800b774:	d003      	beq.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800b776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b77a:	d009      	beq.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800b77c:	e011      	b.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	3304      	adds	r3, #4
 800b782:	2100      	movs	r1, #0
 800b784:	4618      	mov	r0, r3
 800b786:	f000 fbfd 	bl	800bf84 <RCCEx_PLL2_Config>
 800b78a:	4603      	mov	r3, r0
 800b78c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b78e:	e00e      	b.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	3324      	adds	r3, #36	; 0x24
 800b794:	2102      	movs	r1, #2
 800b796:	4618      	mov	r0, r3
 800b798:	f000 fca6 	bl	800c0e8 <RCCEx_PLL3_Config>
 800b79c:	4603      	mov	r3, r0
 800b79e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b7a0:	e005      	b.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	75fb      	strb	r3, [r7, #23]
      break;
 800b7a6:	e002      	b.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800b7a8:	58024400 	.word	0x58024400
      break;
 800b7ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b7ae:	7dfb      	ldrb	r3, [r7, #23]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d10a      	bne.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b7b4:	4b93      	ldr	r3, [pc, #588]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b7b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b7c2:	4990      	ldr	r1, [pc, #576]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	658b      	str	r3, [r1, #88]	; 0x58
 800b7c8:	e001      	b.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7ca:	7dfb      	ldrb	r3, [r7, #23]
 800b7cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d033      	beq.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b7e4:	d01c      	beq.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800b7e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b7ea:	d816      	bhi.n	800b81a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800b7ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7f0:	d003      	beq.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800b7f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b7f6:	d007      	beq.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800b7f8:	e00f      	b.n	800b81a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7fa:	4b82      	ldr	r3, [pc, #520]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7fe:	4a81      	ldr	r2, [pc, #516]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b804:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b806:	e00c      	b.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	3324      	adds	r3, #36	; 0x24
 800b80c:	2101      	movs	r1, #1
 800b80e:	4618      	mov	r0, r3
 800b810:	f000 fc6a 	bl	800c0e8 <RCCEx_PLL3_Config>
 800b814:	4603      	mov	r3, r0
 800b816:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b818:	e003      	b.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b81a:	2301      	movs	r3, #1
 800b81c:	75fb      	strb	r3, [r7, #23]
      break;
 800b81e:	e000      	b.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800b820:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b822:	7dfb      	ldrb	r3, [r7, #23]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d10a      	bne.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b828:	4b76      	ldr	r3, [pc, #472]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b82a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b82c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b836:	4973      	ldr	r1, [pc, #460]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b838:	4313      	orrs	r3, r2
 800b83a:	654b      	str	r3, [r1, #84]	; 0x54
 800b83c:	e001      	b.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b83e:	7dfb      	ldrb	r3, [r7, #23]
 800b840:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d029      	beq.n	800b8a2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b852:	2b00      	cmp	r3, #0
 800b854:	d003      	beq.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800b856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b85a:	d007      	beq.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800b85c:	e00f      	b.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b85e:	4b69      	ldr	r3, [pc, #420]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b862:	4a68      	ldr	r2, [pc, #416]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b868:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b86a:	e00b      	b.n	800b884 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	3304      	adds	r3, #4
 800b870:	2102      	movs	r1, #2
 800b872:	4618      	mov	r0, r3
 800b874:	f000 fb86 	bl	800bf84 <RCCEx_PLL2_Config>
 800b878:	4603      	mov	r3, r0
 800b87a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b87c:	e002      	b.n	800b884 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800b87e:	2301      	movs	r3, #1
 800b880:	75fb      	strb	r3, [r7, #23]
      break;
 800b882:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b884:	7dfb      	ldrb	r3, [r7, #23]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d109      	bne.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b88a:	4b5e      	ldr	r3, [pc, #376]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b88c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b88e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b896:	495b      	ldr	r1, [pc, #364]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b898:	4313      	orrs	r3, r2
 800b89a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b89c:	e001      	b.n	800b8a2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b89e:	7dfb      	ldrb	r3, [r7, #23]
 800b8a0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d00a      	beq.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	3324      	adds	r3, #36	; 0x24
 800b8b2:	2102      	movs	r1, #2
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f000 fc17 	bl	800c0e8 <RCCEx_PLL3_Config>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d001      	beq.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d030      	beq.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b8d8:	d017      	beq.n	800b90a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800b8da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b8de:	d811      	bhi.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800b8e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8e4:	d013      	beq.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800b8e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8ea:	d80b      	bhi.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d010      	beq.n	800b912 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800b8f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8f4:	d106      	bne.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8f6:	4b43      	ldr	r3, [pc, #268]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8fa:	4a42      	ldr	r2, [pc, #264]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b8fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b900:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b902:	e007      	b.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b904:	2301      	movs	r3, #1
 800b906:	75fb      	strb	r3, [r7, #23]
      break;
 800b908:	e004      	b.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b90a:	bf00      	nop
 800b90c:	e002      	b.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b90e:	bf00      	nop
 800b910:	e000      	b.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b912:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b914:	7dfb      	ldrb	r3, [r7, #23]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d109      	bne.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b91a:	4b3a      	ldr	r3, [pc, #232]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b91c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b91e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b926:	4937      	ldr	r1, [pc, #220]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b928:	4313      	orrs	r3, r2
 800b92a:	654b      	str	r3, [r1, #84]	; 0x54
 800b92c:	e001      	b.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b92e:	7dfb      	ldrb	r3, [r7, #23]
 800b930:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d008      	beq.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b93e:	4b31      	ldr	r3, [pc, #196]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b942:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b94a:	492e      	ldr	r1, [pc, #184]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b94c:	4313      	orrs	r3, r2
 800b94e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d009      	beq.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b95c:	4b29      	ldr	r3, [pc, #164]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b95e:	691b      	ldr	r3, [r3, #16]
 800b960:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b96a:	4926      	ldr	r1, [pc, #152]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b96c:	4313      	orrs	r3, r2
 800b96e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d008      	beq.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b97c:	4b21      	ldr	r3, [pc, #132]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b97e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b980:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b988:	491e      	ldr	r1, [pc, #120]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b98a:	4313      	orrs	r3, r2
 800b98c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00d      	beq.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b99a:	4b1a      	ldr	r3, [pc, #104]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b99c:	691b      	ldr	r3, [r3, #16]
 800b99e:	4a19      	ldr	r2, [pc, #100]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b9a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b9a4:	6113      	str	r3, [r2, #16]
 800b9a6:	4b17      	ldr	r3, [pc, #92]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b9a8:	691a      	ldr	r2, [r3, #16]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b9b0:	4914      	ldr	r1, [pc, #80]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	da08      	bge.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b9be:	4b11      	ldr	r3, [pc, #68]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b9c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9ca:	490e      	ldr	r1, [pc, #56]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d009      	beq.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b9dc:	4b09      	ldr	r3, [pc, #36]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b9de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9ea:	4906      	ldr	r1, [pc, #24]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800b9f0:	7dbb      	ldrb	r3, [r7, #22]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d101      	bne.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	e000      	b.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800b9fa:	2301      	movs	r3, #1
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3718      	adds	r7, #24
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}
 800ba04:	58024400 	.word	0x58024400

0800ba08 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ba0c:	f7ff f860 	bl	800aad0 <HAL_RCC_GetHCLKFreq>
 800ba10:	4602      	mov	r2, r0
 800ba12:	4b06      	ldr	r3, [pc, #24]	; (800ba2c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ba14:	6a1b      	ldr	r3, [r3, #32]
 800ba16:	091b      	lsrs	r3, r3, #4
 800ba18:	f003 0307 	and.w	r3, r3, #7
 800ba1c:	4904      	ldr	r1, [pc, #16]	; (800ba30 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ba1e:	5ccb      	ldrb	r3, [r1, r3]
 800ba20:	f003 031f 	and.w	r3, r3, #31
 800ba24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	58024400 	.word	0x58024400
 800ba30:	08012ef8 	.word	0x08012ef8

0800ba34 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b089      	sub	sp, #36	; 0x24
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba3c:	4ba1      	ldr	r3, [pc, #644]	; (800bcc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba40:	f003 0303 	and.w	r3, r3, #3
 800ba44:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800ba46:	4b9f      	ldr	r3, [pc, #636]	; (800bcc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba4a:	0b1b      	lsrs	r3, r3, #12
 800ba4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba50:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ba52:	4b9c      	ldr	r3, [pc, #624]	; (800bcc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba56:	091b      	lsrs	r3, r3, #4
 800ba58:	f003 0301 	and.w	r3, r3, #1
 800ba5c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800ba5e:	4b99      	ldr	r3, [pc, #612]	; (800bcc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba62:	08db      	lsrs	r3, r3, #3
 800ba64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba68:	693a      	ldr	r2, [r7, #16]
 800ba6a:	fb02 f303 	mul.w	r3, r2, r3
 800ba6e:	ee07 3a90 	vmov	s15, r3
 800ba72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	f000 8111 	beq.w	800bca4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ba82:	69bb      	ldr	r3, [r7, #24]
 800ba84:	2b02      	cmp	r3, #2
 800ba86:	f000 8083 	beq.w	800bb90 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ba8a:	69bb      	ldr	r3, [r7, #24]
 800ba8c:	2b02      	cmp	r3, #2
 800ba8e:	f200 80a1 	bhi.w	800bbd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ba92:	69bb      	ldr	r3, [r7, #24]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d003      	beq.n	800baa0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ba98:	69bb      	ldr	r3, [r7, #24]
 800ba9a:	2b01      	cmp	r3, #1
 800ba9c:	d056      	beq.n	800bb4c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ba9e:	e099      	b.n	800bbd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800baa0:	4b88      	ldr	r3, [pc, #544]	; (800bcc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f003 0320 	and.w	r3, r3, #32
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d02d      	beq.n	800bb08 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800baac:	4b85      	ldr	r3, [pc, #532]	; (800bcc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	08db      	lsrs	r3, r3, #3
 800bab2:	f003 0303 	and.w	r3, r3, #3
 800bab6:	4a84      	ldr	r2, [pc, #528]	; (800bcc8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bab8:	fa22 f303 	lsr.w	r3, r2, r3
 800babc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	ee07 3a90 	vmov	s15, r3
 800bac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	ee07 3a90 	vmov	s15, r3
 800bace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bad6:	4b7b      	ldr	r3, [pc, #492]	; (800bcc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bade:	ee07 3a90 	vmov	s15, r3
 800bae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bae6:	ed97 6a03 	vldr	s12, [r7, #12]
 800baea:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bccc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800baee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bafa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bafe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb02:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bb06:	e087      	b.n	800bc18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	ee07 3a90 	vmov	s15, r3
 800bb0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb12:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bb16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb1a:	4b6a      	ldr	r3, [pc, #424]	; (800bcc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb22:	ee07 3a90 	vmov	s15, r3
 800bb26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb2e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bccc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb4a:	e065      	b.n	800bc18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	ee07 3a90 	vmov	s15, r3
 800bb52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb56:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bcd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bb5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb5e:	4b59      	ldr	r3, [pc, #356]	; (800bcc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb66:	ee07 3a90 	vmov	s15, r3
 800bb6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb72:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bccc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb8e:	e043      	b.n	800bc18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	ee07 3a90 	vmov	s15, r3
 800bb96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb9a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bcd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bb9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bba2:	4b48      	ldr	r3, [pc, #288]	; (800bcc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbaa:	ee07 3a90 	vmov	s15, r3
 800bbae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbb6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bccc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bbba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bbd2:	e021      	b.n	800bc18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	ee07 3a90 	vmov	s15, r3
 800bbda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbde:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bcd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bbe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbe6:	4b37      	ldr	r3, [pc, #220]	; (800bcc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbee:	ee07 3a90 	vmov	s15, r3
 800bbf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbfa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bccc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bbfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bc16:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800bc18:	4b2a      	ldr	r3, [pc, #168]	; (800bcc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc1c:	0a5b      	lsrs	r3, r3, #9
 800bc1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc22:	ee07 3a90 	vmov	s15, r3
 800bc26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc32:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc3e:	ee17 2a90 	vmov	r2, s15
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800bc46:	4b1f      	ldr	r3, [pc, #124]	; (800bcc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc4a:	0c1b      	lsrs	r3, r3, #16
 800bc4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc50:	ee07 3a90 	vmov	s15, r3
 800bc54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc60:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc6c:	ee17 2a90 	vmov	r2, s15
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800bc74:	4b13      	ldr	r3, [pc, #76]	; (800bcc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc78:	0e1b      	lsrs	r3, r3, #24
 800bc7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc7e:	ee07 3a90 	vmov	s15, r3
 800bc82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc8e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc9a:	ee17 2a90 	vmov	r2, s15
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bca2:	e008      	b.n	800bcb6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2200      	movs	r2, #0
 800bca8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2200      	movs	r2, #0
 800bcae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	609a      	str	r2, [r3, #8]
}
 800bcb6:	bf00      	nop
 800bcb8:	3724      	adds	r7, #36	; 0x24
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc0:	4770      	bx	lr
 800bcc2:	bf00      	nop
 800bcc4:	58024400 	.word	0x58024400
 800bcc8:	03d09000 	.word	0x03d09000
 800bccc:	46000000 	.word	0x46000000
 800bcd0:	4c742400 	.word	0x4c742400
 800bcd4:	4a742400 	.word	0x4a742400
 800bcd8:	4bbebc20 	.word	0x4bbebc20

0800bcdc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b089      	sub	sp, #36	; 0x24
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bce4:	4ba1      	ldr	r3, [pc, #644]	; (800bf6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bce8:	f003 0303 	and.w	r3, r3, #3
 800bcec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800bcee:	4b9f      	ldr	r3, [pc, #636]	; (800bf6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcf2:	0d1b      	lsrs	r3, r3, #20
 800bcf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bcf8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bcfa:	4b9c      	ldr	r3, [pc, #624]	; (800bf6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcfe:	0a1b      	lsrs	r3, r3, #8
 800bd00:	f003 0301 	and.w	r3, r3, #1
 800bd04:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800bd06:	4b99      	ldr	r3, [pc, #612]	; (800bf6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd0a:	08db      	lsrs	r3, r3, #3
 800bd0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd10:	693a      	ldr	r2, [r7, #16]
 800bd12:	fb02 f303 	mul.w	r3, r2, r3
 800bd16:	ee07 3a90 	vmov	s15, r3
 800bd1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	f000 8111 	beq.w	800bf4c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bd2a:	69bb      	ldr	r3, [r7, #24]
 800bd2c:	2b02      	cmp	r3, #2
 800bd2e:	f000 8083 	beq.w	800be38 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	2b02      	cmp	r3, #2
 800bd36:	f200 80a1 	bhi.w	800be7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bd3a:	69bb      	ldr	r3, [r7, #24]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d003      	beq.n	800bd48 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bd40:	69bb      	ldr	r3, [r7, #24]
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	d056      	beq.n	800bdf4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bd46:	e099      	b.n	800be7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd48:	4b88      	ldr	r3, [pc, #544]	; (800bf6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f003 0320 	and.w	r3, r3, #32
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d02d      	beq.n	800bdb0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bd54:	4b85      	ldr	r3, [pc, #532]	; (800bf6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	08db      	lsrs	r3, r3, #3
 800bd5a:	f003 0303 	and.w	r3, r3, #3
 800bd5e:	4a84      	ldr	r2, [pc, #528]	; (800bf70 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bd60:	fa22 f303 	lsr.w	r3, r2, r3
 800bd64:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	ee07 3a90 	vmov	s15, r3
 800bd6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	ee07 3a90 	vmov	s15, r3
 800bd76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd7e:	4b7b      	ldr	r3, [pc, #492]	; (800bf6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd86:	ee07 3a90 	vmov	s15, r3
 800bd8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd92:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bf74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bda2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bda6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdaa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bdae:	e087      	b.n	800bec0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	ee07 3a90 	vmov	s15, r3
 800bdb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bf78 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bdbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdc2:	4b6a      	ldr	r3, [pc, #424]	; (800bf6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdca:	ee07 3a90 	vmov	s15, r3
 800bdce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdd2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdd6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bf74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bdda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bde2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bde6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bdf2:	e065      	b.n	800bec0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	ee07 3a90 	vmov	s15, r3
 800bdfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdfe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bf7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800be02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be06:	4b59      	ldr	r3, [pc, #356]	; (800bf6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be0e:	ee07 3a90 	vmov	s15, r3
 800be12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be16:	ed97 6a03 	vldr	s12, [r7, #12]
 800be1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bf74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be36:	e043      	b.n	800bec0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	ee07 3a90 	vmov	s15, r3
 800be3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bf80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800be46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be4a:	4b48      	ldr	r3, [pc, #288]	; (800bf6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be52:	ee07 3a90 	vmov	s15, r3
 800be56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800be5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bf74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be7a:	e021      	b.n	800bec0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	ee07 3a90 	vmov	s15, r3
 800be82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bf7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800be8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be8e:	4b37      	ldr	r3, [pc, #220]	; (800bf6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be96:	ee07 3a90 	vmov	s15, r3
 800be9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bea2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bf74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800beaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800beae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800beb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800beb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bebe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800bec0:	4b2a      	ldr	r3, [pc, #168]	; (800bf6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bec4:	0a5b      	lsrs	r3, r3, #9
 800bec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800beca:	ee07 3a90 	vmov	s15, r3
 800bece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bed2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bed6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800beda:	edd7 6a07 	vldr	s13, [r7, #28]
 800bede:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bee6:	ee17 2a90 	vmov	r2, s15
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800beee:	4b1f      	ldr	r3, [pc, #124]	; (800bf6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bef2:	0c1b      	lsrs	r3, r3, #16
 800bef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bef8:	ee07 3a90 	vmov	s15, r3
 800befc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf04:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf08:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf14:	ee17 2a90 	vmov	r2, s15
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800bf1c:	4b13      	ldr	r3, [pc, #76]	; (800bf6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf20:	0e1b      	lsrs	r3, r3, #24
 800bf22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf26:	ee07 3a90 	vmov	s15, r3
 800bf2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf32:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf36:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf42:	ee17 2a90 	vmov	r2, s15
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bf4a:	e008      	b.n	800bf5e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2200      	movs	r2, #0
 800bf56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	609a      	str	r2, [r3, #8]
}
 800bf5e:	bf00      	nop
 800bf60:	3724      	adds	r7, #36	; 0x24
 800bf62:	46bd      	mov	sp, r7
 800bf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf68:	4770      	bx	lr
 800bf6a:	bf00      	nop
 800bf6c:	58024400 	.word	0x58024400
 800bf70:	03d09000 	.word	0x03d09000
 800bf74:	46000000 	.word	0x46000000
 800bf78:	4c742400 	.word	0x4c742400
 800bf7c:	4a742400 	.word	0x4a742400
 800bf80:	4bbebc20 	.word	0x4bbebc20

0800bf84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b084      	sub	sp, #16
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bf92:	4b53      	ldr	r3, [pc, #332]	; (800c0e0 <RCCEx_PLL2_Config+0x15c>)
 800bf94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf96:	f003 0303 	and.w	r3, r3, #3
 800bf9a:	2b03      	cmp	r3, #3
 800bf9c:	d101      	bne.n	800bfa2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	e099      	b.n	800c0d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bfa2:	4b4f      	ldr	r3, [pc, #316]	; (800c0e0 <RCCEx_PLL2_Config+0x15c>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	4a4e      	ldr	r2, [pc, #312]	; (800c0e0 <RCCEx_PLL2_Config+0x15c>)
 800bfa8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bfac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bfae:	f7f8 fa3d 	bl	800442c <HAL_GetTick>
 800bfb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bfb4:	e008      	b.n	800bfc8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bfb6:	f7f8 fa39 	bl	800442c <HAL_GetTick>
 800bfba:	4602      	mov	r2, r0
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	1ad3      	subs	r3, r2, r3
 800bfc0:	2b02      	cmp	r3, #2
 800bfc2:	d901      	bls.n	800bfc8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bfc4:	2303      	movs	r3, #3
 800bfc6:	e086      	b.n	800c0d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bfc8:	4b45      	ldr	r3, [pc, #276]	; (800c0e0 <RCCEx_PLL2_Config+0x15c>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d1f0      	bne.n	800bfb6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bfd4:	4b42      	ldr	r3, [pc, #264]	; (800c0e0 <RCCEx_PLL2_Config+0x15c>)
 800bfd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfd8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	031b      	lsls	r3, r3, #12
 800bfe2:	493f      	ldr	r1, [pc, #252]	; (800c0e0 <RCCEx_PLL2_Config+0x15c>)
 800bfe4:	4313      	orrs	r3, r2
 800bfe6:	628b      	str	r3, [r1, #40]	; 0x28
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	3b01      	subs	r3, #1
 800bfee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	689b      	ldr	r3, [r3, #8]
 800bff6:	3b01      	subs	r3, #1
 800bff8:	025b      	lsls	r3, r3, #9
 800bffa:	b29b      	uxth	r3, r3
 800bffc:	431a      	orrs	r2, r3
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	68db      	ldr	r3, [r3, #12]
 800c002:	3b01      	subs	r3, #1
 800c004:	041b      	lsls	r3, r3, #16
 800c006:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c00a:	431a      	orrs	r2, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	691b      	ldr	r3, [r3, #16]
 800c010:	3b01      	subs	r3, #1
 800c012:	061b      	lsls	r3, r3, #24
 800c014:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c018:	4931      	ldr	r1, [pc, #196]	; (800c0e0 <RCCEx_PLL2_Config+0x15c>)
 800c01a:	4313      	orrs	r3, r2
 800c01c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c01e:	4b30      	ldr	r3, [pc, #192]	; (800c0e0 <RCCEx_PLL2_Config+0x15c>)
 800c020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c022:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	695b      	ldr	r3, [r3, #20]
 800c02a:	492d      	ldr	r1, [pc, #180]	; (800c0e0 <RCCEx_PLL2_Config+0x15c>)
 800c02c:	4313      	orrs	r3, r2
 800c02e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c030:	4b2b      	ldr	r3, [pc, #172]	; (800c0e0 <RCCEx_PLL2_Config+0x15c>)
 800c032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c034:	f023 0220 	bic.w	r2, r3, #32
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	699b      	ldr	r3, [r3, #24]
 800c03c:	4928      	ldr	r1, [pc, #160]	; (800c0e0 <RCCEx_PLL2_Config+0x15c>)
 800c03e:	4313      	orrs	r3, r2
 800c040:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c042:	4b27      	ldr	r3, [pc, #156]	; (800c0e0 <RCCEx_PLL2_Config+0x15c>)
 800c044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c046:	4a26      	ldr	r2, [pc, #152]	; (800c0e0 <RCCEx_PLL2_Config+0x15c>)
 800c048:	f023 0310 	bic.w	r3, r3, #16
 800c04c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c04e:	4b24      	ldr	r3, [pc, #144]	; (800c0e0 <RCCEx_PLL2_Config+0x15c>)
 800c050:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c052:	4b24      	ldr	r3, [pc, #144]	; (800c0e4 <RCCEx_PLL2_Config+0x160>)
 800c054:	4013      	ands	r3, r2
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	69d2      	ldr	r2, [r2, #28]
 800c05a:	00d2      	lsls	r2, r2, #3
 800c05c:	4920      	ldr	r1, [pc, #128]	; (800c0e0 <RCCEx_PLL2_Config+0x15c>)
 800c05e:	4313      	orrs	r3, r2
 800c060:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c062:	4b1f      	ldr	r3, [pc, #124]	; (800c0e0 <RCCEx_PLL2_Config+0x15c>)
 800c064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c066:	4a1e      	ldr	r2, [pc, #120]	; (800c0e0 <RCCEx_PLL2_Config+0x15c>)
 800c068:	f043 0310 	orr.w	r3, r3, #16
 800c06c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d106      	bne.n	800c082 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c074:	4b1a      	ldr	r3, [pc, #104]	; (800c0e0 <RCCEx_PLL2_Config+0x15c>)
 800c076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c078:	4a19      	ldr	r2, [pc, #100]	; (800c0e0 <RCCEx_PLL2_Config+0x15c>)
 800c07a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c07e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c080:	e00f      	b.n	800c0a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	2b01      	cmp	r3, #1
 800c086:	d106      	bne.n	800c096 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c088:	4b15      	ldr	r3, [pc, #84]	; (800c0e0 <RCCEx_PLL2_Config+0x15c>)
 800c08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c08c:	4a14      	ldr	r2, [pc, #80]	; (800c0e0 <RCCEx_PLL2_Config+0x15c>)
 800c08e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c092:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c094:	e005      	b.n	800c0a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c096:	4b12      	ldr	r3, [pc, #72]	; (800c0e0 <RCCEx_PLL2_Config+0x15c>)
 800c098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c09a:	4a11      	ldr	r2, [pc, #68]	; (800c0e0 <RCCEx_PLL2_Config+0x15c>)
 800c09c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c0a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c0a2:	4b0f      	ldr	r3, [pc, #60]	; (800c0e0 <RCCEx_PLL2_Config+0x15c>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	4a0e      	ldr	r2, [pc, #56]	; (800c0e0 <RCCEx_PLL2_Config+0x15c>)
 800c0a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c0ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c0ae:	f7f8 f9bd 	bl	800442c <HAL_GetTick>
 800c0b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c0b4:	e008      	b.n	800c0c8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c0b6:	f7f8 f9b9 	bl	800442c <HAL_GetTick>
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	1ad3      	subs	r3, r2, r3
 800c0c0:	2b02      	cmp	r3, #2
 800c0c2:	d901      	bls.n	800c0c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c0c4:	2303      	movs	r3, #3
 800c0c6:	e006      	b.n	800c0d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c0c8:	4b05      	ldr	r3, [pc, #20]	; (800c0e0 <RCCEx_PLL2_Config+0x15c>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d0f0      	beq.n	800c0b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c0d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3710      	adds	r7, #16
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	58024400 	.word	0x58024400
 800c0e4:	ffff0007 	.word	0xffff0007

0800c0e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c0f6:	4b53      	ldr	r3, [pc, #332]	; (800c244 <RCCEx_PLL3_Config+0x15c>)
 800c0f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0fa:	f003 0303 	and.w	r3, r3, #3
 800c0fe:	2b03      	cmp	r3, #3
 800c100:	d101      	bne.n	800c106 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c102:	2301      	movs	r3, #1
 800c104:	e099      	b.n	800c23a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c106:	4b4f      	ldr	r3, [pc, #316]	; (800c244 <RCCEx_PLL3_Config+0x15c>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	4a4e      	ldr	r2, [pc, #312]	; (800c244 <RCCEx_PLL3_Config+0x15c>)
 800c10c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c110:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c112:	f7f8 f98b 	bl	800442c <HAL_GetTick>
 800c116:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c118:	e008      	b.n	800c12c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c11a:	f7f8 f987 	bl	800442c <HAL_GetTick>
 800c11e:	4602      	mov	r2, r0
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	1ad3      	subs	r3, r2, r3
 800c124:	2b02      	cmp	r3, #2
 800c126:	d901      	bls.n	800c12c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c128:	2303      	movs	r3, #3
 800c12a:	e086      	b.n	800c23a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c12c:	4b45      	ldr	r3, [pc, #276]	; (800c244 <RCCEx_PLL3_Config+0x15c>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c134:	2b00      	cmp	r3, #0
 800c136:	d1f0      	bne.n	800c11a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c138:	4b42      	ldr	r3, [pc, #264]	; (800c244 <RCCEx_PLL3_Config+0x15c>)
 800c13a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c13c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	051b      	lsls	r3, r3, #20
 800c146:	493f      	ldr	r1, [pc, #252]	; (800c244 <RCCEx_PLL3_Config+0x15c>)
 800c148:	4313      	orrs	r3, r2
 800c14a:	628b      	str	r3, [r1, #40]	; 0x28
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	685b      	ldr	r3, [r3, #4]
 800c150:	3b01      	subs	r3, #1
 800c152:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	3b01      	subs	r3, #1
 800c15c:	025b      	lsls	r3, r3, #9
 800c15e:	b29b      	uxth	r3, r3
 800c160:	431a      	orrs	r2, r3
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	68db      	ldr	r3, [r3, #12]
 800c166:	3b01      	subs	r3, #1
 800c168:	041b      	lsls	r3, r3, #16
 800c16a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c16e:	431a      	orrs	r2, r3
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	691b      	ldr	r3, [r3, #16]
 800c174:	3b01      	subs	r3, #1
 800c176:	061b      	lsls	r3, r3, #24
 800c178:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c17c:	4931      	ldr	r1, [pc, #196]	; (800c244 <RCCEx_PLL3_Config+0x15c>)
 800c17e:	4313      	orrs	r3, r2
 800c180:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c182:	4b30      	ldr	r3, [pc, #192]	; (800c244 <RCCEx_PLL3_Config+0x15c>)
 800c184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c186:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	695b      	ldr	r3, [r3, #20]
 800c18e:	492d      	ldr	r1, [pc, #180]	; (800c244 <RCCEx_PLL3_Config+0x15c>)
 800c190:	4313      	orrs	r3, r2
 800c192:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c194:	4b2b      	ldr	r3, [pc, #172]	; (800c244 <RCCEx_PLL3_Config+0x15c>)
 800c196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c198:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	699b      	ldr	r3, [r3, #24]
 800c1a0:	4928      	ldr	r1, [pc, #160]	; (800c244 <RCCEx_PLL3_Config+0x15c>)
 800c1a2:	4313      	orrs	r3, r2
 800c1a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c1a6:	4b27      	ldr	r3, [pc, #156]	; (800c244 <RCCEx_PLL3_Config+0x15c>)
 800c1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1aa:	4a26      	ldr	r2, [pc, #152]	; (800c244 <RCCEx_PLL3_Config+0x15c>)
 800c1ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c1b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c1b2:	4b24      	ldr	r3, [pc, #144]	; (800c244 <RCCEx_PLL3_Config+0x15c>)
 800c1b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c1b6:	4b24      	ldr	r3, [pc, #144]	; (800c248 <RCCEx_PLL3_Config+0x160>)
 800c1b8:	4013      	ands	r3, r2
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	69d2      	ldr	r2, [r2, #28]
 800c1be:	00d2      	lsls	r2, r2, #3
 800c1c0:	4920      	ldr	r1, [pc, #128]	; (800c244 <RCCEx_PLL3_Config+0x15c>)
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c1c6:	4b1f      	ldr	r3, [pc, #124]	; (800c244 <RCCEx_PLL3_Config+0x15c>)
 800c1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ca:	4a1e      	ldr	r2, [pc, #120]	; (800c244 <RCCEx_PLL3_Config+0x15c>)
 800c1cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d106      	bne.n	800c1e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c1d8:	4b1a      	ldr	r3, [pc, #104]	; (800c244 <RCCEx_PLL3_Config+0x15c>)
 800c1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1dc:	4a19      	ldr	r2, [pc, #100]	; (800c244 <RCCEx_PLL3_Config+0x15c>)
 800c1de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c1e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c1e4:	e00f      	b.n	800c206 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	2b01      	cmp	r3, #1
 800c1ea:	d106      	bne.n	800c1fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c1ec:	4b15      	ldr	r3, [pc, #84]	; (800c244 <RCCEx_PLL3_Config+0x15c>)
 800c1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f0:	4a14      	ldr	r2, [pc, #80]	; (800c244 <RCCEx_PLL3_Config+0x15c>)
 800c1f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c1f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c1f8:	e005      	b.n	800c206 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c1fa:	4b12      	ldr	r3, [pc, #72]	; (800c244 <RCCEx_PLL3_Config+0x15c>)
 800c1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1fe:	4a11      	ldr	r2, [pc, #68]	; (800c244 <RCCEx_PLL3_Config+0x15c>)
 800c200:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c204:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c206:	4b0f      	ldr	r3, [pc, #60]	; (800c244 <RCCEx_PLL3_Config+0x15c>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4a0e      	ldr	r2, [pc, #56]	; (800c244 <RCCEx_PLL3_Config+0x15c>)
 800c20c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c210:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c212:	f7f8 f90b 	bl	800442c <HAL_GetTick>
 800c216:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c218:	e008      	b.n	800c22c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c21a:	f7f8 f907 	bl	800442c <HAL_GetTick>
 800c21e:	4602      	mov	r2, r0
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	1ad3      	subs	r3, r2, r3
 800c224:	2b02      	cmp	r3, #2
 800c226:	d901      	bls.n	800c22c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c228:	2303      	movs	r3, #3
 800c22a:	e006      	b.n	800c23a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c22c:	4b05      	ldr	r3, [pc, #20]	; (800c244 <RCCEx_PLL3_Config+0x15c>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c234:	2b00      	cmp	r3, #0
 800c236:	d0f0      	beq.n	800c21a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c238:	7bfb      	ldrb	r3, [r7, #15]
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3710      	adds	r7, #16
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop
 800c244:	58024400 	.word	0x58024400
 800c248:	ffff0007 	.word	0xffff0007

0800c24c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b084      	sub	sp, #16
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800c254:	2300      	movs	r3, #0
 800c256:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d101      	bne.n	800c262 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800c25e:	2301      	movs	r3, #1
 800c260:	e0eb      	b.n	800c43a <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2200      	movs	r2, #0
 800c266:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	4a75      	ldr	r2, [pc, #468]	; (800c444 <HAL_SPI_Init+0x1f8>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	d00f      	beq.n	800c292 <HAL_SPI_Init+0x46>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	4a74      	ldr	r2, [pc, #464]	; (800c448 <HAL_SPI_Init+0x1fc>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d00a      	beq.n	800c292 <HAL_SPI_Init+0x46>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4a72      	ldr	r2, [pc, #456]	; (800c44c <HAL_SPI_Init+0x200>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d005      	beq.n	800c292 <HAL_SPI_Init+0x46>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	68db      	ldr	r3, [r3, #12]
 800c28a:	2b0f      	cmp	r3, #15
 800c28c:	d901      	bls.n	800c292 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800c28e:	2301      	movs	r3, #1
 800c290:	e0d3      	b.n	800c43a <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f001 f87a 	bl	800d38c <SPI_GetPacketSize>
 800c298:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	4a69      	ldr	r2, [pc, #420]	; (800c444 <HAL_SPI_Init+0x1f8>)
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d00c      	beq.n	800c2be <HAL_SPI_Init+0x72>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	4a67      	ldr	r2, [pc, #412]	; (800c448 <HAL_SPI_Init+0x1fc>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d007      	beq.n	800c2be <HAL_SPI_Init+0x72>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4a66      	ldr	r2, [pc, #408]	; (800c44c <HAL_SPI_Init+0x200>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d002      	beq.n	800c2be <HAL_SPI_Init+0x72>
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	2b08      	cmp	r3, #8
 800c2bc:	d811      	bhi.n	800c2e2 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c2c2:	4a60      	ldr	r2, [pc, #384]	; (800c444 <HAL_SPI_Init+0x1f8>)
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	d009      	beq.n	800c2dc <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4a5e      	ldr	r2, [pc, #376]	; (800c448 <HAL_SPI_Init+0x1fc>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d004      	beq.n	800c2dc <HAL_SPI_Init+0x90>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	4a5d      	ldr	r2, [pc, #372]	; (800c44c <HAL_SPI_Init+0x200>)
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d104      	bne.n	800c2e6 <HAL_SPI_Init+0x9a>
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	2b10      	cmp	r3, #16
 800c2e0:	d901      	bls.n	800c2e6 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	e0a9      	b.n	800c43a <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d106      	bne.n	800c300 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f7f7 f8c2 	bl	8003484 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2202      	movs	r2, #2
 800c304:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f022 0201 	bic.w	r2, r2, #1
 800c316:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	699b      	ldr	r3, [r3, #24]
 800c31c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c320:	d119      	bne.n	800c356 <HAL_SPI_Init+0x10a>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	685b      	ldr	r3, [r3, #4]
 800c326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c32a:	d103      	bne.n	800c334 <HAL_SPI_Init+0xe8>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c330:	2b00      	cmp	r3, #0
 800c332:	d008      	beq.n	800c346 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d10c      	bne.n	800c356 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c340:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c344:	d107      	bne.n	800c356 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	681a      	ldr	r2, [r3, #0]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c354:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	69da      	ldr	r2, [r3, #28]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c35e:	431a      	orrs	r2, r3
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	431a      	orrs	r2, r3
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c368:	ea42 0103 	orr.w	r1, r2, r3
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	68da      	ldr	r2, [r3, #12]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	430a      	orrs	r2, r1
 800c376:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c380:	431a      	orrs	r2, r3
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c386:	431a      	orrs	r2, r3
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	699b      	ldr	r3, [r3, #24]
 800c38c:	431a      	orrs	r2, r3
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	691b      	ldr	r3, [r3, #16]
 800c392:	431a      	orrs	r2, r3
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	695b      	ldr	r3, [r3, #20]
 800c398:	431a      	orrs	r2, r3
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6a1b      	ldr	r3, [r3, #32]
 800c39e:	431a      	orrs	r2, r3
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	431a      	orrs	r2, r3
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3aa:	431a      	orrs	r2, r3
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	689b      	ldr	r3, [r3, #8]
 800c3b0:	431a      	orrs	r2, r3
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c3b6:	ea42 0103 	orr.w	r1, r2, r3
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	430a      	orrs	r2, r1
 800c3c4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	685b      	ldr	r3, [r3, #4]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d113      	bne.n	800c3f6 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	689b      	ldr	r3, [r3, #8]
 800c3d4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c3e0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	689b      	ldr	r3, [r3, #8]
 800c3e8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c3f4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f022 0201 	bic.w	r2, r2, #1
 800c404:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d00a      	beq.n	800c428 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	68db      	ldr	r3, [r3, #12]
 800c418:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	430a      	orrs	r2, r1
 800c426:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2200      	movs	r2, #0
 800c42c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2201      	movs	r2, #1
 800c434:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c438:	2300      	movs	r3, #0
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3710      	adds	r7, #16
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
 800c442:	bf00      	nop
 800c444:	40013000 	.word	0x40013000
 800c448:	40003800 	.word	0x40003800
 800c44c:	40003c00 	.word	0x40003c00

0800c450 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b08a      	sub	sp, #40	; 0x28
 800c454:	af02      	add	r7, sp, #8
 800c456:	60f8      	str	r0, [r7, #12]
 800c458:	60b9      	str	r1, [r7, #8]
 800c45a:	603b      	str	r3, [r7, #0]
 800c45c:	4613      	mov	r3, r2
 800c45e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	3320      	adds	r3, #32
 800c466:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c468:	2300      	movs	r3, #0
 800c46a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c472:	2b01      	cmp	r3, #1
 800c474:	d101      	bne.n	800c47a <HAL_SPI_Transmit+0x2a>
 800c476:	2302      	movs	r3, #2
 800c478:	e1d7      	b.n	800c82a <HAL_SPI_Transmit+0x3da>
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	2201      	movs	r2, #1
 800c47e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c482:	f7f7 ffd3 	bl	800442c <HAL_GetTick>
 800c486:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c48e:	b2db      	uxtb	r3, r3
 800c490:	2b01      	cmp	r3, #1
 800c492:	d007      	beq.n	800c4a4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800c494:	2302      	movs	r3, #2
 800c496:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2200      	movs	r2, #0
 800c49c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c4a0:	7efb      	ldrb	r3, [r7, #27]
 800c4a2:	e1c2      	b.n	800c82a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d002      	beq.n	800c4b0 <HAL_SPI_Transmit+0x60>
 800c4aa:	88fb      	ldrh	r3, [r7, #6]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d107      	bne.n	800c4c0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c4bc:	7efb      	ldrb	r3, [r7, #27]
 800c4be:	e1b4      	b.n	800c82a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	2203      	movs	r2, #3
 800c4c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	68ba      	ldr	r2, [r7, #8]
 800c4d4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	88fa      	ldrh	r2, [r7, #6]
 800c4da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	88fa      	ldrh	r2, [r7, #6]
 800c4e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	2200      	movs	r2, #0
 800c500:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	2200      	movs	r2, #0
 800c506:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	689b      	ldr	r3, [r3, #8]
 800c50c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c510:	d107      	bne.n	800c522 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	681a      	ldr	r2, [r3, #0]
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c520:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	685a      	ldr	r2, [r3, #4]
 800c528:	4b96      	ldr	r3, [pc, #600]	; (800c784 <HAL_SPI_Transmit+0x334>)
 800c52a:	4013      	ands	r3, r2
 800c52c:	88f9      	ldrh	r1, [r7, #6]
 800c52e:	68fa      	ldr	r2, [r7, #12]
 800c530:	6812      	ldr	r2, [r2, #0]
 800c532:	430b      	orrs	r3, r1
 800c534:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f042 0201 	orr.w	r2, r2, #1
 800c544:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c54e:	d107      	bne.n	800c560 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	681a      	ldr	r2, [r3, #0]
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c55e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	68db      	ldr	r3, [r3, #12]
 800c564:	2b0f      	cmp	r3, #15
 800c566:	d947      	bls.n	800c5f8 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c568:	e03f      	b.n	800c5ea <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	695b      	ldr	r3, [r3, #20]
 800c570:	f003 0302 	and.w	r3, r3, #2
 800c574:	2b02      	cmp	r3, #2
 800c576:	d114      	bne.n	800c5a2 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	6812      	ldr	r2, [r2, #0]
 800c582:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c588:	1d1a      	adds	r2, r3, #4
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c594:	b29b      	uxth	r3, r3
 800c596:	3b01      	subs	r3, #1
 800c598:	b29a      	uxth	r2, r3
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c5a0:	e023      	b.n	800c5ea <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c5a2:	f7f7 ff43 	bl	800442c <HAL_GetTick>
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	1ad3      	subs	r3, r2, r3
 800c5ac:	683a      	ldr	r2, [r7, #0]
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d803      	bhi.n	800c5ba <HAL_SPI_Transmit+0x16a>
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5b8:	d102      	bne.n	800c5c0 <HAL_SPI_Transmit+0x170>
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d114      	bne.n	800c5ea <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c5c0:	68f8      	ldr	r0, [r7, #12]
 800c5c2:	f000 fe15 	bl	800d1f0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	2201      	movs	r2, #1
 800c5e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	e11f      	b.n	800c82a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c5f0:	b29b      	uxth	r3, r3
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d1b9      	bne.n	800c56a <HAL_SPI_Transmit+0x11a>
 800c5f6:	e0f2      	b.n	800c7de <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	68db      	ldr	r3, [r3, #12]
 800c5fc:	2b07      	cmp	r3, #7
 800c5fe:	f240 80e7 	bls.w	800c7d0 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c602:	e05d      	b.n	800c6c0 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	695b      	ldr	r3, [r3, #20]
 800c60a:	f003 0302 	and.w	r3, r3, #2
 800c60e:	2b02      	cmp	r3, #2
 800c610:	d132      	bne.n	800c678 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c618:	b29b      	uxth	r3, r3
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d918      	bls.n	800c650 <HAL_SPI_Transmit+0x200>
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c622:	2b00      	cmp	r3, #0
 800c624:	d014      	beq.n	800c650 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	6812      	ldr	r2, [r2, #0]
 800c630:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c636:	1d1a      	adds	r2, r3, #4
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c642:	b29b      	uxth	r3, r3
 800c644:	3b02      	subs	r3, #2
 800c646:	b29a      	uxth	r2, r3
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c64e:	e037      	b.n	800c6c0 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c654:	881a      	ldrh	r2, [r3, #0]
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c65e:	1c9a      	adds	r2, r3, #2
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c66a:	b29b      	uxth	r3, r3
 800c66c:	3b01      	subs	r3, #1
 800c66e:	b29a      	uxth	r2, r3
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c676:	e023      	b.n	800c6c0 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c678:	f7f7 fed8 	bl	800442c <HAL_GetTick>
 800c67c:	4602      	mov	r2, r0
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	1ad3      	subs	r3, r2, r3
 800c682:	683a      	ldr	r2, [r7, #0]
 800c684:	429a      	cmp	r2, r3
 800c686:	d803      	bhi.n	800c690 <HAL_SPI_Transmit+0x240>
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c68e:	d102      	bne.n	800c696 <HAL_SPI_Transmit+0x246>
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d114      	bne.n	800c6c0 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c696:	68f8      	ldr	r0, [r7, #12]
 800c698:	f000 fdaa 	bl	800d1f0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800c6bc:	2301      	movs	r3, #1
 800c6be:	e0b4      	b.n	800c82a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c6c6:	b29b      	uxth	r3, r3
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d19b      	bne.n	800c604 <HAL_SPI_Transmit+0x1b4>
 800c6cc:	e087      	b.n	800c7de <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	695b      	ldr	r3, [r3, #20]
 800c6d4:	f003 0302 	and.w	r3, r3, #2
 800c6d8:	2b02      	cmp	r3, #2
 800c6da:	d155      	bne.n	800c788 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	2b03      	cmp	r3, #3
 800c6e6:	d918      	bls.n	800c71a <HAL_SPI_Transmit+0x2ca>
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6ec:	2b40      	cmp	r3, #64	; 0x40
 800c6ee:	d914      	bls.n	800c71a <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	6812      	ldr	r2, [r2, #0]
 800c6fa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c700:	1d1a      	adds	r2, r3, #4
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	3b04      	subs	r3, #4
 800c710:	b29a      	uxth	r2, r3
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c718:	e05a      	b.n	800c7d0 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c720:	b29b      	uxth	r3, r3
 800c722:	2b01      	cmp	r3, #1
 800c724:	d917      	bls.n	800c756 <HAL_SPI_Transmit+0x306>
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d013      	beq.n	800c756 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c732:	881a      	ldrh	r2, [r3, #0]
 800c734:	69fb      	ldr	r3, [r7, #28]
 800c736:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c73c:	1c9a      	adds	r2, r3, #2
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c748:	b29b      	uxth	r3, r3
 800c74a:	3b02      	subs	r3, #2
 800c74c:	b29a      	uxth	r2, r3
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c754:	e03c      	b.n	800c7d0 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	3320      	adds	r3, #32
 800c760:	7812      	ldrb	r2, [r2, #0]
 800c762:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c768:	1c5a      	adds	r2, r3, #1
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c774:	b29b      	uxth	r3, r3
 800c776:	3b01      	subs	r3, #1
 800c778:	b29a      	uxth	r2, r3
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c780:	e026      	b.n	800c7d0 <HAL_SPI_Transmit+0x380>
 800c782:	bf00      	nop
 800c784:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c788:	f7f7 fe50 	bl	800442c <HAL_GetTick>
 800c78c:	4602      	mov	r2, r0
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	1ad3      	subs	r3, r2, r3
 800c792:	683a      	ldr	r2, [r7, #0]
 800c794:	429a      	cmp	r2, r3
 800c796:	d803      	bhi.n	800c7a0 <HAL_SPI_Transmit+0x350>
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c79e:	d102      	bne.n	800c7a6 <HAL_SPI_Transmit+0x356>
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d114      	bne.n	800c7d0 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c7a6:	68f8      	ldr	r0, [r7, #12]
 800c7a8:	f000 fd22 	bl	800d1f0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	e02c      	b.n	800c82a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c7d6:	b29b      	uxth	r3, r3
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	f47f af78 	bne.w	800c6ce <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	9300      	str	r3, [sp, #0]
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	2108      	movs	r1, #8
 800c7e8:	68f8      	ldr	r0, [r7, #12]
 800c7ea:	f000 fda1 	bl	800d330 <SPI_WaitOnFlagUntilTimeout>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d007      	beq.n	800c804 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7fa:	f043 0220 	orr.w	r2, r3, #32
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c804:	68f8      	ldr	r0, [r7, #12]
 800c806:	f000 fcf3 	bl	800d1f0 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2200      	movs	r2, #0
 800c80e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	2201      	movs	r2, #1
 800c816:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c820:	2b00      	cmp	r3, #0
 800c822:	d001      	beq.n	800c828 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800c824:	2301      	movs	r3, #1
 800c826:	e000      	b.n	800c82a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800c828:	7efb      	ldrb	r3, [r7, #27]
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3720      	adds	r7, #32
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}
 800c832:	bf00      	nop

0800c834 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b08a      	sub	sp, #40	; 0x28
 800c838:	af02      	add	r7, sp, #8
 800c83a:	60f8      	str	r0, [r7, #12]
 800c83c:	60b9      	str	r1, [r7, #8]
 800c83e:	603b      	str	r3, [r7, #0]
 800c840:	4613      	mov	r3, r2
 800c842:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c844:	2300      	movs	r3, #0
 800c846:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	3330      	adds	r3, #48	; 0x30
 800c84e:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	685b      	ldr	r3, [r3, #4]
 800c854:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c858:	d112      	bne.n	800c880 <HAL_SPI_Receive+0x4c>
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	689b      	ldr	r3, [r3, #8]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d10e      	bne.n	800c880 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	2204      	movs	r2, #4
 800c866:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c86a:	88fa      	ldrh	r2, [r7, #6]
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	9300      	str	r3, [sp, #0]
 800c870:	4613      	mov	r3, r2
 800c872:	68ba      	ldr	r2, [r7, #8]
 800c874:	68b9      	ldr	r1, [r7, #8]
 800c876:	68f8      	ldr	r0, [r7, #12]
 800c878:	f000 f9ce 	bl	800cc18 <HAL_SPI_TransmitReceive>
 800c87c:	4603      	mov	r3, r0
 800c87e:	e1c7      	b.n	800cc10 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c886:	2b01      	cmp	r3, #1
 800c888:	d101      	bne.n	800c88e <HAL_SPI_Receive+0x5a>
 800c88a:	2302      	movs	r3, #2
 800c88c:	e1c0      	b.n	800cc10 <HAL_SPI_Receive+0x3dc>
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	2201      	movs	r2, #1
 800c892:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c896:	f7f7 fdc9 	bl	800442c <HAL_GetTick>
 800c89a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	d007      	beq.n	800c8b8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800c8a8:	2302      	movs	r3, #2
 800c8aa:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c8b4:	7ffb      	ldrb	r3, [r7, #31]
 800c8b6:	e1ab      	b.n	800cc10 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d002      	beq.n	800c8c4 <HAL_SPI_Receive+0x90>
 800c8be:	88fb      	ldrh	r3, [r7, #6]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d107      	bne.n	800c8d4 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c8d0:	7ffb      	ldrb	r3, [r7, #31]
 800c8d2:	e19d      	b.n	800cc10 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2204      	movs	r2, #4
 800c8d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	68ba      	ldr	r2, [r7, #8]
 800c8e8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	88fa      	ldrh	r2, [r7, #6]
 800c8ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	88fa      	ldrh	r2, [r7, #6]
 800c8f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	2200      	movs	r2, #0
 800c904:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	2200      	movs	r2, #0
 800c90c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	2200      	movs	r2, #0
 800c914:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2200      	movs	r2, #0
 800c91a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	689b      	ldr	r3, [r3, #8]
 800c920:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c924:	d107      	bne.n	800c936 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c934:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	685a      	ldr	r2, [r3, #4]
 800c93c:	4b94      	ldr	r3, [pc, #592]	; (800cb90 <HAL_SPI_Receive+0x35c>)
 800c93e:	4013      	ands	r3, r2
 800c940:	88f9      	ldrh	r1, [r7, #6]
 800c942:	68fa      	ldr	r2, [r7, #12]
 800c944:	6812      	ldr	r2, [r2, #0]
 800c946:	430b      	orrs	r3, r1
 800c948:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	681a      	ldr	r2, [r3, #0]
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f042 0201 	orr.w	r2, r2, #1
 800c958:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c962:	d107      	bne.n	800c974 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c972:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	68db      	ldr	r3, [r3, #12]
 800c978:	2b0f      	cmp	r3, #15
 800c97a:	d948      	bls.n	800ca0e <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c97c:	e040      	b.n	800ca00 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	695a      	ldr	r2, [r3, #20]
 800c984:	f248 0308 	movw	r3, #32776	; 0x8008
 800c988:	4013      	ands	r3, r2
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d014      	beq.n	800c9b8 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681a      	ldr	r2, [r3, #0]
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c996:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c998:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c99e:	1d1a      	adds	r2, r3, #4
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c9aa:	b29b      	uxth	r3, r3
 800c9ac:	3b01      	subs	r3, #1
 800c9ae:	b29a      	uxth	r2, r3
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c9b6:	e023      	b.n	800ca00 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c9b8:	f7f7 fd38 	bl	800442c <HAL_GetTick>
 800c9bc:	4602      	mov	r2, r0
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	1ad3      	subs	r3, r2, r3
 800c9c2:	683a      	ldr	r2, [r7, #0]
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d803      	bhi.n	800c9d0 <HAL_SPI_Receive+0x19c>
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9ce:	d102      	bne.n	800c9d6 <HAL_SPI_Receive+0x1a2>
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d114      	bne.n	800ca00 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c9d6:	68f8      	ldr	r0, [r7, #12]
 800c9d8:	f000 fc0a 	bl	800d1f0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	e107      	b.n	800cc10 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ca06:	b29b      	uxth	r3, r3
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d1b8      	bne.n	800c97e <HAL_SPI_Receive+0x14a>
 800ca0c:	e0ed      	b.n	800cbea <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	68db      	ldr	r3, [r3, #12]
 800ca12:	2b07      	cmp	r3, #7
 800ca14:	f240 80e2 	bls.w	800cbdc <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ca18:	e05b      	b.n	800cad2 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	695b      	ldr	r3, [r3, #20]
 800ca20:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d030      	beq.n	800ca8a <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	695b      	ldr	r3, [r3, #20]
 800ca2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d014      	beq.n	800ca60 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681a      	ldr	r2, [r3, #0]
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca3e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ca40:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca46:	1d1a      	adds	r2, r3, #4
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ca52:	b29b      	uxth	r3, r3
 800ca54:	3b02      	subs	r3, #2
 800ca56:	b29a      	uxth	r2, r3
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ca5e:	e038      	b.n	800cad2 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca64:	69ba      	ldr	r2, [r7, #24]
 800ca66:	8812      	ldrh	r2, [r2, #0]
 800ca68:	b292      	uxth	r2, r2
 800ca6a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca70:	1c9a      	adds	r2, r3, #2
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ca7c:	b29b      	uxth	r3, r3
 800ca7e:	3b01      	subs	r3, #1
 800ca80:	b29a      	uxth	r2, r3
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ca88:	e023      	b.n	800cad2 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ca8a:	f7f7 fccf 	bl	800442c <HAL_GetTick>
 800ca8e:	4602      	mov	r2, r0
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	1ad3      	subs	r3, r2, r3
 800ca94:	683a      	ldr	r2, [r7, #0]
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d803      	bhi.n	800caa2 <HAL_SPI_Receive+0x26e>
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caa0:	d102      	bne.n	800caa8 <HAL_SPI_Receive+0x274>
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d114      	bne.n	800cad2 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800caa8:	68f8      	ldr	r0, [r7, #12]
 800caaa:	f000 fba1 	bl	800d1f0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	2200      	movs	r2, #0
 800cab2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cabc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	2201      	movs	r2, #1
 800caca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800cace:	2301      	movs	r3, #1
 800cad0:	e09e      	b.n	800cc10 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cad8:	b29b      	uxth	r3, r3
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d19d      	bne.n	800ca1a <HAL_SPI_Receive+0x1e6>
 800cade:	e084      	b.n	800cbea <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	695b      	ldr	r3, [r3, #20]
 800cae6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800caea:	2b00      	cmp	r3, #0
 800caec:	d052      	beq.n	800cb94 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	695b      	ldr	r3, [r3, #20]
 800caf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d014      	beq.n	800cb26 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681a      	ldr	r2, [r3, #0]
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cb06:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb0c:	1d1a      	adds	r2, r3, #4
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cb18:	b29b      	uxth	r3, r3
 800cb1a:	3b04      	subs	r3, #4
 800cb1c:	b29a      	uxth	r2, r3
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cb24:	e05a      	b.n	800cbdc <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	695b      	ldr	r3, [r3, #20]
 800cb2c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800cb30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb34:	d914      	bls.n	800cb60 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb3a:	69ba      	ldr	r2, [r7, #24]
 800cb3c:	8812      	ldrh	r2, [r2, #0]
 800cb3e:	b292      	uxth	r2, r2
 800cb40:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb46:	1c9a      	adds	r2, r3, #2
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cb52:	b29b      	uxth	r3, r3
 800cb54:	3b02      	subs	r3, #2
 800cb56:	b29a      	uxth	r2, r3
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cb5e:	e03d      	b.n	800cbdc <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb6c:	7812      	ldrb	r2, [r2, #0]
 800cb6e:	b2d2      	uxtb	r2, r2
 800cb70:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb76:	1c5a      	adds	r2, r3, #1
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cb82:	b29b      	uxth	r3, r3
 800cb84:	3b01      	subs	r3, #1
 800cb86:	b29a      	uxth	r2, r3
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cb8e:	e025      	b.n	800cbdc <HAL_SPI_Receive+0x3a8>
 800cb90:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb94:	f7f7 fc4a 	bl	800442c <HAL_GetTick>
 800cb98:	4602      	mov	r2, r0
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	1ad3      	subs	r3, r2, r3
 800cb9e:	683a      	ldr	r2, [r7, #0]
 800cba0:	429a      	cmp	r2, r3
 800cba2:	d803      	bhi.n	800cbac <HAL_SPI_Receive+0x378>
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbaa:	d102      	bne.n	800cbb2 <HAL_SPI_Receive+0x37e>
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d114      	bne.n	800cbdc <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cbb2:	68f8      	ldr	r0, [r7, #12]
 800cbb4:	f000 fb1c 	bl	800d1f0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cbc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800cbd8:	2301      	movs	r3, #1
 800cbda:	e019      	b.n	800cc10 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	f47f af7b 	bne.w	800cae0 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cbea:	68f8      	ldr	r0, [r7, #12]
 800cbec:	f000 fb00 	bl	800d1f0 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	2201      	movs	r2, #1
 800cbfc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d001      	beq.n	800cc0e <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	e000      	b.n	800cc10 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800cc0e:	7ffb      	ldrb	r3, [r7, #31]
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	3720      	adds	r7, #32
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}

0800cc18 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b08e      	sub	sp, #56	; 0x38
 800cc1c:	af02      	add	r7, sp, #8
 800cc1e:	60f8      	str	r0, [r7, #12]
 800cc20:	60b9      	str	r1, [r7, #8]
 800cc22:	607a      	str	r2, [r7, #4]
 800cc24:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cc26:	2300      	movs	r3, #0
 800cc28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	3320      	adds	r3, #32
 800cc32:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	3330      	adds	r3, #48	; 0x30
 800cc3a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cc42:	2b01      	cmp	r3, #1
 800cc44:	d101      	bne.n	800cc4a <HAL_SPI_TransmitReceive+0x32>
 800cc46:	2302      	movs	r3, #2
 800cc48:	e2ce      	b.n	800d1e8 <HAL_SPI_TransmitReceive+0x5d0>
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2201      	movs	r2, #1
 800cc4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cc52:	f7f7 fbeb 	bl	800442c <HAL_GetTick>
 800cc56:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800cc58:	887b      	ldrh	r3, [r7, #2]
 800cc5a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800cc5c:	887b      	ldrh	r3, [r7, #2]
 800cc5e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cc66:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800cc6e:	7efb      	ldrb	r3, [r7, #27]
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d014      	beq.n	800cc9e <HAL_SPI_TransmitReceive+0x86>
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cc7a:	d106      	bne.n	800cc8a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	689b      	ldr	r3, [r3, #8]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d102      	bne.n	800cc8a <HAL_SPI_TransmitReceive+0x72>
 800cc84:	7efb      	ldrb	r3, [r7, #27]
 800cc86:	2b04      	cmp	r3, #4
 800cc88:	d009      	beq.n	800cc9e <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800cc8a:	2302      	movs	r3, #2
 800cc8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	2200      	movs	r2, #0
 800cc94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cc98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cc9c:	e2a4      	b.n	800d1e8 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d005      	beq.n	800ccb0 <HAL_SPI_TransmitReceive+0x98>
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d002      	beq.n	800ccb0 <HAL_SPI_TransmitReceive+0x98>
 800ccaa:	887b      	ldrh	r3, [r7, #2]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d109      	bne.n	800ccc4 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ccbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ccc2:	e291      	b.n	800d1e8 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ccca:	b2db      	uxtb	r3, r3
 800cccc:	2b04      	cmp	r3, #4
 800ccce:	d003      	beq.n	800ccd8 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2205      	movs	r2, #5
 800ccd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	887a      	ldrh	r2, [r7, #2]
 800ccea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	887a      	ldrh	r2, [r7, #2]
 800ccf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	68ba      	ldr	r2, [r7, #8]
 800ccfa:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	887a      	ldrh	r2, [r7, #2]
 800cd00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	887a      	ldrh	r2, [r7, #2]
 800cd08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	2200      	movs	r2, #0
 800cd16:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	685a      	ldr	r2, [r3, #4]
 800cd1e:	4b9f      	ldr	r3, [pc, #636]	; (800cf9c <HAL_SPI_TransmitReceive+0x384>)
 800cd20:	4013      	ands	r3, r2
 800cd22:	8879      	ldrh	r1, [r7, #2]
 800cd24:	68fa      	ldr	r2, [r7, #12]
 800cd26:	6812      	ldr	r2, [r2, #0]
 800cd28:	430b      	orrs	r3, r1
 800cd2a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	681a      	ldr	r2, [r3, #0]
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f042 0201 	orr.w	r2, r2, #1
 800cd3a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd44:	d107      	bne.n	800cd56 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	681a      	ldr	r2, [r3, #0]
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cd54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	68db      	ldr	r3, [r3, #12]
 800cd5a:	2b0f      	cmp	r3, #15
 800cd5c:	d970      	bls.n	800ce40 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cd5e:	e068      	b.n	800ce32 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	695b      	ldr	r3, [r3, #20]
 800cd66:	f003 0302 	and.w	r3, r3, #2
 800cd6a:	2b02      	cmp	r3, #2
 800cd6c:	d11a      	bne.n	800cda4 <HAL_SPI_TransmitReceive+0x18c>
 800cd6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d017      	beq.n	800cda4 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	6812      	ldr	r2, [r2, #0]
 800cd7e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd84:	1d1a      	adds	r2, r3, #4
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cd90:	b29b      	uxth	r3, r3
 800cd92:	3b01      	subs	r3, #1
 800cd94:	b29a      	uxth	r2, r3
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cda2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	695a      	ldr	r2, [r3, #20]
 800cdaa:	f248 0308 	movw	r3, #32776	; 0x8008
 800cdae:	4013      	ands	r3, r2
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d01a      	beq.n	800cdea <HAL_SPI_TransmitReceive+0x1d2>
 800cdb4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d017      	beq.n	800cdea <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cdc2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cdc4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cdca:	1d1a      	adds	r2, r3, #4
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cdd6:	b29b      	uxth	r3, r3
 800cdd8:	3b01      	subs	r3, #1
 800cdda:	b29a      	uxth	r2, r3
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cde8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cdea:	f7f7 fb1f 	bl	800442c <HAL_GetTick>
 800cdee:	4602      	mov	r2, r0
 800cdf0:	69fb      	ldr	r3, [r7, #28]
 800cdf2:	1ad3      	subs	r3, r2, r3
 800cdf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d803      	bhi.n	800ce02 <HAL_SPI_TransmitReceive+0x1ea>
 800cdfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce00:	d102      	bne.n	800ce08 <HAL_SPI_TransmitReceive+0x1f0>
 800ce02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d114      	bne.n	800ce32 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800ce08:	68f8      	ldr	r0, [r7, #12]
 800ce0a:	f000 f9f1 	bl	800d1f0 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	2200      	movs	r2, #0
 800ce12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2201      	movs	r2, #1
 800ce2a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800ce2e:	2301      	movs	r3, #1
 800ce30:	e1da      	b.n	800d1e8 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ce32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d193      	bne.n	800cd60 <HAL_SPI_TransmitReceive+0x148>
 800ce38:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d190      	bne.n	800cd60 <HAL_SPI_TransmitReceive+0x148>
 800ce3e:	e1ac      	b.n	800d19a <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	68db      	ldr	r3, [r3, #12]
 800ce44:	2b07      	cmp	r3, #7
 800ce46:	f240 81a0 	bls.w	800d18a <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ce4a:	e0a9      	b.n	800cfa0 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	695b      	ldr	r3, [r3, #20]
 800ce52:	f003 0302 	and.w	r3, r3, #2
 800ce56:	2b02      	cmp	r3, #2
 800ce58:	d139      	bne.n	800cece <HAL_SPI_TransmitReceive+0x2b6>
 800ce5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d036      	beq.n	800cece <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ce60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ce62:	2b01      	cmp	r3, #1
 800ce64:	d91c      	bls.n	800cea0 <HAL_SPI_TransmitReceive+0x288>
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d018      	beq.n	800cea0 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	6812      	ldr	r2, [r2, #0]
 800ce78:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce7e:	1d1a      	adds	r2, r3, #4
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce8a:	b29b      	uxth	r3, r3
 800ce8c:	3b02      	subs	r3, #2
 800ce8e:	b29a      	uxth	r2, r3
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce9c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ce9e:	e016      	b.n	800cece <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cea4:	881a      	ldrh	r2, [r3, #0]
 800cea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ceae:	1c9a      	adds	r2, r3, #2
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ceba:	b29b      	uxth	r3, r3
 800cebc:	3b01      	subs	r3, #1
 800cebe:	b29a      	uxth	r2, r3
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cecc:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	695b      	ldr	r3, [r3, #20]
 800ced4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d03a      	beq.n	800cf52 <HAL_SPI_TransmitReceive+0x33a>
 800cedc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d037      	beq.n	800cf52 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	695b      	ldr	r3, [r3, #20]
 800cee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d018      	beq.n	800cf22 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	681a      	ldr	r2, [r3, #0]
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cef8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cefa:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf00:	1d1a      	adds	r2, r3, #4
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cf0c:	b29b      	uxth	r3, r3
 800cf0e:	3b02      	subs	r3, #2
 800cf10:	b29a      	uxth	r2, r3
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cf1e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800cf20:	e017      	b.n	800cf52 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf26:	6a3a      	ldr	r2, [r7, #32]
 800cf28:	8812      	ldrh	r2, [r2, #0]
 800cf2a:	b292      	uxth	r2, r2
 800cf2c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf32:	1c9a      	adds	r2, r3, #2
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cf3e:	b29b      	uxth	r3, r3
 800cf40:	3b01      	subs	r3, #1
 800cf42:	b29a      	uxth	r2, r3
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cf50:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf52:	f7f7 fa6b 	bl	800442c <HAL_GetTick>
 800cf56:	4602      	mov	r2, r0
 800cf58:	69fb      	ldr	r3, [r7, #28]
 800cf5a:	1ad3      	subs	r3, r2, r3
 800cf5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d803      	bhi.n	800cf6a <HAL_SPI_TransmitReceive+0x352>
 800cf62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf68:	d102      	bne.n	800cf70 <HAL_SPI_TransmitReceive+0x358>
 800cf6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d117      	bne.n	800cfa0 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800cf70:	68f8      	ldr	r0, [r7, #12]
 800cf72:	f000 f93d 	bl	800d1f0 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	2201      	movs	r2, #1
 800cf92:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800cf96:	2301      	movs	r3, #1
 800cf98:	e126      	b.n	800d1e8 <HAL_SPI_TransmitReceive+0x5d0>
 800cf9a:	bf00      	nop
 800cf9c:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cfa0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	f47f af52 	bne.w	800ce4c <HAL_SPI_TransmitReceive+0x234>
 800cfa8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	f47f af4e 	bne.w	800ce4c <HAL_SPI_TransmitReceive+0x234>
 800cfb0:	e0f3      	b.n	800d19a <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	695b      	ldr	r3, [r3, #20]
 800cfb8:	f003 0302 	and.w	r3, r3, #2
 800cfbc:	2b02      	cmp	r3, #2
 800cfbe:	d15a      	bne.n	800d076 <HAL_SPI_TransmitReceive+0x45e>
 800cfc0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d057      	beq.n	800d076 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800cfc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cfc8:	2b03      	cmp	r3, #3
 800cfca:	d91c      	bls.n	800d006 <HAL_SPI_TransmitReceive+0x3ee>
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfd0:	2b40      	cmp	r3, #64	; 0x40
 800cfd2:	d918      	bls.n	800d006 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	6812      	ldr	r2, [r2, #0]
 800cfde:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cfe4:	1d1a      	adds	r2, r3, #4
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cff0:	b29b      	uxth	r3, r3
 800cff2:	3b04      	subs	r3, #4
 800cff4:	b29a      	uxth	r2, r3
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d002:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d004:	e037      	b.n	800d076 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d006:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d008:	2b01      	cmp	r3, #1
 800d00a:	d91b      	bls.n	800d044 <HAL_SPI_TransmitReceive+0x42c>
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d010:	2b00      	cmp	r3, #0
 800d012:	d017      	beq.n	800d044 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d018:	881a      	ldrh	r2, [r3, #0]
 800d01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d022:	1c9a      	adds	r2, r3, #2
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d02e:	b29b      	uxth	r3, r3
 800d030:	3b02      	subs	r3, #2
 800d032:	b29a      	uxth	r2, r3
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d040:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d042:	e018      	b.n	800d076 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	3320      	adds	r3, #32
 800d04e:	7812      	ldrb	r2, [r2, #0]
 800d050:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d056:	1c5a      	adds	r2, r3, #1
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d062:	b29b      	uxth	r3, r3
 800d064:	3b01      	subs	r3, #1
 800d066:	b29a      	uxth	r2, r3
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d074:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	695b      	ldr	r3, [r3, #20]
 800d07c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d080:	2b00      	cmp	r3, #0
 800d082:	d05e      	beq.n	800d142 <HAL_SPI_TransmitReceive+0x52a>
 800d084:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d086:	2b00      	cmp	r3, #0
 800d088:	d05b      	beq.n	800d142 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	695b      	ldr	r3, [r3, #20]
 800d090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d094:	2b00      	cmp	r3, #0
 800d096:	d018      	beq.n	800d0ca <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	681a      	ldr	r2, [r3, #0]
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d0a2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0a8:	1d1a      	adds	r2, r3, #4
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d0b4:	b29b      	uxth	r3, r3
 800d0b6:	3b04      	subs	r3, #4
 800d0b8:	b29a      	uxth	r2, r3
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d0c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d0c8:	e03b      	b.n	800d142 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	695b      	ldr	r3, [r3, #20]
 800d0d0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800d0d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d0d8:	d918      	bls.n	800d10c <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0de:	6a3a      	ldr	r2, [r7, #32]
 800d0e0:	8812      	ldrh	r2, [r2, #0]
 800d0e2:	b292      	uxth	r2, r2
 800d0e4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0ea:	1c9a      	adds	r2, r3, #2
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d0f6:	b29b      	uxth	r3, r3
 800d0f8:	3b02      	subs	r3, #2
 800d0fa:	b29a      	uxth	r2, r3
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d108:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d10a:	e01a      	b.n	800d142 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d118:	7812      	ldrb	r2, [r2, #0]
 800d11a:	b2d2      	uxtb	r2, r2
 800d11c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d122:	1c5a      	adds	r2, r3, #1
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d12e:	b29b      	uxth	r3, r3
 800d130:	3b01      	subs	r3, #1
 800d132:	b29a      	uxth	r2, r3
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d140:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d142:	f7f7 f973 	bl	800442c <HAL_GetTick>
 800d146:	4602      	mov	r2, r0
 800d148:	69fb      	ldr	r3, [r7, #28]
 800d14a:	1ad3      	subs	r3, r2, r3
 800d14c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d14e:	429a      	cmp	r2, r3
 800d150:	d803      	bhi.n	800d15a <HAL_SPI_TransmitReceive+0x542>
 800d152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d154:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d158:	d102      	bne.n	800d160 <HAL_SPI_TransmitReceive+0x548>
 800d15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d114      	bne.n	800d18a <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d160:	68f8      	ldr	r0, [r7, #12]
 800d162:	f000 f845 	bl	800d1f0 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2200      	movs	r2, #0
 800d16a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d174:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	2201      	movs	r2, #1
 800d182:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800d186:	2301      	movs	r3, #1
 800d188:	e02e      	b.n	800d1e8 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d18a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	f47f af10 	bne.w	800cfb2 <HAL_SPI_TransmitReceive+0x39a>
 800d192:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d194:	2b00      	cmp	r3, #0
 800d196:	f47f af0c 	bne.w	800cfb2 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800d19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d19c:	9300      	str	r3, [sp, #0]
 800d19e:	69fb      	ldr	r3, [r7, #28]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	2108      	movs	r1, #8
 800d1a4:	68f8      	ldr	r0, [r7, #12]
 800d1a6:	f000 f8c3 	bl	800d330 <SPI_WaitOnFlagUntilTimeout>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d007      	beq.n	800d1c0 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1b6:	f043 0220 	orr.w	r2, r3, #32
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d1c0:	68f8      	ldr	r0, [r7, #12]
 800d1c2:	f000 f815 	bl	800d1f0 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	2201      	movs	r2, #1
 800d1d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d001      	beq.n	800d1e4 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	e001      	b.n	800d1e8 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800d1e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3730      	adds	r7, #48	; 0x30
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b085      	sub	sp, #20
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	695b      	ldr	r3, [r3, #20]
 800d1fe:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	699a      	ldr	r2, [r3, #24]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f042 0208 	orr.w	r2, r2, #8
 800d20e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	699a      	ldr	r2, [r3, #24]
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f042 0210 	orr.w	r2, r2, #16
 800d21e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	681a      	ldr	r2, [r3, #0]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f022 0201 	bic.w	r2, r2, #1
 800d22e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	6919      	ldr	r1, [r3, #16]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681a      	ldr	r2, [r3, #0]
 800d23a:	4b3c      	ldr	r3, [pc, #240]	; (800d32c <SPI_CloseTransfer+0x13c>)
 800d23c:	400b      	ands	r3, r1
 800d23e:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	689a      	ldr	r2, [r3, #8]
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d24e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d256:	b2db      	uxtb	r3, r3
 800d258:	2b04      	cmp	r3, #4
 800d25a:	d014      	beq.n	800d286 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	f003 0320 	and.w	r3, r3, #32
 800d262:	2b00      	cmp	r3, #0
 800d264:	d00f      	beq.n	800d286 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d26c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	699a      	ldr	r2, [r3, #24]
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f042 0220 	orr.w	r2, r2, #32
 800d284:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d28c:	b2db      	uxtb	r3, r3
 800d28e:	2b03      	cmp	r3, #3
 800d290:	d014      	beq.n	800d2bc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d00f      	beq.n	800d2bc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2a2:	f043 0204 	orr.w	r2, r3, #4
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	699a      	ldr	r2, [r3, #24]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d2ba:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d00f      	beq.n	800d2e6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2cc:	f043 0201 	orr.w	r2, r3, #1
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	699a      	ldr	r2, [r3, #24]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d2e4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d00f      	beq.n	800d310 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2f6:	f043 0208 	orr.w	r2, r3, #8
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	699a      	ldr	r2, [r3, #24]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d30e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2200      	movs	r2, #0
 800d314:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2200      	movs	r2, #0
 800d31c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d320:	bf00      	nop
 800d322:	3714      	adds	r7, #20
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	4770      	bx	lr
 800d32c:	fffffc90 	.word	0xfffffc90

0800d330 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b084      	sub	sp, #16
 800d334:	af00      	add	r7, sp, #0
 800d336:	60f8      	str	r0, [r7, #12]
 800d338:	60b9      	str	r1, [r7, #8]
 800d33a:	603b      	str	r3, [r7, #0]
 800d33c:	4613      	mov	r3, r2
 800d33e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d340:	e010      	b.n	800d364 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d342:	f7f7 f873 	bl	800442c <HAL_GetTick>
 800d346:	4602      	mov	r2, r0
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	1ad3      	subs	r3, r2, r3
 800d34c:	69ba      	ldr	r2, [r7, #24]
 800d34e:	429a      	cmp	r2, r3
 800d350:	d803      	bhi.n	800d35a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d352:	69bb      	ldr	r3, [r7, #24]
 800d354:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d358:	d102      	bne.n	800d360 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d35a:	69bb      	ldr	r3, [r7, #24]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d101      	bne.n	800d364 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d360:	2303      	movs	r3, #3
 800d362:	e00f      	b.n	800d384 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	695a      	ldr	r2, [r3, #20]
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	4013      	ands	r3, r2
 800d36e:	68ba      	ldr	r2, [r7, #8]
 800d370:	429a      	cmp	r2, r3
 800d372:	bf0c      	ite	eq
 800d374:	2301      	moveq	r3, #1
 800d376:	2300      	movne	r3, #0
 800d378:	b2db      	uxtb	r3, r3
 800d37a:	461a      	mov	r2, r3
 800d37c:	79fb      	ldrb	r3, [r7, #7]
 800d37e:	429a      	cmp	r2, r3
 800d380:	d0df      	beq.n	800d342 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d382:	2300      	movs	r3, #0
}
 800d384:	4618      	mov	r0, r3
 800d386:	3710      	adds	r7, #16
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b085      	sub	sp, #20
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d398:	095b      	lsrs	r3, r3, #5
 800d39a:	3301      	adds	r3, #1
 800d39c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	68db      	ldr	r3, [r3, #12]
 800d3a2:	3301      	adds	r3, #1
 800d3a4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d3a6:	68bb      	ldr	r3, [r7, #8]
 800d3a8:	3307      	adds	r3, #7
 800d3aa:	08db      	lsrs	r3, r3, #3
 800d3ac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	68fa      	ldr	r2, [r7, #12]
 800d3b2:	fb02 f303 	mul.w	r3, r2, r3
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3714      	adds	r7, #20
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c0:	4770      	bx	lr

0800d3c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d3c2:	b580      	push	{r7, lr}
 800d3c4:	b082      	sub	sp, #8
 800d3c6:	af00      	add	r7, sp, #0
 800d3c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d101      	bne.n	800d3d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	e049      	b.n	800d468 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3da:	b2db      	uxtb	r3, r3
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d106      	bne.n	800d3ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f7f6 f8b1 	bl	8003550 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2202      	movs	r2, #2
 800d3f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681a      	ldr	r2, [r3, #0]
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	3304      	adds	r3, #4
 800d3fe:	4619      	mov	r1, r3
 800d400:	4610      	mov	r0, r2
 800d402:	f000 f9ed 	bl	800d7e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2201      	movs	r2, #1
 800d40a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2201      	movs	r2, #1
 800d412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2201      	movs	r2, #1
 800d41a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2201      	movs	r2, #1
 800d422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2201      	movs	r2, #1
 800d42a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2201      	movs	r2, #1
 800d432:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2201      	movs	r2, #1
 800d43a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2201      	movs	r2, #1
 800d442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2201      	movs	r2, #1
 800d44a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2201      	movs	r2, #1
 800d452:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2201      	movs	r2, #1
 800d45a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2201      	movs	r2, #1
 800d462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d466:	2300      	movs	r3, #0
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3708      	adds	r7, #8
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d470:	b480      	push	{r7}
 800d472:	b085      	sub	sp, #20
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d47e:	b2db      	uxtb	r3, r3
 800d480:	2b01      	cmp	r3, #1
 800d482:	d001      	beq.n	800d488 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d484:	2301      	movs	r3, #1
 800d486:	e04f      	b.n	800d528 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2202      	movs	r2, #2
 800d48c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	68da      	ldr	r2, [r3, #12]
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f042 0201 	orr.w	r2, r2, #1
 800d49e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	4a23      	ldr	r2, [pc, #140]	; (800d534 <HAL_TIM_Base_Start_IT+0xc4>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d01d      	beq.n	800d4e6 <HAL_TIM_Base_Start_IT+0x76>
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4b2:	d018      	beq.n	800d4e6 <HAL_TIM_Base_Start_IT+0x76>
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	4a1f      	ldr	r2, [pc, #124]	; (800d538 <HAL_TIM_Base_Start_IT+0xc8>)
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	d013      	beq.n	800d4e6 <HAL_TIM_Base_Start_IT+0x76>
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	4a1e      	ldr	r2, [pc, #120]	; (800d53c <HAL_TIM_Base_Start_IT+0xcc>)
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	d00e      	beq.n	800d4e6 <HAL_TIM_Base_Start_IT+0x76>
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	4a1c      	ldr	r2, [pc, #112]	; (800d540 <HAL_TIM_Base_Start_IT+0xd0>)
 800d4ce:	4293      	cmp	r3, r2
 800d4d0:	d009      	beq.n	800d4e6 <HAL_TIM_Base_Start_IT+0x76>
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	4a1b      	ldr	r2, [pc, #108]	; (800d544 <HAL_TIM_Base_Start_IT+0xd4>)
 800d4d8:	4293      	cmp	r3, r2
 800d4da:	d004      	beq.n	800d4e6 <HAL_TIM_Base_Start_IT+0x76>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	4a19      	ldr	r2, [pc, #100]	; (800d548 <HAL_TIM_Base_Start_IT+0xd8>)
 800d4e2:	4293      	cmp	r3, r2
 800d4e4:	d115      	bne.n	800d512 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	689a      	ldr	r2, [r3, #8]
 800d4ec:	4b17      	ldr	r3, [pc, #92]	; (800d54c <HAL_TIM_Base_Start_IT+0xdc>)
 800d4ee:	4013      	ands	r3, r2
 800d4f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2b06      	cmp	r3, #6
 800d4f6:	d015      	beq.n	800d524 <HAL_TIM_Base_Start_IT+0xb4>
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d4fe:	d011      	beq.n	800d524 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	681a      	ldr	r2, [r3, #0]
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	f042 0201 	orr.w	r2, r2, #1
 800d50e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d510:	e008      	b.n	800d524 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	681a      	ldr	r2, [r3, #0]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f042 0201 	orr.w	r2, r2, #1
 800d520:	601a      	str	r2, [r3, #0]
 800d522:	e000      	b.n	800d526 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d524:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d526:	2300      	movs	r3, #0
}
 800d528:	4618      	mov	r0, r3
 800d52a:	3714      	adds	r7, #20
 800d52c:	46bd      	mov	sp, r7
 800d52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d532:	4770      	bx	lr
 800d534:	40010000 	.word	0x40010000
 800d538:	40000400 	.word	0x40000400
 800d53c:	40000800 	.word	0x40000800
 800d540:	40000c00 	.word	0x40000c00
 800d544:	40010400 	.word	0x40010400
 800d548:	40001800 	.word	0x40001800
 800d54c:	00010007 	.word	0x00010007

0800d550 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b082      	sub	sp, #8
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	691b      	ldr	r3, [r3, #16]
 800d55e:	f003 0302 	and.w	r3, r3, #2
 800d562:	2b02      	cmp	r3, #2
 800d564:	d122      	bne.n	800d5ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	68db      	ldr	r3, [r3, #12]
 800d56c:	f003 0302 	and.w	r3, r3, #2
 800d570:	2b02      	cmp	r3, #2
 800d572:	d11b      	bne.n	800d5ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f06f 0202 	mvn.w	r2, #2
 800d57c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2201      	movs	r2, #1
 800d582:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	699b      	ldr	r3, [r3, #24]
 800d58a:	f003 0303 	and.w	r3, r3, #3
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d003      	beq.n	800d59a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f000 f905 	bl	800d7a2 <HAL_TIM_IC_CaptureCallback>
 800d598:	e005      	b.n	800d5a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f000 f8f7 	bl	800d78e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f000 f908 	bl	800d7b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	691b      	ldr	r3, [r3, #16]
 800d5b2:	f003 0304 	and.w	r3, r3, #4
 800d5b6:	2b04      	cmp	r3, #4
 800d5b8:	d122      	bne.n	800d600 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	68db      	ldr	r3, [r3, #12]
 800d5c0:	f003 0304 	and.w	r3, r3, #4
 800d5c4:	2b04      	cmp	r3, #4
 800d5c6:	d11b      	bne.n	800d600 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f06f 0204 	mvn.w	r2, #4
 800d5d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2202      	movs	r2, #2
 800d5d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	699b      	ldr	r3, [r3, #24]
 800d5de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d003      	beq.n	800d5ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f000 f8db 	bl	800d7a2 <HAL_TIM_IC_CaptureCallback>
 800d5ec:	e005      	b.n	800d5fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f000 f8cd 	bl	800d78e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f000 f8de 	bl	800d7b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	691b      	ldr	r3, [r3, #16]
 800d606:	f003 0308 	and.w	r3, r3, #8
 800d60a:	2b08      	cmp	r3, #8
 800d60c:	d122      	bne.n	800d654 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	68db      	ldr	r3, [r3, #12]
 800d614:	f003 0308 	and.w	r3, r3, #8
 800d618:	2b08      	cmp	r3, #8
 800d61a:	d11b      	bne.n	800d654 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	f06f 0208 	mvn.w	r2, #8
 800d624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2204      	movs	r2, #4
 800d62a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	69db      	ldr	r3, [r3, #28]
 800d632:	f003 0303 	and.w	r3, r3, #3
 800d636:	2b00      	cmp	r3, #0
 800d638:	d003      	beq.n	800d642 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f000 f8b1 	bl	800d7a2 <HAL_TIM_IC_CaptureCallback>
 800d640:	e005      	b.n	800d64e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f000 f8a3 	bl	800d78e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f000 f8b4 	bl	800d7b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2200      	movs	r2, #0
 800d652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	691b      	ldr	r3, [r3, #16]
 800d65a:	f003 0310 	and.w	r3, r3, #16
 800d65e:	2b10      	cmp	r3, #16
 800d660:	d122      	bne.n	800d6a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	68db      	ldr	r3, [r3, #12]
 800d668:	f003 0310 	and.w	r3, r3, #16
 800d66c:	2b10      	cmp	r3, #16
 800d66e:	d11b      	bne.n	800d6a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	f06f 0210 	mvn.w	r2, #16
 800d678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2208      	movs	r2, #8
 800d67e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	69db      	ldr	r3, [r3, #28]
 800d686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d003      	beq.n	800d696 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f000 f887 	bl	800d7a2 <HAL_TIM_IC_CaptureCallback>
 800d694:	e005      	b.n	800d6a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f000 f879 	bl	800d78e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f000 f88a 	bl	800d7b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	691b      	ldr	r3, [r3, #16]
 800d6ae:	f003 0301 	and.w	r3, r3, #1
 800d6b2:	2b01      	cmp	r3, #1
 800d6b4:	d10e      	bne.n	800d6d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	68db      	ldr	r3, [r3, #12]
 800d6bc:	f003 0301 	and.w	r3, r3, #1
 800d6c0:	2b01      	cmp	r3, #1
 800d6c2:	d107      	bne.n	800d6d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f06f 0201 	mvn.w	r2, #1
 800d6cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f7f6 f860 	bl	8003794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	691b      	ldr	r3, [r3, #16]
 800d6da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6de:	2b80      	cmp	r3, #128	; 0x80
 800d6e0:	d10e      	bne.n	800d700 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	68db      	ldr	r3, [r3, #12]
 800d6e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6ec:	2b80      	cmp	r3, #128	; 0x80
 800d6ee:	d107      	bne.n	800d700 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d6f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f000 f99c 	bl	800da38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	691b      	ldr	r3, [r3, #16]
 800d706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d70a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d70e:	d10e      	bne.n	800d72e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	68db      	ldr	r3, [r3, #12]
 800d716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d71a:	2b80      	cmp	r3, #128	; 0x80
 800d71c:	d107      	bne.n	800d72e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f000 f98f 	bl	800da4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	691b      	ldr	r3, [r3, #16]
 800d734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d738:	2b40      	cmp	r3, #64	; 0x40
 800d73a:	d10e      	bne.n	800d75a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	68db      	ldr	r3, [r3, #12]
 800d742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d746:	2b40      	cmp	r3, #64	; 0x40
 800d748:	d107      	bne.n	800d75a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f000 f838 	bl	800d7ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	691b      	ldr	r3, [r3, #16]
 800d760:	f003 0320 	and.w	r3, r3, #32
 800d764:	2b20      	cmp	r3, #32
 800d766:	d10e      	bne.n	800d786 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	68db      	ldr	r3, [r3, #12]
 800d76e:	f003 0320 	and.w	r3, r3, #32
 800d772:	2b20      	cmp	r3, #32
 800d774:	d107      	bne.n	800d786 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	f06f 0220 	mvn.w	r2, #32
 800d77e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f000 f94f 	bl	800da24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d786:	bf00      	nop
 800d788:	3708      	adds	r7, #8
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}

0800d78e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d78e:	b480      	push	{r7}
 800d790:	b083      	sub	sp, #12
 800d792:	af00      	add	r7, sp, #0
 800d794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d796:	bf00      	nop
 800d798:	370c      	adds	r7, #12
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr

0800d7a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d7a2:	b480      	push	{r7}
 800d7a4:	b083      	sub	sp, #12
 800d7a6:	af00      	add	r7, sp, #0
 800d7a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d7aa:	bf00      	nop
 800d7ac:	370c      	adds	r7, #12
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b4:	4770      	bx	lr

0800d7b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d7b6:	b480      	push	{r7}
 800d7b8:	b083      	sub	sp, #12
 800d7ba:	af00      	add	r7, sp, #0
 800d7bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d7be:	bf00      	nop
 800d7c0:	370c      	adds	r7, #12
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c8:	4770      	bx	lr

0800d7ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d7ca:	b480      	push	{r7}
 800d7cc:	b083      	sub	sp, #12
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d7d2:	bf00      	nop
 800d7d4:	370c      	adds	r7, #12
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7dc:	4770      	bx	lr
	...

0800d7e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b085      	sub	sp, #20
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	4a40      	ldr	r2, [pc, #256]	; (800d8f4 <TIM_Base_SetConfig+0x114>)
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	d013      	beq.n	800d820 <TIM_Base_SetConfig+0x40>
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7fe:	d00f      	beq.n	800d820 <TIM_Base_SetConfig+0x40>
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	4a3d      	ldr	r2, [pc, #244]	; (800d8f8 <TIM_Base_SetConfig+0x118>)
 800d804:	4293      	cmp	r3, r2
 800d806:	d00b      	beq.n	800d820 <TIM_Base_SetConfig+0x40>
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	4a3c      	ldr	r2, [pc, #240]	; (800d8fc <TIM_Base_SetConfig+0x11c>)
 800d80c:	4293      	cmp	r3, r2
 800d80e:	d007      	beq.n	800d820 <TIM_Base_SetConfig+0x40>
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	4a3b      	ldr	r2, [pc, #236]	; (800d900 <TIM_Base_SetConfig+0x120>)
 800d814:	4293      	cmp	r3, r2
 800d816:	d003      	beq.n	800d820 <TIM_Base_SetConfig+0x40>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	4a3a      	ldr	r2, [pc, #232]	; (800d904 <TIM_Base_SetConfig+0x124>)
 800d81c:	4293      	cmp	r3, r2
 800d81e:	d108      	bne.n	800d832 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	68fa      	ldr	r2, [r7, #12]
 800d82e:	4313      	orrs	r3, r2
 800d830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	4a2f      	ldr	r2, [pc, #188]	; (800d8f4 <TIM_Base_SetConfig+0x114>)
 800d836:	4293      	cmp	r3, r2
 800d838:	d01f      	beq.n	800d87a <TIM_Base_SetConfig+0x9a>
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d840:	d01b      	beq.n	800d87a <TIM_Base_SetConfig+0x9a>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	4a2c      	ldr	r2, [pc, #176]	; (800d8f8 <TIM_Base_SetConfig+0x118>)
 800d846:	4293      	cmp	r3, r2
 800d848:	d017      	beq.n	800d87a <TIM_Base_SetConfig+0x9a>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	4a2b      	ldr	r2, [pc, #172]	; (800d8fc <TIM_Base_SetConfig+0x11c>)
 800d84e:	4293      	cmp	r3, r2
 800d850:	d013      	beq.n	800d87a <TIM_Base_SetConfig+0x9a>
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	4a2a      	ldr	r2, [pc, #168]	; (800d900 <TIM_Base_SetConfig+0x120>)
 800d856:	4293      	cmp	r3, r2
 800d858:	d00f      	beq.n	800d87a <TIM_Base_SetConfig+0x9a>
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	4a29      	ldr	r2, [pc, #164]	; (800d904 <TIM_Base_SetConfig+0x124>)
 800d85e:	4293      	cmp	r3, r2
 800d860:	d00b      	beq.n	800d87a <TIM_Base_SetConfig+0x9a>
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	4a28      	ldr	r2, [pc, #160]	; (800d908 <TIM_Base_SetConfig+0x128>)
 800d866:	4293      	cmp	r3, r2
 800d868:	d007      	beq.n	800d87a <TIM_Base_SetConfig+0x9a>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	4a27      	ldr	r2, [pc, #156]	; (800d90c <TIM_Base_SetConfig+0x12c>)
 800d86e:	4293      	cmp	r3, r2
 800d870:	d003      	beq.n	800d87a <TIM_Base_SetConfig+0x9a>
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	4a26      	ldr	r2, [pc, #152]	; (800d910 <TIM_Base_SetConfig+0x130>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d108      	bne.n	800d88c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	68db      	ldr	r3, [r3, #12]
 800d886:	68fa      	ldr	r2, [r7, #12]
 800d888:	4313      	orrs	r3, r2
 800d88a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	695b      	ldr	r3, [r3, #20]
 800d896:	4313      	orrs	r3, r2
 800d898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	68fa      	ldr	r2, [r7, #12]
 800d89e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	689a      	ldr	r2, [r3, #8]
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	681a      	ldr	r2, [r3, #0]
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	4a10      	ldr	r2, [pc, #64]	; (800d8f4 <TIM_Base_SetConfig+0x114>)
 800d8b4:	4293      	cmp	r3, r2
 800d8b6:	d00f      	beq.n	800d8d8 <TIM_Base_SetConfig+0xf8>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	4a12      	ldr	r2, [pc, #72]	; (800d904 <TIM_Base_SetConfig+0x124>)
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	d00b      	beq.n	800d8d8 <TIM_Base_SetConfig+0xf8>
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	4a11      	ldr	r2, [pc, #68]	; (800d908 <TIM_Base_SetConfig+0x128>)
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	d007      	beq.n	800d8d8 <TIM_Base_SetConfig+0xf8>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	4a10      	ldr	r2, [pc, #64]	; (800d90c <TIM_Base_SetConfig+0x12c>)
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	d003      	beq.n	800d8d8 <TIM_Base_SetConfig+0xf8>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	4a0f      	ldr	r2, [pc, #60]	; (800d910 <TIM_Base_SetConfig+0x130>)
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	d103      	bne.n	800d8e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	691a      	ldr	r2, [r3, #16]
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	615a      	str	r2, [r3, #20]
}
 800d8e6:	bf00      	nop
 800d8e8:	3714      	adds	r7, #20
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f0:	4770      	bx	lr
 800d8f2:	bf00      	nop
 800d8f4:	40010000 	.word	0x40010000
 800d8f8:	40000400 	.word	0x40000400
 800d8fc:	40000800 	.word	0x40000800
 800d900:	40000c00 	.word	0x40000c00
 800d904:	40010400 	.word	0x40010400
 800d908:	40014000 	.word	0x40014000
 800d90c:	40014400 	.word	0x40014400
 800d910:	40014800 	.word	0x40014800

0800d914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d914:	b480      	push	{r7}
 800d916:	b085      	sub	sp, #20
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
 800d91c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d924:	2b01      	cmp	r3, #1
 800d926:	d101      	bne.n	800d92c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d928:	2302      	movs	r3, #2
 800d92a:	e068      	b.n	800d9fe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2201      	movs	r2, #1
 800d930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2202      	movs	r2, #2
 800d938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	685b      	ldr	r3, [r3, #4]
 800d942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	689b      	ldr	r3, [r3, #8]
 800d94a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4a2e      	ldr	r2, [pc, #184]	; (800da0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800d952:	4293      	cmp	r3, r2
 800d954:	d004      	beq.n	800d960 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	4a2d      	ldr	r2, [pc, #180]	; (800da10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800d95c:	4293      	cmp	r3, r2
 800d95e:	d108      	bne.n	800d972 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d966:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	685b      	ldr	r3, [r3, #4]
 800d96c:	68fa      	ldr	r2, [r7, #12]
 800d96e:	4313      	orrs	r3, r2
 800d970:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d978:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	68fa      	ldr	r2, [r7, #12]
 800d980:	4313      	orrs	r3, r2
 800d982:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	68fa      	ldr	r2, [r7, #12]
 800d98a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4a1e      	ldr	r2, [pc, #120]	; (800da0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800d992:	4293      	cmp	r3, r2
 800d994:	d01d      	beq.n	800d9d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d99e:	d018      	beq.n	800d9d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	4a1b      	ldr	r2, [pc, #108]	; (800da14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	d013      	beq.n	800d9d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	4a1a      	ldr	r2, [pc, #104]	; (800da18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d9b0:	4293      	cmp	r3, r2
 800d9b2:	d00e      	beq.n	800d9d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	4a18      	ldr	r2, [pc, #96]	; (800da1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d009      	beq.n	800d9d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	4a13      	ldr	r2, [pc, #76]	; (800da10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d004      	beq.n	800d9d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	4a14      	ldr	r2, [pc, #80]	; (800da20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d10c      	bne.n	800d9ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d9d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	689b      	ldr	r3, [r3, #8]
 800d9de:	68ba      	ldr	r2, [r7, #8]
 800d9e0:	4313      	orrs	r3, r2
 800d9e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	68ba      	ldr	r2, [r7, #8]
 800d9ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2201      	movs	r2, #1
 800d9f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d9fc:	2300      	movs	r3, #0
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3714      	adds	r7, #20
 800da02:	46bd      	mov	sp, r7
 800da04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da08:	4770      	bx	lr
 800da0a:	bf00      	nop
 800da0c:	40010000 	.word	0x40010000
 800da10:	40010400 	.word	0x40010400
 800da14:	40000400 	.word	0x40000400
 800da18:	40000800 	.word	0x40000800
 800da1c:	40000c00 	.word	0x40000c00
 800da20:	40001800 	.word	0x40001800

0800da24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800da24:	b480      	push	{r7}
 800da26:	b083      	sub	sp, #12
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800da2c:	bf00      	nop
 800da2e:	370c      	adds	r7, #12
 800da30:	46bd      	mov	sp, r7
 800da32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da36:	4770      	bx	lr

0800da38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800da38:	b480      	push	{r7}
 800da3a:	b083      	sub	sp, #12
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800da40:	bf00      	nop
 800da42:	370c      	adds	r7, #12
 800da44:	46bd      	mov	sp, r7
 800da46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4a:	4770      	bx	lr

0800da4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800da4c:	b480      	push	{r7}
 800da4e:	b083      	sub	sp, #12
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800da54:	bf00      	nop
 800da56:	370c      	adds	r7, #12
 800da58:	46bd      	mov	sp, r7
 800da5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5e:	4770      	bx	lr

0800da60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b082      	sub	sp, #8
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d101      	bne.n	800da72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800da6e:	2301      	movs	r3, #1
 800da70:	e042      	b.n	800daf8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d106      	bne.n	800da8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2200      	movs	r2, #0
 800da80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f7f5 fd8b 	bl	80035a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2224      	movs	r2, #36	; 0x24
 800da8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	681a      	ldr	r2, [r3, #0]
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	f022 0201 	bic.w	r2, r2, #1
 800daa0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f000 fbd6 	bl	800e254 <UART_SetConfig>
 800daa8:	4603      	mov	r3, r0
 800daaa:	2b01      	cmp	r3, #1
 800daac:	d101      	bne.n	800dab2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800daae:	2301      	movs	r3, #1
 800dab0:	e022      	b.n	800daf8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d002      	beq.n	800dac0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f001 f92a 	bl	800ed14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	685a      	ldr	r2, [r3, #4]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dace:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	689a      	ldr	r2, [r3, #8]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dade:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	681a      	ldr	r2, [r3, #0]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f042 0201 	orr.w	r2, r2, #1
 800daee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f001 f9b1 	bl	800ee58 <UART_CheckIdleState>
 800daf6:	4603      	mov	r3, r0
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3708      	adds	r7, #8
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}

0800db00 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b084      	sub	sp, #16
 800db04:	af00      	add	r7, sp, #0
 800db06:	60f8      	str	r0, [r7, #12]
 800db08:	60b9      	str	r1, [r7, #8]
 800db0a:	4613      	mov	r3, r2
 800db0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db14:	2b20      	cmp	r3, #32
 800db16:	d131      	bne.n	800db7c <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d002      	beq.n	800db24 <HAL_UART_Receive_IT+0x24>
 800db1e:	88fb      	ldrh	r3, [r7, #6]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d101      	bne.n	800db28 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800db24:	2301      	movs	r3, #1
 800db26:	e02a      	b.n	800db7e <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db2e:	2b01      	cmp	r3, #1
 800db30:	d101      	bne.n	800db36 <HAL_UART_Receive_IT+0x36>
 800db32:	2302      	movs	r3, #2
 800db34:	e023      	b.n	800db7e <HAL_UART_Receive_IT+0x7e>
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	2201      	movs	r2, #1
 800db3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	2200      	movs	r2, #0
 800db42:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	4a0f      	ldr	r2, [pc, #60]	; (800db88 <HAL_UART_Receive_IT+0x88>)
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d00e      	beq.n	800db6c <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	685b      	ldr	r3, [r3, #4]
 800db54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d007      	beq.n	800db6c <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	681a      	ldr	r2, [r3, #0]
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800db6a:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800db6c:	88fb      	ldrh	r3, [r7, #6]
 800db6e:	461a      	mov	r2, r3
 800db70:	68b9      	ldr	r1, [r7, #8]
 800db72:	68f8      	ldr	r0, [r7, #12]
 800db74:	f001 fa3c 	bl	800eff0 <UART_Start_Receive_IT>
 800db78:	4603      	mov	r3, r0
 800db7a:	e000      	b.n	800db7e <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800db7c:	2302      	movs	r3, #2
  }
}
 800db7e:	4618      	mov	r0, r3
 800db80:	3710      	adds	r7, #16
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
 800db86:	bf00      	nop
 800db88:	58000c00 	.word	0x58000c00

0800db8c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b084      	sub	sp, #16
 800db90:	af00      	add	r7, sp, #0
 800db92:	60f8      	str	r0, [r7, #12]
 800db94:	60b9      	str	r1, [r7, #8]
 800db96:	4613      	mov	r3, r2
 800db98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dba0:	2b20      	cmp	r3, #32
 800dba2:	d168      	bne.n	800dc76 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d002      	beq.n	800dbb0 <HAL_UART_Transmit_DMA+0x24>
 800dbaa:	88fb      	ldrh	r3, [r7, #6]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d101      	bne.n	800dbb4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	e061      	b.n	800dc78 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dbba:	2b01      	cmp	r3, #1
 800dbbc:	d101      	bne.n	800dbc2 <HAL_UART_Transmit_DMA+0x36>
 800dbbe:	2302      	movs	r3, #2
 800dbc0:	e05a      	b.n	800dc78 <HAL_UART_Transmit_DMA+0xec>
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	2201      	movs	r2, #1
 800dbc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	68ba      	ldr	r2, [r7, #8]
 800dbce:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	88fa      	ldrh	r2, [r7, #6]
 800dbd4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	88fa      	ldrh	r2, [r7, #6]
 800dbdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	2221      	movs	r2, #33	; 0x21
 800dbec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d02c      	beq.n	800dc52 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dbfc:	4a20      	ldr	r2, [pc, #128]	; (800dc80 <HAL_UART_Transmit_DMA+0xf4>)
 800dbfe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc04:	4a1f      	ldr	r2, [pc, #124]	; (800dc84 <HAL_UART_Transmit_DMA+0xf8>)
 800dc06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc0c:	4a1e      	ldr	r2, [pc, #120]	; (800dc88 <HAL_UART_Transmit_DMA+0xfc>)
 800dc0e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc14:	2200      	movs	r2, #0
 800dc16:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc20:	4619      	mov	r1, r3
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	3328      	adds	r3, #40	; 0x28
 800dc28:	461a      	mov	r2, r3
 800dc2a:	88fb      	ldrh	r3, [r7, #6]
 800dc2c:	f7f7 f8a6 	bl	8004d7c <HAL_DMA_Start_IT>
 800dc30:	4603      	mov	r3, r0
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d00d      	beq.n	800dc52 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	2210      	movs	r2, #16
 800dc3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	2200      	movs	r2, #0
 800dc42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	2220      	movs	r2, #32
 800dc4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800dc4e:	2301      	movs	r3, #1
 800dc50:	e012      	b.n	800dc78 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	2240      	movs	r2, #64	; 0x40
 800dc58:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	689a      	ldr	r2, [r3, #8]
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dc70:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800dc72:	2300      	movs	r3, #0
 800dc74:	e000      	b.n	800dc78 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800dc76:	2302      	movs	r3, #2
  }
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3710      	adds	r7, #16
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	0800f20d 	.word	0x0800f20d
 800dc84:	0800f25d 	.word	0x0800f25d
 800dc88:	0800f279 	.word	0x0800f279

0800dc8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b088      	sub	sp, #32
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	69db      	ldr	r3, [r3, #28]
 800dc9a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	689b      	ldr	r3, [r3, #8]
 800dcaa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800dcac:	69fa      	ldr	r2, [r7, #28]
 800dcae:	f640 030f 	movw	r3, #2063	; 0x80f
 800dcb2:	4013      	ands	r3, r2
 800dcb4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d118      	bne.n	800dcee <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	f003 0320 	and.w	r3, r3, #32
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d013      	beq.n	800dcee <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dcc6:	69bb      	ldr	r3, [r7, #24]
 800dcc8:	f003 0320 	and.w	r3, r3, #32
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d104      	bne.n	800dcda <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d009      	beq.n	800dcee <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	f000 8282 	beq.w	800e1e8 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	4798      	blx	r3
      }
      return;
 800dcec:	e27c      	b.n	800e1e8 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800dcee:	693b      	ldr	r3, [r7, #16]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	f000 80ef 	beq.w	800ded4 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800dcf6:	697a      	ldr	r2, [r7, #20]
 800dcf8:	4b73      	ldr	r3, [pc, #460]	; (800dec8 <HAL_UART_IRQHandler+0x23c>)
 800dcfa:	4013      	ands	r3, r2
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d105      	bne.n	800dd0c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800dd00:	69ba      	ldr	r2, [r7, #24]
 800dd02:	4b72      	ldr	r3, [pc, #456]	; (800decc <HAL_UART_IRQHandler+0x240>)
 800dd04:	4013      	ands	r3, r2
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	f000 80e4 	beq.w	800ded4 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dd0c:	69fb      	ldr	r3, [r7, #28]
 800dd0e:	f003 0301 	and.w	r3, r3, #1
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d010      	beq.n	800dd38 <HAL_UART_IRQHandler+0xac>
 800dd16:	69bb      	ldr	r3, [r7, #24]
 800dd18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d00b      	beq.n	800dd38 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	2201      	movs	r2, #1
 800dd26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd2e:	f043 0201 	orr.w	r2, r3, #1
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dd38:	69fb      	ldr	r3, [r7, #28]
 800dd3a:	f003 0302 	and.w	r3, r3, #2
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d010      	beq.n	800dd64 <HAL_UART_IRQHandler+0xd8>
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	f003 0301 	and.w	r3, r3, #1
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d00b      	beq.n	800dd64 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	2202      	movs	r2, #2
 800dd52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd5a:	f043 0204 	orr.w	r2, r3, #4
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dd64:	69fb      	ldr	r3, [r7, #28]
 800dd66:	f003 0304 	and.w	r3, r3, #4
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d010      	beq.n	800dd90 <HAL_UART_IRQHandler+0x104>
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	f003 0301 	and.w	r3, r3, #1
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d00b      	beq.n	800dd90 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	2204      	movs	r2, #4
 800dd7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd86:	f043 0202 	orr.w	r2, r3, #2
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800dd90:	69fb      	ldr	r3, [r7, #28]
 800dd92:	f003 0308 	and.w	r3, r3, #8
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d015      	beq.n	800ddc6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dd9a:	69bb      	ldr	r3, [r7, #24]
 800dd9c:	f003 0320 	and.w	r3, r3, #32
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d104      	bne.n	800ddae <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800dda4:	697a      	ldr	r2, [r7, #20]
 800dda6:	4b48      	ldr	r3, [pc, #288]	; (800dec8 <HAL_UART_IRQHandler+0x23c>)
 800dda8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d00b      	beq.n	800ddc6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	2208      	movs	r2, #8
 800ddb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ddbc:	f043 0208 	orr.w	r2, r3, #8
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ddc6:	69fb      	ldr	r3, [r7, #28]
 800ddc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d011      	beq.n	800ddf4 <HAL_UART_IRQHandler+0x168>
 800ddd0:	69bb      	ldr	r3, [r7, #24]
 800ddd2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d00c      	beq.n	800ddf4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dde2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ddea:	f043 0220 	orr.w	r2, r3, #32
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	f000 81f6 	beq.w	800e1ec <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800de00:	69fb      	ldr	r3, [r7, #28]
 800de02:	f003 0320 	and.w	r3, r3, #32
 800de06:	2b00      	cmp	r3, #0
 800de08:	d011      	beq.n	800de2e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800de0a:	69bb      	ldr	r3, [r7, #24]
 800de0c:	f003 0320 	and.w	r3, r3, #32
 800de10:	2b00      	cmp	r3, #0
 800de12:	d104      	bne.n	800de1e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d007      	beq.n	800de2e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de22:	2b00      	cmp	r3, #0
 800de24:	d003      	beq.n	800de2e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de34:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	689b      	ldr	r3, [r3, #8]
 800de3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de40:	2b40      	cmp	r3, #64	; 0x40
 800de42:	d004      	beq.n	800de4e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d031      	beq.n	800deb2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f001 f9aa 	bl	800f1a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	689b      	ldr	r3, [r3, #8]
 800de5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de5e:	2b40      	cmp	r3, #64	; 0x40
 800de60:	d123      	bne.n	800deaa <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	689a      	ldr	r2, [r3, #8]
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de70:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de76:	2b00      	cmp	r3, #0
 800de78:	d013      	beq.n	800dea2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de7e:	4a14      	ldr	r2, [pc, #80]	; (800ded0 <HAL_UART_IRQHandler+0x244>)
 800de80:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de86:	4618      	mov	r0, r3
 800de88:	f7f7 fd00 	bl	800588c <HAL_DMA_Abort_IT>
 800de8c:	4603      	mov	r3, r0
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d017      	beq.n	800dec2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de98:	687a      	ldr	r2, [r7, #4]
 800de9a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800de9c:	4610      	mov	r0, r2
 800de9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dea0:	e00f      	b.n	800dec2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f000 f9c0 	bl	800e228 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dea8:	e00b      	b.n	800dec2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f000 f9bc 	bl	800e228 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800deb0:	e007      	b.n	800dec2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f000 f9b8 	bl	800e228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2200      	movs	r2, #0
 800debc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800dec0:	e194      	b.n	800e1ec <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dec2:	bf00      	nop
    return;
 800dec4:	e192      	b.n	800e1ec <HAL_UART_IRQHandler+0x560>
 800dec6:	bf00      	nop
 800dec8:	10000001 	.word	0x10000001
 800decc:	04000120 	.word	0x04000120
 800ded0:	0800f2f9 	.word	0x0800f2f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ded8:	2b01      	cmp	r3, #1
 800deda:	f040 810f 	bne.w	800e0fc <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dede:	69fb      	ldr	r3, [r7, #28]
 800dee0:	f003 0310 	and.w	r3, r3, #16
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	f000 8109 	beq.w	800e0fc <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800deea:	69bb      	ldr	r3, [r7, #24]
 800deec:	f003 0310 	and.w	r3, r3, #16
 800def0:	2b00      	cmp	r3, #0
 800def2:	f000 8103 	beq.w	800e0fc <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	2210      	movs	r2, #16
 800defc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	689b      	ldr	r3, [r3, #8]
 800df04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df08:	2b40      	cmp	r3, #64	; 0x40
 800df0a:	f040 80bb 	bne.w	800e084 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	4a96      	ldr	r2, [pc, #600]	; (800e170 <HAL_UART_IRQHandler+0x4e4>)
 800df16:	4293      	cmp	r3, r2
 800df18:	d059      	beq.n	800dfce <HAL_UART_IRQHandler+0x342>
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	4a94      	ldr	r2, [pc, #592]	; (800e174 <HAL_UART_IRQHandler+0x4e8>)
 800df22:	4293      	cmp	r3, r2
 800df24:	d053      	beq.n	800dfce <HAL_UART_IRQHandler+0x342>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	4a92      	ldr	r2, [pc, #584]	; (800e178 <HAL_UART_IRQHandler+0x4ec>)
 800df2e:	4293      	cmp	r3, r2
 800df30:	d04d      	beq.n	800dfce <HAL_UART_IRQHandler+0x342>
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	4a90      	ldr	r2, [pc, #576]	; (800e17c <HAL_UART_IRQHandler+0x4f0>)
 800df3a:	4293      	cmp	r3, r2
 800df3c:	d047      	beq.n	800dfce <HAL_UART_IRQHandler+0x342>
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	4a8e      	ldr	r2, [pc, #568]	; (800e180 <HAL_UART_IRQHandler+0x4f4>)
 800df46:	4293      	cmp	r3, r2
 800df48:	d041      	beq.n	800dfce <HAL_UART_IRQHandler+0x342>
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	4a8c      	ldr	r2, [pc, #560]	; (800e184 <HAL_UART_IRQHandler+0x4f8>)
 800df52:	4293      	cmp	r3, r2
 800df54:	d03b      	beq.n	800dfce <HAL_UART_IRQHandler+0x342>
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	4a8a      	ldr	r2, [pc, #552]	; (800e188 <HAL_UART_IRQHandler+0x4fc>)
 800df5e:	4293      	cmp	r3, r2
 800df60:	d035      	beq.n	800dfce <HAL_UART_IRQHandler+0x342>
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	4a88      	ldr	r2, [pc, #544]	; (800e18c <HAL_UART_IRQHandler+0x500>)
 800df6a:	4293      	cmp	r3, r2
 800df6c:	d02f      	beq.n	800dfce <HAL_UART_IRQHandler+0x342>
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	4a86      	ldr	r2, [pc, #536]	; (800e190 <HAL_UART_IRQHandler+0x504>)
 800df76:	4293      	cmp	r3, r2
 800df78:	d029      	beq.n	800dfce <HAL_UART_IRQHandler+0x342>
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4a84      	ldr	r2, [pc, #528]	; (800e194 <HAL_UART_IRQHandler+0x508>)
 800df82:	4293      	cmp	r3, r2
 800df84:	d023      	beq.n	800dfce <HAL_UART_IRQHandler+0x342>
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	4a82      	ldr	r2, [pc, #520]	; (800e198 <HAL_UART_IRQHandler+0x50c>)
 800df8e:	4293      	cmp	r3, r2
 800df90:	d01d      	beq.n	800dfce <HAL_UART_IRQHandler+0x342>
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	4a80      	ldr	r2, [pc, #512]	; (800e19c <HAL_UART_IRQHandler+0x510>)
 800df9a:	4293      	cmp	r3, r2
 800df9c:	d017      	beq.n	800dfce <HAL_UART_IRQHandler+0x342>
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	4a7e      	ldr	r2, [pc, #504]	; (800e1a0 <HAL_UART_IRQHandler+0x514>)
 800dfa6:	4293      	cmp	r3, r2
 800dfa8:	d011      	beq.n	800dfce <HAL_UART_IRQHandler+0x342>
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	4a7c      	ldr	r2, [pc, #496]	; (800e1a4 <HAL_UART_IRQHandler+0x518>)
 800dfb2:	4293      	cmp	r3, r2
 800dfb4:	d00b      	beq.n	800dfce <HAL_UART_IRQHandler+0x342>
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	4a7a      	ldr	r2, [pc, #488]	; (800e1a8 <HAL_UART_IRQHandler+0x51c>)
 800dfbe:	4293      	cmp	r3, r2
 800dfc0:	d005      	beq.n	800dfce <HAL_UART_IRQHandler+0x342>
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	4a78      	ldr	r2, [pc, #480]	; (800e1ac <HAL_UART_IRQHandler+0x520>)
 800dfca:	4293      	cmp	r3, r2
 800dfcc:	d105      	bne.n	800dfda <HAL_UART_IRQHandler+0x34e>
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	685b      	ldr	r3, [r3, #4]
 800dfd6:	b29b      	uxth	r3, r3
 800dfd8:	e004      	b.n	800dfe4 <HAL_UART_IRQHandler+0x358>
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	685b      	ldr	r3, [r3, #4]
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800dfe6:	893b      	ldrh	r3, [r7, #8]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	f000 8101 	beq.w	800e1f0 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dff4:	893a      	ldrh	r2, [r7, #8]
 800dff6:	429a      	cmp	r2, r3
 800dff8:	f080 80fa 	bcs.w	800e1f0 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	893a      	ldrh	r2, [r7, #8]
 800e000:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e008:	69db      	ldr	r3, [r3, #28]
 800e00a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e00e:	d02b      	beq.n	800e068 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	681a      	ldr	r2, [r3, #0]
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e01e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	689a      	ldr	r2, [r3, #8]
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	f022 0201 	bic.w	r2, r2, #1
 800e02e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	689a      	ldr	r2, [r3, #8]
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e03e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2220      	movs	r2, #32
 800e044:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2200      	movs	r2, #0
 800e04c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	681a      	ldr	r2, [r3, #0]
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	f022 0210 	bic.w	r2, r2, #16
 800e05c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e062:	4618      	mov	r0, r3
 800e064:	f7f7 f8f4 	bl	8005250 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e074:	b29b      	uxth	r3, r3
 800e076:	1ad3      	subs	r3, r2, r3
 800e078:	b29b      	uxth	r3, r3
 800e07a:	4619      	mov	r1, r3
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f000 f8dd 	bl	800e23c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e082:	e0b5      	b.n	800e1f0 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e090:	b29b      	uxth	r3, r3
 800e092:	1ad3      	subs	r3, r2, r3
 800e094:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e09c:	b29b      	uxth	r3, r3
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	f000 80a8 	beq.w	800e1f4 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800e0a4:	897b      	ldrh	r3, [r7, #10]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	f000 80a4 	beq.w	800e1f4 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	681a      	ldr	r2, [r3, #0]
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e0ba:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	6899      	ldr	r1, [r3, #8]
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681a      	ldr	r2, [r3, #0]
 800e0c6:	4b3a      	ldr	r3, [pc, #232]	; (800e1b0 <HAL_UART_IRQHandler+0x524>)
 800e0c8:	400b      	ands	r3, r1
 800e0ca:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2220      	movs	r2, #32
 800e0d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2200      	movs	r2, #0
 800e0de:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	681a      	ldr	r2, [r3, #0]
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	f022 0210 	bic.w	r2, r2, #16
 800e0ee:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e0f0:	897b      	ldrh	r3, [r7, #10]
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f000 f8a1 	bl	800e23c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e0fa:	e07b      	b.n	800e1f4 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e0fc:	69fb      	ldr	r3, [r7, #28]
 800e0fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e102:	2b00      	cmp	r3, #0
 800e104:	d00d      	beq.n	800e122 <HAL_UART_IRQHandler+0x496>
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d008      	beq.n	800e122 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e118:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f001 fbf8 	bl	800f910 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e120:	e06b      	b.n	800e1fa <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e122:	69fb      	ldr	r3, [r7, #28]
 800e124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d012      	beq.n	800e152 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e12c:	69bb      	ldr	r3, [r7, #24]
 800e12e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e132:	2b00      	cmp	r3, #0
 800e134:	d104      	bne.n	800e140 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d008      	beq.n	800e152 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e144:	2b00      	cmp	r3, #0
 800e146:	d057      	beq.n	800e1f8 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	4798      	blx	r3
    }
    return;
 800e150:	e052      	b.n	800e1f8 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e152:	69fb      	ldr	r3, [r7, #28]
 800e154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d02b      	beq.n	800e1b4 <HAL_UART_IRQHandler+0x528>
 800e15c:	69bb      	ldr	r3, [r7, #24]
 800e15e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e162:	2b00      	cmp	r3, #0
 800e164:	d026      	beq.n	800e1b4 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f001 f8dc 	bl	800f324 <UART_EndTransmit_IT>
    return;
 800e16c:	e045      	b.n	800e1fa <HAL_UART_IRQHandler+0x56e>
 800e16e:	bf00      	nop
 800e170:	40020010 	.word	0x40020010
 800e174:	40020028 	.word	0x40020028
 800e178:	40020040 	.word	0x40020040
 800e17c:	40020058 	.word	0x40020058
 800e180:	40020070 	.word	0x40020070
 800e184:	40020088 	.word	0x40020088
 800e188:	400200a0 	.word	0x400200a0
 800e18c:	400200b8 	.word	0x400200b8
 800e190:	40020410 	.word	0x40020410
 800e194:	40020428 	.word	0x40020428
 800e198:	40020440 	.word	0x40020440
 800e19c:	40020458 	.word	0x40020458
 800e1a0:	40020470 	.word	0x40020470
 800e1a4:	40020488 	.word	0x40020488
 800e1a8:	400204a0 	.word	0x400204a0
 800e1ac:	400204b8 	.word	0x400204b8
 800e1b0:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e1b4:	69fb      	ldr	r3, [r7, #28]
 800e1b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d008      	beq.n	800e1d0 <HAL_UART_IRQHandler+0x544>
 800e1be:	69bb      	ldr	r3, [r7, #24]
 800e1c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d003      	beq.n	800e1d0 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e1c8:	6878      	ldr	r0, [r7, #4]
 800e1ca:	f001 fbb5 	bl	800f938 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e1ce:	e014      	b.n	800e1fa <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e1d0:	69fb      	ldr	r3, [r7, #28]
 800e1d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d00f      	beq.n	800e1fa <HAL_UART_IRQHandler+0x56e>
 800e1da:	69bb      	ldr	r3, [r7, #24]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	da0c      	bge.n	800e1fa <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f001 fb9f 	bl	800f924 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e1e6:	e008      	b.n	800e1fa <HAL_UART_IRQHandler+0x56e>
      return;
 800e1e8:	bf00      	nop
 800e1ea:	e006      	b.n	800e1fa <HAL_UART_IRQHandler+0x56e>
    return;
 800e1ec:	bf00      	nop
 800e1ee:	e004      	b.n	800e1fa <HAL_UART_IRQHandler+0x56e>
      return;
 800e1f0:	bf00      	nop
 800e1f2:	e002      	b.n	800e1fa <HAL_UART_IRQHandler+0x56e>
      return;
 800e1f4:	bf00      	nop
 800e1f6:	e000      	b.n	800e1fa <HAL_UART_IRQHandler+0x56e>
    return;
 800e1f8:	bf00      	nop
  }
}
 800e1fa:	3720      	adds	r7, #32
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}

0800e200 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e200:	b480      	push	{r7}
 800e202:	b083      	sub	sp, #12
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e208:	bf00      	nop
 800e20a:	370c      	adds	r7, #12
 800e20c:	46bd      	mov	sp, r7
 800e20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e212:	4770      	bx	lr

0800e214 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e214:	b480      	push	{r7}
 800e216:	b083      	sub	sp, #12
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e21c:	bf00      	nop
 800e21e:	370c      	adds	r7, #12
 800e220:	46bd      	mov	sp, r7
 800e222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e226:	4770      	bx	lr

0800e228 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e228:	b480      	push	{r7}
 800e22a:	b083      	sub	sp, #12
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e230:	bf00      	nop
 800e232:	370c      	adds	r7, #12
 800e234:	46bd      	mov	sp, r7
 800e236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23a:	4770      	bx	lr

0800e23c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e23c:	b480      	push	{r7}
 800e23e:	b083      	sub	sp, #12
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	460b      	mov	r3, r1
 800e246:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e248:	bf00      	nop
 800e24a:	370c      	adds	r7, #12
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr

0800e254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e254:	b5b0      	push	{r4, r5, r7, lr}
 800e256:	b08e      	sub	sp, #56	; 0x38
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e25c:	2300      	movs	r3, #0
 800e25e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	689a      	ldr	r2, [r3, #8]
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	691b      	ldr	r3, [r3, #16]
 800e26a:	431a      	orrs	r2, r3
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	695b      	ldr	r3, [r3, #20]
 800e270:	431a      	orrs	r2, r3
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	69db      	ldr	r3, [r3, #28]
 800e276:	4313      	orrs	r3, r2
 800e278:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	681a      	ldr	r2, [r3, #0]
 800e280:	4bbf      	ldr	r3, [pc, #764]	; (800e580 <UART_SetConfig+0x32c>)
 800e282:	4013      	ands	r3, r2
 800e284:	687a      	ldr	r2, [r7, #4]
 800e286:	6812      	ldr	r2, [r2, #0]
 800e288:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e28a:	430b      	orrs	r3, r1
 800e28c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	685b      	ldr	r3, [r3, #4]
 800e294:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	68da      	ldr	r2, [r3, #12]
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	430a      	orrs	r2, r1
 800e2a2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	699b      	ldr	r3, [r3, #24]
 800e2a8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	4ab5      	ldr	r2, [pc, #724]	; (800e584 <UART_SetConfig+0x330>)
 800e2b0:	4293      	cmp	r3, r2
 800e2b2:	d004      	beq.n	800e2be <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6a1b      	ldr	r3, [r3, #32]
 800e2b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e2ba:	4313      	orrs	r3, r2
 800e2bc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	689a      	ldr	r2, [r3, #8]
 800e2c4:	4bb0      	ldr	r3, [pc, #704]	; (800e588 <UART_SetConfig+0x334>)
 800e2c6:	4013      	ands	r3, r2
 800e2c8:	687a      	ldr	r2, [r7, #4]
 800e2ca:	6812      	ldr	r2, [r2, #0]
 800e2cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e2ce:	430b      	orrs	r3, r1
 800e2d0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2d8:	f023 010f 	bic.w	r1, r3, #15
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	430a      	orrs	r2, r1
 800e2e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	4aa7      	ldr	r2, [pc, #668]	; (800e58c <UART_SetConfig+0x338>)
 800e2ee:	4293      	cmp	r3, r2
 800e2f0:	d176      	bne.n	800e3e0 <UART_SetConfig+0x18c>
 800e2f2:	4ba7      	ldr	r3, [pc, #668]	; (800e590 <UART_SetConfig+0x33c>)
 800e2f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e2fa:	2b28      	cmp	r3, #40	; 0x28
 800e2fc:	d86c      	bhi.n	800e3d8 <UART_SetConfig+0x184>
 800e2fe:	a201      	add	r2, pc, #4	; (adr r2, 800e304 <UART_SetConfig+0xb0>)
 800e300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e304:	0800e3a9 	.word	0x0800e3a9
 800e308:	0800e3d9 	.word	0x0800e3d9
 800e30c:	0800e3d9 	.word	0x0800e3d9
 800e310:	0800e3d9 	.word	0x0800e3d9
 800e314:	0800e3d9 	.word	0x0800e3d9
 800e318:	0800e3d9 	.word	0x0800e3d9
 800e31c:	0800e3d9 	.word	0x0800e3d9
 800e320:	0800e3d9 	.word	0x0800e3d9
 800e324:	0800e3b1 	.word	0x0800e3b1
 800e328:	0800e3d9 	.word	0x0800e3d9
 800e32c:	0800e3d9 	.word	0x0800e3d9
 800e330:	0800e3d9 	.word	0x0800e3d9
 800e334:	0800e3d9 	.word	0x0800e3d9
 800e338:	0800e3d9 	.word	0x0800e3d9
 800e33c:	0800e3d9 	.word	0x0800e3d9
 800e340:	0800e3d9 	.word	0x0800e3d9
 800e344:	0800e3b9 	.word	0x0800e3b9
 800e348:	0800e3d9 	.word	0x0800e3d9
 800e34c:	0800e3d9 	.word	0x0800e3d9
 800e350:	0800e3d9 	.word	0x0800e3d9
 800e354:	0800e3d9 	.word	0x0800e3d9
 800e358:	0800e3d9 	.word	0x0800e3d9
 800e35c:	0800e3d9 	.word	0x0800e3d9
 800e360:	0800e3d9 	.word	0x0800e3d9
 800e364:	0800e3c1 	.word	0x0800e3c1
 800e368:	0800e3d9 	.word	0x0800e3d9
 800e36c:	0800e3d9 	.word	0x0800e3d9
 800e370:	0800e3d9 	.word	0x0800e3d9
 800e374:	0800e3d9 	.word	0x0800e3d9
 800e378:	0800e3d9 	.word	0x0800e3d9
 800e37c:	0800e3d9 	.word	0x0800e3d9
 800e380:	0800e3d9 	.word	0x0800e3d9
 800e384:	0800e3c9 	.word	0x0800e3c9
 800e388:	0800e3d9 	.word	0x0800e3d9
 800e38c:	0800e3d9 	.word	0x0800e3d9
 800e390:	0800e3d9 	.word	0x0800e3d9
 800e394:	0800e3d9 	.word	0x0800e3d9
 800e398:	0800e3d9 	.word	0x0800e3d9
 800e39c:	0800e3d9 	.word	0x0800e3d9
 800e3a0:	0800e3d9 	.word	0x0800e3d9
 800e3a4:	0800e3d1 	.word	0x0800e3d1
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3ae:	e222      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e3b0:	2304      	movs	r3, #4
 800e3b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3b6:	e21e      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e3b8:	2308      	movs	r3, #8
 800e3ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3be:	e21a      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e3c0:	2310      	movs	r3, #16
 800e3c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3c6:	e216      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e3c8:	2320      	movs	r3, #32
 800e3ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3ce:	e212      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e3d0:	2340      	movs	r3, #64	; 0x40
 800e3d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3d6:	e20e      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e3d8:	2380      	movs	r3, #128	; 0x80
 800e3da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3de:	e20a      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	4a6b      	ldr	r2, [pc, #428]	; (800e594 <UART_SetConfig+0x340>)
 800e3e6:	4293      	cmp	r3, r2
 800e3e8:	d130      	bne.n	800e44c <UART_SetConfig+0x1f8>
 800e3ea:	4b69      	ldr	r3, [pc, #420]	; (800e590 <UART_SetConfig+0x33c>)
 800e3ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3ee:	f003 0307 	and.w	r3, r3, #7
 800e3f2:	2b05      	cmp	r3, #5
 800e3f4:	d826      	bhi.n	800e444 <UART_SetConfig+0x1f0>
 800e3f6:	a201      	add	r2, pc, #4	; (adr r2, 800e3fc <UART_SetConfig+0x1a8>)
 800e3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3fc:	0800e415 	.word	0x0800e415
 800e400:	0800e41d 	.word	0x0800e41d
 800e404:	0800e425 	.word	0x0800e425
 800e408:	0800e42d 	.word	0x0800e42d
 800e40c:	0800e435 	.word	0x0800e435
 800e410:	0800e43d 	.word	0x0800e43d
 800e414:	2300      	movs	r3, #0
 800e416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e41a:	e1ec      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e41c:	2304      	movs	r3, #4
 800e41e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e422:	e1e8      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e424:	2308      	movs	r3, #8
 800e426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e42a:	e1e4      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e42c:	2310      	movs	r3, #16
 800e42e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e432:	e1e0      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e434:	2320      	movs	r3, #32
 800e436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e43a:	e1dc      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e43c:	2340      	movs	r3, #64	; 0x40
 800e43e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e442:	e1d8      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e444:	2380      	movs	r3, #128	; 0x80
 800e446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e44a:	e1d4      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	4a51      	ldr	r2, [pc, #324]	; (800e598 <UART_SetConfig+0x344>)
 800e452:	4293      	cmp	r3, r2
 800e454:	d130      	bne.n	800e4b8 <UART_SetConfig+0x264>
 800e456:	4b4e      	ldr	r3, [pc, #312]	; (800e590 <UART_SetConfig+0x33c>)
 800e458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e45a:	f003 0307 	and.w	r3, r3, #7
 800e45e:	2b05      	cmp	r3, #5
 800e460:	d826      	bhi.n	800e4b0 <UART_SetConfig+0x25c>
 800e462:	a201      	add	r2, pc, #4	; (adr r2, 800e468 <UART_SetConfig+0x214>)
 800e464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e468:	0800e481 	.word	0x0800e481
 800e46c:	0800e489 	.word	0x0800e489
 800e470:	0800e491 	.word	0x0800e491
 800e474:	0800e499 	.word	0x0800e499
 800e478:	0800e4a1 	.word	0x0800e4a1
 800e47c:	0800e4a9 	.word	0x0800e4a9
 800e480:	2300      	movs	r3, #0
 800e482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e486:	e1b6      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e488:	2304      	movs	r3, #4
 800e48a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e48e:	e1b2      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e490:	2308      	movs	r3, #8
 800e492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e496:	e1ae      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e498:	2310      	movs	r3, #16
 800e49a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e49e:	e1aa      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e4a0:	2320      	movs	r3, #32
 800e4a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4a6:	e1a6      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e4a8:	2340      	movs	r3, #64	; 0x40
 800e4aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4ae:	e1a2      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e4b0:	2380      	movs	r3, #128	; 0x80
 800e4b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4b6:	e19e      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	4a37      	ldr	r2, [pc, #220]	; (800e59c <UART_SetConfig+0x348>)
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	d130      	bne.n	800e524 <UART_SetConfig+0x2d0>
 800e4c2:	4b33      	ldr	r3, [pc, #204]	; (800e590 <UART_SetConfig+0x33c>)
 800e4c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4c6:	f003 0307 	and.w	r3, r3, #7
 800e4ca:	2b05      	cmp	r3, #5
 800e4cc:	d826      	bhi.n	800e51c <UART_SetConfig+0x2c8>
 800e4ce:	a201      	add	r2, pc, #4	; (adr r2, 800e4d4 <UART_SetConfig+0x280>)
 800e4d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4d4:	0800e4ed 	.word	0x0800e4ed
 800e4d8:	0800e4f5 	.word	0x0800e4f5
 800e4dc:	0800e4fd 	.word	0x0800e4fd
 800e4e0:	0800e505 	.word	0x0800e505
 800e4e4:	0800e50d 	.word	0x0800e50d
 800e4e8:	0800e515 	.word	0x0800e515
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4f2:	e180      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e4f4:	2304      	movs	r3, #4
 800e4f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4fa:	e17c      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e4fc:	2308      	movs	r3, #8
 800e4fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e502:	e178      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e504:	2310      	movs	r3, #16
 800e506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e50a:	e174      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e50c:	2320      	movs	r3, #32
 800e50e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e512:	e170      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e514:	2340      	movs	r3, #64	; 0x40
 800e516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e51a:	e16c      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e51c:	2380      	movs	r3, #128	; 0x80
 800e51e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e522:	e168      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	4a1d      	ldr	r2, [pc, #116]	; (800e5a0 <UART_SetConfig+0x34c>)
 800e52a:	4293      	cmp	r3, r2
 800e52c:	d142      	bne.n	800e5b4 <UART_SetConfig+0x360>
 800e52e:	4b18      	ldr	r3, [pc, #96]	; (800e590 <UART_SetConfig+0x33c>)
 800e530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e532:	f003 0307 	and.w	r3, r3, #7
 800e536:	2b05      	cmp	r3, #5
 800e538:	d838      	bhi.n	800e5ac <UART_SetConfig+0x358>
 800e53a:	a201      	add	r2, pc, #4	; (adr r2, 800e540 <UART_SetConfig+0x2ec>)
 800e53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e540:	0800e559 	.word	0x0800e559
 800e544:	0800e561 	.word	0x0800e561
 800e548:	0800e569 	.word	0x0800e569
 800e54c:	0800e571 	.word	0x0800e571
 800e550:	0800e579 	.word	0x0800e579
 800e554:	0800e5a5 	.word	0x0800e5a5
 800e558:	2300      	movs	r3, #0
 800e55a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e55e:	e14a      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e560:	2304      	movs	r3, #4
 800e562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e566:	e146      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e568:	2308      	movs	r3, #8
 800e56a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e56e:	e142      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e570:	2310      	movs	r3, #16
 800e572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e576:	e13e      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e578:	2320      	movs	r3, #32
 800e57a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e57e:	e13a      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e580:	cfff69f3 	.word	0xcfff69f3
 800e584:	58000c00 	.word	0x58000c00
 800e588:	11fff4ff 	.word	0x11fff4ff
 800e58c:	40011000 	.word	0x40011000
 800e590:	58024400 	.word	0x58024400
 800e594:	40004400 	.word	0x40004400
 800e598:	40004800 	.word	0x40004800
 800e59c:	40004c00 	.word	0x40004c00
 800e5a0:	40005000 	.word	0x40005000
 800e5a4:	2340      	movs	r3, #64	; 0x40
 800e5a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5aa:	e124      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e5ac:	2380      	movs	r3, #128	; 0x80
 800e5ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5b2:	e120      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	4acc      	ldr	r2, [pc, #816]	; (800e8ec <UART_SetConfig+0x698>)
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d176      	bne.n	800e6ac <UART_SetConfig+0x458>
 800e5be:	4bcc      	ldr	r3, [pc, #816]	; (800e8f0 <UART_SetConfig+0x69c>)
 800e5c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e5c6:	2b28      	cmp	r3, #40	; 0x28
 800e5c8:	d86c      	bhi.n	800e6a4 <UART_SetConfig+0x450>
 800e5ca:	a201      	add	r2, pc, #4	; (adr r2, 800e5d0 <UART_SetConfig+0x37c>)
 800e5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5d0:	0800e675 	.word	0x0800e675
 800e5d4:	0800e6a5 	.word	0x0800e6a5
 800e5d8:	0800e6a5 	.word	0x0800e6a5
 800e5dc:	0800e6a5 	.word	0x0800e6a5
 800e5e0:	0800e6a5 	.word	0x0800e6a5
 800e5e4:	0800e6a5 	.word	0x0800e6a5
 800e5e8:	0800e6a5 	.word	0x0800e6a5
 800e5ec:	0800e6a5 	.word	0x0800e6a5
 800e5f0:	0800e67d 	.word	0x0800e67d
 800e5f4:	0800e6a5 	.word	0x0800e6a5
 800e5f8:	0800e6a5 	.word	0x0800e6a5
 800e5fc:	0800e6a5 	.word	0x0800e6a5
 800e600:	0800e6a5 	.word	0x0800e6a5
 800e604:	0800e6a5 	.word	0x0800e6a5
 800e608:	0800e6a5 	.word	0x0800e6a5
 800e60c:	0800e6a5 	.word	0x0800e6a5
 800e610:	0800e685 	.word	0x0800e685
 800e614:	0800e6a5 	.word	0x0800e6a5
 800e618:	0800e6a5 	.word	0x0800e6a5
 800e61c:	0800e6a5 	.word	0x0800e6a5
 800e620:	0800e6a5 	.word	0x0800e6a5
 800e624:	0800e6a5 	.word	0x0800e6a5
 800e628:	0800e6a5 	.word	0x0800e6a5
 800e62c:	0800e6a5 	.word	0x0800e6a5
 800e630:	0800e68d 	.word	0x0800e68d
 800e634:	0800e6a5 	.word	0x0800e6a5
 800e638:	0800e6a5 	.word	0x0800e6a5
 800e63c:	0800e6a5 	.word	0x0800e6a5
 800e640:	0800e6a5 	.word	0x0800e6a5
 800e644:	0800e6a5 	.word	0x0800e6a5
 800e648:	0800e6a5 	.word	0x0800e6a5
 800e64c:	0800e6a5 	.word	0x0800e6a5
 800e650:	0800e695 	.word	0x0800e695
 800e654:	0800e6a5 	.word	0x0800e6a5
 800e658:	0800e6a5 	.word	0x0800e6a5
 800e65c:	0800e6a5 	.word	0x0800e6a5
 800e660:	0800e6a5 	.word	0x0800e6a5
 800e664:	0800e6a5 	.word	0x0800e6a5
 800e668:	0800e6a5 	.word	0x0800e6a5
 800e66c:	0800e6a5 	.word	0x0800e6a5
 800e670:	0800e69d 	.word	0x0800e69d
 800e674:	2301      	movs	r3, #1
 800e676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e67a:	e0bc      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e67c:	2304      	movs	r3, #4
 800e67e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e682:	e0b8      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e684:	2308      	movs	r3, #8
 800e686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e68a:	e0b4      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e68c:	2310      	movs	r3, #16
 800e68e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e692:	e0b0      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e694:	2320      	movs	r3, #32
 800e696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e69a:	e0ac      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e69c:	2340      	movs	r3, #64	; 0x40
 800e69e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6a2:	e0a8      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e6a4:	2380      	movs	r3, #128	; 0x80
 800e6a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6aa:	e0a4      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	4a90      	ldr	r2, [pc, #576]	; (800e8f4 <UART_SetConfig+0x6a0>)
 800e6b2:	4293      	cmp	r3, r2
 800e6b4:	d130      	bne.n	800e718 <UART_SetConfig+0x4c4>
 800e6b6:	4b8e      	ldr	r3, [pc, #568]	; (800e8f0 <UART_SetConfig+0x69c>)
 800e6b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6ba:	f003 0307 	and.w	r3, r3, #7
 800e6be:	2b05      	cmp	r3, #5
 800e6c0:	d826      	bhi.n	800e710 <UART_SetConfig+0x4bc>
 800e6c2:	a201      	add	r2, pc, #4	; (adr r2, 800e6c8 <UART_SetConfig+0x474>)
 800e6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6c8:	0800e6e1 	.word	0x0800e6e1
 800e6cc:	0800e6e9 	.word	0x0800e6e9
 800e6d0:	0800e6f1 	.word	0x0800e6f1
 800e6d4:	0800e6f9 	.word	0x0800e6f9
 800e6d8:	0800e701 	.word	0x0800e701
 800e6dc:	0800e709 	.word	0x0800e709
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6e6:	e086      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e6e8:	2304      	movs	r3, #4
 800e6ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6ee:	e082      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e6f0:	2308      	movs	r3, #8
 800e6f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6f6:	e07e      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e6f8:	2310      	movs	r3, #16
 800e6fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6fe:	e07a      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e700:	2320      	movs	r3, #32
 800e702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e706:	e076      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e708:	2340      	movs	r3, #64	; 0x40
 800e70a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e70e:	e072      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e710:	2380      	movs	r3, #128	; 0x80
 800e712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e716:	e06e      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	4a76      	ldr	r2, [pc, #472]	; (800e8f8 <UART_SetConfig+0x6a4>)
 800e71e:	4293      	cmp	r3, r2
 800e720:	d130      	bne.n	800e784 <UART_SetConfig+0x530>
 800e722:	4b73      	ldr	r3, [pc, #460]	; (800e8f0 <UART_SetConfig+0x69c>)
 800e724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e726:	f003 0307 	and.w	r3, r3, #7
 800e72a:	2b05      	cmp	r3, #5
 800e72c:	d826      	bhi.n	800e77c <UART_SetConfig+0x528>
 800e72e:	a201      	add	r2, pc, #4	; (adr r2, 800e734 <UART_SetConfig+0x4e0>)
 800e730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e734:	0800e74d 	.word	0x0800e74d
 800e738:	0800e755 	.word	0x0800e755
 800e73c:	0800e75d 	.word	0x0800e75d
 800e740:	0800e765 	.word	0x0800e765
 800e744:	0800e76d 	.word	0x0800e76d
 800e748:	0800e775 	.word	0x0800e775
 800e74c:	2300      	movs	r3, #0
 800e74e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e752:	e050      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e754:	2304      	movs	r3, #4
 800e756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e75a:	e04c      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e75c:	2308      	movs	r3, #8
 800e75e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e762:	e048      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e764:	2310      	movs	r3, #16
 800e766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e76a:	e044      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e76c:	2320      	movs	r3, #32
 800e76e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e772:	e040      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e774:	2340      	movs	r3, #64	; 0x40
 800e776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e77a:	e03c      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e77c:	2380      	movs	r3, #128	; 0x80
 800e77e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e782:	e038      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	4a5c      	ldr	r2, [pc, #368]	; (800e8fc <UART_SetConfig+0x6a8>)
 800e78a:	4293      	cmp	r3, r2
 800e78c:	d130      	bne.n	800e7f0 <UART_SetConfig+0x59c>
 800e78e:	4b58      	ldr	r3, [pc, #352]	; (800e8f0 <UART_SetConfig+0x69c>)
 800e790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e792:	f003 0307 	and.w	r3, r3, #7
 800e796:	2b05      	cmp	r3, #5
 800e798:	d826      	bhi.n	800e7e8 <UART_SetConfig+0x594>
 800e79a:	a201      	add	r2, pc, #4	; (adr r2, 800e7a0 <UART_SetConfig+0x54c>)
 800e79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a0:	0800e7b9 	.word	0x0800e7b9
 800e7a4:	0800e7c1 	.word	0x0800e7c1
 800e7a8:	0800e7c9 	.word	0x0800e7c9
 800e7ac:	0800e7d1 	.word	0x0800e7d1
 800e7b0:	0800e7d9 	.word	0x0800e7d9
 800e7b4:	0800e7e1 	.word	0x0800e7e1
 800e7b8:	2302      	movs	r3, #2
 800e7ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7be:	e01a      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e7c0:	2304      	movs	r3, #4
 800e7c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7c6:	e016      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e7c8:	2308      	movs	r3, #8
 800e7ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7ce:	e012      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e7d0:	2310      	movs	r3, #16
 800e7d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7d6:	e00e      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e7d8:	2320      	movs	r3, #32
 800e7da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7de:	e00a      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e7e0:	2340      	movs	r3, #64	; 0x40
 800e7e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7e6:	e006      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e7e8:	2380      	movs	r3, #128	; 0x80
 800e7ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7ee:	e002      	b.n	800e7f6 <UART_SetConfig+0x5a2>
 800e7f0:	2380      	movs	r3, #128	; 0x80
 800e7f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	4a40      	ldr	r2, [pc, #256]	; (800e8fc <UART_SetConfig+0x6a8>)
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	f040 80ef 	bne.w	800e9e0 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e802:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e806:	2b20      	cmp	r3, #32
 800e808:	dc46      	bgt.n	800e898 <UART_SetConfig+0x644>
 800e80a:	2b02      	cmp	r3, #2
 800e80c:	f2c0 8081 	blt.w	800e912 <UART_SetConfig+0x6be>
 800e810:	3b02      	subs	r3, #2
 800e812:	2b1e      	cmp	r3, #30
 800e814:	d87d      	bhi.n	800e912 <UART_SetConfig+0x6be>
 800e816:	a201      	add	r2, pc, #4	; (adr r2, 800e81c <UART_SetConfig+0x5c8>)
 800e818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e81c:	0800e89f 	.word	0x0800e89f
 800e820:	0800e913 	.word	0x0800e913
 800e824:	0800e8a7 	.word	0x0800e8a7
 800e828:	0800e913 	.word	0x0800e913
 800e82c:	0800e913 	.word	0x0800e913
 800e830:	0800e913 	.word	0x0800e913
 800e834:	0800e8b7 	.word	0x0800e8b7
 800e838:	0800e913 	.word	0x0800e913
 800e83c:	0800e913 	.word	0x0800e913
 800e840:	0800e913 	.word	0x0800e913
 800e844:	0800e913 	.word	0x0800e913
 800e848:	0800e913 	.word	0x0800e913
 800e84c:	0800e913 	.word	0x0800e913
 800e850:	0800e913 	.word	0x0800e913
 800e854:	0800e8c7 	.word	0x0800e8c7
 800e858:	0800e913 	.word	0x0800e913
 800e85c:	0800e913 	.word	0x0800e913
 800e860:	0800e913 	.word	0x0800e913
 800e864:	0800e913 	.word	0x0800e913
 800e868:	0800e913 	.word	0x0800e913
 800e86c:	0800e913 	.word	0x0800e913
 800e870:	0800e913 	.word	0x0800e913
 800e874:	0800e913 	.word	0x0800e913
 800e878:	0800e913 	.word	0x0800e913
 800e87c:	0800e913 	.word	0x0800e913
 800e880:	0800e913 	.word	0x0800e913
 800e884:	0800e913 	.word	0x0800e913
 800e888:	0800e913 	.word	0x0800e913
 800e88c:	0800e913 	.word	0x0800e913
 800e890:	0800e913 	.word	0x0800e913
 800e894:	0800e905 	.word	0x0800e905
 800e898:	2b40      	cmp	r3, #64	; 0x40
 800e89a:	d036      	beq.n	800e90a <UART_SetConfig+0x6b6>
 800e89c:	e039      	b.n	800e912 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e89e:	f7fd f8b3 	bl	800ba08 <HAL_RCCEx_GetD3PCLK1Freq>
 800e8a2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e8a4:	e03b      	b.n	800e91e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e8a6:	f107 0314 	add.w	r3, r7, #20
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f7fd f8c2 	bl	800ba34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e8b0:	69bb      	ldr	r3, [r7, #24]
 800e8b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e8b4:	e033      	b.n	800e91e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e8b6:	f107 0308 	add.w	r3, r7, #8
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f7fd fa0e 	bl	800bcdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e8c4:	e02b      	b.n	800e91e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e8c6:	4b0a      	ldr	r3, [pc, #40]	; (800e8f0 <UART_SetConfig+0x69c>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	f003 0320 	and.w	r3, r3, #32
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d009      	beq.n	800e8e6 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e8d2:	4b07      	ldr	r3, [pc, #28]	; (800e8f0 <UART_SetConfig+0x69c>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	08db      	lsrs	r3, r3, #3
 800e8d8:	f003 0303 	and.w	r3, r3, #3
 800e8dc:	4a08      	ldr	r2, [pc, #32]	; (800e900 <UART_SetConfig+0x6ac>)
 800e8de:	fa22 f303 	lsr.w	r3, r2, r3
 800e8e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e8e4:	e01b      	b.n	800e91e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800e8e6:	4b06      	ldr	r3, [pc, #24]	; (800e900 <UART_SetConfig+0x6ac>)
 800e8e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e8ea:	e018      	b.n	800e91e <UART_SetConfig+0x6ca>
 800e8ec:	40011400 	.word	0x40011400
 800e8f0:	58024400 	.word	0x58024400
 800e8f4:	40007800 	.word	0x40007800
 800e8f8:	40007c00 	.word	0x40007c00
 800e8fc:	58000c00 	.word	0x58000c00
 800e900:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e904:	4bc4      	ldr	r3, [pc, #784]	; (800ec18 <UART_SetConfig+0x9c4>)
 800e906:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e908:	e009      	b.n	800e91e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e90a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e90e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e910:	e005      	b.n	800e91e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800e912:	2300      	movs	r3, #0
 800e914:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e916:	2301      	movs	r3, #1
 800e918:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e91c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e920:	2b00      	cmp	r3, #0
 800e922:	f000 81da 	beq.w	800ecda <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e92a:	4abc      	ldr	r2, [pc, #752]	; (800ec1c <UART_SetConfig+0x9c8>)
 800e92c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e930:	461a      	mov	r2, r3
 800e932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e934:	fbb3 f3f2 	udiv	r3, r3, r2
 800e938:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	685a      	ldr	r2, [r3, #4]
 800e93e:	4613      	mov	r3, r2
 800e940:	005b      	lsls	r3, r3, #1
 800e942:	4413      	add	r3, r2
 800e944:	6a3a      	ldr	r2, [r7, #32]
 800e946:	429a      	cmp	r2, r3
 800e948:	d305      	bcc.n	800e956 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	685b      	ldr	r3, [r3, #4]
 800e94e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e950:	6a3a      	ldr	r2, [r7, #32]
 800e952:	429a      	cmp	r2, r3
 800e954:	d903      	bls.n	800e95e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800e956:	2301      	movs	r3, #1
 800e958:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e95c:	e1bd      	b.n	800ecda <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e960:	4618      	mov	r0, r3
 800e962:	f04f 0100 	mov.w	r1, #0
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e96a:	4aac      	ldr	r2, [pc, #688]	; (800ec1c <UART_SetConfig+0x9c8>)
 800e96c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e970:	b29a      	uxth	r2, r3
 800e972:	f04f 0300 	mov.w	r3, #0
 800e976:	f7f1 fd0b 	bl	8000390 <__aeabi_uldivmod>
 800e97a:	4602      	mov	r2, r0
 800e97c:	460b      	mov	r3, r1
 800e97e:	4610      	mov	r0, r2
 800e980:	4619      	mov	r1, r3
 800e982:	f04f 0200 	mov.w	r2, #0
 800e986:	f04f 0300 	mov.w	r3, #0
 800e98a:	020b      	lsls	r3, r1, #8
 800e98c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e990:	0202      	lsls	r2, r0, #8
 800e992:	6879      	ldr	r1, [r7, #4]
 800e994:	6849      	ldr	r1, [r1, #4]
 800e996:	0849      	lsrs	r1, r1, #1
 800e998:	4608      	mov	r0, r1
 800e99a:	f04f 0100 	mov.w	r1, #0
 800e99e:	1814      	adds	r4, r2, r0
 800e9a0:	eb43 0501 	adc.w	r5, r3, r1
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	685b      	ldr	r3, [r3, #4]
 800e9a8:	461a      	mov	r2, r3
 800e9aa:	f04f 0300 	mov.w	r3, #0
 800e9ae:	4620      	mov	r0, r4
 800e9b0:	4629      	mov	r1, r5
 800e9b2:	f7f1 fced 	bl	8000390 <__aeabi_uldivmod>
 800e9b6:	4602      	mov	r2, r0
 800e9b8:	460b      	mov	r3, r1
 800e9ba:	4613      	mov	r3, r2
 800e9bc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e9c4:	d308      	bcc.n	800e9d8 <UART_SetConfig+0x784>
 800e9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e9cc:	d204      	bcs.n	800e9d8 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9d4:	60da      	str	r2, [r3, #12]
 800e9d6:	e180      	b.n	800ecda <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800e9d8:	2301      	movs	r3, #1
 800e9da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e9de:	e17c      	b.n	800ecda <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	69db      	ldr	r3, [r3, #28]
 800e9e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9e8:	f040 80bf 	bne.w	800eb6a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800e9ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e9f0:	2b20      	cmp	r3, #32
 800e9f2:	dc49      	bgt.n	800ea88 <UART_SetConfig+0x834>
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	db7c      	blt.n	800eaf2 <UART_SetConfig+0x89e>
 800e9f8:	2b20      	cmp	r3, #32
 800e9fa:	d87a      	bhi.n	800eaf2 <UART_SetConfig+0x89e>
 800e9fc:	a201      	add	r2, pc, #4	; (adr r2, 800ea04 <UART_SetConfig+0x7b0>)
 800e9fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea02:	bf00      	nop
 800ea04:	0800ea8f 	.word	0x0800ea8f
 800ea08:	0800ea97 	.word	0x0800ea97
 800ea0c:	0800eaf3 	.word	0x0800eaf3
 800ea10:	0800eaf3 	.word	0x0800eaf3
 800ea14:	0800ea9f 	.word	0x0800ea9f
 800ea18:	0800eaf3 	.word	0x0800eaf3
 800ea1c:	0800eaf3 	.word	0x0800eaf3
 800ea20:	0800eaf3 	.word	0x0800eaf3
 800ea24:	0800eaaf 	.word	0x0800eaaf
 800ea28:	0800eaf3 	.word	0x0800eaf3
 800ea2c:	0800eaf3 	.word	0x0800eaf3
 800ea30:	0800eaf3 	.word	0x0800eaf3
 800ea34:	0800eaf3 	.word	0x0800eaf3
 800ea38:	0800eaf3 	.word	0x0800eaf3
 800ea3c:	0800eaf3 	.word	0x0800eaf3
 800ea40:	0800eaf3 	.word	0x0800eaf3
 800ea44:	0800eabf 	.word	0x0800eabf
 800ea48:	0800eaf3 	.word	0x0800eaf3
 800ea4c:	0800eaf3 	.word	0x0800eaf3
 800ea50:	0800eaf3 	.word	0x0800eaf3
 800ea54:	0800eaf3 	.word	0x0800eaf3
 800ea58:	0800eaf3 	.word	0x0800eaf3
 800ea5c:	0800eaf3 	.word	0x0800eaf3
 800ea60:	0800eaf3 	.word	0x0800eaf3
 800ea64:	0800eaf3 	.word	0x0800eaf3
 800ea68:	0800eaf3 	.word	0x0800eaf3
 800ea6c:	0800eaf3 	.word	0x0800eaf3
 800ea70:	0800eaf3 	.word	0x0800eaf3
 800ea74:	0800eaf3 	.word	0x0800eaf3
 800ea78:	0800eaf3 	.word	0x0800eaf3
 800ea7c:	0800eaf3 	.word	0x0800eaf3
 800ea80:	0800eaf3 	.word	0x0800eaf3
 800ea84:	0800eae5 	.word	0x0800eae5
 800ea88:	2b40      	cmp	r3, #64	; 0x40
 800ea8a:	d02e      	beq.n	800eaea <UART_SetConfig+0x896>
 800ea8c:	e031      	b.n	800eaf2 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ea8e:	f7fc f84f 	bl	800ab30 <HAL_RCC_GetPCLK1Freq>
 800ea92:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ea94:	e033      	b.n	800eafe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ea96:	f7fc f861 	bl	800ab5c <HAL_RCC_GetPCLK2Freq>
 800ea9a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ea9c:	e02f      	b.n	800eafe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea9e:	f107 0314 	add.w	r3, r7, #20
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f7fc ffc6 	bl	800ba34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eaa8:	69bb      	ldr	r3, [r7, #24]
 800eaaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eaac:	e027      	b.n	800eafe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eaae:	f107 0308 	add.w	r3, r7, #8
 800eab2:	4618      	mov	r0, r3
 800eab4:	f7fd f912 	bl	800bcdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eabc:	e01f      	b.n	800eafe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eabe:	4b58      	ldr	r3, [pc, #352]	; (800ec20 <UART_SetConfig+0x9cc>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	f003 0320 	and.w	r3, r3, #32
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d009      	beq.n	800eade <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eaca:	4b55      	ldr	r3, [pc, #340]	; (800ec20 <UART_SetConfig+0x9cc>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	08db      	lsrs	r3, r3, #3
 800ead0:	f003 0303 	and.w	r3, r3, #3
 800ead4:	4a53      	ldr	r2, [pc, #332]	; (800ec24 <UART_SetConfig+0x9d0>)
 800ead6:	fa22 f303 	lsr.w	r3, r2, r3
 800eada:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eadc:	e00f      	b.n	800eafe <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800eade:	4b51      	ldr	r3, [pc, #324]	; (800ec24 <UART_SetConfig+0x9d0>)
 800eae0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eae2:	e00c      	b.n	800eafe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eae4:	4b4c      	ldr	r3, [pc, #304]	; (800ec18 <UART_SetConfig+0x9c4>)
 800eae6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eae8:	e009      	b.n	800eafe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eaea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eaee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eaf0:	e005      	b.n	800eafe <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800eaf6:	2301      	movs	r3, #1
 800eaf8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800eafc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800eafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	f000 80ea 	beq.w	800ecda <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb0a:	4a44      	ldr	r2, [pc, #272]	; (800ec1c <UART_SetConfig+0x9c8>)
 800eb0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb10:	461a      	mov	r2, r3
 800eb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb14:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb18:	005a      	lsls	r2, r3, #1
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	685b      	ldr	r3, [r3, #4]
 800eb1e:	085b      	lsrs	r3, r3, #1
 800eb20:	441a      	add	r2, r3
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	685b      	ldr	r3, [r3, #4]
 800eb26:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb2a:	b29b      	uxth	r3, r3
 800eb2c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb30:	2b0f      	cmp	r3, #15
 800eb32:	d916      	bls.n	800eb62 <UART_SetConfig+0x90e>
 800eb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb3a:	d212      	bcs.n	800eb62 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800eb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb3e:	b29b      	uxth	r3, r3
 800eb40:	f023 030f 	bic.w	r3, r3, #15
 800eb44:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800eb46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb48:	085b      	lsrs	r3, r3, #1
 800eb4a:	b29b      	uxth	r3, r3
 800eb4c:	f003 0307 	and.w	r3, r3, #7
 800eb50:	b29a      	uxth	r2, r3
 800eb52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eb54:	4313      	orrs	r3, r2
 800eb56:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eb5e:	60da      	str	r2, [r3, #12]
 800eb60:	e0bb      	b.n	800ecda <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800eb62:	2301      	movs	r3, #1
 800eb64:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800eb68:	e0b7      	b.n	800ecda <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800eb6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800eb6e:	2b20      	cmp	r3, #32
 800eb70:	dc4a      	bgt.n	800ec08 <UART_SetConfig+0x9b4>
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	f2c0 8086 	blt.w	800ec84 <UART_SetConfig+0xa30>
 800eb78:	2b20      	cmp	r3, #32
 800eb7a:	f200 8083 	bhi.w	800ec84 <UART_SetConfig+0xa30>
 800eb7e:	a201      	add	r2, pc, #4	; (adr r2, 800eb84 <UART_SetConfig+0x930>)
 800eb80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb84:	0800ec0f 	.word	0x0800ec0f
 800eb88:	0800ec29 	.word	0x0800ec29
 800eb8c:	0800ec85 	.word	0x0800ec85
 800eb90:	0800ec85 	.word	0x0800ec85
 800eb94:	0800ec31 	.word	0x0800ec31
 800eb98:	0800ec85 	.word	0x0800ec85
 800eb9c:	0800ec85 	.word	0x0800ec85
 800eba0:	0800ec85 	.word	0x0800ec85
 800eba4:	0800ec41 	.word	0x0800ec41
 800eba8:	0800ec85 	.word	0x0800ec85
 800ebac:	0800ec85 	.word	0x0800ec85
 800ebb0:	0800ec85 	.word	0x0800ec85
 800ebb4:	0800ec85 	.word	0x0800ec85
 800ebb8:	0800ec85 	.word	0x0800ec85
 800ebbc:	0800ec85 	.word	0x0800ec85
 800ebc0:	0800ec85 	.word	0x0800ec85
 800ebc4:	0800ec51 	.word	0x0800ec51
 800ebc8:	0800ec85 	.word	0x0800ec85
 800ebcc:	0800ec85 	.word	0x0800ec85
 800ebd0:	0800ec85 	.word	0x0800ec85
 800ebd4:	0800ec85 	.word	0x0800ec85
 800ebd8:	0800ec85 	.word	0x0800ec85
 800ebdc:	0800ec85 	.word	0x0800ec85
 800ebe0:	0800ec85 	.word	0x0800ec85
 800ebe4:	0800ec85 	.word	0x0800ec85
 800ebe8:	0800ec85 	.word	0x0800ec85
 800ebec:	0800ec85 	.word	0x0800ec85
 800ebf0:	0800ec85 	.word	0x0800ec85
 800ebf4:	0800ec85 	.word	0x0800ec85
 800ebf8:	0800ec85 	.word	0x0800ec85
 800ebfc:	0800ec85 	.word	0x0800ec85
 800ec00:	0800ec85 	.word	0x0800ec85
 800ec04:	0800ec77 	.word	0x0800ec77
 800ec08:	2b40      	cmp	r3, #64	; 0x40
 800ec0a:	d037      	beq.n	800ec7c <UART_SetConfig+0xa28>
 800ec0c:	e03a      	b.n	800ec84 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ec0e:	f7fb ff8f 	bl	800ab30 <HAL_RCC_GetPCLK1Freq>
 800ec12:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ec14:	e03c      	b.n	800ec90 <UART_SetConfig+0xa3c>
 800ec16:	bf00      	nop
 800ec18:	003d0900 	.word	0x003d0900
 800ec1c:	08012f10 	.word	0x08012f10
 800ec20:	58024400 	.word	0x58024400
 800ec24:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ec28:	f7fb ff98 	bl	800ab5c <HAL_RCC_GetPCLK2Freq>
 800ec2c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ec2e:	e02f      	b.n	800ec90 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ec30:	f107 0314 	add.w	r3, r7, #20
 800ec34:	4618      	mov	r0, r3
 800ec36:	f7fc fefd 	bl	800ba34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ec3a:	69bb      	ldr	r3, [r7, #24]
 800ec3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ec3e:	e027      	b.n	800ec90 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ec40:	f107 0308 	add.w	r3, r7, #8
 800ec44:	4618      	mov	r0, r3
 800ec46:	f7fd f849 	bl	800bcdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ec4e:	e01f      	b.n	800ec90 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ec50:	4b2c      	ldr	r3, [pc, #176]	; (800ed04 <UART_SetConfig+0xab0>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	f003 0320 	and.w	r3, r3, #32
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d009      	beq.n	800ec70 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ec5c:	4b29      	ldr	r3, [pc, #164]	; (800ed04 <UART_SetConfig+0xab0>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	08db      	lsrs	r3, r3, #3
 800ec62:	f003 0303 	and.w	r3, r3, #3
 800ec66:	4a28      	ldr	r2, [pc, #160]	; (800ed08 <UART_SetConfig+0xab4>)
 800ec68:	fa22 f303 	lsr.w	r3, r2, r3
 800ec6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ec6e:	e00f      	b.n	800ec90 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800ec70:	4b25      	ldr	r3, [pc, #148]	; (800ed08 <UART_SetConfig+0xab4>)
 800ec72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ec74:	e00c      	b.n	800ec90 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ec76:	4b25      	ldr	r3, [pc, #148]	; (800ed0c <UART_SetConfig+0xab8>)
 800ec78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ec7a:	e009      	b.n	800ec90 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ec82:	e005      	b.n	800ec90 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800ec84:	2300      	movs	r3, #0
 800ec86:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ec88:	2301      	movs	r3, #1
 800ec8a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ec8e:	bf00      	nop
    }

    if (pclk != 0U)
 800ec90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d021      	beq.n	800ecda <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec9a:	4a1d      	ldr	r2, [pc, #116]	; (800ed10 <UART_SetConfig+0xabc>)
 800ec9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eca0:	461a      	mov	r2, r3
 800eca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca4:	fbb3 f2f2 	udiv	r2, r3, r2
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	685b      	ldr	r3, [r3, #4]
 800ecac:	085b      	lsrs	r3, r3, #1
 800ecae:	441a      	add	r2, r3
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	685b      	ldr	r3, [r3, #4]
 800ecb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecb8:	b29b      	uxth	r3, r3
 800ecba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ecbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecbe:	2b0f      	cmp	r3, #15
 800ecc0:	d908      	bls.n	800ecd4 <UART_SetConfig+0xa80>
 800ecc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecc8:	d204      	bcs.n	800ecd4 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ecd0:	60da      	str	r2, [r3, #12]
 800ecd2:	e002      	b.n	800ecda <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800ecd4:	2301      	movs	r3, #1
 800ecd6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	2201      	movs	r2, #1
 800ecde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2201      	movs	r2, #1
 800ece6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	2200      	movs	r2, #0
 800ecee:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ecf6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3738      	adds	r7, #56	; 0x38
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bdb0      	pop	{r4, r5, r7, pc}
 800ed02:	bf00      	nop
 800ed04:	58024400 	.word	0x58024400
 800ed08:	03d09000 	.word	0x03d09000
 800ed0c:	003d0900 	.word	0x003d0900
 800ed10:	08012f10 	.word	0x08012f10

0800ed14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ed14:	b480      	push	{r7}
 800ed16:	b083      	sub	sp, #12
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed20:	f003 0301 	and.w	r3, r3, #1
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d00a      	beq.n	800ed3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	430a      	orrs	r2, r1
 800ed3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed42:	f003 0302 	and.w	r3, r3, #2
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d00a      	beq.n	800ed60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	685b      	ldr	r3, [r3, #4]
 800ed50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	430a      	orrs	r2, r1
 800ed5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed64:	f003 0304 	and.w	r3, r3, #4
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d00a      	beq.n	800ed82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	685b      	ldr	r3, [r3, #4]
 800ed72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	430a      	orrs	r2, r1
 800ed80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed86:	f003 0308 	and.w	r3, r3, #8
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d00a      	beq.n	800eda4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	685b      	ldr	r3, [r3, #4]
 800ed94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	430a      	orrs	r2, r1
 800eda2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eda8:	f003 0310 	and.w	r3, r3, #16
 800edac:	2b00      	cmp	r3, #0
 800edae:	d00a      	beq.n	800edc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	689b      	ldr	r3, [r3, #8]
 800edb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	430a      	orrs	r2, r1
 800edc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edca:	f003 0320 	and.w	r3, r3, #32
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d00a      	beq.n	800ede8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	689b      	ldr	r3, [r3, #8]
 800edd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	430a      	orrs	r2, r1
 800ede6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d01a      	beq.n	800ee2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	685b      	ldr	r3, [r3, #4]
 800edfa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	430a      	orrs	r2, r1
 800ee08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee12:	d10a      	bne.n	800ee2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	685b      	ldr	r3, [r3, #4]
 800ee1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	430a      	orrs	r2, r1
 800ee28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d00a      	beq.n	800ee4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	685b      	ldr	r3, [r3, #4]
 800ee3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	430a      	orrs	r2, r1
 800ee4a:	605a      	str	r2, [r3, #4]
  }
}
 800ee4c:	bf00      	nop
 800ee4e:	370c      	adds	r7, #12
 800ee50:	46bd      	mov	sp, r7
 800ee52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee56:	4770      	bx	lr

0800ee58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b086      	sub	sp, #24
 800ee5c:	af02      	add	r7, sp, #8
 800ee5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2200      	movs	r2, #0
 800ee64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ee68:	f7f5 fae0 	bl	800442c <HAL_GetTick>
 800ee6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	f003 0308 	and.w	r3, r3, #8
 800ee78:	2b08      	cmp	r3, #8
 800ee7a:	d10e      	bne.n	800ee9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ee7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ee80:	9300      	str	r3, [sp, #0]
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	2200      	movs	r2, #0
 800ee86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f000 f82f 	bl	800eeee <UART_WaitOnFlagUntilTimeout>
 800ee90:	4603      	mov	r3, r0
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d001      	beq.n	800ee9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ee96:	2303      	movs	r3, #3
 800ee98:	e025      	b.n	800eee6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	f003 0304 	and.w	r3, r3, #4
 800eea4:	2b04      	cmp	r3, #4
 800eea6:	d10e      	bne.n	800eec6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eea8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eeac:	9300      	str	r3, [sp, #0]
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800eeb6:	6878      	ldr	r0, [r7, #4]
 800eeb8:	f000 f819 	bl	800eeee <UART_WaitOnFlagUntilTimeout>
 800eebc:	4603      	mov	r3, r0
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d001      	beq.n	800eec6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eec2:	2303      	movs	r3, #3
 800eec4:	e00f      	b.n	800eee6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2220      	movs	r2, #32
 800eeca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	2220      	movs	r2, #32
 800eed2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2200      	movs	r2, #0
 800eeda:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2200      	movs	r2, #0
 800eee0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eee4:	2300      	movs	r3, #0
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	3710      	adds	r7, #16
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}

0800eeee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800eeee:	b580      	push	{r7, lr}
 800eef0:	b084      	sub	sp, #16
 800eef2:	af00      	add	r7, sp, #0
 800eef4:	60f8      	str	r0, [r7, #12]
 800eef6:	60b9      	str	r1, [r7, #8]
 800eef8:	603b      	str	r3, [r7, #0]
 800eefa:	4613      	mov	r3, r2
 800eefc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eefe:	e062      	b.n	800efc6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ef00:	69bb      	ldr	r3, [r7, #24]
 800ef02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef06:	d05e      	beq.n	800efc6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ef08:	f7f5 fa90 	bl	800442c <HAL_GetTick>
 800ef0c:	4602      	mov	r2, r0
 800ef0e:	683b      	ldr	r3, [r7, #0]
 800ef10:	1ad3      	subs	r3, r2, r3
 800ef12:	69ba      	ldr	r2, [r7, #24]
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d302      	bcc.n	800ef1e <UART_WaitOnFlagUntilTimeout+0x30>
 800ef18:	69bb      	ldr	r3, [r7, #24]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d11d      	bne.n	800ef5a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	681a      	ldr	r2, [r3, #0]
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ef2c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	689a      	ldr	r2, [r3, #8]
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	f022 0201 	bic.w	r2, r2, #1
 800ef3c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	2220      	movs	r2, #32
 800ef42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	2220      	movs	r2, #32
 800ef4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	2200      	movs	r2, #0
 800ef52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ef56:	2303      	movs	r3, #3
 800ef58:	e045      	b.n	800efe6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	f003 0304 	and.w	r3, r3, #4
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d02e      	beq.n	800efc6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	69db      	ldr	r3, [r3, #28]
 800ef6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ef72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef76:	d126      	bne.n	800efc6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ef80:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	681a      	ldr	r2, [r3, #0]
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ef90:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	689a      	ldr	r2, [r3, #8]
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	f022 0201 	bic.w	r2, r2, #1
 800efa0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	2220      	movs	r2, #32
 800efa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	2220      	movs	r2, #32
 800efae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	2220      	movs	r2, #32
 800efb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	2200      	movs	r2, #0
 800efbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800efc2:	2303      	movs	r3, #3
 800efc4:	e00f      	b.n	800efe6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	69da      	ldr	r2, [r3, #28]
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	4013      	ands	r3, r2
 800efd0:	68ba      	ldr	r2, [r7, #8]
 800efd2:	429a      	cmp	r2, r3
 800efd4:	bf0c      	ite	eq
 800efd6:	2301      	moveq	r3, #1
 800efd8:	2300      	movne	r3, #0
 800efda:	b2db      	uxtb	r3, r3
 800efdc:	461a      	mov	r2, r3
 800efde:	79fb      	ldrb	r3, [r7, #7]
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d08d      	beq.n	800ef00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800efe4:	2300      	movs	r3, #0
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	3710      	adds	r7, #16
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}
	...

0800eff0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800eff0:	b480      	push	{r7}
 800eff2:	b085      	sub	sp, #20
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	60f8      	str	r0, [r7, #12]
 800eff8:	60b9      	str	r1, [r7, #8]
 800effa:	4613      	mov	r3, r2
 800effc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	68ba      	ldr	r2, [r7, #8]
 800f002:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	88fa      	ldrh	r2, [r7, #6]
 800f008:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	88fa      	ldrh	r2, [r7, #6]
 800f010:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	2200      	movs	r2, #0
 800f018:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	689b      	ldr	r3, [r3, #8]
 800f01e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f022:	d10e      	bne.n	800f042 <UART_Start_Receive_IT+0x52>
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	691b      	ldr	r3, [r3, #16]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d105      	bne.n	800f038 <UART_Start_Receive_IT+0x48>
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f032:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f036:	e02d      	b.n	800f094 <UART_Start_Receive_IT+0xa4>
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	22ff      	movs	r2, #255	; 0xff
 800f03c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f040:	e028      	b.n	800f094 <UART_Start_Receive_IT+0xa4>
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	689b      	ldr	r3, [r3, #8]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d10d      	bne.n	800f066 <UART_Start_Receive_IT+0x76>
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	691b      	ldr	r3, [r3, #16]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d104      	bne.n	800f05c <UART_Start_Receive_IT+0x6c>
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	22ff      	movs	r2, #255	; 0xff
 800f056:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f05a:	e01b      	b.n	800f094 <UART_Start_Receive_IT+0xa4>
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	227f      	movs	r2, #127	; 0x7f
 800f060:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f064:	e016      	b.n	800f094 <UART_Start_Receive_IT+0xa4>
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	689b      	ldr	r3, [r3, #8]
 800f06a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f06e:	d10d      	bne.n	800f08c <UART_Start_Receive_IT+0x9c>
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	691b      	ldr	r3, [r3, #16]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d104      	bne.n	800f082 <UART_Start_Receive_IT+0x92>
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	227f      	movs	r2, #127	; 0x7f
 800f07c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f080:	e008      	b.n	800f094 <UART_Start_Receive_IT+0xa4>
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	223f      	movs	r2, #63	; 0x3f
 800f086:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f08a:	e003      	b.n	800f094 <UART_Start_Receive_IT+0xa4>
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	2200      	movs	r2, #0
 800f090:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	2200      	movs	r2, #0
 800f098:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	2222      	movs	r2, #34	; 0x22
 800f0a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	689a      	ldr	r2, [r3, #8]
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	f042 0201 	orr.w	r2, r2, #1
 800f0b2:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f0bc:	d12a      	bne.n	800f114 <UART_Start_Receive_IT+0x124>
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f0c4:	88fa      	ldrh	r2, [r7, #6]
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	d324      	bcc.n	800f114 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	689b      	ldr	r3, [r3, #8]
 800f0ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0d2:	d107      	bne.n	800f0e4 <UART_Start_Receive_IT+0xf4>
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	691b      	ldr	r3, [r3, #16]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d103      	bne.n	800f0e4 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	4a1f      	ldr	r2, [pc, #124]	; (800f15c <UART_Start_Receive_IT+0x16c>)
 800f0e0:	671a      	str	r2, [r3, #112]	; 0x70
 800f0e2:	e002      	b.n	800f0ea <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	4a1e      	ldr	r2, [pc, #120]	; (800f160 <UART_Start_Receive_IT+0x170>)
 800f0e8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	681a      	ldr	r2, [r3, #0]
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f100:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	689a      	ldr	r2, [r3, #8]
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800f110:	609a      	str	r2, [r3, #8]
 800f112:	e01b      	b.n	800f14c <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	689b      	ldr	r3, [r3, #8]
 800f118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f11c:	d107      	bne.n	800f12e <UART_Start_Receive_IT+0x13e>
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	691b      	ldr	r3, [r3, #16]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d103      	bne.n	800f12e <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	4a0e      	ldr	r2, [pc, #56]	; (800f164 <UART_Start_Receive_IT+0x174>)
 800f12a:	671a      	str	r2, [r3, #112]	; 0x70
 800f12c:	e002      	b.n	800f134 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	4a0d      	ldr	r2, [pc, #52]	; (800f168 <UART_Start_Receive_IT+0x178>)
 800f132:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	2200      	movs	r2, #0
 800f138:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	681a      	ldr	r2, [r3, #0]
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800f14a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800f14c:	2300      	movs	r3, #0
}
 800f14e:	4618      	mov	r0, r3
 800f150:	3714      	adds	r7, #20
 800f152:	46bd      	mov	sp, r7
 800f154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f158:	4770      	bx	lr
 800f15a:	bf00      	nop
 800f15c:	0800f70d 	.word	0x0800f70d
 800f160:	0800f509 	.word	0x0800f509
 800f164:	0800f431 	.word	0x0800f431
 800f168:	0800f359 	.word	0x0800f359

0800f16c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f16c:	b480      	push	{r7}
 800f16e:	b083      	sub	sp, #12
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	681a      	ldr	r2, [r3, #0]
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800f182:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	689a      	ldr	r2, [r3, #8]
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800f192:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2220      	movs	r2, #32
 800f198:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800f19c:	bf00      	nop
 800f19e:	370c      	adds	r7, #12
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a6:	4770      	bx	lr

0800f1a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b083      	sub	sp, #12
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	681a      	ldr	r2, [r3, #0]
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f1be:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	6899      	ldr	r1, [r3, #8]
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681a      	ldr	r2, [r3, #0]
 800f1ca:	4b0f      	ldr	r3, [pc, #60]	; (800f208 <UART_EndRxTransfer+0x60>)
 800f1cc:	400b      	ands	r3, r1
 800f1ce:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1d4:	2b01      	cmp	r3, #1
 800f1d6:	d107      	bne.n	800f1e8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	681a      	ldr	r2, [r3, #0]
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	f022 0210 	bic.w	r2, r2, #16
 800f1e6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2220      	movs	r2, #32
 800f1ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f1fc:	bf00      	nop
 800f1fe:	370c      	adds	r7, #12
 800f200:	46bd      	mov	sp, r7
 800f202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f206:	4770      	bx	lr
 800f208:	effffffe 	.word	0xeffffffe

0800f20c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b084      	sub	sp, #16
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f218:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	69db      	ldr	r3, [r3, #28]
 800f21e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f222:	d014      	beq.n	800f24e <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	2200      	movs	r2, #0
 800f228:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	689a      	ldr	r2, [r3, #8]
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f23a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	681a      	ldr	r2, [r3, #0]
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f24a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f24c:	e002      	b.n	800f254 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800f24e:	68f8      	ldr	r0, [r7, #12]
 800f250:	f7fe ffd6 	bl	800e200 <HAL_UART_TxCpltCallback>
}
 800f254:	bf00      	nop
 800f256:	3710      	adds	r7, #16
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}

0800f25c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b084      	sub	sp, #16
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f268:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f26a:	68f8      	ldr	r0, [r7, #12]
 800f26c:	f7fe ffd2 	bl	800e214 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f270:	bf00      	nop
 800f272:	3710      	adds	r7, #16
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}

0800f278 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b086      	sub	sp, #24
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f284:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f286:	697b      	ldr	r3, [r7, #20]
 800f288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f28c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f294:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f296:	697b      	ldr	r3, [r7, #20]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	689b      	ldr	r3, [r3, #8]
 800f29c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2a0:	2b80      	cmp	r3, #128	; 0x80
 800f2a2:	d109      	bne.n	800f2b8 <UART_DMAError+0x40>
 800f2a4:	693b      	ldr	r3, [r7, #16]
 800f2a6:	2b21      	cmp	r3, #33	; 0x21
 800f2a8:	d106      	bne.n	800f2b8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f2aa:	697b      	ldr	r3, [r7, #20]
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800f2b2:	6978      	ldr	r0, [r7, #20]
 800f2b4:	f7ff ff5a 	bl	800f16c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f2b8:	697b      	ldr	r3, [r7, #20]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	689b      	ldr	r3, [r3, #8]
 800f2be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2c2:	2b40      	cmp	r3, #64	; 0x40
 800f2c4:	d109      	bne.n	800f2da <UART_DMAError+0x62>
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	2b22      	cmp	r3, #34	; 0x22
 800f2ca:	d106      	bne.n	800f2da <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800f2d4:	6978      	ldr	r0, [r7, #20]
 800f2d6:	f7ff ff67 	bl	800f1a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f2e0:	f043 0210 	orr.w	r2, r3, #16
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f2ea:	6978      	ldr	r0, [r7, #20]
 800f2ec:	f7fe ff9c 	bl	800e228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f2f0:	bf00      	nop
 800f2f2:	3718      	adds	r7, #24
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}

0800f2f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b084      	sub	sp, #16
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f304:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	2200      	movs	r2, #0
 800f30a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	2200      	movs	r2, #0
 800f312:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f316:	68f8      	ldr	r0, [r7, #12]
 800f318:	f7fe ff86 	bl	800e228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f31c:	bf00      	nop
 800f31e:	3710      	adds	r7, #16
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}

0800f324 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b082      	sub	sp, #8
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	681a      	ldr	r2, [r3, #0]
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f33a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2220      	movs	r2, #32
 800f340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2200      	movs	r2, #0
 800f348:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f7fe ff58 	bl	800e200 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f350:	bf00      	nop
 800f352:	3708      	adds	r7, #8
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}

0800f358 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b084      	sub	sp, #16
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f366:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f36e:	2b22      	cmp	r3, #34	; 0x22
 800f370:	d152      	bne.n	800f418 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f378:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f37a:	89bb      	ldrh	r3, [r7, #12]
 800f37c:	b2d9      	uxtb	r1, r3
 800f37e:	89fb      	ldrh	r3, [r7, #14]
 800f380:	b2da      	uxtb	r2, r3
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f386:	400a      	ands	r2, r1
 800f388:	b2d2      	uxtb	r2, r2
 800f38a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f390:	1c5a      	adds	r2, r3, #1
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f39c:	b29b      	uxth	r3, r3
 800f39e:	3b01      	subs	r3, #1
 800f3a0:	b29a      	uxth	r2, r3
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f3ae:	b29b      	uxth	r3, r3
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d139      	bne.n	800f428 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	681a      	ldr	r2, [r3, #0]
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f3c2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	689a      	ldr	r2, [r3, #8]
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	f022 0201 	bic.w	r2, r2, #1
 800f3d2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2220      	movs	r2, #32
 800f3d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2200      	movs	r2, #0
 800f3e0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3e6:	2b01      	cmp	r3, #1
 800f3e8:	d10f      	bne.n	800f40a <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	681a      	ldr	r2, [r3, #0]
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	f022 0210 	bic.w	r2, r2, #16
 800f3f8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f400:	4619      	mov	r1, r3
 800f402:	6878      	ldr	r0, [r7, #4]
 800f404:	f7fe ff1a 	bl	800e23c <HAL_UARTEx_RxEventCallback>
 800f408:	e002      	b.n	800f410 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f7f4 f9fc 	bl	8003808 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2200      	movs	r2, #0
 800f414:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f416:	e007      	b.n	800f428 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	699a      	ldr	r2, [r3, #24]
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	f042 0208 	orr.w	r2, r2, #8
 800f426:	619a      	str	r2, [r3, #24]
}
 800f428:	bf00      	nop
 800f42a:	3710      	adds	r7, #16
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}

0800f430 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b084      	sub	sp, #16
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f43e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f446:	2b22      	cmp	r3, #34	; 0x22
 800f448:	d152      	bne.n	800f4f0 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f450:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f456:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800f458:	89ba      	ldrh	r2, [r7, #12]
 800f45a:	89fb      	ldrh	r3, [r7, #14]
 800f45c:	4013      	ands	r3, r2
 800f45e:	b29a      	uxth	r2, r3
 800f460:	68bb      	ldr	r3, [r7, #8]
 800f462:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f468:	1c9a      	adds	r2, r3, #2
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f474:	b29b      	uxth	r3, r3
 800f476:	3b01      	subs	r3, #1
 800f478:	b29a      	uxth	r2, r3
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f486:	b29b      	uxth	r3, r3
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d139      	bne.n	800f500 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	681a      	ldr	r2, [r3, #0]
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f49a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	689a      	ldr	r2, [r3, #8]
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	f022 0201 	bic.w	r2, r2, #1
 800f4aa:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2220      	movs	r2, #32
 800f4b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4be:	2b01      	cmp	r3, #1
 800f4c0:	d10f      	bne.n	800f4e2 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	681a      	ldr	r2, [r3, #0]
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	f022 0210 	bic.w	r2, r2, #16
 800f4d0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f4d8:	4619      	mov	r1, r3
 800f4da:	6878      	ldr	r0, [r7, #4]
 800f4dc:	f7fe feae 	bl	800e23c <HAL_UARTEx_RxEventCallback>
 800f4e0:	e002      	b.n	800f4e8 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f7f4 f990 	bl	8003808 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f4ee:	e007      	b.n	800f500 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	699a      	ldr	r2, [r3, #24]
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	f042 0208 	orr.w	r2, r2, #8
 800f4fe:	619a      	str	r2, [r3, #24]
}
 800f500:	bf00      	nop
 800f502:	3710      	adds	r7, #16
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}

0800f508 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b088      	sub	sp, #32
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f516:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	69db      	ldr	r3, [r3, #28]
 800f51e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	689b      	ldr	r3, [r3, #8]
 800f52e:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f536:	2b22      	cmp	r3, #34	; 0x22
 800f538:	f040 80d8 	bne.w	800f6ec <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f542:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f544:	e0a8      	b.n	800f698 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f54c:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f54e:	89bb      	ldrh	r3, [r7, #12]
 800f550:	b2d9      	uxtb	r1, r3
 800f552:	8b7b      	ldrh	r3, [r7, #26]
 800f554:	b2da      	uxtb	r2, r3
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f55a:	400a      	ands	r2, r1
 800f55c:	b2d2      	uxtb	r2, r2
 800f55e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f564:	1c5a      	adds	r2, r3, #1
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f570:	b29b      	uxth	r3, r3
 800f572:	3b01      	subs	r3, #1
 800f574:	b29a      	uxth	r2, r3
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	69db      	ldr	r3, [r3, #28]
 800f582:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f584:	69fb      	ldr	r3, [r7, #28]
 800f586:	f003 0307 	and.w	r3, r3, #7
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d04d      	beq.n	800f62a <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f58e:	69fb      	ldr	r3, [r7, #28]
 800f590:	f003 0301 	and.w	r3, r3, #1
 800f594:	2b00      	cmp	r3, #0
 800f596:	d010      	beq.n	800f5ba <UART_RxISR_8BIT_FIFOEN+0xb2>
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d00b      	beq.n	800f5ba <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	2201      	movs	r2, #1
 800f5a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f5b0:	f043 0201 	orr.w	r2, r3, #1
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f5ba:	69fb      	ldr	r3, [r7, #28]
 800f5bc:	f003 0302 	and.w	r3, r3, #2
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d010      	beq.n	800f5e6 <UART_RxISR_8BIT_FIFOEN+0xde>
 800f5c4:	693b      	ldr	r3, [r7, #16]
 800f5c6:	f003 0301 	and.w	r3, r3, #1
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d00b      	beq.n	800f5e6 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	2202      	movs	r2, #2
 800f5d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f5dc:	f043 0204 	orr.w	r2, r3, #4
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f5e6:	69fb      	ldr	r3, [r7, #28]
 800f5e8:	f003 0304 	and.w	r3, r3, #4
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d010      	beq.n	800f612 <UART_RxISR_8BIT_FIFOEN+0x10a>
 800f5f0:	693b      	ldr	r3, [r7, #16]
 800f5f2:	f003 0301 	and.w	r3, r3, #1
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d00b      	beq.n	800f612 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	2204      	movs	r2, #4
 800f600:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f608:	f043 0202 	orr.w	r2, r3, #2
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d006      	beq.n	800f62a <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f61c:	6878      	ldr	r0, [r7, #4]
 800f61e:	f7fe fe03 	bl	800e228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	2200      	movs	r2, #0
 800f626:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f630:	b29b      	uxth	r3, r3
 800f632:	2b00      	cmp	r3, #0
 800f634:	d130      	bne.n	800f698 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	681a      	ldr	r2, [r3, #0]
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f644:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	6899      	ldr	r1, [r3, #8]
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681a      	ldr	r2, [r3, #0]
 800f650:	4b2c      	ldr	r3, [pc, #176]	; (800f704 <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 800f652:	400b      	ands	r3, r1
 800f654:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2220      	movs	r2, #32
 800f65a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	2200      	movs	r2, #0
 800f662:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f668:	2b01      	cmp	r3, #1
 800f66a:	d10f      	bne.n	800f68c <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	681a      	ldr	r2, [r3, #0]
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	f022 0210 	bic.w	r2, r2, #16
 800f67a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f682:	4619      	mov	r1, r3
 800f684:	6878      	ldr	r0, [r7, #4]
 800f686:	f7fe fdd9 	bl	800e23c <HAL_UARTEx_RxEventCallback>
 800f68a:	e002      	b.n	800f692 <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f68c:	6878      	ldr	r0, [r7, #4]
 800f68e:	f7f4 f8bb 	bl	8003808 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	2200      	movs	r2, #0
 800f696:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f698:	89fb      	ldrh	r3, [r7, #14]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d005      	beq.n	800f6aa <UART_RxISR_8BIT_FIFOEN+0x1a2>
 800f69e:	69fb      	ldr	r3, [r7, #28]
 800f6a0:	f003 0320 	and.w	r3, r3, #32
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	f47f af4e 	bne.w	800f546 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f6b0:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f6b2:	897b      	ldrh	r3, [r7, #10]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d021      	beq.n	800f6fc <UART_RxISR_8BIT_FIFOEN+0x1f4>
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f6be:	897a      	ldrh	r2, [r7, #10]
 800f6c0:	429a      	cmp	r2, r3
 800f6c2:	d21b      	bcs.n	800f6fc <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	689a      	ldr	r2, [r3, #8]
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800f6d2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	4a0c      	ldr	r2, [pc, #48]	; (800f708 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800f6d8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	681a      	ldr	r2, [r3, #0]
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	f042 0220 	orr.w	r2, r2, #32
 800f6e8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f6ea:	e007      	b.n	800f6fc <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	699a      	ldr	r2, [r3, #24]
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	f042 0208 	orr.w	r2, r2, #8
 800f6fa:	619a      	str	r2, [r3, #24]
}
 800f6fc:	bf00      	nop
 800f6fe:	3720      	adds	r7, #32
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}
 800f704:	effffffe 	.word	0xeffffffe
 800f708:	0800f359 	.word	0x0800f359

0800f70c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b08a      	sub	sp, #40	; 0x28
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f71a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	69db      	ldr	r3, [r3, #28]
 800f722:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	689b      	ldr	r3, [r3, #8]
 800f732:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f73a:	2b22      	cmp	r3, #34	; 0x22
 800f73c:	f040 80d8 	bne.w	800f8f0 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f746:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f748:	e0a8      	b.n	800f89c <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f750:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f756:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800f758:	8aba      	ldrh	r2, [r7, #20]
 800f75a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f75c:	4013      	ands	r3, r2
 800f75e:	b29a      	uxth	r2, r3
 800f760:	693b      	ldr	r3, [r7, #16]
 800f762:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f768:	1c9a      	adds	r2, r3, #2
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f774:	b29b      	uxth	r3, r3
 800f776:	3b01      	subs	r3, #1
 800f778:	b29a      	uxth	r2, r3
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	69db      	ldr	r3, [r3, #28]
 800f786:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f78a:	f003 0307 	and.w	r3, r3, #7
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d04d      	beq.n	800f82e <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f794:	f003 0301 	and.w	r3, r3, #1
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d010      	beq.n	800f7be <UART_RxISR_16BIT_FIFOEN+0xb2>
 800f79c:	69fb      	ldr	r3, [r7, #28]
 800f79e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d00b      	beq.n	800f7be <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	2201      	movs	r2, #1
 800f7ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7b4:	f043 0201 	orr.w	r2, r3, #1
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7c0:	f003 0302 	and.w	r3, r3, #2
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d010      	beq.n	800f7ea <UART_RxISR_16BIT_FIFOEN+0xde>
 800f7c8:	69bb      	ldr	r3, [r7, #24]
 800f7ca:	f003 0301 	and.w	r3, r3, #1
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d00b      	beq.n	800f7ea <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	2202      	movs	r2, #2
 800f7d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7e0:	f043 0204 	orr.w	r2, r3, #4
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ec:	f003 0304 	and.w	r3, r3, #4
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d010      	beq.n	800f816 <UART_RxISR_16BIT_FIFOEN+0x10a>
 800f7f4:	69bb      	ldr	r3, [r7, #24]
 800f7f6:	f003 0301 	and.w	r3, r3, #1
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d00b      	beq.n	800f816 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	2204      	movs	r2, #4
 800f804:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f80c:	f043 0202 	orr.w	r2, r3, #2
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d006      	beq.n	800f82e <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f820:	6878      	ldr	r0, [r7, #4]
 800f822:	f7fe fd01 	bl	800e228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	2200      	movs	r2, #0
 800f82a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f834:	b29b      	uxth	r3, r3
 800f836:	2b00      	cmp	r3, #0
 800f838:	d130      	bne.n	800f89c <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	681a      	ldr	r2, [r3, #0]
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f848:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	6899      	ldr	r1, [r3, #8]
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681a      	ldr	r2, [r3, #0]
 800f854:	4b2c      	ldr	r3, [pc, #176]	; (800f908 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 800f856:	400b      	ands	r3, r1
 800f858:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	2220      	movs	r2, #32
 800f85e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2200      	movs	r2, #0
 800f866:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f86c:	2b01      	cmp	r3, #1
 800f86e:	d10f      	bne.n	800f890 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	681a      	ldr	r2, [r3, #0]
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	f022 0210 	bic.w	r2, r2, #16
 800f87e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f886:	4619      	mov	r1, r3
 800f888:	6878      	ldr	r0, [r7, #4]
 800f88a:	f7fe fcd7 	bl	800e23c <HAL_UARTEx_RxEventCallback>
 800f88e:	e002      	b.n	800f896 <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f7f3 ffb9 	bl	8003808 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	2200      	movs	r2, #0
 800f89a:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f89c:	8afb      	ldrh	r3, [r7, #22]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d005      	beq.n	800f8ae <UART_RxISR_16BIT_FIFOEN+0x1a2>
 800f8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8a4:	f003 0320 	and.w	r3, r3, #32
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	f47f af4e 	bne.w	800f74a <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f8b4:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f8b6:	89fb      	ldrh	r3, [r7, #14]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d021      	beq.n	800f900 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f8c2:	89fa      	ldrh	r2, [r7, #14]
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d21b      	bcs.n	800f900 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	689a      	ldr	r2, [r3, #8]
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800f8d6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	4a0c      	ldr	r2, [pc, #48]	; (800f90c <UART_RxISR_16BIT_FIFOEN+0x200>)
 800f8dc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	681a      	ldr	r2, [r3, #0]
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	f042 0220 	orr.w	r2, r2, #32
 800f8ec:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f8ee:	e007      	b.n	800f900 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	699a      	ldr	r2, [r3, #24]
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	f042 0208 	orr.w	r2, r2, #8
 800f8fe:	619a      	str	r2, [r3, #24]
}
 800f900:	bf00      	nop
 800f902:	3728      	adds	r7, #40	; 0x28
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}
 800f908:	effffffe 	.word	0xeffffffe
 800f90c:	0800f431 	.word	0x0800f431

0800f910 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f910:	b480      	push	{r7}
 800f912:	b083      	sub	sp, #12
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f918:	bf00      	nop
 800f91a:	370c      	adds	r7, #12
 800f91c:	46bd      	mov	sp, r7
 800f91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f922:	4770      	bx	lr

0800f924 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f924:	b480      	push	{r7}
 800f926:	b083      	sub	sp, #12
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f92c:	bf00      	nop
 800f92e:	370c      	adds	r7, #12
 800f930:	46bd      	mov	sp, r7
 800f932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f936:	4770      	bx	lr

0800f938 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f938:	b480      	push	{r7}
 800f93a:	b083      	sub	sp, #12
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f940:	bf00      	nop
 800f942:	370c      	adds	r7, #12
 800f944:	46bd      	mov	sp, r7
 800f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94a:	4770      	bx	lr

0800f94c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f94c:	b480      	push	{r7}
 800f94e:	b085      	sub	sp, #20
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f95a:	2b01      	cmp	r3, #1
 800f95c:	d101      	bne.n	800f962 <HAL_UARTEx_DisableFifoMode+0x16>
 800f95e:	2302      	movs	r3, #2
 800f960:	e027      	b.n	800f9b2 <HAL_UARTEx_DisableFifoMode+0x66>
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2201      	movs	r2, #1
 800f966:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	2224      	movs	r2, #36	; 0x24
 800f96e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	681a      	ldr	r2, [r3, #0]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	f022 0201 	bic.w	r2, r2, #1
 800f988:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f990:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2200      	movs	r2, #0
 800f996:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	68fa      	ldr	r2, [r7, #12]
 800f99e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2220      	movs	r2, #32
 800f9a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f9b0:	2300      	movs	r3, #0
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3714      	adds	r7, #20
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9bc:	4770      	bx	lr

0800f9be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f9be:	b580      	push	{r7, lr}
 800f9c0:	b084      	sub	sp, #16
 800f9c2:	af00      	add	r7, sp, #0
 800f9c4:	6078      	str	r0, [r7, #4]
 800f9c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f9ce:	2b01      	cmp	r3, #1
 800f9d0:	d101      	bne.n	800f9d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f9d2:	2302      	movs	r3, #2
 800f9d4:	e02d      	b.n	800fa32 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	2201      	movs	r2, #1
 800f9da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	2224      	movs	r2, #36	; 0x24
 800f9e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	681a      	ldr	r2, [r3, #0]
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	f022 0201 	bic.w	r2, r2, #1
 800f9fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	689b      	ldr	r3, [r3, #8]
 800fa04:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	683a      	ldr	r2, [r7, #0]
 800fa0e:	430a      	orrs	r2, r1
 800fa10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f000 f850 	bl	800fab8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	68fa      	ldr	r2, [r7, #12]
 800fa1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2220      	movs	r2, #32
 800fa24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fa30:	2300      	movs	r3, #0
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3710      	adds	r7, #16
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}

0800fa3a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fa3a:	b580      	push	{r7, lr}
 800fa3c:	b084      	sub	sp, #16
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	6078      	str	r0, [r7, #4]
 800fa42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fa4a:	2b01      	cmp	r3, #1
 800fa4c:	d101      	bne.n	800fa52 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fa4e:	2302      	movs	r3, #2
 800fa50:	e02d      	b.n	800faae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	2201      	movs	r2, #1
 800fa56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2224      	movs	r2, #36	; 0x24
 800fa5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	681a      	ldr	r2, [r3, #0]
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	f022 0201 	bic.w	r2, r2, #1
 800fa78:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	689b      	ldr	r3, [r3, #8]
 800fa80:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	683a      	ldr	r2, [r7, #0]
 800fa8a:	430a      	orrs	r2, r1
 800fa8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f000 f812 	bl	800fab8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	68fa      	ldr	r2, [r7, #12]
 800fa9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2220      	movs	r2, #32
 800faa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2200      	movs	r2, #0
 800faa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800faac:	2300      	movs	r3, #0
}
 800faae:	4618      	mov	r0, r3
 800fab0:	3710      	adds	r7, #16
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}
	...

0800fab8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fab8:	b480      	push	{r7}
 800faba:	b085      	sub	sp, #20
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d108      	bne.n	800fada <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2201      	movs	r2, #1
 800facc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2201      	movs	r2, #1
 800fad4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fad8:	e031      	b.n	800fb3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fada:	2310      	movs	r3, #16
 800fadc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fade:	2310      	movs	r3, #16
 800fae0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	689b      	ldr	r3, [r3, #8]
 800fae8:	0e5b      	lsrs	r3, r3, #25
 800faea:	b2db      	uxtb	r3, r3
 800faec:	f003 0307 	and.w	r3, r3, #7
 800faf0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	689b      	ldr	r3, [r3, #8]
 800faf8:	0f5b      	lsrs	r3, r3, #29
 800fafa:	b2db      	uxtb	r3, r3
 800fafc:	f003 0307 	and.w	r3, r3, #7
 800fb00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fb02:	7bbb      	ldrb	r3, [r7, #14]
 800fb04:	7b3a      	ldrb	r2, [r7, #12]
 800fb06:	4911      	ldr	r1, [pc, #68]	; (800fb4c <UARTEx_SetNbDataToProcess+0x94>)
 800fb08:	5c8a      	ldrb	r2, [r1, r2]
 800fb0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fb0e:	7b3a      	ldrb	r2, [r7, #12]
 800fb10:	490f      	ldr	r1, [pc, #60]	; (800fb50 <UARTEx_SetNbDataToProcess+0x98>)
 800fb12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fb14:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb18:	b29a      	uxth	r2, r3
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fb20:	7bfb      	ldrb	r3, [r7, #15]
 800fb22:	7b7a      	ldrb	r2, [r7, #13]
 800fb24:	4909      	ldr	r1, [pc, #36]	; (800fb4c <UARTEx_SetNbDataToProcess+0x94>)
 800fb26:	5c8a      	ldrb	r2, [r1, r2]
 800fb28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fb2c:	7b7a      	ldrb	r2, [r7, #13]
 800fb2e:	4908      	ldr	r1, [pc, #32]	; (800fb50 <UARTEx_SetNbDataToProcess+0x98>)
 800fb30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fb32:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb36:	b29a      	uxth	r2, r3
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fb3e:	bf00      	nop
 800fb40:	3714      	adds	r7, #20
 800fb42:	46bd      	mov	sp, r7
 800fb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb48:	4770      	bx	lr
 800fb4a:	bf00      	nop
 800fb4c:	08012f28 	.word	0x08012f28
 800fb50:	08012f30 	.word	0x08012f30

0800fb54 <__errno>:
 800fb54:	4b01      	ldr	r3, [pc, #4]	; (800fb5c <__errno+0x8>)
 800fb56:	6818      	ldr	r0, [r3, #0]
 800fb58:	4770      	bx	lr
 800fb5a:	bf00      	nop
 800fb5c:	24000024 	.word	0x24000024

0800fb60 <__libc_init_array>:
 800fb60:	b570      	push	{r4, r5, r6, lr}
 800fb62:	4d0d      	ldr	r5, [pc, #52]	; (800fb98 <__libc_init_array+0x38>)
 800fb64:	4c0d      	ldr	r4, [pc, #52]	; (800fb9c <__libc_init_array+0x3c>)
 800fb66:	1b64      	subs	r4, r4, r5
 800fb68:	10a4      	asrs	r4, r4, #2
 800fb6a:	2600      	movs	r6, #0
 800fb6c:	42a6      	cmp	r6, r4
 800fb6e:	d109      	bne.n	800fb84 <__libc_init_array+0x24>
 800fb70:	4d0b      	ldr	r5, [pc, #44]	; (800fba0 <__libc_init_array+0x40>)
 800fb72:	4c0c      	ldr	r4, [pc, #48]	; (800fba4 <__libc_init_array+0x44>)
 800fb74:	f003 f992 	bl	8012e9c <_init>
 800fb78:	1b64      	subs	r4, r4, r5
 800fb7a:	10a4      	asrs	r4, r4, #2
 800fb7c:	2600      	movs	r6, #0
 800fb7e:	42a6      	cmp	r6, r4
 800fb80:	d105      	bne.n	800fb8e <__libc_init_array+0x2e>
 800fb82:	bd70      	pop	{r4, r5, r6, pc}
 800fb84:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb88:	4798      	blx	r3
 800fb8a:	3601      	adds	r6, #1
 800fb8c:	e7ee      	b.n	800fb6c <__libc_init_array+0xc>
 800fb8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb92:	4798      	blx	r3
 800fb94:	3601      	adds	r6, #1
 800fb96:	e7f2      	b.n	800fb7e <__libc_init_array+0x1e>
 800fb98:	080133d0 	.word	0x080133d0
 800fb9c:	080133d0 	.word	0x080133d0
 800fba0:	080133d0 	.word	0x080133d0
 800fba4:	080133d4 	.word	0x080133d4

0800fba8 <memset>:
 800fba8:	4402      	add	r2, r0
 800fbaa:	4603      	mov	r3, r0
 800fbac:	4293      	cmp	r3, r2
 800fbae:	d100      	bne.n	800fbb2 <memset+0xa>
 800fbb0:	4770      	bx	lr
 800fbb2:	f803 1b01 	strb.w	r1, [r3], #1
 800fbb6:	e7f9      	b.n	800fbac <memset+0x4>

0800fbb8 <__cvt>:
 800fbb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbba:	ed2d 8b02 	vpush	{d8}
 800fbbe:	eeb0 8b40 	vmov.f64	d8, d0
 800fbc2:	b085      	sub	sp, #20
 800fbc4:	4617      	mov	r7, r2
 800fbc6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800fbc8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fbca:	ee18 2a90 	vmov	r2, s17
 800fbce:	f025 0520 	bic.w	r5, r5, #32
 800fbd2:	2a00      	cmp	r2, #0
 800fbd4:	bfb6      	itet	lt
 800fbd6:	222d      	movlt	r2, #45	; 0x2d
 800fbd8:	2200      	movge	r2, #0
 800fbda:	eeb1 8b40 	vneglt.f64	d8, d0
 800fbde:	2d46      	cmp	r5, #70	; 0x46
 800fbe0:	460c      	mov	r4, r1
 800fbe2:	701a      	strb	r2, [r3, #0]
 800fbe4:	d004      	beq.n	800fbf0 <__cvt+0x38>
 800fbe6:	2d45      	cmp	r5, #69	; 0x45
 800fbe8:	d100      	bne.n	800fbec <__cvt+0x34>
 800fbea:	3401      	adds	r4, #1
 800fbec:	2102      	movs	r1, #2
 800fbee:	e000      	b.n	800fbf2 <__cvt+0x3a>
 800fbf0:	2103      	movs	r1, #3
 800fbf2:	ab03      	add	r3, sp, #12
 800fbf4:	9301      	str	r3, [sp, #4]
 800fbf6:	ab02      	add	r3, sp, #8
 800fbf8:	9300      	str	r3, [sp, #0]
 800fbfa:	4622      	mov	r2, r4
 800fbfc:	4633      	mov	r3, r6
 800fbfe:	eeb0 0b48 	vmov.f64	d0, d8
 800fc02:	f000 fdf5 	bl	80107f0 <_dtoa_r>
 800fc06:	2d47      	cmp	r5, #71	; 0x47
 800fc08:	d109      	bne.n	800fc1e <__cvt+0x66>
 800fc0a:	07fb      	lsls	r3, r7, #31
 800fc0c:	d407      	bmi.n	800fc1e <__cvt+0x66>
 800fc0e:	9b03      	ldr	r3, [sp, #12]
 800fc10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fc12:	1a1b      	subs	r3, r3, r0
 800fc14:	6013      	str	r3, [r2, #0]
 800fc16:	b005      	add	sp, #20
 800fc18:	ecbd 8b02 	vpop	{d8}
 800fc1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc1e:	2d46      	cmp	r5, #70	; 0x46
 800fc20:	eb00 0204 	add.w	r2, r0, r4
 800fc24:	d10c      	bne.n	800fc40 <__cvt+0x88>
 800fc26:	7803      	ldrb	r3, [r0, #0]
 800fc28:	2b30      	cmp	r3, #48	; 0x30
 800fc2a:	d107      	bne.n	800fc3c <__cvt+0x84>
 800fc2c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fc30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc34:	bf1c      	itt	ne
 800fc36:	f1c4 0401 	rsbne	r4, r4, #1
 800fc3a:	6034      	strne	r4, [r6, #0]
 800fc3c:	6833      	ldr	r3, [r6, #0]
 800fc3e:	441a      	add	r2, r3
 800fc40:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fc44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc48:	bf08      	it	eq
 800fc4a:	9203      	streq	r2, [sp, #12]
 800fc4c:	2130      	movs	r1, #48	; 0x30
 800fc4e:	9b03      	ldr	r3, [sp, #12]
 800fc50:	4293      	cmp	r3, r2
 800fc52:	d2dc      	bcs.n	800fc0e <__cvt+0x56>
 800fc54:	1c5c      	adds	r4, r3, #1
 800fc56:	9403      	str	r4, [sp, #12]
 800fc58:	7019      	strb	r1, [r3, #0]
 800fc5a:	e7f8      	b.n	800fc4e <__cvt+0x96>

0800fc5c <__exponent>:
 800fc5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc5e:	4603      	mov	r3, r0
 800fc60:	2900      	cmp	r1, #0
 800fc62:	bfb8      	it	lt
 800fc64:	4249      	neglt	r1, r1
 800fc66:	f803 2b02 	strb.w	r2, [r3], #2
 800fc6a:	bfb4      	ite	lt
 800fc6c:	222d      	movlt	r2, #45	; 0x2d
 800fc6e:	222b      	movge	r2, #43	; 0x2b
 800fc70:	2909      	cmp	r1, #9
 800fc72:	7042      	strb	r2, [r0, #1]
 800fc74:	dd2a      	ble.n	800fccc <__exponent+0x70>
 800fc76:	f10d 0407 	add.w	r4, sp, #7
 800fc7a:	46a4      	mov	ip, r4
 800fc7c:	270a      	movs	r7, #10
 800fc7e:	46a6      	mov	lr, r4
 800fc80:	460a      	mov	r2, r1
 800fc82:	fb91 f6f7 	sdiv	r6, r1, r7
 800fc86:	fb07 1516 	mls	r5, r7, r6, r1
 800fc8a:	3530      	adds	r5, #48	; 0x30
 800fc8c:	2a63      	cmp	r2, #99	; 0x63
 800fc8e:	f104 34ff 	add.w	r4, r4, #4294967295
 800fc92:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fc96:	4631      	mov	r1, r6
 800fc98:	dcf1      	bgt.n	800fc7e <__exponent+0x22>
 800fc9a:	3130      	adds	r1, #48	; 0x30
 800fc9c:	f1ae 0502 	sub.w	r5, lr, #2
 800fca0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fca4:	1c44      	adds	r4, r0, #1
 800fca6:	4629      	mov	r1, r5
 800fca8:	4561      	cmp	r1, ip
 800fcaa:	d30a      	bcc.n	800fcc2 <__exponent+0x66>
 800fcac:	f10d 0209 	add.w	r2, sp, #9
 800fcb0:	eba2 020e 	sub.w	r2, r2, lr
 800fcb4:	4565      	cmp	r5, ip
 800fcb6:	bf88      	it	hi
 800fcb8:	2200      	movhi	r2, #0
 800fcba:	4413      	add	r3, r2
 800fcbc:	1a18      	subs	r0, r3, r0
 800fcbe:	b003      	add	sp, #12
 800fcc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fcc6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fcca:	e7ed      	b.n	800fca8 <__exponent+0x4c>
 800fccc:	2330      	movs	r3, #48	; 0x30
 800fcce:	3130      	adds	r1, #48	; 0x30
 800fcd0:	7083      	strb	r3, [r0, #2]
 800fcd2:	70c1      	strb	r1, [r0, #3]
 800fcd4:	1d03      	adds	r3, r0, #4
 800fcd6:	e7f1      	b.n	800fcbc <__exponent+0x60>

0800fcd8 <_printf_float>:
 800fcd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcdc:	b08b      	sub	sp, #44	; 0x2c
 800fcde:	460c      	mov	r4, r1
 800fce0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800fce4:	4616      	mov	r6, r2
 800fce6:	461f      	mov	r7, r3
 800fce8:	4605      	mov	r5, r0
 800fcea:	f001 fcbb 	bl	8011664 <_localeconv_r>
 800fcee:	f8d0 b000 	ldr.w	fp, [r0]
 800fcf2:	4658      	mov	r0, fp
 800fcf4:	f7f0 faf4 	bl	80002e0 <strlen>
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	9308      	str	r3, [sp, #32]
 800fcfc:	f8d8 3000 	ldr.w	r3, [r8]
 800fd00:	f894 9018 	ldrb.w	r9, [r4, #24]
 800fd04:	6822      	ldr	r2, [r4, #0]
 800fd06:	3307      	adds	r3, #7
 800fd08:	f023 0307 	bic.w	r3, r3, #7
 800fd0c:	f103 0108 	add.w	r1, r3, #8
 800fd10:	f8c8 1000 	str.w	r1, [r8]
 800fd14:	4682      	mov	sl, r0
 800fd16:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fd1a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800fd1e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800ff80 <_printf_float+0x2a8>
 800fd22:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800fd26:	eeb0 6bc0 	vabs.f64	d6, d0
 800fd2a:	eeb4 6b47 	vcmp.f64	d6, d7
 800fd2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd32:	dd24      	ble.n	800fd7e <_printf_float+0xa6>
 800fd34:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fd38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd3c:	d502      	bpl.n	800fd44 <_printf_float+0x6c>
 800fd3e:	232d      	movs	r3, #45	; 0x2d
 800fd40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd44:	4b90      	ldr	r3, [pc, #576]	; (800ff88 <_printf_float+0x2b0>)
 800fd46:	4891      	ldr	r0, [pc, #580]	; (800ff8c <_printf_float+0x2b4>)
 800fd48:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800fd4c:	bf94      	ite	ls
 800fd4e:	4698      	movls	r8, r3
 800fd50:	4680      	movhi	r8, r0
 800fd52:	2303      	movs	r3, #3
 800fd54:	6123      	str	r3, [r4, #16]
 800fd56:	f022 0204 	bic.w	r2, r2, #4
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	6022      	str	r2, [r4, #0]
 800fd5e:	9304      	str	r3, [sp, #16]
 800fd60:	9700      	str	r7, [sp, #0]
 800fd62:	4633      	mov	r3, r6
 800fd64:	aa09      	add	r2, sp, #36	; 0x24
 800fd66:	4621      	mov	r1, r4
 800fd68:	4628      	mov	r0, r5
 800fd6a:	f000 f9d3 	bl	8010114 <_printf_common>
 800fd6e:	3001      	adds	r0, #1
 800fd70:	f040 808a 	bne.w	800fe88 <_printf_float+0x1b0>
 800fd74:	f04f 30ff 	mov.w	r0, #4294967295
 800fd78:	b00b      	add	sp, #44	; 0x2c
 800fd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd7e:	eeb4 0b40 	vcmp.f64	d0, d0
 800fd82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd86:	d709      	bvc.n	800fd9c <_printf_float+0xc4>
 800fd88:	ee10 3a90 	vmov	r3, s1
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	bfbc      	itt	lt
 800fd90:	232d      	movlt	r3, #45	; 0x2d
 800fd92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fd96:	487e      	ldr	r0, [pc, #504]	; (800ff90 <_printf_float+0x2b8>)
 800fd98:	4b7e      	ldr	r3, [pc, #504]	; (800ff94 <_printf_float+0x2bc>)
 800fd9a:	e7d5      	b.n	800fd48 <_printf_float+0x70>
 800fd9c:	6863      	ldr	r3, [r4, #4]
 800fd9e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800fda2:	9104      	str	r1, [sp, #16]
 800fda4:	1c59      	adds	r1, r3, #1
 800fda6:	d13c      	bne.n	800fe22 <_printf_float+0x14a>
 800fda8:	2306      	movs	r3, #6
 800fdaa:	6063      	str	r3, [r4, #4]
 800fdac:	2300      	movs	r3, #0
 800fdae:	9303      	str	r3, [sp, #12]
 800fdb0:	ab08      	add	r3, sp, #32
 800fdb2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800fdb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fdba:	ab07      	add	r3, sp, #28
 800fdbc:	6861      	ldr	r1, [r4, #4]
 800fdbe:	9300      	str	r3, [sp, #0]
 800fdc0:	6022      	str	r2, [r4, #0]
 800fdc2:	f10d 031b 	add.w	r3, sp, #27
 800fdc6:	4628      	mov	r0, r5
 800fdc8:	f7ff fef6 	bl	800fbb8 <__cvt>
 800fdcc:	9b04      	ldr	r3, [sp, #16]
 800fdce:	9907      	ldr	r1, [sp, #28]
 800fdd0:	2b47      	cmp	r3, #71	; 0x47
 800fdd2:	4680      	mov	r8, r0
 800fdd4:	d108      	bne.n	800fde8 <_printf_float+0x110>
 800fdd6:	1cc8      	adds	r0, r1, #3
 800fdd8:	db02      	blt.n	800fde0 <_printf_float+0x108>
 800fdda:	6863      	ldr	r3, [r4, #4]
 800fddc:	4299      	cmp	r1, r3
 800fdde:	dd41      	ble.n	800fe64 <_printf_float+0x18c>
 800fde0:	f1a9 0902 	sub.w	r9, r9, #2
 800fde4:	fa5f f989 	uxtb.w	r9, r9
 800fde8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800fdec:	d820      	bhi.n	800fe30 <_printf_float+0x158>
 800fdee:	3901      	subs	r1, #1
 800fdf0:	464a      	mov	r2, r9
 800fdf2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fdf6:	9107      	str	r1, [sp, #28]
 800fdf8:	f7ff ff30 	bl	800fc5c <__exponent>
 800fdfc:	9a08      	ldr	r2, [sp, #32]
 800fdfe:	9004      	str	r0, [sp, #16]
 800fe00:	1813      	adds	r3, r2, r0
 800fe02:	2a01      	cmp	r2, #1
 800fe04:	6123      	str	r3, [r4, #16]
 800fe06:	dc02      	bgt.n	800fe0e <_printf_float+0x136>
 800fe08:	6822      	ldr	r2, [r4, #0]
 800fe0a:	07d2      	lsls	r2, r2, #31
 800fe0c:	d501      	bpl.n	800fe12 <_printf_float+0x13a>
 800fe0e:	3301      	adds	r3, #1
 800fe10:	6123      	str	r3, [r4, #16]
 800fe12:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d0a2      	beq.n	800fd60 <_printf_float+0x88>
 800fe1a:	232d      	movs	r3, #45	; 0x2d
 800fe1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe20:	e79e      	b.n	800fd60 <_printf_float+0x88>
 800fe22:	9904      	ldr	r1, [sp, #16]
 800fe24:	2947      	cmp	r1, #71	; 0x47
 800fe26:	d1c1      	bne.n	800fdac <_printf_float+0xd4>
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d1bf      	bne.n	800fdac <_printf_float+0xd4>
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	e7bc      	b.n	800fdaa <_printf_float+0xd2>
 800fe30:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800fe34:	d118      	bne.n	800fe68 <_printf_float+0x190>
 800fe36:	2900      	cmp	r1, #0
 800fe38:	6863      	ldr	r3, [r4, #4]
 800fe3a:	dd0b      	ble.n	800fe54 <_printf_float+0x17c>
 800fe3c:	6121      	str	r1, [r4, #16]
 800fe3e:	b913      	cbnz	r3, 800fe46 <_printf_float+0x16e>
 800fe40:	6822      	ldr	r2, [r4, #0]
 800fe42:	07d0      	lsls	r0, r2, #31
 800fe44:	d502      	bpl.n	800fe4c <_printf_float+0x174>
 800fe46:	3301      	adds	r3, #1
 800fe48:	440b      	add	r3, r1
 800fe4a:	6123      	str	r3, [r4, #16]
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	65a1      	str	r1, [r4, #88]	; 0x58
 800fe50:	9304      	str	r3, [sp, #16]
 800fe52:	e7de      	b.n	800fe12 <_printf_float+0x13a>
 800fe54:	b913      	cbnz	r3, 800fe5c <_printf_float+0x184>
 800fe56:	6822      	ldr	r2, [r4, #0]
 800fe58:	07d2      	lsls	r2, r2, #31
 800fe5a:	d501      	bpl.n	800fe60 <_printf_float+0x188>
 800fe5c:	3302      	adds	r3, #2
 800fe5e:	e7f4      	b.n	800fe4a <_printf_float+0x172>
 800fe60:	2301      	movs	r3, #1
 800fe62:	e7f2      	b.n	800fe4a <_printf_float+0x172>
 800fe64:	f04f 0967 	mov.w	r9, #103	; 0x67
 800fe68:	9b08      	ldr	r3, [sp, #32]
 800fe6a:	4299      	cmp	r1, r3
 800fe6c:	db05      	blt.n	800fe7a <_printf_float+0x1a2>
 800fe6e:	6823      	ldr	r3, [r4, #0]
 800fe70:	6121      	str	r1, [r4, #16]
 800fe72:	07d8      	lsls	r0, r3, #31
 800fe74:	d5ea      	bpl.n	800fe4c <_printf_float+0x174>
 800fe76:	1c4b      	adds	r3, r1, #1
 800fe78:	e7e7      	b.n	800fe4a <_printf_float+0x172>
 800fe7a:	2900      	cmp	r1, #0
 800fe7c:	bfd4      	ite	le
 800fe7e:	f1c1 0202 	rsble	r2, r1, #2
 800fe82:	2201      	movgt	r2, #1
 800fe84:	4413      	add	r3, r2
 800fe86:	e7e0      	b.n	800fe4a <_printf_float+0x172>
 800fe88:	6823      	ldr	r3, [r4, #0]
 800fe8a:	055a      	lsls	r2, r3, #21
 800fe8c:	d407      	bmi.n	800fe9e <_printf_float+0x1c6>
 800fe8e:	6923      	ldr	r3, [r4, #16]
 800fe90:	4642      	mov	r2, r8
 800fe92:	4631      	mov	r1, r6
 800fe94:	4628      	mov	r0, r5
 800fe96:	47b8      	blx	r7
 800fe98:	3001      	adds	r0, #1
 800fe9a:	d12a      	bne.n	800fef2 <_printf_float+0x21a>
 800fe9c:	e76a      	b.n	800fd74 <_printf_float+0x9c>
 800fe9e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800fea2:	f240 80e2 	bls.w	801006a <_printf_float+0x392>
 800fea6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800feaa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800feae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feb2:	d133      	bne.n	800ff1c <_printf_float+0x244>
 800feb4:	4a38      	ldr	r2, [pc, #224]	; (800ff98 <_printf_float+0x2c0>)
 800feb6:	2301      	movs	r3, #1
 800feb8:	4631      	mov	r1, r6
 800feba:	4628      	mov	r0, r5
 800febc:	47b8      	blx	r7
 800febe:	3001      	adds	r0, #1
 800fec0:	f43f af58 	beq.w	800fd74 <_printf_float+0x9c>
 800fec4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800fec8:	429a      	cmp	r2, r3
 800feca:	db02      	blt.n	800fed2 <_printf_float+0x1fa>
 800fecc:	6823      	ldr	r3, [r4, #0]
 800fece:	07d8      	lsls	r0, r3, #31
 800fed0:	d50f      	bpl.n	800fef2 <_printf_float+0x21a>
 800fed2:	4653      	mov	r3, sl
 800fed4:	465a      	mov	r2, fp
 800fed6:	4631      	mov	r1, r6
 800fed8:	4628      	mov	r0, r5
 800feda:	47b8      	blx	r7
 800fedc:	3001      	adds	r0, #1
 800fede:	f43f af49 	beq.w	800fd74 <_printf_float+0x9c>
 800fee2:	f04f 0800 	mov.w	r8, #0
 800fee6:	f104 091a 	add.w	r9, r4, #26
 800feea:	9b08      	ldr	r3, [sp, #32]
 800feec:	3b01      	subs	r3, #1
 800feee:	4543      	cmp	r3, r8
 800fef0:	dc09      	bgt.n	800ff06 <_printf_float+0x22e>
 800fef2:	6823      	ldr	r3, [r4, #0]
 800fef4:	079b      	lsls	r3, r3, #30
 800fef6:	f100 8108 	bmi.w	801010a <_printf_float+0x432>
 800fefa:	68e0      	ldr	r0, [r4, #12]
 800fefc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fefe:	4298      	cmp	r0, r3
 800ff00:	bfb8      	it	lt
 800ff02:	4618      	movlt	r0, r3
 800ff04:	e738      	b.n	800fd78 <_printf_float+0xa0>
 800ff06:	2301      	movs	r3, #1
 800ff08:	464a      	mov	r2, r9
 800ff0a:	4631      	mov	r1, r6
 800ff0c:	4628      	mov	r0, r5
 800ff0e:	47b8      	blx	r7
 800ff10:	3001      	adds	r0, #1
 800ff12:	f43f af2f 	beq.w	800fd74 <_printf_float+0x9c>
 800ff16:	f108 0801 	add.w	r8, r8, #1
 800ff1a:	e7e6      	b.n	800feea <_printf_float+0x212>
 800ff1c:	9b07      	ldr	r3, [sp, #28]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	dc3c      	bgt.n	800ff9c <_printf_float+0x2c4>
 800ff22:	4a1d      	ldr	r2, [pc, #116]	; (800ff98 <_printf_float+0x2c0>)
 800ff24:	2301      	movs	r3, #1
 800ff26:	4631      	mov	r1, r6
 800ff28:	4628      	mov	r0, r5
 800ff2a:	47b8      	blx	r7
 800ff2c:	3001      	adds	r0, #1
 800ff2e:	f43f af21 	beq.w	800fd74 <_printf_float+0x9c>
 800ff32:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ff36:	4313      	orrs	r3, r2
 800ff38:	d102      	bne.n	800ff40 <_printf_float+0x268>
 800ff3a:	6823      	ldr	r3, [r4, #0]
 800ff3c:	07d9      	lsls	r1, r3, #31
 800ff3e:	d5d8      	bpl.n	800fef2 <_printf_float+0x21a>
 800ff40:	4653      	mov	r3, sl
 800ff42:	465a      	mov	r2, fp
 800ff44:	4631      	mov	r1, r6
 800ff46:	4628      	mov	r0, r5
 800ff48:	47b8      	blx	r7
 800ff4a:	3001      	adds	r0, #1
 800ff4c:	f43f af12 	beq.w	800fd74 <_printf_float+0x9c>
 800ff50:	f04f 0900 	mov.w	r9, #0
 800ff54:	f104 0a1a 	add.w	sl, r4, #26
 800ff58:	9b07      	ldr	r3, [sp, #28]
 800ff5a:	425b      	negs	r3, r3
 800ff5c:	454b      	cmp	r3, r9
 800ff5e:	dc01      	bgt.n	800ff64 <_printf_float+0x28c>
 800ff60:	9b08      	ldr	r3, [sp, #32]
 800ff62:	e795      	b.n	800fe90 <_printf_float+0x1b8>
 800ff64:	2301      	movs	r3, #1
 800ff66:	4652      	mov	r2, sl
 800ff68:	4631      	mov	r1, r6
 800ff6a:	4628      	mov	r0, r5
 800ff6c:	47b8      	blx	r7
 800ff6e:	3001      	adds	r0, #1
 800ff70:	f43f af00 	beq.w	800fd74 <_printf_float+0x9c>
 800ff74:	f109 0901 	add.w	r9, r9, #1
 800ff78:	e7ee      	b.n	800ff58 <_printf_float+0x280>
 800ff7a:	bf00      	nop
 800ff7c:	f3af 8000 	nop.w
 800ff80:	ffffffff 	.word	0xffffffff
 800ff84:	7fefffff 	.word	0x7fefffff
 800ff88:	08012f3c 	.word	0x08012f3c
 800ff8c:	08012f40 	.word	0x08012f40
 800ff90:	08012f48 	.word	0x08012f48
 800ff94:	08012f44 	.word	0x08012f44
 800ff98:	08012f4c 	.word	0x08012f4c
 800ff9c:	9a08      	ldr	r2, [sp, #32]
 800ff9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ffa0:	429a      	cmp	r2, r3
 800ffa2:	bfa8      	it	ge
 800ffa4:	461a      	movge	r2, r3
 800ffa6:	2a00      	cmp	r2, #0
 800ffa8:	4691      	mov	r9, r2
 800ffaa:	dc38      	bgt.n	801001e <_printf_float+0x346>
 800ffac:	2300      	movs	r3, #0
 800ffae:	9305      	str	r3, [sp, #20]
 800ffb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ffb4:	f104 021a 	add.w	r2, r4, #26
 800ffb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ffba:	9905      	ldr	r1, [sp, #20]
 800ffbc:	9304      	str	r3, [sp, #16]
 800ffbe:	eba3 0309 	sub.w	r3, r3, r9
 800ffc2:	428b      	cmp	r3, r1
 800ffc4:	dc33      	bgt.n	801002e <_printf_float+0x356>
 800ffc6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ffca:	429a      	cmp	r2, r3
 800ffcc:	db3c      	blt.n	8010048 <_printf_float+0x370>
 800ffce:	6823      	ldr	r3, [r4, #0]
 800ffd0:	07da      	lsls	r2, r3, #31
 800ffd2:	d439      	bmi.n	8010048 <_printf_float+0x370>
 800ffd4:	9a08      	ldr	r2, [sp, #32]
 800ffd6:	9b04      	ldr	r3, [sp, #16]
 800ffd8:	9907      	ldr	r1, [sp, #28]
 800ffda:	1ad3      	subs	r3, r2, r3
 800ffdc:	eba2 0901 	sub.w	r9, r2, r1
 800ffe0:	4599      	cmp	r9, r3
 800ffe2:	bfa8      	it	ge
 800ffe4:	4699      	movge	r9, r3
 800ffe6:	f1b9 0f00 	cmp.w	r9, #0
 800ffea:	dc35      	bgt.n	8010058 <_printf_float+0x380>
 800ffec:	f04f 0800 	mov.w	r8, #0
 800fff0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fff4:	f104 0a1a 	add.w	sl, r4, #26
 800fff8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800fffc:	1a9b      	subs	r3, r3, r2
 800fffe:	eba3 0309 	sub.w	r3, r3, r9
 8010002:	4543      	cmp	r3, r8
 8010004:	f77f af75 	ble.w	800fef2 <_printf_float+0x21a>
 8010008:	2301      	movs	r3, #1
 801000a:	4652      	mov	r2, sl
 801000c:	4631      	mov	r1, r6
 801000e:	4628      	mov	r0, r5
 8010010:	47b8      	blx	r7
 8010012:	3001      	adds	r0, #1
 8010014:	f43f aeae 	beq.w	800fd74 <_printf_float+0x9c>
 8010018:	f108 0801 	add.w	r8, r8, #1
 801001c:	e7ec      	b.n	800fff8 <_printf_float+0x320>
 801001e:	4613      	mov	r3, r2
 8010020:	4631      	mov	r1, r6
 8010022:	4642      	mov	r2, r8
 8010024:	4628      	mov	r0, r5
 8010026:	47b8      	blx	r7
 8010028:	3001      	adds	r0, #1
 801002a:	d1bf      	bne.n	800ffac <_printf_float+0x2d4>
 801002c:	e6a2      	b.n	800fd74 <_printf_float+0x9c>
 801002e:	2301      	movs	r3, #1
 8010030:	4631      	mov	r1, r6
 8010032:	4628      	mov	r0, r5
 8010034:	9204      	str	r2, [sp, #16]
 8010036:	47b8      	blx	r7
 8010038:	3001      	adds	r0, #1
 801003a:	f43f ae9b 	beq.w	800fd74 <_printf_float+0x9c>
 801003e:	9b05      	ldr	r3, [sp, #20]
 8010040:	9a04      	ldr	r2, [sp, #16]
 8010042:	3301      	adds	r3, #1
 8010044:	9305      	str	r3, [sp, #20]
 8010046:	e7b7      	b.n	800ffb8 <_printf_float+0x2e0>
 8010048:	4653      	mov	r3, sl
 801004a:	465a      	mov	r2, fp
 801004c:	4631      	mov	r1, r6
 801004e:	4628      	mov	r0, r5
 8010050:	47b8      	blx	r7
 8010052:	3001      	adds	r0, #1
 8010054:	d1be      	bne.n	800ffd4 <_printf_float+0x2fc>
 8010056:	e68d      	b.n	800fd74 <_printf_float+0x9c>
 8010058:	9a04      	ldr	r2, [sp, #16]
 801005a:	464b      	mov	r3, r9
 801005c:	4442      	add	r2, r8
 801005e:	4631      	mov	r1, r6
 8010060:	4628      	mov	r0, r5
 8010062:	47b8      	blx	r7
 8010064:	3001      	adds	r0, #1
 8010066:	d1c1      	bne.n	800ffec <_printf_float+0x314>
 8010068:	e684      	b.n	800fd74 <_printf_float+0x9c>
 801006a:	9a08      	ldr	r2, [sp, #32]
 801006c:	2a01      	cmp	r2, #1
 801006e:	dc01      	bgt.n	8010074 <_printf_float+0x39c>
 8010070:	07db      	lsls	r3, r3, #31
 8010072:	d537      	bpl.n	80100e4 <_printf_float+0x40c>
 8010074:	2301      	movs	r3, #1
 8010076:	4642      	mov	r2, r8
 8010078:	4631      	mov	r1, r6
 801007a:	4628      	mov	r0, r5
 801007c:	47b8      	blx	r7
 801007e:	3001      	adds	r0, #1
 8010080:	f43f ae78 	beq.w	800fd74 <_printf_float+0x9c>
 8010084:	4653      	mov	r3, sl
 8010086:	465a      	mov	r2, fp
 8010088:	4631      	mov	r1, r6
 801008a:	4628      	mov	r0, r5
 801008c:	47b8      	blx	r7
 801008e:	3001      	adds	r0, #1
 8010090:	f43f ae70 	beq.w	800fd74 <_printf_float+0x9c>
 8010094:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010098:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801009c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100a0:	d01b      	beq.n	80100da <_printf_float+0x402>
 80100a2:	9b08      	ldr	r3, [sp, #32]
 80100a4:	f108 0201 	add.w	r2, r8, #1
 80100a8:	3b01      	subs	r3, #1
 80100aa:	4631      	mov	r1, r6
 80100ac:	4628      	mov	r0, r5
 80100ae:	47b8      	blx	r7
 80100b0:	3001      	adds	r0, #1
 80100b2:	d10e      	bne.n	80100d2 <_printf_float+0x3fa>
 80100b4:	e65e      	b.n	800fd74 <_printf_float+0x9c>
 80100b6:	2301      	movs	r3, #1
 80100b8:	464a      	mov	r2, r9
 80100ba:	4631      	mov	r1, r6
 80100bc:	4628      	mov	r0, r5
 80100be:	47b8      	blx	r7
 80100c0:	3001      	adds	r0, #1
 80100c2:	f43f ae57 	beq.w	800fd74 <_printf_float+0x9c>
 80100c6:	f108 0801 	add.w	r8, r8, #1
 80100ca:	9b08      	ldr	r3, [sp, #32]
 80100cc:	3b01      	subs	r3, #1
 80100ce:	4543      	cmp	r3, r8
 80100d0:	dcf1      	bgt.n	80100b6 <_printf_float+0x3de>
 80100d2:	9b04      	ldr	r3, [sp, #16]
 80100d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80100d8:	e6db      	b.n	800fe92 <_printf_float+0x1ba>
 80100da:	f04f 0800 	mov.w	r8, #0
 80100de:	f104 091a 	add.w	r9, r4, #26
 80100e2:	e7f2      	b.n	80100ca <_printf_float+0x3f2>
 80100e4:	2301      	movs	r3, #1
 80100e6:	4642      	mov	r2, r8
 80100e8:	e7df      	b.n	80100aa <_printf_float+0x3d2>
 80100ea:	2301      	movs	r3, #1
 80100ec:	464a      	mov	r2, r9
 80100ee:	4631      	mov	r1, r6
 80100f0:	4628      	mov	r0, r5
 80100f2:	47b8      	blx	r7
 80100f4:	3001      	adds	r0, #1
 80100f6:	f43f ae3d 	beq.w	800fd74 <_printf_float+0x9c>
 80100fa:	f108 0801 	add.w	r8, r8, #1
 80100fe:	68e3      	ldr	r3, [r4, #12]
 8010100:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010102:	1a5b      	subs	r3, r3, r1
 8010104:	4543      	cmp	r3, r8
 8010106:	dcf0      	bgt.n	80100ea <_printf_float+0x412>
 8010108:	e6f7      	b.n	800fefa <_printf_float+0x222>
 801010a:	f04f 0800 	mov.w	r8, #0
 801010e:	f104 0919 	add.w	r9, r4, #25
 8010112:	e7f4      	b.n	80100fe <_printf_float+0x426>

08010114 <_printf_common>:
 8010114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010118:	4616      	mov	r6, r2
 801011a:	4699      	mov	r9, r3
 801011c:	688a      	ldr	r2, [r1, #8]
 801011e:	690b      	ldr	r3, [r1, #16]
 8010120:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010124:	4293      	cmp	r3, r2
 8010126:	bfb8      	it	lt
 8010128:	4613      	movlt	r3, r2
 801012a:	6033      	str	r3, [r6, #0]
 801012c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010130:	4607      	mov	r7, r0
 8010132:	460c      	mov	r4, r1
 8010134:	b10a      	cbz	r2, 801013a <_printf_common+0x26>
 8010136:	3301      	adds	r3, #1
 8010138:	6033      	str	r3, [r6, #0]
 801013a:	6823      	ldr	r3, [r4, #0]
 801013c:	0699      	lsls	r1, r3, #26
 801013e:	bf42      	ittt	mi
 8010140:	6833      	ldrmi	r3, [r6, #0]
 8010142:	3302      	addmi	r3, #2
 8010144:	6033      	strmi	r3, [r6, #0]
 8010146:	6825      	ldr	r5, [r4, #0]
 8010148:	f015 0506 	ands.w	r5, r5, #6
 801014c:	d106      	bne.n	801015c <_printf_common+0x48>
 801014e:	f104 0a19 	add.w	sl, r4, #25
 8010152:	68e3      	ldr	r3, [r4, #12]
 8010154:	6832      	ldr	r2, [r6, #0]
 8010156:	1a9b      	subs	r3, r3, r2
 8010158:	42ab      	cmp	r3, r5
 801015a:	dc26      	bgt.n	80101aa <_printf_common+0x96>
 801015c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010160:	1e13      	subs	r3, r2, #0
 8010162:	6822      	ldr	r2, [r4, #0]
 8010164:	bf18      	it	ne
 8010166:	2301      	movne	r3, #1
 8010168:	0692      	lsls	r2, r2, #26
 801016a:	d42b      	bmi.n	80101c4 <_printf_common+0xb0>
 801016c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010170:	4649      	mov	r1, r9
 8010172:	4638      	mov	r0, r7
 8010174:	47c0      	blx	r8
 8010176:	3001      	adds	r0, #1
 8010178:	d01e      	beq.n	80101b8 <_printf_common+0xa4>
 801017a:	6823      	ldr	r3, [r4, #0]
 801017c:	68e5      	ldr	r5, [r4, #12]
 801017e:	6832      	ldr	r2, [r6, #0]
 8010180:	f003 0306 	and.w	r3, r3, #6
 8010184:	2b04      	cmp	r3, #4
 8010186:	bf08      	it	eq
 8010188:	1aad      	subeq	r5, r5, r2
 801018a:	68a3      	ldr	r3, [r4, #8]
 801018c:	6922      	ldr	r2, [r4, #16]
 801018e:	bf0c      	ite	eq
 8010190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010194:	2500      	movne	r5, #0
 8010196:	4293      	cmp	r3, r2
 8010198:	bfc4      	itt	gt
 801019a:	1a9b      	subgt	r3, r3, r2
 801019c:	18ed      	addgt	r5, r5, r3
 801019e:	2600      	movs	r6, #0
 80101a0:	341a      	adds	r4, #26
 80101a2:	42b5      	cmp	r5, r6
 80101a4:	d11a      	bne.n	80101dc <_printf_common+0xc8>
 80101a6:	2000      	movs	r0, #0
 80101a8:	e008      	b.n	80101bc <_printf_common+0xa8>
 80101aa:	2301      	movs	r3, #1
 80101ac:	4652      	mov	r2, sl
 80101ae:	4649      	mov	r1, r9
 80101b0:	4638      	mov	r0, r7
 80101b2:	47c0      	blx	r8
 80101b4:	3001      	adds	r0, #1
 80101b6:	d103      	bne.n	80101c0 <_printf_common+0xac>
 80101b8:	f04f 30ff 	mov.w	r0, #4294967295
 80101bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101c0:	3501      	adds	r5, #1
 80101c2:	e7c6      	b.n	8010152 <_printf_common+0x3e>
 80101c4:	18e1      	adds	r1, r4, r3
 80101c6:	1c5a      	adds	r2, r3, #1
 80101c8:	2030      	movs	r0, #48	; 0x30
 80101ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80101ce:	4422      	add	r2, r4
 80101d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80101d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80101d8:	3302      	adds	r3, #2
 80101da:	e7c7      	b.n	801016c <_printf_common+0x58>
 80101dc:	2301      	movs	r3, #1
 80101de:	4622      	mov	r2, r4
 80101e0:	4649      	mov	r1, r9
 80101e2:	4638      	mov	r0, r7
 80101e4:	47c0      	blx	r8
 80101e6:	3001      	adds	r0, #1
 80101e8:	d0e6      	beq.n	80101b8 <_printf_common+0xa4>
 80101ea:	3601      	adds	r6, #1
 80101ec:	e7d9      	b.n	80101a2 <_printf_common+0x8e>
	...

080101f0 <_printf_i>:
 80101f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80101f4:	460c      	mov	r4, r1
 80101f6:	4691      	mov	r9, r2
 80101f8:	7e27      	ldrb	r7, [r4, #24]
 80101fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80101fc:	2f78      	cmp	r7, #120	; 0x78
 80101fe:	4680      	mov	r8, r0
 8010200:	469a      	mov	sl, r3
 8010202:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010206:	d807      	bhi.n	8010218 <_printf_i+0x28>
 8010208:	2f62      	cmp	r7, #98	; 0x62
 801020a:	d80a      	bhi.n	8010222 <_printf_i+0x32>
 801020c:	2f00      	cmp	r7, #0
 801020e:	f000 80d8 	beq.w	80103c2 <_printf_i+0x1d2>
 8010212:	2f58      	cmp	r7, #88	; 0x58
 8010214:	f000 80a3 	beq.w	801035e <_printf_i+0x16e>
 8010218:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801021c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010220:	e03a      	b.n	8010298 <_printf_i+0xa8>
 8010222:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010226:	2b15      	cmp	r3, #21
 8010228:	d8f6      	bhi.n	8010218 <_printf_i+0x28>
 801022a:	a001      	add	r0, pc, #4	; (adr r0, 8010230 <_printf_i+0x40>)
 801022c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010230:	08010289 	.word	0x08010289
 8010234:	0801029d 	.word	0x0801029d
 8010238:	08010219 	.word	0x08010219
 801023c:	08010219 	.word	0x08010219
 8010240:	08010219 	.word	0x08010219
 8010244:	08010219 	.word	0x08010219
 8010248:	0801029d 	.word	0x0801029d
 801024c:	08010219 	.word	0x08010219
 8010250:	08010219 	.word	0x08010219
 8010254:	08010219 	.word	0x08010219
 8010258:	08010219 	.word	0x08010219
 801025c:	080103a9 	.word	0x080103a9
 8010260:	080102cd 	.word	0x080102cd
 8010264:	0801038b 	.word	0x0801038b
 8010268:	08010219 	.word	0x08010219
 801026c:	08010219 	.word	0x08010219
 8010270:	080103cb 	.word	0x080103cb
 8010274:	08010219 	.word	0x08010219
 8010278:	080102cd 	.word	0x080102cd
 801027c:	08010219 	.word	0x08010219
 8010280:	08010219 	.word	0x08010219
 8010284:	08010393 	.word	0x08010393
 8010288:	680b      	ldr	r3, [r1, #0]
 801028a:	1d1a      	adds	r2, r3, #4
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	600a      	str	r2, [r1, #0]
 8010290:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010294:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010298:	2301      	movs	r3, #1
 801029a:	e0a3      	b.n	80103e4 <_printf_i+0x1f4>
 801029c:	6825      	ldr	r5, [r4, #0]
 801029e:	6808      	ldr	r0, [r1, #0]
 80102a0:	062e      	lsls	r6, r5, #24
 80102a2:	f100 0304 	add.w	r3, r0, #4
 80102a6:	d50a      	bpl.n	80102be <_printf_i+0xce>
 80102a8:	6805      	ldr	r5, [r0, #0]
 80102aa:	600b      	str	r3, [r1, #0]
 80102ac:	2d00      	cmp	r5, #0
 80102ae:	da03      	bge.n	80102b8 <_printf_i+0xc8>
 80102b0:	232d      	movs	r3, #45	; 0x2d
 80102b2:	426d      	negs	r5, r5
 80102b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80102b8:	485e      	ldr	r0, [pc, #376]	; (8010434 <_printf_i+0x244>)
 80102ba:	230a      	movs	r3, #10
 80102bc:	e019      	b.n	80102f2 <_printf_i+0x102>
 80102be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80102c2:	6805      	ldr	r5, [r0, #0]
 80102c4:	600b      	str	r3, [r1, #0]
 80102c6:	bf18      	it	ne
 80102c8:	b22d      	sxthne	r5, r5
 80102ca:	e7ef      	b.n	80102ac <_printf_i+0xbc>
 80102cc:	680b      	ldr	r3, [r1, #0]
 80102ce:	6825      	ldr	r5, [r4, #0]
 80102d0:	1d18      	adds	r0, r3, #4
 80102d2:	6008      	str	r0, [r1, #0]
 80102d4:	0628      	lsls	r0, r5, #24
 80102d6:	d501      	bpl.n	80102dc <_printf_i+0xec>
 80102d8:	681d      	ldr	r5, [r3, #0]
 80102da:	e002      	b.n	80102e2 <_printf_i+0xf2>
 80102dc:	0669      	lsls	r1, r5, #25
 80102de:	d5fb      	bpl.n	80102d8 <_printf_i+0xe8>
 80102e0:	881d      	ldrh	r5, [r3, #0]
 80102e2:	4854      	ldr	r0, [pc, #336]	; (8010434 <_printf_i+0x244>)
 80102e4:	2f6f      	cmp	r7, #111	; 0x6f
 80102e6:	bf0c      	ite	eq
 80102e8:	2308      	moveq	r3, #8
 80102ea:	230a      	movne	r3, #10
 80102ec:	2100      	movs	r1, #0
 80102ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80102f2:	6866      	ldr	r6, [r4, #4]
 80102f4:	60a6      	str	r6, [r4, #8]
 80102f6:	2e00      	cmp	r6, #0
 80102f8:	bfa2      	ittt	ge
 80102fa:	6821      	ldrge	r1, [r4, #0]
 80102fc:	f021 0104 	bicge.w	r1, r1, #4
 8010300:	6021      	strge	r1, [r4, #0]
 8010302:	b90d      	cbnz	r5, 8010308 <_printf_i+0x118>
 8010304:	2e00      	cmp	r6, #0
 8010306:	d04d      	beq.n	80103a4 <_printf_i+0x1b4>
 8010308:	4616      	mov	r6, r2
 801030a:	fbb5 f1f3 	udiv	r1, r5, r3
 801030e:	fb03 5711 	mls	r7, r3, r1, r5
 8010312:	5dc7      	ldrb	r7, [r0, r7]
 8010314:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010318:	462f      	mov	r7, r5
 801031a:	42bb      	cmp	r3, r7
 801031c:	460d      	mov	r5, r1
 801031e:	d9f4      	bls.n	801030a <_printf_i+0x11a>
 8010320:	2b08      	cmp	r3, #8
 8010322:	d10b      	bne.n	801033c <_printf_i+0x14c>
 8010324:	6823      	ldr	r3, [r4, #0]
 8010326:	07df      	lsls	r7, r3, #31
 8010328:	d508      	bpl.n	801033c <_printf_i+0x14c>
 801032a:	6923      	ldr	r3, [r4, #16]
 801032c:	6861      	ldr	r1, [r4, #4]
 801032e:	4299      	cmp	r1, r3
 8010330:	bfde      	ittt	le
 8010332:	2330      	movle	r3, #48	; 0x30
 8010334:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010338:	f106 36ff 	addle.w	r6, r6, #4294967295
 801033c:	1b92      	subs	r2, r2, r6
 801033e:	6122      	str	r2, [r4, #16]
 8010340:	f8cd a000 	str.w	sl, [sp]
 8010344:	464b      	mov	r3, r9
 8010346:	aa03      	add	r2, sp, #12
 8010348:	4621      	mov	r1, r4
 801034a:	4640      	mov	r0, r8
 801034c:	f7ff fee2 	bl	8010114 <_printf_common>
 8010350:	3001      	adds	r0, #1
 8010352:	d14c      	bne.n	80103ee <_printf_i+0x1fe>
 8010354:	f04f 30ff 	mov.w	r0, #4294967295
 8010358:	b004      	add	sp, #16
 801035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801035e:	4835      	ldr	r0, [pc, #212]	; (8010434 <_printf_i+0x244>)
 8010360:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010364:	6823      	ldr	r3, [r4, #0]
 8010366:	680e      	ldr	r6, [r1, #0]
 8010368:	061f      	lsls	r7, r3, #24
 801036a:	f856 5b04 	ldr.w	r5, [r6], #4
 801036e:	600e      	str	r6, [r1, #0]
 8010370:	d514      	bpl.n	801039c <_printf_i+0x1ac>
 8010372:	07d9      	lsls	r1, r3, #31
 8010374:	bf44      	itt	mi
 8010376:	f043 0320 	orrmi.w	r3, r3, #32
 801037a:	6023      	strmi	r3, [r4, #0]
 801037c:	b91d      	cbnz	r5, 8010386 <_printf_i+0x196>
 801037e:	6823      	ldr	r3, [r4, #0]
 8010380:	f023 0320 	bic.w	r3, r3, #32
 8010384:	6023      	str	r3, [r4, #0]
 8010386:	2310      	movs	r3, #16
 8010388:	e7b0      	b.n	80102ec <_printf_i+0xfc>
 801038a:	6823      	ldr	r3, [r4, #0]
 801038c:	f043 0320 	orr.w	r3, r3, #32
 8010390:	6023      	str	r3, [r4, #0]
 8010392:	2378      	movs	r3, #120	; 0x78
 8010394:	4828      	ldr	r0, [pc, #160]	; (8010438 <_printf_i+0x248>)
 8010396:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801039a:	e7e3      	b.n	8010364 <_printf_i+0x174>
 801039c:	065e      	lsls	r6, r3, #25
 801039e:	bf48      	it	mi
 80103a0:	b2ad      	uxthmi	r5, r5
 80103a2:	e7e6      	b.n	8010372 <_printf_i+0x182>
 80103a4:	4616      	mov	r6, r2
 80103a6:	e7bb      	b.n	8010320 <_printf_i+0x130>
 80103a8:	680b      	ldr	r3, [r1, #0]
 80103aa:	6826      	ldr	r6, [r4, #0]
 80103ac:	6960      	ldr	r0, [r4, #20]
 80103ae:	1d1d      	adds	r5, r3, #4
 80103b0:	600d      	str	r5, [r1, #0]
 80103b2:	0635      	lsls	r5, r6, #24
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	d501      	bpl.n	80103bc <_printf_i+0x1cc>
 80103b8:	6018      	str	r0, [r3, #0]
 80103ba:	e002      	b.n	80103c2 <_printf_i+0x1d2>
 80103bc:	0671      	lsls	r1, r6, #25
 80103be:	d5fb      	bpl.n	80103b8 <_printf_i+0x1c8>
 80103c0:	8018      	strh	r0, [r3, #0]
 80103c2:	2300      	movs	r3, #0
 80103c4:	6123      	str	r3, [r4, #16]
 80103c6:	4616      	mov	r6, r2
 80103c8:	e7ba      	b.n	8010340 <_printf_i+0x150>
 80103ca:	680b      	ldr	r3, [r1, #0]
 80103cc:	1d1a      	adds	r2, r3, #4
 80103ce:	600a      	str	r2, [r1, #0]
 80103d0:	681e      	ldr	r6, [r3, #0]
 80103d2:	6862      	ldr	r2, [r4, #4]
 80103d4:	2100      	movs	r1, #0
 80103d6:	4630      	mov	r0, r6
 80103d8:	f7ef ff8a 	bl	80002f0 <memchr>
 80103dc:	b108      	cbz	r0, 80103e2 <_printf_i+0x1f2>
 80103de:	1b80      	subs	r0, r0, r6
 80103e0:	6060      	str	r0, [r4, #4]
 80103e2:	6863      	ldr	r3, [r4, #4]
 80103e4:	6123      	str	r3, [r4, #16]
 80103e6:	2300      	movs	r3, #0
 80103e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80103ec:	e7a8      	b.n	8010340 <_printf_i+0x150>
 80103ee:	6923      	ldr	r3, [r4, #16]
 80103f0:	4632      	mov	r2, r6
 80103f2:	4649      	mov	r1, r9
 80103f4:	4640      	mov	r0, r8
 80103f6:	47d0      	blx	sl
 80103f8:	3001      	adds	r0, #1
 80103fa:	d0ab      	beq.n	8010354 <_printf_i+0x164>
 80103fc:	6823      	ldr	r3, [r4, #0]
 80103fe:	079b      	lsls	r3, r3, #30
 8010400:	d413      	bmi.n	801042a <_printf_i+0x23a>
 8010402:	68e0      	ldr	r0, [r4, #12]
 8010404:	9b03      	ldr	r3, [sp, #12]
 8010406:	4298      	cmp	r0, r3
 8010408:	bfb8      	it	lt
 801040a:	4618      	movlt	r0, r3
 801040c:	e7a4      	b.n	8010358 <_printf_i+0x168>
 801040e:	2301      	movs	r3, #1
 8010410:	4632      	mov	r2, r6
 8010412:	4649      	mov	r1, r9
 8010414:	4640      	mov	r0, r8
 8010416:	47d0      	blx	sl
 8010418:	3001      	adds	r0, #1
 801041a:	d09b      	beq.n	8010354 <_printf_i+0x164>
 801041c:	3501      	adds	r5, #1
 801041e:	68e3      	ldr	r3, [r4, #12]
 8010420:	9903      	ldr	r1, [sp, #12]
 8010422:	1a5b      	subs	r3, r3, r1
 8010424:	42ab      	cmp	r3, r5
 8010426:	dcf2      	bgt.n	801040e <_printf_i+0x21e>
 8010428:	e7eb      	b.n	8010402 <_printf_i+0x212>
 801042a:	2500      	movs	r5, #0
 801042c:	f104 0619 	add.w	r6, r4, #25
 8010430:	e7f5      	b.n	801041e <_printf_i+0x22e>
 8010432:	bf00      	nop
 8010434:	08012f4e 	.word	0x08012f4e
 8010438:	08012f5f 	.word	0x08012f5f

0801043c <iprintf>:
 801043c:	b40f      	push	{r0, r1, r2, r3}
 801043e:	4b0a      	ldr	r3, [pc, #40]	; (8010468 <iprintf+0x2c>)
 8010440:	b513      	push	{r0, r1, r4, lr}
 8010442:	681c      	ldr	r4, [r3, #0]
 8010444:	b124      	cbz	r4, 8010450 <iprintf+0x14>
 8010446:	69a3      	ldr	r3, [r4, #24]
 8010448:	b913      	cbnz	r3, 8010450 <iprintf+0x14>
 801044a:	4620      	mov	r0, r4
 801044c:	f001 f86c 	bl	8011528 <__sinit>
 8010450:	ab05      	add	r3, sp, #20
 8010452:	9a04      	ldr	r2, [sp, #16]
 8010454:	68a1      	ldr	r1, [r4, #8]
 8010456:	9301      	str	r3, [sp, #4]
 8010458:	4620      	mov	r0, r4
 801045a:	f001 fde7 	bl	801202c <_vfiprintf_r>
 801045e:	b002      	add	sp, #8
 8010460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010464:	b004      	add	sp, #16
 8010466:	4770      	bx	lr
 8010468:	24000024 	.word	0x24000024

0801046c <_puts_r>:
 801046c:	b570      	push	{r4, r5, r6, lr}
 801046e:	460e      	mov	r6, r1
 8010470:	4605      	mov	r5, r0
 8010472:	b118      	cbz	r0, 801047c <_puts_r+0x10>
 8010474:	6983      	ldr	r3, [r0, #24]
 8010476:	b90b      	cbnz	r3, 801047c <_puts_r+0x10>
 8010478:	f001 f856 	bl	8011528 <__sinit>
 801047c:	69ab      	ldr	r3, [r5, #24]
 801047e:	68ac      	ldr	r4, [r5, #8]
 8010480:	b913      	cbnz	r3, 8010488 <_puts_r+0x1c>
 8010482:	4628      	mov	r0, r5
 8010484:	f001 f850 	bl	8011528 <__sinit>
 8010488:	4b2c      	ldr	r3, [pc, #176]	; (801053c <_puts_r+0xd0>)
 801048a:	429c      	cmp	r4, r3
 801048c:	d120      	bne.n	80104d0 <_puts_r+0x64>
 801048e:	686c      	ldr	r4, [r5, #4]
 8010490:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010492:	07db      	lsls	r3, r3, #31
 8010494:	d405      	bmi.n	80104a2 <_puts_r+0x36>
 8010496:	89a3      	ldrh	r3, [r4, #12]
 8010498:	0598      	lsls	r0, r3, #22
 801049a:	d402      	bmi.n	80104a2 <_puts_r+0x36>
 801049c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801049e:	f001 f8e6 	bl	801166e <__retarget_lock_acquire_recursive>
 80104a2:	89a3      	ldrh	r3, [r4, #12]
 80104a4:	0719      	lsls	r1, r3, #28
 80104a6:	d51d      	bpl.n	80104e4 <_puts_r+0x78>
 80104a8:	6923      	ldr	r3, [r4, #16]
 80104aa:	b1db      	cbz	r3, 80104e4 <_puts_r+0x78>
 80104ac:	3e01      	subs	r6, #1
 80104ae:	68a3      	ldr	r3, [r4, #8]
 80104b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80104b4:	3b01      	subs	r3, #1
 80104b6:	60a3      	str	r3, [r4, #8]
 80104b8:	bb39      	cbnz	r1, 801050a <_puts_r+0x9e>
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	da38      	bge.n	8010530 <_puts_r+0xc4>
 80104be:	4622      	mov	r2, r4
 80104c0:	210a      	movs	r1, #10
 80104c2:	4628      	mov	r0, r5
 80104c4:	f000 f848 	bl	8010558 <__swbuf_r>
 80104c8:	3001      	adds	r0, #1
 80104ca:	d011      	beq.n	80104f0 <_puts_r+0x84>
 80104cc:	250a      	movs	r5, #10
 80104ce:	e011      	b.n	80104f4 <_puts_r+0x88>
 80104d0:	4b1b      	ldr	r3, [pc, #108]	; (8010540 <_puts_r+0xd4>)
 80104d2:	429c      	cmp	r4, r3
 80104d4:	d101      	bne.n	80104da <_puts_r+0x6e>
 80104d6:	68ac      	ldr	r4, [r5, #8]
 80104d8:	e7da      	b.n	8010490 <_puts_r+0x24>
 80104da:	4b1a      	ldr	r3, [pc, #104]	; (8010544 <_puts_r+0xd8>)
 80104dc:	429c      	cmp	r4, r3
 80104de:	bf08      	it	eq
 80104e0:	68ec      	ldreq	r4, [r5, #12]
 80104e2:	e7d5      	b.n	8010490 <_puts_r+0x24>
 80104e4:	4621      	mov	r1, r4
 80104e6:	4628      	mov	r0, r5
 80104e8:	f000 f888 	bl	80105fc <__swsetup_r>
 80104ec:	2800      	cmp	r0, #0
 80104ee:	d0dd      	beq.n	80104ac <_puts_r+0x40>
 80104f0:	f04f 35ff 	mov.w	r5, #4294967295
 80104f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80104f6:	07da      	lsls	r2, r3, #31
 80104f8:	d405      	bmi.n	8010506 <_puts_r+0x9a>
 80104fa:	89a3      	ldrh	r3, [r4, #12]
 80104fc:	059b      	lsls	r3, r3, #22
 80104fe:	d402      	bmi.n	8010506 <_puts_r+0x9a>
 8010500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010502:	f001 f8b5 	bl	8011670 <__retarget_lock_release_recursive>
 8010506:	4628      	mov	r0, r5
 8010508:	bd70      	pop	{r4, r5, r6, pc}
 801050a:	2b00      	cmp	r3, #0
 801050c:	da04      	bge.n	8010518 <_puts_r+0xac>
 801050e:	69a2      	ldr	r2, [r4, #24]
 8010510:	429a      	cmp	r2, r3
 8010512:	dc06      	bgt.n	8010522 <_puts_r+0xb6>
 8010514:	290a      	cmp	r1, #10
 8010516:	d004      	beq.n	8010522 <_puts_r+0xb6>
 8010518:	6823      	ldr	r3, [r4, #0]
 801051a:	1c5a      	adds	r2, r3, #1
 801051c:	6022      	str	r2, [r4, #0]
 801051e:	7019      	strb	r1, [r3, #0]
 8010520:	e7c5      	b.n	80104ae <_puts_r+0x42>
 8010522:	4622      	mov	r2, r4
 8010524:	4628      	mov	r0, r5
 8010526:	f000 f817 	bl	8010558 <__swbuf_r>
 801052a:	3001      	adds	r0, #1
 801052c:	d1bf      	bne.n	80104ae <_puts_r+0x42>
 801052e:	e7df      	b.n	80104f0 <_puts_r+0x84>
 8010530:	6823      	ldr	r3, [r4, #0]
 8010532:	250a      	movs	r5, #10
 8010534:	1c5a      	adds	r2, r3, #1
 8010536:	6022      	str	r2, [r4, #0]
 8010538:	701d      	strb	r5, [r3, #0]
 801053a:	e7db      	b.n	80104f4 <_puts_r+0x88>
 801053c:	08013024 	.word	0x08013024
 8010540:	08013044 	.word	0x08013044
 8010544:	08013004 	.word	0x08013004

08010548 <puts>:
 8010548:	4b02      	ldr	r3, [pc, #8]	; (8010554 <puts+0xc>)
 801054a:	4601      	mov	r1, r0
 801054c:	6818      	ldr	r0, [r3, #0]
 801054e:	f7ff bf8d 	b.w	801046c <_puts_r>
 8010552:	bf00      	nop
 8010554:	24000024 	.word	0x24000024

08010558 <__swbuf_r>:
 8010558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801055a:	460e      	mov	r6, r1
 801055c:	4614      	mov	r4, r2
 801055e:	4605      	mov	r5, r0
 8010560:	b118      	cbz	r0, 801056a <__swbuf_r+0x12>
 8010562:	6983      	ldr	r3, [r0, #24]
 8010564:	b90b      	cbnz	r3, 801056a <__swbuf_r+0x12>
 8010566:	f000 ffdf 	bl	8011528 <__sinit>
 801056a:	4b21      	ldr	r3, [pc, #132]	; (80105f0 <__swbuf_r+0x98>)
 801056c:	429c      	cmp	r4, r3
 801056e:	d12b      	bne.n	80105c8 <__swbuf_r+0x70>
 8010570:	686c      	ldr	r4, [r5, #4]
 8010572:	69a3      	ldr	r3, [r4, #24]
 8010574:	60a3      	str	r3, [r4, #8]
 8010576:	89a3      	ldrh	r3, [r4, #12]
 8010578:	071a      	lsls	r2, r3, #28
 801057a:	d52f      	bpl.n	80105dc <__swbuf_r+0x84>
 801057c:	6923      	ldr	r3, [r4, #16]
 801057e:	b36b      	cbz	r3, 80105dc <__swbuf_r+0x84>
 8010580:	6923      	ldr	r3, [r4, #16]
 8010582:	6820      	ldr	r0, [r4, #0]
 8010584:	1ac0      	subs	r0, r0, r3
 8010586:	6963      	ldr	r3, [r4, #20]
 8010588:	b2f6      	uxtb	r6, r6
 801058a:	4283      	cmp	r3, r0
 801058c:	4637      	mov	r7, r6
 801058e:	dc04      	bgt.n	801059a <__swbuf_r+0x42>
 8010590:	4621      	mov	r1, r4
 8010592:	4628      	mov	r0, r5
 8010594:	f000 ff34 	bl	8011400 <_fflush_r>
 8010598:	bb30      	cbnz	r0, 80105e8 <__swbuf_r+0x90>
 801059a:	68a3      	ldr	r3, [r4, #8]
 801059c:	3b01      	subs	r3, #1
 801059e:	60a3      	str	r3, [r4, #8]
 80105a0:	6823      	ldr	r3, [r4, #0]
 80105a2:	1c5a      	adds	r2, r3, #1
 80105a4:	6022      	str	r2, [r4, #0]
 80105a6:	701e      	strb	r6, [r3, #0]
 80105a8:	6963      	ldr	r3, [r4, #20]
 80105aa:	3001      	adds	r0, #1
 80105ac:	4283      	cmp	r3, r0
 80105ae:	d004      	beq.n	80105ba <__swbuf_r+0x62>
 80105b0:	89a3      	ldrh	r3, [r4, #12]
 80105b2:	07db      	lsls	r3, r3, #31
 80105b4:	d506      	bpl.n	80105c4 <__swbuf_r+0x6c>
 80105b6:	2e0a      	cmp	r6, #10
 80105b8:	d104      	bne.n	80105c4 <__swbuf_r+0x6c>
 80105ba:	4621      	mov	r1, r4
 80105bc:	4628      	mov	r0, r5
 80105be:	f000 ff1f 	bl	8011400 <_fflush_r>
 80105c2:	b988      	cbnz	r0, 80105e8 <__swbuf_r+0x90>
 80105c4:	4638      	mov	r0, r7
 80105c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105c8:	4b0a      	ldr	r3, [pc, #40]	; (80105f4 <__swbuf_r+0x9c>)
 80105ca:	429c      	cmp	r4, r3
 80105cc:	d101      	bne.n	80105d2 <__swbuf_r+0x7a>
 80105ce:	68ac      	ldr	r4, [r5, #8]
 80105d0:	e7cf      	b.n	8010572 <__swbuf_r+0x1a>
 80105d2:	4b09      	ldr	r3, [pc, #36]	; (80105f8 <__swbuf_r+0xa0>)
 80105d4:	429c      	cmp	r4, r3
 80105d6:	bf08      	it	eq
 80105d8:	68ec      	ldreq	r4, [r5, #12]
 80105da:	e7ca      	b.n	8010572 <__swbuf_r+0x1a>
 80105dc:	4621      	mov	r1, r4
 80105de:	4628      	mov	r0, r5
 80105e0:	f000 f80c 	bl	80105fc <__swsetup_r>
 80105e4:	2800      	cmp	r0, #0
 80105e6:	d0cb      	beq.n	8010580 <__swbuf_r+0x28>
 80105e8:	f04f 37ff 	mov.w	r7, #4294967295
 80105ec:	e7ea      	b.n	80105c4 <__swbuf_r+0x6c>
 80105ee:	bf00      	nop
 80105f0:	08013024 	.word	0x08013024
 80105f4:	08013044 	.word	0x08013044
 80105f8:	08013004 	.word	0x08013004

080105fc <__swsetup_r>:
 80105fc:	4b32      	ldr	r3, [pc, #200]	; (80106c8 <__swsetup_r+0xcc>)
 80105fe:	b570      	push	{r4, r5, r6, lr}
 8010600:	681d      	ldr	r5, [r3, #0]
 8010602:	4606      	mov	r6, r0
 8010604:	460c      	mov	r4, r1
 8010606:	b125      	cbz	r5, 8010612 <__swsetup_r+0x16>
 8010608:	69ab      	ldr	r3, [r5, #24]
 801060a:	b913      	cbnz	r3, 8010612 <__swsetup_r+0x16>
 801060c:	4628      	mov	r0, r5
 801060e:	f000 ff8b 	bl	8011528 <__sinit>
 8010612:	4b2e      	ldr	r3, [pc, #184]	; (80106cc <__swsetup_r+0xd0>)
 8010614:	429c      	cmp	r4, r3
 8010616:	d10f      	bne.n	8010638 <__swsetup_r+0x3c>
 8010618:	686c      	ldr	r4, [r5, #4]
 801061a:	89a3      	ldrh	r3, [r4, #12]
 801061c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010620:	0719      	lsls	r1, r3, #28
 8010622:	d42c      	bmi.n	801067e <__swsetup_r+0x82>
 8010624:	06dd      	lsls	r5, r3, #27
 8010626:	d411      	bmi.n	801064c <__swsetup_r+0x50>
 8010628:	2309      	movs	r3, #9
 801062a:	6033      	str	r3, [r6, #0]
 801062c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010630:	81a3      	strh	r3, [r4, #12]
 8010632:	f04f 30ff 	mov.w	r0, #4294967295
 8010636:	e03e      	b.n	80106b6 <__swsetup_r+0xba>
 8010638:	4b25      	ldr	r3, [pc, #148]	; (80106d0 <__swsetup_r+0xd4>)
 801063a:	429c      	cmp	r4, r3
 801063c:	d101      	bne.n	8010642 <__swsetup_r+0x46>
 801063e:	68ac      	ldr	r4, [r5, #8]
 8010640:	e7eb      	b.n	801061a <__swsetup_r+0x1e>
 8010642:	4b24      	ldr	r3, [pc, #144]	; (80106d4 <__swsetup_r+0xd8>)
 8010644:	429c      	cmp	r4, r3
 8010646:	bf08      	it	eq
 8010648:	68ec      	ldreq	r4, [r5, #12]
 801064a:	e7e6      	b.n	801061a <__swsetup_r+0x1e>
 801064c:	0758      	lsls	r0, r3, #29
 801064e:	d512      	bpl.n	8010676 <__swsetup_r+0x7a>
 8010650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010652:	b141      	cbz	r1, 8010666 <__swsetup_r+0x6a>
 8010654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010658:	4299      	cmp	r1, r3
 801065a:	d002      	beq.n	8010662 <__swsetup_r+0x66>
 801065c:	4630      	mov	r0, r6
 801065e:	f001 fc11 	bl	8011e84 <_free_r>
 8010662:	2300      	movs	r3, #0
 8010664:	6363      	str	r3, [r4, #52]	; 0x34
 8010666:	89a3      	ldrh	r3, [r4, #12]
 8010668:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801066c:	81a3      	strh	r3, [r4, #12]
 801066e:	2300      	movs	r3, #0
 8010670:	6063      	str	r3, [r4, #4]
 8010672:	6923      	ldr	r3, [r4, #16]
 8010674:	6023      	str	r3, [r4, #0]
 8010676:	89a3      	ldrh	r3, [r4, #12]
 8010678:	f043 0308 	orr.w	r3, r3, #8
 801067c:	81a3      	strh	r3, [r4, #12]
 801067e:	6923      	ldr	r3, [r4, #16]
 8010680:	b94b      	cbnz	r3, 8010696 <__swsetup_r+0x9a>
 8010682:	89a3      	ldrh	r3, [r4, #12]
 8010684:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801068c:	d003      	beq.n	8010696 <__swsetup_r+0x9a>
 801068e:	4621      	mov	r1, r4
 8010690:	4630      	mov	r0, r6
 8010692:	f001 f813 	bl	80116bc <__smakebuf_r>
 8010696:	89a0      	ldrh	r0, [r4, #12]
 8010698:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801069c:	f010 0301 	ands.w	r3, r0, #1
 80106a0:	d00a      	beq.n	80106b8 <__swsetup_r+0xbc>
 80106a2:	2300      	movs	r3, #0
 80106a4:	60a3      	str	r3, [r4, #8]
 80106a6:	6963      	ldr	r3, [r4, #20]
 80106a8:	425b      	negs	r3, r3
 80106aa:	61a3      	str	r3, [r4, #24]
 80106ac:	6923      	ldr	r3, [r4, #16]
 80106ae:	b943      	cbnz	r3, 80106c2 <__swsetup_r+0xc6>
 80106b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80106b4:	d1ba      	bne.n	801062c <__swsetup_r+0x30>
 80106b6:	bd70      	pop	{r4, r5, r6, pc}
 80106b8:	0781      	lsls	r1, r0, #30
 80106ba:	bf58      	it	pl
 80106bc:	6963      	ldrpl	r3, [r4, #20]
 80106be:	60a3      	str	r3, [r4, #8]
 80106c0:	e7f4      	b.n	80106ac <__swsetup_r+0xb0>
 80106c2:	2000      	movs	r0, #0
 80106c4:	e7f7      	b.n	80106b6 <__swsetup_r+0xba>
 80106c6:	bf00      	nop
 80106c8:	24000024 	.word	0x24000024
 80106cc:	08013024 	.word	0x08013024
 80106d0:	08013044 	.word	0x08013044
 80106d4:	08013004 	.word	0x08013004

080106d8 <quorem>:
 80106d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106dc:	6903      	ldr	r3, [r0, #16]
 80106de:	690c      	ldr	r4, [r1, #16]
 80106e0:	42a3      	cmp	r3, r4
 80106e2:	4607      	mov	r7, r0
 80106e4:	f2c0 8081 	blt.w	80107ea <quorem+0x112>
 80106e8:	3c01      	subs	r4, #1
 80106ea:	f101 0814 	add.w	r8, r1, #20
 80106ee:	f100 0514 	add.w	r5, r0, #20
 80106f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80106f6:	9301      	str	r3, [sp, #4]
 80106f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80106fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010700:	3301      	adds	r3, #1
 8010702:	429a      	cmp	r2, r3
 8010704:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010708:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801070c:	fbb2 f6f3 	udiv	r6, r2, r3
 8010710:	d331      	bcc.n	8010776 <quorem+0x9e>
 8010712:	f04f 0e00 	mov.w	lr, #0
 8010716:	4640      	mov	r0, r8
 8010718:	46ac      	mov	ip, r5
 801071a:	46f2      	mov	sl, lr
 801071c:	f850 2b04 	ldr.w	r2, [r0], #4
 8010720:	b293      	uxth	r3, r2
 8010722:	fb06 e303 	mla	r3, r6, r3, lr
 8010726:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801072a:	b29b      	uxth	r3, r3
 801072c:	ebaa 0303 	sub.w	r3, sl, r3
 8010730:	0c12      	lsrs	r2, r2, #16
 8010732:	f8dc a000 	ldr.w	sl, [ip]
 8010736:	fb06 e202 	mla	r2, r6, r2, lr
 801073a:	fa13 f38a 	uxtah	r3, r3, sl
 801073e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010742:	fa1f fa82 	uxth.w	sl, r2
 8010746:	f8dc 2000 	ldr.w	r2, [ip]
 801074a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801074e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010752:	b29b      	uxth	r3, r3
 8010754:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010758:	4581      	cmp	r9, r0
 801075a:	f84c 3b04 	str.w	r3, [ip], #4
 801075e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010762:	d2db      	bcs.n	801071c <quorem+0x44>
 8010764:	f855 300b 	ldr.w	r3, [r5, fp]
 8010768:	b92b      	cbnz	r3, 8010776 <quorem+0x9e>
 801076a:	9b01      	ldr	r3, [sp, #4]
 801076c:	3b04      	subs	r3, #4
 801076e:	429d      	cmp	r5, r3
 8010770:	461a      	mov	r2, r3
 8010772:	d32e      	bcc.n	80107d2 <quorem+0xfa>
 8010774:	613c      	str	r4, [r7, #16]
 8010776:	4638      	mov	r0, r7
 8010778:	f001 fa74 	bl	8011c64 <__mcmp>
 801077c:	2800      	cmp	r0, #0
 801077e:	db24      	blt.n	80107ca <quorem+0xf2>
 8010780:	3601      	adds	r6, #1
 8010782:	4628      	mov	r0, r5
 8010784:	f04f 0c00 	mov.w	ip, #0
 8010788:	f858 2b04 	ldr.w	r2, [r8], #4
 801078c:	f8d0 e000 	ldr.w	lr, [r0]
 8010790:	b293      	uxth	r3, r2
 8010792:	ebac 0303 	sub.w	r3, ip, r3
 8010796:	0c12      	lsrs	r2, r2, #16
 8010798:	fa13 f38e 	uxtah	r3, r3, lr
 801079c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80107a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80107a4:	b29b      	uxth	r3, r3
 80107a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80107aa:	45c1      	cmp	r9, r8
 80107ac:	f840 3b04 	str.w	r3, [r0], #4
 80107b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80107b4:	d2e8      	bcs.n	8010788 <quorem+0xb0>
 80107b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80107ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80107be:	b922      	cbnz	r2, 80107ca <quorem+0xf2>
 80107c0:	3b04      	subs	r3, #4
 80107c2:	429d      	cmp	r5, r3
 80107c4:	461a      	mov	r2, r3
 80107c6:	d30a      	bcc.n	80107de <quorem+0x106>
 80107c8:	613c      	str	r4, [r7, #16]
 80107ca:	4630      	mov	r0, r6
 80107cc:	b003      	add	sp, #12
 80107ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107d2:	6812      	ldr	r2, [r2, #0]
 80107d4:	3b04      	subs	r3, #4
 80107d6:	2a00      	cmp	r2, #0
 80107d8:	d1cc      	bne.n	8010774 <quorem+0x9c>
 80107da:	3c01      	subs	r4, #1
 80107dc:	e7c7      	b.n	801076e <quorem+0x96>
 80107de:	6812      	ldr	r2, [r2, #0]
 80107e0:	3b04      	subs	r3, #4
 80107e2:	2a00      	cmp	r2, #0
 80107e4:	d1f0      	bne.n	80107c8 <quorem+0xf0>
 80107e6:	3c01      	subs	r4, #1
 80107e8:	e7eb      	b.n	80107c2 <quorem+0xea>
 80107ea:	2000      	movs	r0, #0
 80107ec:	e7ee      	b.n	80107cc <quorem+0xf4>
	...

080107f0 <_dtoa_r>:
 80107f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107f4:	ec59 8b10 	vmov	r8, r9, d0
 80107f8:	b095      	sub	sp, #84	; 0x54
 80107fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80107fc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80107fe:	9107      	str	r1, [sp, #28]
 8010800:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8010804:	4606      	mov	r6, r0
 8010806:	9209      	str	r2, [sp, #36]	; 0x24
 8010808:	9310      	str	r3, [sp, #64]	; 0x40
 801080a:	b975      	cbnz	r5, 801082a <_dtoa_r+0x3a>
 801080c:	2010      	movs	r0, #16
 801080e:	f000 ff95 	bl	801173c <malloc>
 8010812:	4602      	mov	r2, r0
 8010814:	6270      	str	r0, [r6, #36]	; 0x24
 8010816:	b920      	cbnz	r0, 8010822 <_dtoa_r+0x32>
 8010818:	4bab      	ldr	r3, [pc, #684]	; (8010ac8 <_dtoa_r+0x2d8>)
 801081a:	21ea      	movs	r1, #234	; 0xea
 801081c:	48ab      	ldr	r0, [pc, #684]	; (8010acc <_dtoa_r+0x2dc>)
 801081e:	f001 fd9b 	bl	8012358 <__assert_func>
 8010822:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010826:	6005      	str	r5, [r0, #0]
 8010828:	60c5      	str	r5, [r0, #12]
 801082a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801082c:	6819      	ldr	r1, [r3, #0]
 801082e:	b151      	cbz	r1, 8010846 <_dtoa_r+0x56>
 8010830:	685a      	ldr	r2, [r3, #4]
 8010832:	604a      	str	r2, [r1, #4]
 8010834:	2301      	movs	r3, #1
 8010836:	4093      	lsls	r3, r2
 8010838:	608b      	str	r3, [r1, #8]
 801083a:	4630      	mov	r0, r6
 801083c:	f000 ffd4 	bl	80117e8 <_Bfree>
 8010840:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010842:	2200      	movs	r2, #0
 8010844:	601a      	str	r2, [r3, #0]
 8010846:	f1b9 0300 	subs.w	r3, r9, #0
 801084a:	bfbb      	ittet	lt
 801084c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010850:	9303      	strlt	r3, [sp, #12]
 8010852:	2300      	movge	r3, #0
 8010854:	2201      	movlt	r2, #1
 8010856:	bfac      	ite	ge
 8010858:	6023      	strge	r3, [r4, #0]
 801085a:	6022      	strlt	r2, [r4, #0]
 801085c:	4b9c      	ldr	r3, [pc, #624]	; (8010ad0 <_dtoa_r+0x2e0>)
 801085e:	9c03      	ldr	r4, [sp, #12]
 8010860:	43a3      	bics	r3, r4
 8010862:	d11a      	bne.n	801089a <_dtoa_r+0xaa>
 8010864:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010866:	f242 730f 	movw	r3, #9999	; 0x270f
 801086a:	6013      	str	r3, [r2, #0]
 801086c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8010870:	ea53 0308 	orrs.w	r3, r3, r8
 8010874:	f000 8512 	beq.w	801129c <_dtoa_r+0xaac>
 8010878:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801087a:	b953      	cbnz	r3, 8010892 <_dtoa_r+0xa2>
 801087c:	4b95      	ldr	r3, [pc, #596]	; (8010ad4 <_dtoa_r+0x2e4>)
 801087e:	e01f      	b.n	80108c0 <_dtoa_r+0xd0>
 8010880:	4b95      	ldr	r3, [pc, #596]	; (8010ad8 <_dtoa_r+0x2e8>)
 8010882:	9300      	str	r3, [sp, #0]
 8010884:	3308      	adds	r3, #8
 8010886:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010888:	6013      	str	r3, [r2, #0]
 801088a:	9800      	ldr	r0, [sp, #0]
 801088c:	b015      	add	sp, #84	; 0x54
 801088e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010892:	4b90      	ldr	r3, [pc, #576]	; (8010ad4 <_dtoa_r+0x2e4>)
 8010894:	9300      	str	r3, [sp, #0]
 8010896:	3303      	adds	r3, #3
 8010898:	e7f5      	b.n	8010886 <_dtoa_r+0x96>
 801089a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801089e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80108a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108a6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80108aa:	d10b      	bne.n	80108c4 <_dtoa_r+0xd4>
 80108ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80108ae:	2301      	movs	r3, #1
 80108b0:	6013      	str	r3, [r2, #0]
 80108b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	f000 84ee 	beq.w	8011296 <_dtoa_r+0xaa6>
 80108ba:	4888      	ldr	r0, [pc, #544]	; (8010adc <_dtoa_r+0x2ec>)
 80108bc:	6018      	str	r0, [r3, #0]
 80108be:	1e43      	subs	r3, r0, #1
 80108c0:	9300      	str	r3, [sp, #0]
 80108c2:	e7e2      	b.n	801088a <_dtoa_r+0x9a>
 80108c4:	a913      	add	r1, sp, #76	; 0x4c
 80108c6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80108ca:	aa12      	add	r2, sp, #72	; 0x48
 80108cc:	4630      	mov	r0, r6
 80108ce:	f001 fa6d 	bl	8011dac <__d2b>
 80108d2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80108d6:	4605      	mov	r5, r0
 80108d8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80108da:	2900      	cmp	r1, #0
 80108dc:	d047      	beq.n	801096e <_dtoa_r+0x17e>
 80108de:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80108e0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80108e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80108e8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80108ec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80108f0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80108f4:	2400      	movs	r4, #0
 80108f6:	ec43 2b16 	vmov	d6, r2, r3
 80108fa:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80108fe:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8010ab0 <_dtoa_r+0x2c0>
 8010902:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010906:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8010ab8 <_dtoa_r+0x2c8>
 801090a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801090e:	eeb0 7b46 	vmov.f64	d7, d6
 8010912:	ee06 1a90 	vmov	s13, r1
 8010916:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801091a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8010ac0 <_dtoa_r+0x2d0>
 801091e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010922:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8010926:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801092a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801092e:	ee16 ba90 	vmov	fp, s13
 8010932:	9411      	str	r4, [sp, #68]	; 0x44
 8010934:	d508      	bpl.n	8010948 <_dtoa_r+0x158>
 8010936:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801093a:	eeb4 6b47 	vcmp.f64	d6, d7
 801093e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010942:	bf18      	it	ne
 8010944:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8010948:	f1bb 0f16 	cmp.w	fp, #22
 801094c:	d832      	bhi.n	80109b4 <_dtoa_r+0x1c4>
 801094e:	4b64      	ldr	r3, [pc, #400]	; (8010ae0 <_dtoa_r+0x2f0>)
 8010950:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010954:	ed93 7b00 	vldr	d7, [r3]
 8010958:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801095c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010964:	d501      	bpl.n	801096a <_dtoa_r+0x17a>
 8010966:	f10b 3bff 	add.w	fp, fp, #4294967295
 801096a:	2300      	movs	r3, #0
 801096c:	e023      	b.n	80109b6 <_dtoa_r+0x1c6>
 801096e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8010970:	4401      	add	r1, r0
 8010972:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8010976:	2b20      	cmp	r3, #32
 8010978:	bfc3      	ittte	gt
 801097a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801097e:	fa04 f303 	lslgt.w	r3, r4, r3
 8010982:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8010986:	f1c3 0320 	rsble	r3, r3, #32
 801098a:	bfc6      	itte	gt
 801098c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8010990:	ea43 0308 	orrgt.w	r3, r3, r8
 8010994:	fa08 f303 	lslle.w	r3, r8, r3
 8010998:	ee07 3a90 	vmov	s15, r3
 801099c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80109a0:	3901      	subs	r1, #1
 80109a2:	ed8d 7b00 	vstr	d7, [sp]
 80109a6:	9c01      	ldr	r4, [sp, #4]
 80109a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80109ac:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80109b0:	2401      	movs	r4, #1
 80109b2:	e7a0      	b.n	80108f6 <_dtoa_r+0x106>
 80109b4:	2301      	movs	r3, #1
 80109b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80109b8:	1a43      	subs	r3, r0, r1
 80109ba:	1e5a      	subs	r2, r3, #1
 80109bc:	bf45      	ittet	mi
 80109be:	f1c3 0301 	rsbmi	r3, r3, #1
 80109c2:	9305      	strmi	r3, [sp, #20]
 80109c4:	2300      	movpl	r3, #0
 80109c6:	2300      	movmi	r3, #0
 80109c8:	9206      	str	r2, [sp, #24]
 80109ca:	bf54      	ite	pl
 80109cc:	9305      	strpl	r3, [sp, #20]
 80109ce:	9306      	strmi	r3, [sp, #24]
 80109d0:	f1bb 0f00 	cmp.w	fp, #0
 80109d4:	db18      	blt.n	8010a08 <_dtoa_r+0x218>
 80109d6:	9b06      	ldr	r3, [sp, #24]
 80109d8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80109dc:	445b      	add	r3, fp
 80109de:	9306      	str	r3, [sp, #24]
 80109e0:	2300      	movs	r3, #0
 80109e2:	9a07      	ldr	r2, [sp, #28]
 80109e4:	2a09      	cmp	r2, #9
 80109e6:	d849      	bhi.n	8010a7c <_dtoa_r+0x28c>
 80109e8:	2a05      	cmp	r2, #5
 80109ea:	bfc4      	itt	gt
 80109ec:	3a04      	subgt	r2, #4
 80109ee:	9207      	strgt	r2, [sp, #28]
 80109f0:	9a07      	ldr	r2, [sp, #28]
 80109f2:	f1a2 0202 	sub.w	r2, r2, #2
 80109f6:	bfcc      	ite	gt
 80109f8:	2400      	movgt	r4, #0
 80109fa:	2401      	movle	r4, #1
 80109fc:	2a03      	cmp	r2, #3
 80109fe:	d848      	bhi.n	8010a92 <_dtoa_r+0x2a2>
 8010a00:	e8df f002 	tbb	[pc, r2]
 8010a04:	3a2c2e0b 	.word	0x3a2c2e0b
 8010a08:	9b05      	ldr	r3, [sp, #20]
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	eba3 030b 	sub.w	r3, r3, fp
 8010a10:	9305      	str	r3, [sp, #20]
 8010a12:	920e      	str	r2, [sp, #56]	; 0x38
 8010a14:	f1cb 0300 	rsb	r3, fp, #0
 8010a18:	e7e3      	b.n	80109e2 <_dtoa_r+0x1f2>
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	9208      	str	r2, [sp, #32]
 8010a1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a20:	2a00      	cmp	r2, #0
 8010a22:	dc39      	bgt.n	8010a98 <_dtoa_r+0x2a8>
 8010a24:	f04f 0a01 	mov.w	sl, #1
 8010a28:	46d1      	mov	r9, sl
 8010a2a:	4652      	mov	r2, sl
 8010a2c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8010a30:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8010a32:	2100      	movs	r1, #0
 8010a34:	6079      	str	r1, [r7, #4]
 8010a36:	2004      	movs	r0, #4
 8010a38:	f100 0c14 	add.w	ip, r0, #20
 8010a3c:	4594      	cmp	ip, r2
 8010a3e:	6879      	ldr	r1, [r7, #4]
 8010a40:	d92f      	bls.n	8010aa2 <_dtoa_r+0x2b2>
 8010a42:	4630      	mov	r0, r6
 8010a44:	930c      	str	r3, [sp, #48]	; 0x30
 8010a46:	f000 fe8f 	bl	8011768 <_Balloc>
 8010a4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010a4c:	9000      	str	r0, [sp, #0]
 8010a4e:	4602      	mov	r2, r0
 8010a50:	2800      	cmp	r0, #0
 8010a52:	d149      	bne.n	8010ae8 <_dtoa_r+0x2f8>
 8010a54:	4b23      	ldr	r3, [pc, #140]	; (8010ae4 <_dtoa_r+0x2f4>)
 8010a56:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010a5a:	e6df      	b.n	801081c <_dtoa_r+0x2c>
 8010a5c:	2201      	movs	r2, #1
 8010a5e:	e7dd      	b.n	8010a1c <_dtoa_r+0x22c>
 8010a60:	2200      	movs	r2, #0
 8010a62:	9208      	str	r2, [sp, #32]
 8010a64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a66:	eb0b 0a02 	add.w	sl, fp, r2
 8010a6a:	f10a 0901 	add.w	r9, sl, #1
 8010a6e:	464a      	mov	r2, r9
 8010a70:	2a01      	cmp	r2, #1
 8010a72:	bfb8      	it	lt
 8010a74:	2201      	movlt	r2, #1
 8010a76:	e7db      	b.n	8010a30 <_dtoa_r+0x240>
 8010a78:	2201      	movs	r2, #1
 8010a7a:	e7f2      	b.n	8010a62 <_dtoa_r+0x272>
 8010a7c:	2401      	movs	r4, #1
 8010a7e:	2200      	movs	r2, #0
 8010a80:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8010a84:	f04f 3aff 	mov.w	sl, #4294967295
 8010a88:	2100      	movs	r1, #0
 8010a8a:	46d1      	mov	r9, sl
 8010a8c:	2212      	movs	r2, #18
 8010a8e:	9109      	str	r1, [sp, #36]	; 0x24
 8010a90:	e7ce      	b.n	8010a30 <_dtoa_r+0x240>
 8010a92:	2201      	movs	r2, #1
 8010a94:	9208      	str	r2, [sp, #32]
 8010a96:	e7f5      	b.n	8010a84 <_dtoa_r+0x294>
 8010a98:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8010a9c:	46d1      	mov	r9, sl
 8010a9e:	4652      	mov	r2, sl
 8010aa0:	e7c6      	b.n	8010a30 <_dtoa_r+0x240>
 8010aa2:	3101      	adds	r1, #1
 8010aa4:	6079      	str	r1, [r7, #4]
 8010aa6:	0040      	lsls	r0, r0, #1
 8010aa8:	e7c6      	b.n	8010a38 <_dtoa_r+0x248>
 8010aaa:	bf00      	nop
 8010aac:	f3af 8000 	nop.w
 8010ab0:	636f4361 	.word	0x636f4361
 8010ab4:	3fd287a7 	.word	0x3fd287a7
 8010ab8:	8b60c8b3 	.word	0x8b60c8b3
 8010abc:	3fc68a28 	.word	0x3fc68a28
 8010ac0:	509f79fb 	.word	0x509f79fb
 8010ac4:	3fd34413 	.word	0x3fd34413
 8010ac8:	08012f7d 	.word	0x08012f7d
 8010acc:	08012f94 	.word	0x08012f94
 8010ad0:	7ff00000 	.word	0x7ff00000
 8010ad4:	08012f79 	.word	0x08012f79
 8010ad8:	08012f70 	.word	0x08012f70
 8010adc:	08012f4d 	.word	0x08012f4d
 8010ae0:	080130f0 	.word	0x080130f0
 8010ae4:	08012ff3 	.word	0x08012ff3
 8010ae8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8010aea:	9900      	ldr	r1, [sp, #0]
 8010aec:	6011      	str	r1, [r2, #0]
 8010aee:	f1b9 0f0e 	cmp.w	r9, #14
 8010af2:	d872      	bhi.n	8010bda <_dtoa_r+0x3ea>
 8010af4:	2c00      	cmp	r4, #0
 8010af6:	d070      	beq.n	8010bda <_dtoa_r+0x3ea>
 8010af8:	f1bb 0f00 	cmp.w	fp, #0
 8010afc:	f340 80a6 	ble.w	8010c4c <_dtoa_r+0x45c>
 8010b00:	49ca      	ldr	r1, [pc, #808]	; (8010e2c <_dtoa_r+0x63c>)
 8010b02:	f00b 020f 	and.w	r2, fp, #15
 8010b06:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8010b0a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010b0e:	ed92 7b00 	vldr	d7, [r2]
 8010b12:	ea4f 112b 	mov.w	r1, fp, asr #4
 8010b16:	f000 808d 	beq.w	8010c34 <_dtoa_r+0x444>
 8010b1a:	4ac5      	ldr	r2, [pc, #788]	; (8010e30 <_dtoa_r+0x640>)
 8010b1c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8010b20:	ed92 6b08 	vldr	d6, [r2, #32]
 8010b24:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8010b28:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010b2c:	f001 010f 	and.w	r1, r1, #15
 8010b30:	2203      	movs	r2, #3
 8010b32:	48bf      	ldr	r0, [pc, #764]	; (8010e30 <_dtoa_r+0x640>)
 8010b34:	2900      	cmp	r1, #0
 8010b36:	d17f      	bne.n	8010c38 <_dtoa_r+0x448>
 8010b38:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010b3c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010b40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010b44:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010b46:	2900      	cmp	r1, #0
 8010b48:	f000 80b2 	beq.w	8010cb0 <_dtoa_r+0x4c0>
 8010b4c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010b50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010b54:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b5c:	f140 80a8 	bpl.w	8010cb0 <_dtoa_r+0x4c0>
 8010b60:	f1b9 0f00 	cmp.w	r9, #0
 8010b64:	f000 80a4 	beq.w	8010cb0 <_dtoa_r+0x4c0>
 8010b68:	f1ba 0f00 	cmp.w	sl, #0
 8010b6c:	dd31      	ble.n	8010bd2 <_dtoa_r+0x3e2>
 8010b6e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8010b72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010b76:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010b7a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010b7e:	3201      	adds	r2, #1
 8010b80:	4650      	mov	r0, sl
 8010b82:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010b86:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8010b8a:	ee07 2a90 	vmov	s15, r2
 8010b8e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010b92:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010b96:	ed8d 5b02 	vstr	d5, [sp, #8]
 8010b9a:	9c03      	ldr	r4, [sp, #12]
 8010b9c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8010ba0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8010ba4:	2800      	cmp	r0, #0
 8010ba6:	f040 8086 	bne.w	8010cb6 <_dtoa_r+0x4c6>
 8010baa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010bae:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010bb2:	ec42 1b17 	vmov	d7, r1, r2
 8010bb6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bbe:	f300 8272 	bgt.w	80110a6 <_dtoa_r+0x8b6>
 8010bc2:	eeb1 7b47 	vneg.f64	d7, d7
 8010bc6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bce:	f100 8267 	bmi.w	80110a0 <_dtoa_r+0x8b0>
 8010bd2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8010bd6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8010bda:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010bdc:	2a00      	cmp	r2, #0
 8010bde:	f2c0 8129 	blt.w	8010e34 <_dtoa_r+0x644>
 8010be2:	f1bb 0f0e 	cmp.w	fp, #14
 8010be6:	f300 8125 	bgt.w	8010e34 <_dtoa_r+0x644>
 8010bea:	4b90      	ldr	r3, [pc, #576]	; (8010e2c <_dtoa_r+0x63c>)
 8010bec:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010bf0:	ed93 6b00 	vldr	d6, [r3]
 8010bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	f280 80c3 	bge.w	8010d82 <_dtoa_r+0x592>
 8010bfc:	f1b9 0f00 	cmp.w	r9, #0
 8010c00:	f300 80bf 	bgt.w	8010d82 <_dtoa_r+0x592>
 8010c04:	f040 824c 	bne.w	80110a0 <_dtoa_r+0x8b0>
 8010c08:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010c0c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010c10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010c14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c1c:	464c      	mov	r4, r9
 8010c1e:	464f      	mov	r7, r9
 8010c20:	f280 8222 	bge.w	8011068 <_dtoa_r+0x878>
 8010c24:	f8dd 8000 	ldr.w	r8, [sp]
 8010c28:	2331      	movs	r3, #49	; 0x31
 8010c2a:	f808 3b01 	strb.w	r3, [r8], #1
 8010c2e:	f10b 0b01 	add.w	fp, fp, #1
 8010c32:	e21e      	b.n	8011072 <_dtoa_r+0x882>
 8010c34:	2202      	movs	r2, #2
 8010c36:	e77c      	b.n	8010b32 <_dtoa_r+0x342>
 8010c38:	07cc      	lsls	r4, r1, #31
 8010c3a:	d504      	bpl.n	8010c46 <_dtoa_r+0x456>
 8010c3c:	ed90 6b00 	vldr	d6, [r0]
 8010c40:	3201      	adds	r2, #1
 8010c42:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010c46:	1049      	asrs	r1, r1, #1
 8010c48:	3008      	adds	r0, #8
 8010c4a:	e773      	b.n	8010b34 <_dtoa_r+0x344>
 8010c4c:	d02e      	beq.n	8010cac <_dtoa_r+0x4bc>
 8010c4e:	f1cb 0100 	rsb	r1, fp, #0
 8010c52:	4a76      	ldr	r2, [pc, #472]	; (8010e2c <_dtoa_r+0x63c>)
 8010c54:	f001 000f 	and.w	r0, r1, #15
 8010c58:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010c5c:	ed92 7b00 	vldr	d7, [r2]
 8010c60:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8010c64:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010c68:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8010c6c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8010c70:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8010c74:	486e      	ldr	r0, [pc, #440]	; (8010e30 <_dtoa_r+0x640>)
 8010c76:	1109      	asrs	r1, r1, #4
 8010c78:	2400      	movs	r4, #0
 8010c7a:	2202      	movs	r2, #2
 8010c7c:	b939      	cbnz	r1, 8010c8e <_dtoa_r+0x49e>
 8010c7e:	2c00      	cmp	r4, #0
 8010c80:	f43f af60 	beq.w	8010b44 <_dtoa_r+0x354>
 8010c84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010c88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c8c:	e75a      	b.n	8010b44 <_dtoa_r+0x354>
 8010c8e:	07cf      	lsls	r7, r1, #31
 8010c90:	d509      	bpl.n	8010ca6 <_dtoa_r+0x4b6>
 8010c92:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8010c96:	ed90 7b00 	vldr	d7, [r0]
 8010c9a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010c9e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8010ca2:	3201      	adds	r2, #1
 8010ca4:	2401      	movs	r4, #1
 8010ca6:	1049      	asrs	r1, r1, #1
 8010ca8:	3008      	adds	r0, #8
 8010caa:	e7e7      	b.n	8010c7c <_dtoa_r+0x48c>
 8010cac:	2202      	movs	r2, #2
 8010cae:	e749      	b.n	8010b44 <_dtoa_r+0x354>
 8010cb0:	465f      	mov	r7, fp
 8010cb2:	4648      	mov	r0, r9
 8010cb4:	e765      	b.n	8010b82 <_dtoa_r+0x392>
 8010cb6:	ec42 1b17 	vmov	d7, r1, r2
 8010cba:	4a5c      	ldr	r2, [pc, #368]	; (8010e2c <_dtoa_r+0x63c>)
 8010cbc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010cc0:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010cc4:	9a00      	ldr	r2, [sp, #0]
 8010cc6:	1814      	adds	r4, r2, r0
 8010cc8:	9a08      	ldr	r2, [sp, #32]
 8010cca:	b352      	cbz	r2, 8010d22 <_dtoa_r+0x532>
 8010ccc:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8010cd0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8010cd4:	f8dd 8000 	ldr.w	r8, [sp]
 8010cd8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010cdc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010ce0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010ce4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010ce8:	ee14 2a90 	vmov	r2, s9
 8010cec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010cf0:	3230      	adds	r2, #48	; 0x30
 8010cf2:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010cf6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cfe:	f808 2b01 	strb.w	r2, [r8], #1
 8010d02:	d439      	bmi.n	8010d78 <_dtoa_r+0x588>
 8010d04:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010d08:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d10:	d472      	bmi.n	8010df8 <_dtoa_r+0x608>
 8010d12:	45a0      	cmp	r8, r4
 8010d14:	f43f af5d 	beq.w	8010bd2 <_dtoa_r+0x3e2>
 8010d18:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010d1c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010d20:	e7e0      	b.n	8010ce4 <_dtoa_r+0x4f4>
 8010d22:	f8dd 8000 	ldr.w	r8, [sp]
 8010d26:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010d2a:	4621      	mov	r1, r4
 8010d2c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010d30:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010d34:	ee14 2a90 	vmov	r2, s9
 8010d38:	3230      	adds	r2, #48	; 0x30
 8010d3a:	f808 2b01 	strb.w	r2, [r8], #1
 8010d3e:	45a0      	cmp	r8, r4
 8010d40:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010d44:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010d48:	d118      	bne.n	8010d7c <_dtoa_r+0x58c>
 8010d4a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010d4e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010d52:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d5a:	dc4d      	bgt.n	8010df8 <_dtoa_r+0x608>
 8010d5c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010d60:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d68:	f57f af33 	bpl.w	8010bd2 <_dtoa_r+0x3e2>
 8010d6c:	4688      	mov	r8, r1
 8010d6e:	3901      	subs	r1, #1
 8010d70:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8010d74:	2b30      	cmp	r3, #48	; 0x30
 8010d76:	d0f9      	beq.n	8010d6c <_dtoa_r+0x57c>
 8010d78:	46bb      	mov	fp, r7
 8010d7a:	e02a      	b.n	8010dd2 <_dtoa_r+0x5e2>
 8010d7c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010d80:	e7d6      	b.n	8010d30 <_dtoa_r+0x540>
 8010d82:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010d86:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8010d8a:	f8dd 8000 	ldr.w	r8, [sp]
 8010d8e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010d92:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010d96:	ee15 3a10 	vmov	r3, s10
 8010d9a:	3330      	adds	r3, #48	; 0x30
 8010d9c:	f808 3b01 	strb.w	r3, [r8], #1
 8010da0:	9b00      	ldr	r3, [sp, #0]
 8010da2:	eba8 0303 	sub.w	r3, r8, r3
 8010da6:	4599      	cmp	r9, r3
 8010da8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010dac:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010db0:	d133      	bne.n	8010e1a <_dtoa_r+0x62a>
 8010db2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010db6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dbe:	dc1a      	bgt.n	8010df6 <_dtoa_r+0x606>
 8010dc0:	eeb4 7b46 	vcmp.f64	d7, d6
 8010dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dc8:	d103      	bne.n	8010dd2 <_dtoa_r+0x5e2>
 8010dca:	ee15 3a10 	vmov	r3, s10
 8010dce:	07d9      	lsls	r1, r3, #31
 8010dd0:	d411      	bmi.n	8010df6 <_dtoa_r+0x606>
 8010dd2:	4629      	mov	r1, r5
 8010dd4:	4630      	mov	r0, r6
 8010dd6:	f000 fd07 	bl	80117e8 <_Bfree>
 8010dda:	2300      	movs	r3, #0
 8010ddc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010dde:	f888 3000 	strb.w	r3, [r8]
 8010de2:	f10b 0301 	add.w	r3, fp, #1
 8010de6:	6013      	str	r3, [r2, #0]
 8010de8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	f43f ad4d 	beq.w	801088a <_dtoa_r+0x9a>
 8010df0:	f8c3 8000 	str.w	r8, [r3]
 8010df4:	e549      	b.n	801088a <_dtoa_r+0x9a>
 8010df6:	465f      	mov	r7, fp
 8010df8:	4643      	mov	r3, r8
 8010dfa:	4698      	mov	r8, r3
 8010dfc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010e00:	2a39      	cmp	r2, #57	; 0x39
 8010e02:	d106      	bne.n	8010e12 <_dtoa_r+0x622>
 8010e04:	9a00      	ldr	r2, [sp, #0]
 8010e06:	429a      	cmp	r2, r3
 8010e08:	d1f7      	bne.n	8010dfa <_dtoa_r+0x60a>
 8010e0a:	9900      	ldr	r1, [sp, #0]
 8010e0c:	2230      	movs	r2, #48	; 0x30
 8010e0e:	3701      	adds	r7, #1
 8010e10:	700a      	strb	r2, [r1, #0]
 8010e12:	781a      	ldrb	r2, [r3, #0]
 8010e14:	3201      	adds	r2, #1
 8010e16:	701a      	strb	r2, [r3, #0]
 8010e18:	e7ae      	b.n	8010d78 <_dtoa_r+0x588>
 8010e1a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010e1e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e26:	d1b2      	bne.n	8010d8e <_dtoa_r+0x59e>
 8010e28:	e7d3      	b.n	8010dd2 <_dtoa_r+0x5e2>
 8010e2a:	bf00      	nop
 8010e2c:	080130f0 	.word	0x080130f0
 8010e30:	080130c8 	.word	0x080130c8
 8010e34:	9908      	ldr	r1, [sp, #32]
 8010e36:	2900      	cmp	r1, #0
 8010e38:	f000 80d1 	beq.w	8010fde <_dtoa_r+0x7ee>
 8010e3c:	9907      	ldr	r1, [sp, #28]
 8010e3e:	2901      	cmp	r1, #1
 8010e40:	f300 80b4 	bgt.w	8010fac <_dtoa_r+0x7bc>
 8010e44:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010e46:	2900      	cmp	r1, #0
 8010e48:	f000 80ac 	beq.w	8010fa4 <_dtoa_r+0x7b4>
 8010e4c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010e50:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010e54:	461c      	mov	r4, r3
 8010e56:	930a      	str	r3, [sp, #40]	; 0x28
 8010e58:	9b05      	ldr	r3, [sp, #20]
 8010e5a:	4413      	add	r3, r2
 8010e5c:	9305      	str	r3, [sp, #20]
 8010e5e:	9b06      	ldr	r3, [sp, #24]
 8010e60:	2101      	movs	r1, #1
 8010e62:	4413      	add	r3, r2
 8010e64:	4630      	mov	r0, r6
 8010e66:	9306      	str	r3, [sp, #24]
 8010e68:	f000 fd7a 	bl	8011960 <__i2b>
 8010e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e6e:	4607      	mov	r7, r0
 8010e70:	f1b8 0f00 	cmp.w	r8, #0
 8010e74:	dd0d      	ble.n	8010e92 <_dtoa_r+0x6a2>
 8010e76:	9a06      	ldr	r2, [sp, #24]
 8010e78:	2a00      	cmp	r2, #0
 8010e7a:	dd0a      	ble.n	8010e92 <_dtoa_r+0x6a2>
 8010e7c:	4542      	cmp	r2, r8
 8010e7e:	9905      	ldr	r1, [sp, #20]
 8010e80:	bfa8      	it	ge
 8010e82:	4642      	movge	r2, r8
 8010e84:	1a89      	subs	r1, r1, r2
 8010e86:	9105      	str	r1, [sp, #20]
 8010e88:	9906      	ldr	r1, [sp, #24]
 8010e8a:	eba8 0802 	sub.w	r8, r8, r2
 8010e8e:	1a8a      	subs	r2, r1, r2
 8010e90:	9206      	str	r2, [sp, #24]
 8010e92:	b303      	cbz	r3, 8010ed6 <_dtoa_r+0x6e6>
 8010e94:	9a08      	ldr	r2, [sp, #32]
 8010e96:	2a00      	cmp	r2, #0
 8010e98:	f000 80a6 	beq.w	8010fe8 <_dtoa_r+0x7f8>
 8010e9c:	2c00      	cmp	r4, #0
 8010e9e:	dd13      	ble.n	8010ec8 <_dtoa_r+0x6d8>
 8010ea0:	4639      	mov	r1, r7
 8010ea2:	4622      	mov	r2, r4
 8010ea4:	4630      	mov	r0, r6
 8010ea6:	930c      	str	r3, [sp, #48]	; 0x30
 8010ea8:	f000 fe16 	bl	8011ad8 <__pow5mult>
 8010eac:	462a      	mov	r2, r5
 8010eae:	4601      	mov	r1, r0
 8010eb0:	4607      	mov	r7, r0
 8010eb2:	4630      	mov	r0, r6
 8010eb4:	f000 fd6a 	bl	801198c <__multiply>
 8010eb8:	4629      	mov	r1, r5
 8010eba:	900a      	str	r0, [sp, #40]	; 0x28
 8010ebc:	4630      	mov	r0, r6
 8010ebe:	f000 fc93 	bl	80117e8 <_Bfree>
 8010ec2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ec4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010ec6:	4615      	mov	r5, r2
 8010ec8:	1b1a      	subs	r2, r3, r4
 8010eca:	d004      	beq.n	8010ed6 <_dtoa_r+0x6e6>
 8010ecc:	4629      	mov	r1, r5
 8010ece:	4630      	mov	r0, r6
 8010ed0:	f000 fe02 	bl	8011ad8 <__pow5mult>
 8010ed4:	4605      	mov	r5, r0
 8010ed6:	2101      	movs	r1, #1
 8010ed8:	4630      	mov	r0, r6
 8010eda:	f000 fd41 	bl	8011960 <__i2b>
 8010ede:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	4604      	mov	r4, r0
 8010ee4:	f340 8082 	ble.w	8010fec <_dtoa_r+0x7fc>
 8010ee8:	461a      	mov	r2, r3
 8010eea:	4601      	mov	r1, r0
 8010eec:	4630      	mov	r0, r6
 8010eee:	f000 fdf3 	bl	8011ad8 <__pow5mult>
 8010ef2:	9b07      	ldr	r3, [sp, #28]
 8010ef4:	2b01      	cmp	r3, #1
 8010ef6:	4604      	mov	r4, r0
 8010ef8:	dd7b      	ble.n	8010ff2 <_dtoa_r+0x802>
 8010efa:	2300      	movs	r3, #0
 8010efc:	930a      	str	r3, [sp, #40]	; 0x28
 8010efe:	6922      	ldr	r2, [r4, #16]
 8010f00:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010f04:	6910      	ldr	r0, [r2, #16]
 8010f06:	f000 fcdb 	bl	80118c0 <__hi0bits>
 8010f0a:	f1c0 0020 	rsb	r0, r0, #32
 8010f0e:	9b06      	ldr	r3, [sp, #24]
 8010f10:	4418      	add	r0, r3
 8010f12:	f010 001f 	ands.w	r0, r0, #31
 8010f16:	f000 808d 	beq.w	8011034 <_dtoa_r+0x844>
 8010f1a:	f1c0 0220 	rsb	r2, r0, #32
 8010f1e:	2a04      	cmp	r2, #4
 8010f20:	f340 8086 	ble.w	8011030 <_dtoa_r+0x840>
 8010f24:	f1c0 001c 	rsb	r0, r0, #28
 8010f28:	9b05      	ldr	r3, [sp, #20]
 8010f2a:	4403      	add	r3, r0
 8010f2c:	9305      	str	r3, [sp, #20]
 8010f2e:	9b06      	ldr	r3, [sp, #24]
 8010f30:	4403      	add	r3, r0
 8010f32:	4480      	add	r8, r0
 8010f34:	9306      	str	r3, [sp, #24]
 8010f36:	9b05      	ldr	r3, [sp, #20]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	dd05      	ble.n	8010f48 <_dtoa_r+0x758>
 8010f3c:	4629      	mov	r1, r5
 8010f3e:	461a      	mov	r2, r3
 8010f40:	4630      	mov	r0, r6
 8010f42:	f000 fe23 	bl	8011b8c <__lshift>
 8010f46:	4605      	mov	r5, r0
 8010f48:	9b06      	ldr	r3, [sp, #24]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	dd05      	ble.n	8010f5a <_dtoa_r+0x76a>
 8010f4e:	4621      	mov	r1, r4
 8010f50:	461a      	mov	r2, r3
 8010f52:	4630      	mov	r0, r6
 8010f54:	f000 fe1a 	bl	8011b8c <__lshift>
 8010f58:	4604      	mov	r4, r0
 8010f5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d06b      	beq.n	8011038 <_dtoa_r+0x848>
 8010f60:	4621      	mov	r1, r4
 8010f62:	4628      	mov	r0, r5
 8010f64:	f000 fe7e 	bl	8011c64 <__mcmp>
 8010f68:	2800      	cmp	r0, #0
 8010f6a:	da65      	bge.n	8011038 <_dtoa_r+0x848>
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	4629      	mov	r1, r5
 8010f70:	220a      	movs	r2, #10
 8010f72:	4630      	mov	r0, r6
 8010f74:	f000 fc5a 	bl	801182c <__multadd>
 8010f78:	9b08      	ldr	r3, [sp, #32]
 8010f7a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010f7e:	4605      	mov	r5, r0
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	f000 8192 	beq.w	80112aa <_dtoa_r+0xaba>
 8010f86:	4639      	mov	r1, r7
 8010f88:	2300      	movs	r3, #0
 8010f8a:	220a      	movs	r2, #10
 8010f8c:	4630      	mov	r0, r6
 8010f8e:	f000 fc4d 	bl	801182c <__multadd>
 8010f92:	f1ba 0f00 	cmp.w	sl, #0
 8010f96:	4607      	mov	r7, r0
 8010f98:	f300 808e 	bgt.w	80110b8 <_dtoa_r+0x8c8>
 8010f9c:	9b07      	ldr	r3, [sp, #28]
 8010f9e:	2b02      	cmp	r3, #2
 8010fa0:	dc51      	bgt.n	8011046 <_dtoa_r+0x856>
 8010fa2:	e089      	b.n	80110b8 <_dtoa_r+0x8c8>
 8010fa4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010fa6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010faa:	e751      	b.n	8010e50 <_dtoa_r+0x660>
 8010fac:	f109 34ff 	add.w	r4, r9, #4294967295
 8010fb0:	42a3      	cmp	r3, r4
 8010fb2:	bfbf      	itttt	lt
 8010fb4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8010fb6:	1ae3      	sublt	r3, r4, r3
 8010fb8:	18d2      	addlt	r2, r2, r3
 8010fba:	4613      	movlt	r3, r2
 8010fbc:	bfb7      	itett	lt
 8010fbe:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010fc0:	1b1c      	subge	r4, r3, r4
 8010fc2:	4623      	movlt	r3, r4
 8010fc4:	2400      	movlt	r4, #0
 8010fc6:	f1b9 0f00 	cmp.w	r9, #0
 8010fca:	bfb5      	itete	lt
 8010fcc:	9a05      	ldrlt	r2, [sp, #20]
 8010fce:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8010fd2:	eba2 0809 	sublt.w	r8, r2, r9
 8010fd6:	464a      	movge	r2, r9
 8010fd8:	bfb8      	it	lt
 8010fda:	2200      	movlt	r2, #0
 8010fdc:	e73b      	b.n	8010e56 <_dtoa_r+0x666>
 8010fde:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010fe2:	9f08      	ldr	r7, [sp, #32]
 8010fe4:	461c      	mov	r4, r3
 8010fe6:	e743      	b.n	8010e70 <_dtoa_r+0x680>
 8010fe8:	461a      	mov	r2, r3
 8010fea:	e76f      	b.n	8010ecc <_dtoa_r+0x6dc>
 8010fec:	9b07      	ldr	r3, [sp, #28]
 8010fee:	2b01      	cmp	r3, #1
 8010ff0:	dc18      	bgt.n	8011024 <_dtoa_r+0x834>
 8010ff2:	9b02      	ldr	r3, [sp, #8]
 8010ff4:	b9b3      	cbnz	r3, 8011024 <_dtoa_r+0x834>
 8010ff6:	9b03      	ldr	r3, [sp, #12]
 8010ff8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8010ffc:	b9a2      	cbnz	r2, 8011028 <_dtoa_r+0x838>
 8010ffe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011002:	0d12      	lsrs	r2, r2, #20
 8011004:	0512      	lsls	r2, r2, #20
 8011006:	b18a      	cbz	r2, 801102c <_dtoa_r+0x83c>
 8011008:	9b05      	ldr	r3, [sp, #20]
 801100a:	3301      	adds	r3, #1
 801100c:	9305      	str	r3, [sp, #20]
 801100e:	9b06      	ldr	r3, [sp, #24]
 8011010:	3301      	adds	r3, #1
 8011012:	9306      	str	r3, [sp, #24]
 8011014:	2301      	movs	r3, #1
 8011016:	930a      	str	r3, [sp, #40]	; 0x28
 8011018:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801101a:	2b00      	cmp	r3, #0
 801101c:	f47f af6f 	bne.w	8010efe <_dtoa_r+0x70e>
 8011020:	2001      	movs	r0, #1
 8011022:	e774      	b.n	8010f0e <_dtoa_r+0x71e>
 8011024:	2300      	movs	r3, #0
 8011026:	e7f6      	b.n	8011016 <_dtoa_r+0x826>
 8011028:	9b02      	ldr	r3, [sp, #8]
 801102a:	e7f4      	b.n	8011016 <_dtoa_r+0x826>
 801102c:	920a      	str	r2, [sp, #40]	; 0x28
 801102e:	e7f3      	b.n	8011018 <_dtoa_r+0x828>
 8011030:	d081      	beq.n	8010f36 <_dtoa_r+0x746>
 8011032:	4610      	mov	r0, r2
 8011034:	301c      	adds	r0, #28
 8011036:	e777      	b.n	8010f28 <_dtoa_r+0x738>
 8011038:	f1b9 0f00 	cmp.w	r9, #0
 801103c:	dc37      	bgt.n	80110ae <_dtoa_r+0x8be>
 801103e:	9b07      	ldr	r3, [sp, #28]
 8011040:	2b02      	cmp	r3, #2
 8011042:	dd34      	ble.n	80110ae <_dtoa_r+0x8be>
 8011044:	46ca      	mov	sl, r9
 8011046:	f1ba 0f00 	cmp.w	sl, #0
 801104a:	d10d      	bne.n	8011068 <_dtoa_r+0x878>
 801104c:	4621      	mov	r1, r4
 801104e:	4653      	mov	r3, sl
 8011050:	2205      	movs	r2, #5
 8011052:	4630      	mov	r0, r6
 8011054:	f000 fbea 	bl	801182c <__multadd>
 8011058:	4601      	mov	r1, r0
 801105a:	4604      	mov	r4, r0
 801105c:	4628      	mov	r0, r5
 801105e:	f000 fe01 	bl	8011c64 <__mcmp>
 8011062:	2800      	cmp	r0, #0
 8011064:	f73f adde 	bgt.w	8010c24 <_dtoa_r+0x434>
 8011068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801106a:	f8dd 8000 	ldr.w	r8, [sp]
 801106e:	ea6f 0b03 	mvn.w	fp, r3
 8011072:	f04f 0900 	mov.w	r9, #0
 8011076:	4621      	mov	r1, r4
 8011078:	4630      	mov	r0, r6
 801107a:	f000 fbb5 	bl	80117e8 <_Bfree>
 801107e:	2f00      	cmp	r7, #0
 8011080:	f43f aea7 	beq.w	8010dd2 <_dtoa_r+0x5e2>
 8011084:	f1b9 0f00 	cmp.w	r9, #0
 8011088:	d005      	beq.n	8011096 <_dtoa_r+0x8a6>
 801108a:	45b9      	cmp	r9, r7
 801108c:	d003      	beq.n	8011096 <_dtoa_r+0x8a6>
 801108e:	4649      	mov	r1, r9
 8011090:	4630      	mov	r0, r6
 8011092:	f000 fba9 	bl	80117e8 <_Bfree>
 8011096:	4639      	mov	r1, r7
 8011098:	4630      	mov	r0, r6
 801109a:	f000 fba5 	bl	80117e8 <_Bfree>
 801109e:	e698      	b.n	8010dd2 <_dtoa_r+0x5e2>
 80110a0:	2400      	movs	r4, #0
 80110a2:	4627      	mov	r7, r4
 80110a4:	e7e0      	b.n	8011068 <_dtoa_r+0x878>
 80110a6:	46bb      	mov	fp, r7
 80110a8:	4604      	mov	r4, r0
 80110aa:	4607      	mov	r7, r0
 80110ac:	e5ba      	b.n	8010c24 <_dtoa_r+0x434>
 80110ae:	9b08      	ldr	r3, [sp, #32]
 80110b0:	46ca      	mov	sl, r9
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	f000 8100 	beq.w	80112b8 <_dtoa_r+0xac8>
 80110b8:	f1b8 0f00 	cmp.w	r8, #0
 80110bc:	dd05      	ble.n	80110ca <_dtoa_r+0x8da>
 80110be:	4639      	mov	r1, r7
 80110c0:	4642      	mov	r2, r8
 80110c2:	4630      	mov	r0, r6
 80110c4:	f000 fd62 	bl	8011b8c <__lshift>
 80110c8:	4607      	mov	r7, r0
 80110ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d05d      	beq.n	801118c <_dtoa_r+0x99c>
 80110d0:	6879      	ldr	r1, [r7, #4]
 80110d2:	4630      	mov	r0, r6
 80110d4:	f000 fb48 	bl	8011768 <_Balloc>
 80110d8:	4680      	mov	r8, r0
 80110da:	b928      	cbnz	r0, 80110e8 <_dtoa_r+0x8f8>
 80110dc:	4b82      	ldr	r3, [pc, #520]	; (80112e8 <_dtoa_r+0xaf8>)
 80110de:	4602      	mov	r2, r0
 80110e0:	f240 21ea 	movw	r1, #746	; 0x2ea
 80110e4:	f7ff bb9a 	b.w	801081c <_dtoa_r+0x2c>
 80110e8:	693a      	ldr	r2, [r7, #16]
 80110ea:	3202      	adds	r2, #2
 80110ec:	0092      	lsls	r2, r2, #2
 80110ee:	f107 010c 	add.w	r1, r7, #12
 80110f2:	300c      	adds	r0, #12
 80110f4:	f000 fb2a 	bl	801174c <memcpy>
 80110f8:	2201      	movs	r2, #1
 80110fa:	4641      	mov	r1, r8
 80110fc:	4630      	mov	r0, r6
 80110fe:	f000 fd45 	bl	8011b8c <__lshift>
 8011102:	9b00      	ldr	r3, [sp, #0]
 8011104:	3301      	adds	r3, #1
 8011106:	9305      	str	r3, [sp, #20]
 8011108:	9b00      	ldr	r3, [sp, #0]
 801110a:	4453      	add	r3, sl
 801110c:	9309      	str	r3, [sp, #36]	; 0x24
 801110e:	9b02      	ldr	r3, [sp, #8]
 8011110:	f003 0301 	and.w	r3, r3, #1
 8011114:	46b9      	mov	r9, r7
 8011116:	9308      	str	r3, [sp, #32]
 8011118:	4607      	mov	r7, r0
 801111a:	9b05      	ldr	r3, [sp, #20]
 801111c:	4621      	mov	r1, r4
 801111e:	3b01      	subs	r3, #1
 8011120:	4628      	mov	r0, r5
 8011122:	9302      	str	r3, [sp, #8]
 8011124:	f7ff fad8 	bl	80106d8 <quorem>
 8011128:	4603      	mov	r3, r0
 801112a:	3330      	adds	r3, #48	; 0x30
 801112c:	9006      	str	r0, [sp, #24]
 801112e:	4649      	mov	r1, r9
 8011130:	4628      	mov	r0, r5
 8011132:	930a      	str	r3, [sp, #40]	; 0x28
 8011134:	f000 fd96 	bl	8011c64 <__mcmp>
 8011138:	463a      	mov	r2, r7
 801113a:	4682      	mov	sl, r0
 801113c:	4621      	mov	r1, r4
 801113e:	4630      	mov	r0, r6
 8011140:	f000 fdac 	bl	8011c9c <__mdiff>
 8011144:	68c2      	ldr	r2, [r0, #12]
 8011146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011148:	4680      	mov	r8, r0
 801114a:	bb0a      	cbnz	r2, 8011190 <_dtoa_r+0x9a0>
 801114c:	4601      	mov	r1, r0
 801114e:	4628      	mov	r0, r5
 8011150:	f000 fd88 	bl	8011c64 <__mcmp>
 8011154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011156:	4602      	mov	r2, r0
 8011158:	4641      	mov	r1, r8
 801115a:	4630      	mov	r0, r6
 801115c:	920e      	str	r2, [sp, #56]	; 0x38
 801115e:	930a      	str	r3, [sp, #40]	; 0x28
 8011160:	f000 fb42 	bl	80117e8 <_Bfree>
 8011164:	9b07      	ldr	r3, [sp, #28]
 8011166:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011168:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801116c:	ea43 0102 	orr.w	r1, r3, r2
 8011170:	9b08      	ldr	r3, [sp, #32]
 8011172:	430b      	orrs	r3, r1
 8011174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011176:	d10d      	bne.n	8011194 <_dtoa_r+0x9a4>
 8011178:	2b39      	cmp	r3, #57	; 0x39
 801117a:	d029      	beq.n	80111d0 <_dtoa_r+0x9e0>
 801117c:	f1ba 0f00 	cmp.w	sl, #0
 8011180:	dd01      	ble.n	8011186 <_dtoa_r+0x996>
 8011182:	9b06      	ldr	r3, [sp, #24]
 8011184:	3331      	adds	r3, #49	; 0x31
 8011186:	9a02      	ldr	r2, [sp, #8]
 8011188:	7013      	strb	r3, [r2, #0]
 801118a:	e774      	b.n	8011076 <_dtoa_r+0x886>
 801118c:	4638      	mov	r0, r7
 801118e:	e7b8      	b.n	8011102 <_dtoa_r+0x912>
 8011190:	2201      	movs	r2, #1
 8011192:	e7e1      	b.n	8011158 <_dtoa_r+0x968>
 8011194:	f1ba 0f00 	cmp.w	sl, #0
 8011198:	db06      	blt.n	80111a8 <_dtoa_r+0x9b8>
 801119a:	9907      	ldr	r1, [sp, #28]
 801119c:	ea41 0a0a 	orr.w	sl, r1, sl
 80111a0:	9908      	ldr	r1, [sp, #32]
 80111a2:	ea5a 0101 	orrs.w	r1, sl, r1
 80111a6:	d120      	bne.n	80111ea <_dtoa_r+0x9fa>
 80111a8:	2a00      	cmp	r2, #0
 80111aa:	ddec      	ble.n	8011186 <_dtoa_r+0x996>
 80111ac:	4629      	mov	r1, r5
 80111ae:	2201      	movs	r2, #1
 80111b0:	4630      	mov	r0, r6
 80111b2:	9305      	str	r3, [sp, #20]
 80111b4:	f000 fcea 	bl	8011b8c <__lshift>
 80111b8:	4621      	mov	r1, r4
 80111ba:	4605      	mov	r5, r0
 80111bc:	f000 fd52 	bl	8011c64 <__mcmp>
 80111c0:	2800      	cmp	r0, #0
 80111c2:	9b05      	ldr	r3, [sp, #20]
 80111c4:	dc02      	bgt.n	80111cc <_dtoa_r+0x9dc>
 80111c6:	d1de      	bne.n	8011186 <_dtoa_r+0x996>
 80111c8:	07da      	lsls	r2, r3, #31
 80111ca:	d5dc      	bpl.n	8011186 <_dtoa_r+0x996>
 80111cc:	2b39      	cmp	r3, #57	; 0x39
 80111ce:	d1d8      	bne.n	8011182 <_dtoa_r+0x992>
 80111d0:	9a02      	ldr	r2, [sp, #8]
 80111d2:	2339      	movs	r3, #57	; 0x39
 80111d4:	7013      	strb	r3, [r2, #0]
 80111d6:	4643      	mov	r3, r8
 80111d8:	4698      	mov	r8, r3
 80111da:	3b01      	subs	r3, #1
 80111dc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80111e0:	2a39      	cmp	r2, #57	; 0x39
 80111e2:	d051      	beq.n	8011288 <_dtoa_r+0xa98>
 80111e4:	3201      	adds	r2, #1
 80111e6:	701a      	strb	r2, [r3, #0]
 80111e8:	e745      	b.n	8011076 <_dtoa_r+0x886>
 80111ea:	2a00      	cmp	r2, #0
 80111ec:	dd03      	ble.n	80111f6 <_dtoa_r+0xa06>
 80111ee:	2b39      	cmp	r3, #57	; 0x39
 80111f0:	d0ee      	beq.n	80111d0 <_dtoa_r+0x9e0>
 80111f2:	3301      	adds	r3, #1
 80111f4:	e7c7      	b.n	8011186 <_dtoa_r+0x996>
 80111f6:	9a05      	ldr	r2, [sp, #20]
 80111f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80111fa:	f802 3c01 	strb.w	r3, [r2, #-1]
 80111fe:	428a      	cmp	r2, r1
 8011200:	d02b      	beq.n	801125a <_dtoa_r+0xa6a>
 8011202:	4629      	mov	r1, r5
 8011204:	2300      	movs	r3, #0
 8011206:	220a      	movs	r2, #10
 8011208:	4630      	mov	r0, r6
 801120a:	f000 fb0f 	bl	801182c <__multadd>
 801120e:	45b9      	cmp	r9, r7
 8011210:	4605      	mov	r5, r0
 8011212:	f04f 0300 	mov.w	r3, #0
 8011216:	f04f 020a 	mov.w	r2, #10
 801121a:	4649      	mov	r1, r9
 801121c:	4630      	mov	r0, r6
 801121e:	d107      	bne.n	8011230 <_dtoa_r+0xa40>
 8011220:	f000 fb04 	bl	801182c <__multadd>
 8011224:	4681      	mov	r9, r0
 8011226:	4607      	mov	r7, r0
 8011228:	9b05      	ldr	r3, [sp, #20]
 801122a:	3301      	adds	r3, #1
 801122c:	9305      	str	r3, [sp, #20]
 801122e:	e774      	b.n	801111a <_dtoa_r+0x92a>
 8011230:	f000 fafc 	bl	801182c <__multadd>
 8011234:	4639      	mov	r1, r7
 8011236:	4681      	mov	r9, r0
 8011238:	2300      	movs	r3, #0
 801123a:	220a      	movs	r2, #10
 801123c:	4630      	mov	r0, r6
 801123e:	f000 faf5 	bl	801182c <__multadd>
 8011242:	4607      	mov	r7, r0
 8011244:	e7f0      	b.n	8011228 <_dtoa_r+0xa38>
 8011246:	f1ba 0f00 	cmp.w	sl, #0
 801124a:	9a00      	ldr	r2, [sp, #0]
 801124c:	bfcc      	ite	gt
 801124e:	46d0      	movgt	r8, sl
 8011250:	f04f 0801 	movle.w	r8, #1
 8011254:	4490      	add	r8, r2
 8011256:	f04f 0900 	mov.w	r9, #0
 801125a:	4629      	mov	r1, r5
 801125c:	2201      	movs	r2, #1
 801125e:	4630      	mov	r0, r6
 8011260:	9302      	str	r3, [sp, #8]
 8011262:	f000 fc93 	bl	8011b8c <__lshift>
 8011266:	4621      	mov	r1, r4
 8011268:	4605      	mov	r5, r0
 801126a:	f000 fcfb 	bl	8011c64 <__mcmp>
 801126e:	2800      	cmp	r0, #0
 8011270:	dcb1      	bgt.n	80111d6 <_dtoa_r+0x9e6>
 8011272:	d102      	bne.n	801127a <_dtoa_r+0xa8a>
 8011274:	9b02      	ldr	r3, [sp, #8]
 8011276:	07db      	lsls	r3, r3, #31
 8011278:	d4ad      	bmi.n	80111d6 <_dtoa_r+0x9e6>
 801127a:	4643      	mov	r3, r8
 801127c:	4698      	mov	r8, r3
 801127e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011282:	2a30      	cmp	r2, #48	; 0x30
 8011284:	d0fa      	beq.n	801127c <_dtoa_r+0xa8c>
 8011286:	e6f6      	b.n	8011076 <_dtoa_r+0x886>
 8011288:	9a00      	ldr	r2, [sp, #0]
 801128a:	429a      	cmp	r2, r3
 801128c:	d1a4      	bne.n	80111d8 <_dtoa_r+0x9e8>
 801128e:	f10b 0b01 	add.w	fp, fp, #1
 8011292:	2331      	movs	r3, #49	; 0x31
 8011294:	e778      	b.n	8011188 <_dtoa_r+0x998>
 8011296:	4b15      	ldr	r3, [pc, #84]	; (80112ec <_dtoa_r+0xafc>)
 8011298:	f7ff bb12 	b.w	80108c0 <_dtoa_r+0xd0>
 801129c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801129e:	2b00      	cmp	r3, #0
 80112a0:	f47f aaee 	bne.w	8010880 <_dtoa_r+0x90>
 80112a4:	4b12      	ldr	r3, [pc, #72]	; (80112f0 <_dtoa_r+0xb00>)
 80112a6:	f7ff bb0b 	b.w	80108c0 <_dtoa_r+0xd0>
 80112aa:	f1ba 0f00 	cmp.w	sl, #0
 80112ae:	dc03      	bgt.n	80112b8 <_dtoa_r+0xac8>
 80112b0:	9b07      	ldr	r3, [sp, #28]
 80112b2:	2b02      	cmp	r3, #2
 80112b4:	f73f aec7 	bgt.w	8011046 <_dtoa_r+0x856>
 80112b8:	f8dd 8000 	ldr.w	r8, [sp]
 80112bc:	4621      	mov	r1, r4
 80112be:	4628      	mov	r0, r5
 80112c0:	f7ff fa0a 	bl	80106d8 <quorem>
 80112c4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80112c8:	f808 3b01 	strb.w	r3, [r8], #1
 80112cc:	9a00      	ldr	r2, [sp, #0]
 80112ce:	eba8 0202 	sub.w	r2, r8, r2
 80112d2:	4592      	cmp	sl, r2
 80112d4:	ddb7      	ble.n	8011246 <_dtoa_r+0xa56>
 80112d6:	4629      	mov	r1, r5
 80112d8:	2300      	movs	r3, #0
 80112da:	220a      	movs	r2, #10
 80112dc:	4630      	mov	r0, r6
 80112de:	f000 faa5 	bl	801182c <__multadd>
 80112e2:	4605      	mov	r5, r0
 80112e4:	e7ea      	b.n	80112bc <_dtoa_r+0xacc>
 80112e6:	bf00      	nop
 80112e8:	08012ff3 	.word	0x08012ff3
 80112ec:	08012f4c 	.word	0x08012f4c
 80112f0:	08012f70 	.word	0x08012f70

080112f4 <__sflush_r>:
 80112f4:	898a      	ldrh	r2, [r1, #12]
 80112f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112fa:	4605      	mov	r5, r0
 80112fc:	0710      	lsls	r0, r2, #28
 80112fe:	460c      	mov	r4, r1
 8011300:	d458      	bmi.n	80113b4 <__sflush_r+0xc0>
 8011302:	684b      	ldr	r3, [r1, #4]
 8011304:	2b00      	cmp	r3, #0
 8011306:	dc05      	bgt.n	8011314 <__sflush_r+0x20>
 8011308:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801130a:	2b00      	cmp	r3, #0
 801130c:	dc02      	bgt.n	8011314 <__sflush_r+0x20>
 801130e:	2000      	movs	r0, #0
 8011310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011314:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011316:	2e00      	cmp	r6, #0
 8011318:	d0f9      	beq.n	801130e <__sflush_r+0x1a>
 801131a:	2300      	movs	r3, #0
 801131c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011320:	682f      	ldr	r7, [r5, #0]
 8011322:	602b      	str	r3, [r5, #0]
 8011324:	d032      	beq.n	801138c <__sflush_r+0x98>
 8011326:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011328:	89a3      	ldrh	r3, [r4, #12]
 801132a:	075a      	lsls	r2, r3, #29
 801132c:	d505      	bpl.n	801133a <__sflush_r+0x46>
 801132e:	6863      	ldr	r3, [r4, #4]
 8011330:	1ac0      	subs	r0, r0, r3
 8011332:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011334:	b10b      	cbz	r3, 801133a <__sflush_r+0x46>
 8011336:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011338:	1ac0      	subs	r0, r0, r3
 801133a:	2300      	movs	r3, #0
 801133c:	4602      	mov	r2, r0
 801133e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011340:	6a21      	ldr	r1, [r4, #32]
 8011342:	4628      	mov	r0, r5
 8011344:	47b0      	blx	r6
 8011346:	1c43      	adds	r3, r0, #1
 8011348:	89a3      	ldrh	r3, [r4, #12]
 801134a:	d106      	bne.n	801135a <__sflush_r+0x66>
 801134c:	6829      	ldr	r1, [r5, #0]
 801134e:	291d      	cmp	r1, #29
 8011350:	d82c      	bhi.n	80113ac <__sflush_r+0xb8>
 8011352:	4a2a      	ldr	r2, [pc, #168]	; (80113fc <__sflush_r+0x108>)
 8011354:	40ca      	lsrs	r2, r1
 8011356:	07d6      	lsls	r6, r2, #31
 8011358:	d528      	bpl.n	80113ac <__sflush_r+0xb8>
 801135a:	2200      	movs	r2, #0
 801135c:	6062      	str	r2, [r4, #4]
 801135e:	04d9      	lsls	r1, r3, #19
 8011360:	6922      	ldr	r2, [r4, #16]
 8011362:	6022      	str	r2, [r4, #0]
 8011364:	d504      	bpl.n	8011370 <__sflush_r+0x7c>
 8011366:	1c42      	adds	r2, r0, #1
 8011368:	d101      	bne.n	801136e <__sflush_r+0x7a>
 801136a:	682b      	ldr	r3, [r5, #0]
 801136c:	b903      	cbnz	r3, 8011370 <__sflush_r+0x7c>
 801136e:	6560      	str	r0, [r4, #84]	; 0x54
 8011370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011372:	602f      	str	r7, [r5, #0]
 8011374:	2900      	cmp	r1, #0
 8011376:	d0ca      	beq.n	801130e <__sflush_r+0x1a>
 8011378:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801137c:	4299      	cmp	r1, r3
 801137e:	d002      	beq.n	8011386 <__sflush_r+0x92>
 8011380:	4628      	mov	r0, r5
 8011382:	f000 fd7f 	bl	8011e84 <_free_r>
 8011386:	2000      	movs	r0, #0
 8011388:	6360      	str	r0, [r4, #52]	; 0x34
 801138a:	e7c1      	b.n	8011310 <__sflush_r+0x1c>
 801138c:	6a21      	ldr	r1, [r4, #32]
 801138e:	2301      	movs	r3, #1
 8011390:	4628      	mov	r0, r5
 8011392:	47b0      	blx	r6
 8011394:	1c41      	adds	r1, r0, #1
 8011396:	d1c7      	bne.n	8011328 <__sflush_r+0x34>
 8011398:	682b      	ldr	r3, [r5, #0]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d0c4      	beq.n	8011328 <__sflush_r+0x34>
 801139e:	2b1d      	cmp	r3, #29
 80113a0:	d001      	beq.n	80113a6 <__sflush_r+0xb2>
 80113a2:	2b16      	cmp	r3, #22
 80113a4:	d101      	bne.n	80113aa <__sflush_r+0xb6>
 80113a6:	602f      	str	r7, [r5, #0]
 80113a8:	e7b1      	b.n	801130e <__sflush_r+0x1a>
 80113aa:	89a3      	ldrh	r3, [r4, #12]
 80113ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113b0:	81a3      	strh	r3, [r4, #12]
 80113b2:	e7ad      	b.n	8011310 <__sflush_r+0x1c>
 80113b4:	690f      	ldr	r7, [r1, #16]
 80113b6:	2f00      	cmp	r7, #0
 80113b8:	d0a9      	beq.n	801130e <__sflush_r+0x1a>
 80113ba:	0793      	lsls	r3, r2, #30
 80113bc:	680e      	ldr	r6, [r1, #0]
 80113be:	bf08      	it	eq
 80113c0:	694b      	ldreq	r3, [r1, #20]
 80113c2:	600f      	str	r7, [r1, #0]
 80113c4:	bf18      	it	ne
 80113c6:	2300      	movne	r3, #0
 80113c8:	eba6 0807 	sub.w	r8, r6, r7
 80113cc:	608b      	str	r3, [r1, #8]
 80113ce:	f1b8 0f00 	cmp.w	r8, #0
 80113d2:	dd9c      	ble.n	801130e <__sflush_r+0x1a>
 80113d4:	6a21      	ldr	r1, [r4, #32]
 80113d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80113d8:	4643      	mov	r3, r8
 80113da:	463a      	mov	r2, r7
 80113dc:	4628      	mov	r0, r5
 80113de:	47b0      	blx	r6
 80113e0:	2800      	cmp	r0, #0
 80113e2:	dc06      	bgt.n	80113f2 <__sflush_r+0xfe>
 80113e4:	89a3      	ldrh	r3, [r4, #12]
 80113e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113ea:	81a3      	strh	r3, [r4, #12]
 80113ec:	f04f 30ff 	mov.w	r0, #4294967295
 80113f0:	e78e      	b.n	8011310 <__sflush_r+0x1c>
 80113f2:	4407      	add	r7, r0
 80113f4:	eba8 0800 	sub.w	r8, r8, r0
 80113f8:	e7e9      	b.n	80113ce <__sflush_r+0xda>
 80113fa:	bf00      	nop
 80113fc:	20400001 	.word	0x20400001

08011400 <_fflush_r>:
 8011400:	b538      	push	{r3, r4, r5, lr}
 8011402:	690b      	ldr	r3, [r1, #16]
 8011404:	4605      	mov	r5, r0
 8011406:	460c      	mov	r4, r1
 8011408:	b913      	cbnz	r3, 8011410 <_fflush_r+0x10>
 801140a:	2500      	movs	r5, #0
 801140c:	4628      	mov	r0, r5
 801140e:	bd38      	pop	{r3, r4, r5, pc}
 8011410:	b118      	cbz	r0, 801141a <_fflush_r+0x1a>
 8011412:	6983      	ldr	r3, [r0, #24]
 8011414:	b90b      	cbnz	r3, 801141a <_fflush_r+0x1a>
 8011416:	f000 f887 	bl	8011528 <__sinit>
 801141a:	4b14      	ldr	r3, [pc, #80]	; (801146c <_fflush_r+0x6c>)
 801141c:	429c      	cmp	r4, r3
 801141e:	d11b      	bne.n	8011458 <_fflush_r+0x58>
 8011420:	686c      	ldr	r4, [r5, #4]
 8011422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d0ef      	beq.n	801140a <_fflush_r+0xa>
 801142a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801142c:	07d0      	lsls	r0, r2, #31
 801142e:	d404      	bmi.n	801143a <_fflush_r+0x3a>
 8011430:	0599      	lsls	r1, r3, #22
 8011432:	d402      	bmi.n	801143a <_fflush_r+0x3a>
 8011434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011436:	f000 f91a 	bl	801166e <__retarget_lock_acquire_recursive>
 801143a:	4628      	mov	r0, r5
 801143c:	4621      	mov	r1, r4
 801143e:	f7ff ff59 	bl	80112f4 <__sflush_r>
 8011442:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011444:	07da      	lsls	r2, r3, #31
 8011446:	4605      	mov	r5, r0
 8011448:	d4e0      	bmi.n	801140c <_fflush_r+0xc>
 801144a:	89a3      	ldrh	r3, [r4, #12]
 801144c:	059b      	lsls	r3, r3, #22
 801144e:	d4dd      	bmi.n	801140c <_fflush_r+0xc>
 8011450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011452:	f000 f90d 	bl	8011670 <__retarget_lock_release_recursive>
 8011456:	e7d9      	b.n	801140c <_fflush_r+0xc>
 8011458:	4b05      	ldr	r3, [pc, #20]	; (8011470 <_fflush_r+0x70>)
 801145a:	429c      	cmp	r4, r3
 801145c:	d101      	bne.n	8011462 <_fflush_r+0x62>
 801145e:	68ac      	ldr	r4, [r5, #8]
 8011460:	e7df      	b.n	8011422 <_fflush_r+0x22>
 8011462:	4b04      	ldr	r3, [pc, #16]	; (8011474 <_fflush_r+0x74>)
 8011464:	429c      	cmp	r4, r3
 8011466:	bf08      	it	eq
 8011468:	68ec      	ldreq	r4, [r5, #12]
 801146a:	e7da      	b.n	8011422 <_fflush_r+0x22>
 801146c:	08013024 	.word	0x08013024
 8011470:	08013044 	.word	0x08013044
 8011474:	08013004 	.word	0x08013004

08011478 <std>:
 8011478:	2300      	movs	r3, #0
 801147a:	b510      	push	{r4, lr}
 801147c:	4604      	mov	r4, r0
 801147e:	e9c0 3300 	strd	r3, r3, [r0]
 8011482:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011486:	6083      	str	r3, [r0, #8]
 8011488:	8181      	strh	r1, [r0, #12]
 801148a:	6643      	str	r3, [r0, #100]	; 0x64
 801148c:	81c2      	strh	r2, [r0, #14]
 801148e:	6183      	str	r3, [r0, #24]
 8011490:	4619      	mov	r1, r3
 8011492:	2208      	movs	r2, #8
 8011494:	305c      	adds	r0, #92	; 0x5c
 8011496:	f7fe fb87 	bl	800fba8 <memset>
 801149a:	4b05      	ldr	r3, [pc, #20]	; (80114b0 <std+0x38>)
 801149c:	6263      	str	r3, [r4, #36]	; 0x24
 801149e:	4b05      	ldr	r3, [pc, #20]	; (80114b4 <std+0x3c>)
 80114a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80114a2:	4b05      	ldr	r3, [pc, #20]	; (80114b8 <std+0x40>)
 80114a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80114a6:	4b05      	ldr	r3, [pc, #20]	; (80114bc <std+0x44>)
 80114a8:	6224      	str	r4, [r4, #32]
 80114aa:	6323      	str	r3, [r4, #48]	; 0x30
 80114ac:	bd10      	pop	{r4, pc}
 80114ae:	bf00      	nop
 80114b0:	080122ad 	.word	0x080122ad
 80114b4:	080122cf 	.word	0x080122cf
 80114b8:	08012307 	.word	0x08012307
 80114bc:	0801232b 	.word	0x0801232b

080114c0 <_cleanup_r>:
 80114c0:	4901      	ldr	r1, [pc, #4]	; (80114c8 <_cleanup_r+0x8>)
 80114c2:	f000 b8af 	b.w	8011624 <_fwalk_reent>
 80114c6:	bf00      	nop
 80114c8:	08011401 	.word	0x08011401

080114cc <__sfmoreglue>:
 80114cc:	b570      	push	{r4, r5, r6, lr}
 80114ce:	1e4a      	subs	r2, r1, #1
 80114d0:	2568      	movs	r5, #104	; 0x68
 80114d2:	4355      	muls	r5, r2
 80114d4:	460e      	mov	r6, r1
 80114d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80114da:	f000 fd23 	bl	8011f24 <_malloc_r>
 80114de:	4604      	mov	r4, r0
 80114e0:	b140      	cbz	r0, 80114f4 <__sfmoreglue+0x28>
 80114e2:	2100      	movs	r1, #0
 80114e4:	e9c0 1600 	strd	r1, r6, [r0]
 80114e8:	300c      	adds	r0, #12
 80114ea:	60a0      	str	r0, [r4, #8]
 80114ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80114f0:	f7fe fb5a 	bl	800fba8 <memset>
 80114f4:	4620      	mov	r0, r4
 80114f6:	bd70      	pop	{r4, r5, r6, pc}

080114f8 <__sfp_lock_acquire>:
 80114f8:	4801      	ldr	r0, [pc, #4]	; (8011500 <__sfp_lock_acquire+0x8>)
 80114fa:	f000 b8b8 	b.w	801166e <__retarget_lock_acquire_recursive>
 80114fe:	bf00      	nop
 8011500:	240005bc 	.word	0x240005bc

08011504 <__sfp_lock_release>:
 8011504:	4801      	ldr	r0, [pc, #4]	; (801150c <__sfp_lock_release+0x8>)
 8011506:	f000 b8b3 	b.w	8011670 <__retarget_lock_release_recursive>
 801150a:	bf00      	nop
 801150c:	240005bc 	.word	0x240005bc

08011510 <__sinit_lock_acquire>:
 8011510:	4801      	ldr	r0, [pc, #4]	; (8011518 <__sinit_lock_acquire+0x8>)
 8011512:	f000 b8ac 	b.w	801166e <__retarget_lock_acquire_recursive>
 8011516:	bf00      	nop
 8011518:	240005b7 	.word	0x240005b7

0801151c <__sinit_lock_release>:
 801151c:	4801      	ldr	r0, [pc, #4]	; (8011524 <__sinit_lock_release+0x8>)
 801151e:	f000 b8a7 	b.w	8011670 <__retarget_lock_release_recursive>
 8011522:	bf00      	nop
 8011524:	240005b7 	.word	0x240005b7

08011528 <__sinit>:
 8011528:	b510      	push	{r4, lr}
 801152a:	4604      	mov	r4, r0
 801152c:	f7ff fff0 	bl	8011510 <__sinit_lock_acquire>
 8011530:	69a3      	ldr	r3, [r4, #24]
 8011532:	b11b      	cbz	r3, 801153c <__sinit+0x14>
 8011534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011538:	f7ff bff0 	b.w	801151c <__sinit_lock_release>
 801153c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011540:	6523      	str	r3, [r4, #80]	; 0x50
 8011542:	4b13      	ldr	r3, [pc, #76]	; (8011590 <__sinit+0x68>)
 8011544:	4a13      	ldr	r2, [pc, #76]	; (8011594 <__sinit+0x6c>)
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	62a2      	str	r2, [r4, #40]	; 0x28
 801154a:	42a3      	cmp	r3, r4
 801154c:	bf04      	itt	eq
 801154e:	2301      	moveq	r3, #1
 8011550:	61a3      	streq	r3, [r4, #24]
 8011552:	4620      	mov	r0, r4
 8011554:	f000 f820 	bl	8011598 <__sfp>
 8011558:	6060      	str	r0, [r4, #4]
 801155a:	4620      	mov	r0, r4
 801155c:	f000 f81c 	bl	8011598 <__sfp>
 8011560:	60a0      	str	r0, [r4, #8]
 8011562:	4620      	mov	r0, r4
 8011564:	f000 f818 	bl	8011598 <__sfp>
 8011568:	2200      	movs	r2, #0
 801156a:	60e0      	str	r0, [r4, #12]
 801156c:	2104      	movs	r1, #4
 801156e:	6860      	ldr	r0, [r4, #4]
 8011570:	f7ff ff82 	bl	8011478 <std>
 8011574:	68a0      	ldr	r0, [r4, #8]
 8011576:	2201      	movs	r2, #1
 8011578:	2109      	movs	r1, #9
 801157a:	f7ff ff7d 	bl	8011478 <std>
 801157e:	68e0      	ldr	r0, [r4, #12]
 8011580:	2202      	movs	r2, #2
 8011582:	2112      	movs	r1, #18
 8011584:	f7ff ff78 	bl	8011478 <std>
 8011588:	2301      	movs	r3, #1
 801158a:	61a3      	str	r3, [r4, #24]
 801158c:	e7d2      	b.n	8011534 <__sinit+0xc>
 801158e:	bf00      	nop
 8011590:	08012f38 	.word	0x08012f38
 8011594:	080114c1 	.word	0x080114c1

08011598 <__sfp>:
 8011598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801159a:	4607      	mov	r7, r0
 801159c:	f7ff ffac 	bl	80114f8 <__sfp_lock_acquire>
 80115a0:	4b1e      	ldr	r3, [pc, #120]	; (801161c <__sfp+0x84>)
 80115a2:	681e      	ldr	r6, [r3, #0]
 80115a4:	69b3      	ldr	r3, [r6, #24]
 80115a6:	b913      	cbnz	r3, 80115ae <__sfp+0x16>
 80115a8:	4630      	mov	r0, r6
 80115aa:	f7ff ffbd 	bl	8011528 <__sinit>
 80115ae:	3648      	adds	r6, #72	; 0x48
 80115b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80115b4:	3b01      	subs	r3, #1
 80115b6:	d503      	bpl.n	80115c0 <__sfp+0x28>
 80115b8:	6833      	ldr	r3, [r6, #0]
 80115ba:	b30b      	cbz	r3, 8011600 <__sfp+0x68>
 80115bc:	6836      	ldr	r6, [r6, #0]
 80115be:	e7f7      	b.n	80115b0 <__sfp+0x18>
 80115c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80115c4:	b9d5      	cbnz	r5, 80115fc <__sfp+0x64>
 80115c6:	4b16      	ldr	r3, [pc, #88]	; (8011620 <__sfp+0x88>)
 80115c8:	60e3      	str	r3, [r4, #12]
 80115ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80115ce:	6665      	str	r5, [r4, #100]	; 0x64
 80115d0:	f000 f84c 	bl	801166c <__retarget_lock_init_recursive>
 80115d4:	f7ff ff96 	bl	8011504 <__sfp_lock_release>
 80115d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80115dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80115e0:	6025      	str	r5, [r4, #0]
 80115e2:	61a5      	str	r5, [r4, #24]
 80115e4:	2208      	movs	r2, #8
 80115e6:	4629      	mov	r1, r5
 80115e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80115ec:	f7fe fadc 	bl	800fba8 <memset>
 80115f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80115f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80115f8:	4620      	mov	r0, r4
 80115fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115fc:	3468      	adds	r4, #104	; 0x68
 80115fe:	e7d9      	b.n	80115b4 <__sfp+0x1c>
 8011600:	2104      	movs	r1, #4
 8011602:	4638      	mov	r0, r7
 8011604:	f7ff ff62 	bl	80114cc <__sfmoreglue>
 8011608:	4604      	mov	r4, r0
 801160a:	6030      	str	r0, [r6, #0]
 801160c:	2800      	cmp	r0, #0
 801160e:	d1d5      	bne.n	80115bc <__sfp+0x24>
 8011610:	f7ff ff78 	bl	8011504 <__sfp_lock_release>
 8011614:	230c      	movs	r3, #12
 8011616:	603b      	str	r3, [r7, #0]
 8011618:	e7ee      	b.n	80115f8 <__sfp+0x60>
 801161a:	bf00      	nop
 801161c:	08012f38 	.word	0x08012f38
 8011620:	ffff0001 	.word	0xffff0001

08011624 <_fwalk_reent>:
 8011624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011628:	4606      	mov	r6, r0
 801162a:	4688      	mov	r8, r1
 801162c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011630:	2700      	movs	r7, #0
 8011632:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011636:	f1b9 0901 	subs.w	r9, r9, #1
 801163a:	d505      	bpl.n	8011648 <_fwalk_reent+0x24>
 801163c:	6824      	ldr	r4, [r4, #0]
 801163e:	2c00      	cmp	r4, #0
 8011640:	d1f7      	bne.n	8011632 <_fwalk_reent+0xe>
 8011642:	4638      	mov	r0, r7
 8011644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011648:	89ab      	ldrh	r3, [r5, #12]
 801164a:	2b01      	cmp	r3, #1
 801164c:	d907      	bls.n	801165e <_fwalk_reent+0x3a>
 801164e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011652:	3301      	adds	r3, #1
 8011654:	d003      	beq.n	801165e <_fwalk_reent+0x3a>
 8011656:	4629      	mov	r1, r5
 8011658:	4630      	mov	r0, r6
 801165a:	47c0      	blx	r8
 801165c:	4307      	orrs	r7, r0
 801165e:	3568      	adds	r5, #104	; 0x68
 8011660:	e7e9      	b.n	8011636 <_fwalk_reent+0x12>
	...

08011664 <_localeconv_r>:
 8011664:	4800      	ldr	r0, [pc, #0]	; (8011668 <_localeconv_r+0x4>)
 8011666:	4770      	bx	lr
 8011668:	24000178 	.word	0x24000178

0801166c <__retarget_lock_init_recursive>:
 801166c:	4770      	bx	lr

0801166e <__retarget_lock_acquire_recursive>:
 801166e:	4770      	bx	lr

08011670 <__retarget_lock_release_recursive>:
 8011670:	4770      	bx	lr

08011672 <__swhatbuf_r>:
 8011672:	b570      	push	{r4, r5, r6, lr}
 8011674:	460e      	mov	r6, r1
 8011676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801167a:	2900      	cmp	r1, #0
 801167c:	b096      	sub	sp, #88	; 0x58
 801167e:	4614      	mov	r4, r2
 8011680:	461d      	mov	r5, r3
 8011682:	da07      	bge.n	8011694 <__swhatbuf_r+0x22>
 8011684:	2300      	movs	r3, #0
 8011686:	602b      	str	r3, [r5, #0]
 8011688:	89b3      	ldrh	r3, [r6, #12]
 801168a:	061a      	lsls	r2, r3, #24
 801168c:	d410      	bmi.n	80116b0 <__swhatbuf_r+0x3e>
 801168e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011692:	e00e      	b.n	80116b2 <__swhatbuf_r+0x40>
 8011694:	466a      	mov	r2, sp
 8011696:	f000 fe9f 	bl	80123d8 <_fstat_r>
 801169a:	2800      	cmp	r0, #0
 801169c:	dbf2      	blt.n	8011684 <__swhatbuf_r+0x12>
 801169e:	9a01      	ldr	r2, [sp, #4]
 80116a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80116a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80116a8:	425a      	negs	r2, r3
 80116aa:	415a      	adcs	r2, r3
 80116ac:	602a      	str	r2, [r5, #0]
 80116ae:	e7ee      	b.n	801168e <__swhatbuf_r+0x1c>
 80116b0:	2340      	movs	r3, #64	; 0x40
 80116b2:	2000      	movs	r0, #0
 80116b4:	6023      	str	r3, [r4, #0]
 80116b6:	b016      	add	sp, #88	; 0x58
 80116b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080116bc <__smakebuf_r>:
 80116bc:	898b      	ldrh	r3, [r1, #12]
 80116be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80116c0:	079d      	lsls	r5, r3, #30
 80116c2:	4606      	mov	r6, r0
 80116c4:	460c      	mov	r4, r1
 80116c6:	d507      	bpl.n	80116d8 <__smakebuf_r+0x1c>
 80116c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80116cc:	6023      	str	r3, [r4, #0]
 80116ce:	6123      	str	r3, [r4, #16]
 80116d0:	2301      	movs	r3, #1
 80116d2:	6163      	str	r3, [r4, #20]
 80116d4:	b002      	add	sp, #8
 80116d6:	bd70      	pop	{r4, r5, r6, pc}
 80116d8:	ab01      	add	r3, sp, #4
 80116da:	466a      	mov	r2, sp
 80116dc:	f7ff ffc9 	bl	8011672 <__swhatbuf_r>
 80116e0:	9900      	ldr	r1, [sp, #0]
 80116e2:	4605      	mov	r5, r0
 80116e4:	4630      	mov	r0, r6
 80116e6:	f000 fc1d 	bl	8011f24 <_malloc_r>
 80116ea:	b948      	cbnz	r0, 8011700 <__smakebuf_r+0x44>
 80116ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116f0:	059a      	lsls	r2, r3, #22
 80116f2:	d4ef      	bmi.n	80116d4 <__smakebuf_r+0x18>
 80116f4:	f023 0303 	bic.w	r3, r3, #3
 80116f8:	f043 0302 	orr.w	r3, r3, #2
 80116fc:	81a3      	strh	r3, [r4, #12]
 80116fe:	e7e3      	b.n	80116c8 <__smakebuf_r+0xc>
 8011700:	4b0d      	ldr	r3, [pc, #52]	; (8011738 <__smakebuf_r+0x7c>)
 8011702:	62b3      	str	r3, [r6, #40]	; 0x28
 8011704:	89a3      	ldrh	r3, [r4, #12]
 8011706:	6020      	str	r0, [r4, #0]
 8011708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801170c:	81a3      	strh	r3, [r4, #12]
 801170e:	9b00      	ldr	r3, [sp, #0]
 8011710:	6163      	str	r3, [r4, #20]
 8011712:	9b01      	ldr	r3, [sp, #4]
 8011714:	6120      	str	r0, [r4, #16]
 8011716:	b15b      	cbz	r3, 8011730 <__smakebuf_r+0x74>
 8011718:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801171c:	4630      	mov	r0, r6
 801171e:	f000 fe6d 	bl	80123fc <_isatty_r>
 8011722:	b128      	cbz	r0, 8011730 <__smakebuf_r+0x74>
 8011724:	89a3      	ldrh	r3, [r4, #12]
 8011726:	f023 0303 	bic.w	r3, r3, #3
 801172a:	f043 0301 	orr.w	r3, r3, #1
 801172e:	81a3      	strh	r3, [r4, #12]
 8011730:	89a0      	ldrh	r0, [r4, #12]
 8011732:	4305      	orrs	r5, r0
 8011734:	81a5      	strh	r5, [r4, #12]
 8011736:	e7cd      	b.n	80116d4 <__smakebuf_r+0x18>
 8011738:	080114c1 	.word	0x080114c1

0801173c <malloc>:
 801173c:	4b02      	ldr	r3, [pc, #8]	; (8011748 <malloc+0xc>)
 801173e:	4601      	mov	r1, r0
 8011740:	6818      	ldr	r0, [r3, #0]
 8011742:	f000 bbef 	b.w	8011f24 <_malloc_r>
 8011746:	bf00      	nop
 8011748:	24000024 	.word	0x24000024

0801174c <memcpy>:
 801174c:	440a      	add	r2, r1
 801174e:	4291      	cmp	r1, r2
 8011750:	f100 33ff 	add.w	r3, r0, #4294967295
 8011754:	d100      	bne.n	8011758 <memcpy+0xc>
 8011756:	4770      	bx	lr
 8011758:	b510      	push	{r4, lr}
 801175a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801175e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011762:	4291      	cmp	r1, r2
 8011764:	d1f9      	bne.n	801175a <memcpy+0xe>
 8011766:	bd10      	pop	{r4, pc}

08011768 <_Balloc>:
 8011768:	b570      	push	{r4, r5, r6, lr}
 801176a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801176c:	4604      	mov	r4, r0
 801176e:	460d      	mov	r5, r1
 8011770:	b976      	cbnz	r6, 8011790 <_Balloc+0x28>
 8011772:	2010      	movs	r0, #16
 8011774:	f7ff ffe2 	bl	801173c <malloc>
 8011778:	4602      	mov	r2, r0
 801177a:	6260      	str	r0, [r4, #36]	; 0x24
 801177c:	b920      	cbnz	r0, 8011788 <_Balloc+0x20>
 801177e:	4b18      	ldr	r3, [pc, #96]	; (80117e0 <_Balloc+0x78>)
 8011780:	4818      	ldr	r0, [pc, #96]	; (80117e4 <_Balloc+0x7c>)
 8011782:	2166      	movs	r1, #102	; 0x66
 8011784:	f000 fde8 	bl	8012358 <__assert_func>
 8011788:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801178c:	6006      	str	r6, [r0, #0]
 801178e:	60c6      	str	r6, [r0, #12]
 8011790:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011792:	68f3      	ldr	r3, [r6, #12]
 8011794:	b183      	cbz	r3, 80117b8 <_Balloc+0x50>
 8011796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011798:	68db      	ldr	r3, [r3, #12]
 801179a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801179e:	b9b8      	cbnz	r0, 80117d0 <_Balloc+0x68>
 80117a0:	2101      	movs	r1, #1
 80117a2:	fa01 f605 	lsl.w	r6, r1, r5
 80117a6:	1d72      	adds	r2, r6, #5
 80117a8:	0092      	lsls	r2, r2, #2
 80117aa:	4620      	mov	r0, r4
 80117ac:	f000 fb5a 	bl	8011e64 <_calloc_r>
 80117b0:	b160      	cbz	r0, 80117cc <_Balloc+0x64>
 80117b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80117b6:	e00e      	b.n	80117d6 <_Balloc+0x6e>
 80117b8:	2221      	movs	r2, #33	; 0x21
 80117ba:	2104      	movs	r1, #4
 80117bc:	4620      	mov	r0, r4
 80117be:	f000 fb51 	bl	8011e64 <_calloc_r>
 80117c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80117c4:	60f0      	str	r0, [r6, #12]
 80117c6:	68db      	ldr	r3, [r3, #12]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d1e4      	bne.n	8011796 <_Balloc+0x2e>
 80117cc:	2000      	movs	r0, #0
 80117ce:	bd70      	pop	{r4, r5, r6, pc}
 80117d0:	6802      	ldr	r2, [r0, #0]
 80117d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80117d6:	2300      	movs	r3, #0
 80117d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80117dc:	e7f7      	b.n	80117ce <_Balloc+0x66>
 80117de:	bf00      	nop
 80117e0:	08012f7d 	.word	0x08012f7d
 80117e4:	08013064 	.word	0x08013064

080117e8 <_Bfree>:
 80117e8:	b570      	push	{r4, r5, r6, lr}
 80117ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80117ec:	4605      	mov	r5, r0
 80117ee:	460c      	mov	r4, r1
 80117f0:	b976      	cbnz	r6, 8011810 <_Bfree+0x28>
 80117f2:	2010      	movs	r0, #16
 80117f4:	f7ff ffa2 	bl	801173c <malloc>
 80117f8:	4602      	mov	r2, r0
 80117fa:	6268      	str	r0, [r5, #36]	; 0x24
 80117fc:	b920      	cbnz	r0, 8011808 <_Bfree+0x20>
 80117fe:	4b09      	ldr	r3, [pc, #36]	; (8011824 <_Bfree+0x3c>)
 8011800:	4809      	ldr	r0, [pc, #36]	; (8011828 <_Bfree+0x40>)
 8011802:	218a      	movs	r1, #138	; 0x8a
 8011804:	f000 fda8 	bl	8012358 <__assert_func>
 8011808:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801180c:	6006      	str	r6, [r0, #0]
 801180e:	60c6      	str	r6, [r0, #12]
 8011810:	b13c      	cbz	r4, 8011822 <_Bfree+0x3a>
 8011812:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011814:	6862      	ldr	r2, [r4, #4]
 8011816:	68db      	ldr	r3, [r3, #12]
 8011818:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801181c:	6021      	str	r1, [r4, #0]
 801181e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011822:	bd70      	pop	{r4, r5, r6, pc}
 8011824:	08012f7d 	.word	0x08012f7d
 8011828:	08013064 	.word	0x08013064

0801182c <__multadd>:
 801182c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011830:	690e      	ldr	r6, [r1, #16]
 8011832:	4607      	mov	r7, r0
 8011834:	4698      	mov	r8, r3
 8011836:	460c      	mov	r4, r1
 8011838:	f101 0014 	add.w	r0, r1, #20
 801183c:	2300      	movs	r3, #0
 801183e:	6805      	ldr	r5, [r0, #0]
 8011840:	b2a9      	uxth	r1, r5
 8011842:	fb02 8101 	mla	r1, r2, r1, r8
 8011846:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801184a:	0c2d      	lsrs	r5, r5, #16
 801184c:	fb02 c505 	mla	r5, r2, r5, ip
 8011850:	b289      	uxth	r1, r1
 8011852:	3301      	adds	r3, #1
 8011854:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011858:	429e      	cmp	r6, r3
 801185a:	f840 1b04 	str.w	r1, [r0], #4
 801185e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011862:	dcec      	bgt.n	801183e <__multadd+0x12>
 8011864:	f1b8 0f00 	cmp.w	r8, #0
 8011868:	d022      	beq.n	80118b0 <__multadd+0x84>
 801186a:	68a3      	ldr	r3, [r4, #8]
 801186c:	42b3      	cmp	r3, r6
 801186e:	dc19      	bgt.n	80118a4 <__multadd+0x78>
 8011870:	6861      	ldr	r1, [r4, #4]
 8011872:	4638      	mov	r0, r7
 8011874:	3101      	adds	r1, #1
 8011876:	f7ff ff77 	bl	8011768 <_Balloc>
 801187a:	4605      	mov	r5, r0
 801187c:	b928      	cbnz	r0, 801188a <__multadd+0x5e>
 801187e:	4602      	mov	r2, r0
 8011880:	4b0d      	ldr	r3, [pc, #52]	; (80118b8 <__multadd+0x8c>)
 8011882:	480e      	ldr	r0, [pc, #56]	; (80118bc <__multadd+0x90>)
 8011884:	21b5      	movs	r1, #181	; 0xb5
 8011886:	f000 fd67 	bl	8012358 <__assert_func>
 801188a:	6922      	ldr	r2, [r4, #16]
 801188c:	3202      	adds	r2, #2
 801188e:	f104 010c 	add.w	r1, r4, #12
 8011892:	0092      	lsls	r2, r2, #2
 8011894:	300c      	adds	r0, #12
 8011896:	f7ff ff59 	bl	801174c <memcpy>
 801189a:	4621      	mov	r1, r4
 801189c:	4638      	mov	r0, r7
 801189e:	f7ff ffa3 	bl	80117e8 <_Bfree>
 80118a2:	462c      	mov	r4, r5
 80118a4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80118a8:	3601      	adds	r6, #1
 80118aa:	f8c3 8014 	str.w	r8, [r3, #20]
 80118ae:	6126      	str	r6, [r4, #16]
 80118b0:	4620      	mov	r0, r4
 80118b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118b6:	bf00      	nop
 80118b8:	08012ff3 	.word	0x08012ff3
 80118bc:	08013064 	.word	0x08013064

080118c0 <__hi0bits>:
 80118c0:	0c03      	lsrs	r3, r0, #16
 80118c2:	041b      	lsls	r3, r3, #16
 80118c4:	b9d3      	cbnz	r3, 80118fc <__hi0bits+0x3c>
 80118c6:	0400      	lsls	r0, r0, #16
 80118c8:	2310      	movs	r3, #16
 80118ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80118ce:	bf04      	itt	eq
 80118d0:	0200      	lsleq	r0, r0, #8
 80118d2:	3308      	addeq	r3, #8
 80118d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80118d8:	bf04      	itt	eq
 80118da:	0100      	lsleq	r0, r0, #4
 80118dc:	3304      	addeq	r3, #4
 80118de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80118e2:	bf04      	itt	eq
 80118e4:	0080      	lsleq	r0, r0, #2
 80118e6:	3302      	addeq	r3, #2
 80118e8:	2800      	cmp	r0, #0
 80118ea:	db05      	blt.n	80118f8 <__hi0bits+0x38>
 80118ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80118f0:	f103 0301 	add.w	r3, r3, #1
 80118f4:	bf08      	it	eq
 80118f6:	2320      	moveq	r3, #32
 80118f8:	4618      	mov	r0, r3
 80118fa:	4770      	bx	lr
 80118fc:	2300      	movs	r3, #0
 80118fe:	e7e4      	b.n	80118ca <__hi0bits+0xa>

08011900 <__lo0bits>:
 8011900:	6803      	ldr	r3, [r0, #0]
 8011902:	f013 0207 	ands.w	r2, r3, #7
 8011906:	4601      	mov	r1, r0
 8011908:	d00b      	beq.n	8011922 <__lo0bits+0x22>
 801190a:	07da      	lsls	r2, r3, #31
 801190c:	d424      	bmi.n	8011958 <__lo0bits+0x58>
 801190e:	0798      	lsls	r0, r3, #30
 8011910:	bf49      	itett	mi
 8011912:	085b      	lsrmi	r3, r3, #1
 8011914:	089b      	lsrpl	r3, r3, #2
 8011916:	2001      	movmi	r0, #1
 8011918:	600b      	strmi	r3, [r1, #0]
 801191a:	bf5c      	itt	pl
 801191c:	600b      	strpl	r3, [r1, #0]
 801191e:	2002      	movpl	r0, #2
 8011920:	4770      	bx	lr
 8011922:	b298      	uxth	r0, r3
 8011924:	b9b0      	cbnz	r0, 8011954 <__lo0bits+0x54>
 8011926:	0c1b      	lsrs	r3, r3, #16
 8011928:	2010      	movs	r0, #16
 801192a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801192e:	bf04      	itt	eq
 8011930:	0a1b      	lsreq	r3, r3, #8
 8011932:	3008      	addeq	r0, #8
 8011934:	071a      	lsls	r2, r3, #28
 8011936:	bf04      	itt	eq
 8011938:	091b      	lsreq	r3, r3, #4
 801193a:	3004      	addeq	r0, #4
 801193c:	079a      	lsls	r2, r3, #30
 801193e:	bf04      	itt	eq
 8011940:	089b      	lsreq	r3, r3, #2
 8011942:	3002      	addeq	r0, #2
 8011944:	07da      	lsls	r2, r3, #31
 8011946:	d403      	bmi.n	8011950 <__lo0bits+0x50>
 8011948:	085b      	lsrs	r3, r3, #1
 801194a:	f100 0001 	add.w	r0, r0, #1
 801194e:	d005      	beq.n	801195c <__lo0bits+0x5c>
 8011950:	600b      	str	r3, [r1, #0]
 8011952:	4770      	bx	lr
 8011954:	4610      	mov	r0, r2
 8011956:	e7e8      	b.n	801192a <__lo0bits+0x2a>
 8011958:	2000      	movs	r0, #0
 801195a:	4770      	bx	lr
 801195c:	2020      	movs	r0, #32
 801195e:	4770      	bx	lr

08011960 <__i2b>:
 8011960:	b510      	push	{r4, lr}
 8011962:	460c      	mov	r4, r1
 8011964:	2101      	movs	r1, #1
 8011966:	f7ff feff 	bl	8011768 <_Balloc>
 801196a:	4602      	mov	r2, r0
 801196c:	b928      	cbnz	r0, 801197a <__i2b+0x1a>
 801196e:	4b05      	ldr	r3, [pc, #20]	; (8011984 <__i2b+0x24>)
 8011970:	4805      	ldr	r0, [pc, #20]	; (8011988 <__i2b+0x28>)
 8011972:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011976:	f000 fcef 	bl	8012358 <__assert_func>
 801197a:	2301      	movs	r3, #1
 801197c:	6144      	str	r4, [r0, #20]
 801197e:	6103      	str	r3, [r0, #16]
 8011980:	bd10      	pop	{r4, pc}
 8011982:	bf00      	nop
 8011984:	08012ff3 	.word	0x08012ff3
 8011988:	08013064 	.word	0x08013064

0801198c <__multiply>:
 801198c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011990:	4614      	mov	r4, r2
 8011992:	690a      	ldr	r2, [r1, #16]
 8011994:	6923      	ldr	r3, [r4, #16]
 8011996:	429a      	cmp	r2, r3
 8011998:	bfb8      	it	lt
 801199a:	460b      	movlt	r3, r1
 801199c:	460d      	mov	r5, r1
 801199e:	bfbc      	itt	lt
 80119a0:	4625      	movlt	r5, r4
 80119a2:	461c      	movlt	r4, r3
 80119a4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80119a8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80119ac:	68ab      	ldr	r3, [r5, #8]
 80119ae:	6869      	ldr	r1, [r5, #4]
 80119b0:	eb0a 0709 	add.w	r7, sl, r9
 80119b4:	42bb      	cmp	r3, r7
 80119b6:	b085      	sub	sp, #20
 80119b8:	bfb8      	it	lt
 80119ba:	3101      	addlt	r1, #1
 80119bc:	f7ff fed4 	bl	8011768 <_Balloc>
 80119c0:	b930      	cbnz	r0, 80119d0 <__multiply+0x44>
 80119c2:	4602      	mov	r2, r0
 80119c4:	4b42      	ldr	r3, [pc, #264]	; (8011ad0 <__multiply+0x144>)
 80119c6:	4843      	ldr	r0, [pc, #268]	; (8011ad4 <__multiply+0x148>)
 80119c8:	f240 115d 	movw	r1, #349	; 0x15d
 80119cc:	f000 fcc4 	bl	8012358 <__assert_func>
 80119d0:	f100 0614 	add.w	r6, r0, #20
 80119d4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80119d8:	4633      	mov	r3, r6
 80119da:	2200      	movs	r2, #0
 80119dc:	4543      	cmp	r3, r8
 80119de:	d31e      	bcc.n	8011a1e <__multiply+0x92>
 80119e0:	f105 0c14 	add.w	ip, r5, #20
 80119e4:	f104 0314 	add.w	r3, r4, #20
 80119e8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80119ec:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80119f0:	9202      	str	r2, [sp, #8]
 80119f2:	ebac 0205 	sub.w	r2, ip, r5
 80119f6:	3a15      	subs	r2, #21
 80119f8:	f022 0203 	bic.w	r2, r2, #3
 80119fc:	3204      	adds	r2, #4
 80119fe:	f105 0115 	add.w	r1, r5, #21
 8011a02:	458c      	cmp	ip, r1
 8011a04:	bf38      	it	cc
 8011a06:	2204      	movcc	r2, #4
 8011a08:	9201      	str	r2, [sp, #4]
 8011a0a:	9a02      	ldr	r2, [sp, #8]
 8011a0c:	9303      	str	r3, [sp, #12]
 8011a0e:	429a      	cmp	r2, r3
 8011a10:	d808      	bhi.n	8011a24 <__multiply+0x98>
 8011a12:	2f00      	cmp	r7, #0
 8011a14:	dc55      	bgt.n	8011ac2 <__multiply+0x136>
 8011a16:	6107      	str	r7, [r0, #16]
 8011a18:	b005      	add	sp, #20
 8011a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a1e:	f843 2b04 	str.w	r2, [r3], #4
 8011a22:	e7db      	b.n	80119dc <__multiply+0x50>
 8011a24:	f8b3 a000 	ldrh.w	sl, [r3]
 8011a28:	f1ba 0f00 	cmp.w	sl, #0
 8011a2c:	d020      	beq.n	8011a70 <__multiply+0xe4>
 8011a2e:	f105 0e14 	add.w	lr, r5, #20
 8011a32:	46b1      	mov	r9, r6
 8011a34:	2200      	movs	r2, #0
 8011a36:	f85e 4b04 	ldr.w	r4, [lr], #4
 8011a3a:	f8d9 b000 	ldr.w	fp, [r9]
 8011a3e:	b2a1      	uxth	r1, r4
 8011a40:	fa1f fb8b 	uxth.w	fp, fp
 8011a44:	fb0a b101 	mla	r1, sl, r1, fp
 8011a48:	4411      	add	r1, r2
 8011a4a:	f8d9 2000 	ldr.w	r2, [r9]
 8011a4e:	0c24      	lsrs	r4, r4, #16
 8011a50:	0c12      	lsrs	r2, r2, #16
 8011a52:	fb0a 2404 	mla	r4, sl, r4, r2
 8011a56:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8011a5a:	b289      	uxth	r1, r1
 8011a5c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011a60:	45f4      	cmp	ip, lr
 8011a62:	f849 1b04 	str.w	r1, [r9], #4
 8011a66:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8011a6a:	d8e4      	bhi.n	8011a36 <__multiply+0xaa>
 8011a6c:	9901      	ldr	r1, [sp, #4]
 8011a6e:	5072      	str	r2, [r6, r1]
 8011a70:	9a03      	ldr	r2, [sp, #12]
 8011a72:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011a76:	3304      	adds	r3, #4
 8011a78:	f1b9 0f00 	cmp.w	r9, #0
 8011a7c:	d01f      	beq.n	8011abe <__multiply+0x132>
 8011a7e:	6834      	ldr	r4, [r6, #0]
 8011a80:	f105 0114 	add.w	r1, r5, #20
 8011a84:	46b6      	mov	lr, r6
 8011a86:	f04f 0a00 	mov.w	sl, #0
 8011a8a:	880a      	ldrh	r2, [r1, #0]
 8011a8c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011a90:	fb09 b202 	mla	r2, r9, r2, fp
 8011a94:	4492      	add	sl, r2
 8011a96:	b2a4      	uxth	r4, r4
 8011a98:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011a9c:	f84e 4b04 	str.w	r4, [lr], #4
 8011aa0:	f851 4b04 	ldr.w	r4, [r1], #4
 8011aa4:	f8be 2000 	ldrh.w	r2, [lr]
 8011aa8:	0c24      	lsrs	r4, r4, #16
 8011aaa:	fb09 2404 	mla	r4, r9, r4, r2
 8011aae:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8011ab2:	458c      	cmp	ip, r1
 8011ab4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011ab8:	d8e7      	bhi.n	8011a8a <__multiply+0xfe>
 8011aba:	9a01      	ldr	r2, [sp, #4]
 8011abc:	50b4      	str	r4, [r6, r2]
 8011abe:	3604      	adds	r6, #4
 8011ac0:	e7a3      	b.n	8011a0a <__multiply+0x7e>
 8011ac2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d1a5      	bne.n	8011a16 <__multiply+0x8a>
 8011aca:	3f01      	subs	r7, #1
 8011acc:	e7a1      	b.n	8011a12 <__multiply+0x86>
 8011ace:	bf00      	nop
 8011ad0:	08012ff3 	.word	0x08012ff3
 8011ad4:	08013064 	.word	0x08013064

08011ad8 <__pow5mult>:
 8011ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011adc:	4615      	mov	r5, r2
 8011ade:	f012 0203 	ands.w	r2, r2, #3
 8011ae2:	4606      	mov	r6, r0
 8011ae4:	460f      	mov	r7, r1
 8011ae6:	d007      	beq.n	8011af8 <__pow5mult+0x20>
 8011ae8:	4c25      	ldr	r4, [pc, #148]	; (8011b80 <__pow5mult+0xa8>)
 8011aea:	3a01      	subs	r2, #1
 8011aec:	2300      	movs	r3, #0
 8011aee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011af2:	f7ff fe9b 	bl	801182c <__multadd>
 8011af6:	4607      	mov	r7, r0
 8011af8:	10ad      	asrs	r5, r5, #2
 8011afa:	d03d      	beq.n	8011b78 <__pow5mult+0xa0>
 8011afc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011afe:	b97c      	cbnz	r4, 8011b20 <__pow5mult+0x48>
 8011b00:	2010      	movs	r0, #16
 8011b02:	f7ff fe1b 	bl	801173c <malloc>
 8011b06:	4602      	mov	r2, r0
 8011b08:	6270      	str	r0, [r6, #36]	; 0x24
 8011b0a:	b928      	cbnz	r0, 8011b18 <__pow5mult+0x40>
 8011b0c:	4b1d      	ldr	r3, [pc, #116]	; (8011b84 <__pow5mult+0xac>)
 8011b0e:	481e      	ldr	r0, [pc, #120]	; (8011b88 <__pow5mult+0xb0>)
 8011b10:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011b14:	f000 fc20 	bl	8012358 <__assert_func>
 8011b18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011b1c:	6004      	str	r4, [r0, #0]
 8011b1e:	60c4      	str	r4, [r0, #12]
 8011b20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011b24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011b28:	b94c      	cbnz	r4, 8011b3e <__pow5mult+0x66>
 8011b2a:	f240 2171 	movw	r1, #625	; 0x271
 8011b2e:	4630      	mov	r0, r6
 8011b30:	f7ff ff16 	bl	8011960 <__i2b>
 8011b34:	2300      	movs	r3, #0
 8011b36:	f8c8 0008 	str.w	r0, [r8, #8]
 8011b3a:	4604      	mov	r4, r0
 8011b3c:	6003      	str	r3, [r0, #0]
 8011b3e:	f04f 0900 	mov.w	r9, #0
 8011b42:	07eb      	lsls	r3, r5, #31
 8011b44:	d50a      	bpl.n	8011b5c <__pow5mult+0x84>
 8011b46:	4639      	mov	r1, r7
 8011b48:	4622      	mov	r2, r4
 8011b4a:	4630      	mov	r0, r6
 8011b4c:	f7ff ff1e 	bl	801198c <__multiply>
 8011b50:	4639      	mov	r1, r7
 8011b52:	4680      	mov	r8, r0
 8011b54:	4630      	mov	r0, r6
 8011b56:	f7ff fe47 	bl	80117e8 <_Bfree>
 8011b5a:	4647      	mov	r7, r8
 8011b5c:	106d      	asrs	r5, r5, #1
 8011b5e:	d00b      	beq.n	8011b78 <__pow5mult+0xa0>
 8011b60:	6820      	ldr	r0, [r4, #0]
 8011b62:	b938      	cbnz	r0, 8011b74 <__pow5mult+0x9c>
 8011b64:	4622      	mov	r2, r4
 8011b66:	4621      	mov	r1, r4
 8011b68:	4630      	mov	r0, r6
 8011b6a:	f7ff ff0f 	bl	801198c <__multiply>
 8011b6e:	6020      	str	r0, [r4, #0]
 8011b70:	f8c0 9000 	str.w	r9, [r0]
 8011b74:	4604      	mov	r4, r0
 8011b76:	e7e4      	b.n	8011b42 <__pow5mult+0x6a>
 8011b78:	4638      	mov	r0, r7
 8011b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b7e:	bf00      	nop
 8011b80:	080131b8 	.word	0x080131b8
 8011b84:	08012f7d 	.word	0x08012f7d
 8011b88:	08013064 	.word	0x08013064

08011b8c <__lshift>:
 8011b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b90:	460c      	mov	r4, r1
 8011b92:	6849      	ldr	r1, [r1, #4]
 8011b94:	6923      	ldr	r3, [r4, #16]
 8011b96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011b9a:	68a3      	ldr	r3, [r4, #8]
 8011b9c:	4607      	mov	r7, r0
 8011b9e:	4691      	mov	r9, r2
 8011ba0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011ba4:	f108 0601 	add.w	r6, r8, #1
 8011ba8:	42b3      	cmp	r3, r6
 8011baa:	db0b      	blt.n	8011bc4 <__lshift+0x38>
 8011bac:	4638      	mov	r0, r7
 8011bae:	f7ff fddb 	bl	8011768 <_Balloc>
 8011bb2:	4605      	mov	r5, r0
 8011bb4:	b948      	cbnz	r0, 8011bca <__lshift+0x3e>
 8011bb6:	4602      	mov	r2, r0
 8011bb8:	4b28      	ldr	r3, [pc, #160]	; (8011c5c <__lshift+0xd0>)
 8011bba:	4829      	ldr	r0, [pc, #164]	; (8011c60 <__lshift+0xd4>)
 8011bbc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011bc0:	f000 fbca 	bl	8012358 <__assert_func>
 8011bc4:	3101      	adds	r1, #1
 8011bc6:	005b      	lsls	r3, r3, #1
 8011bc8:	e7ee      	b.n	8011ba8 <__lshift+0x1c>
 8011bca:	2300      	movs	r3, #0
 8011bcc:	f100 0114 	add.w	r1, r0, #20
 8011bd0:	f100 0210 	add.w	r2, r0, #16
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	4553      	cmp	r3, sl
 8011bd8:	db33      	blt.n	8011c42 <__lshift+0xb6>
 8011bda:	6920      	ldr	r0, [r4, #16]
 8011bdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011be0:	f104 0314 	add.w	r3, r4, #20
 8011be4:	f019 091f 	ands.w	r9, r9, #31
 8011be8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011bec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011bf0:	d02b      	beq.n	8011c4a <__lshift+0xbe>
 8011bf2:	f1c9 0e20 	rsb	lr, r9, #32
 8011bf6:	468a      	mov	sl, r1
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	6818      	ldr	r0, [r3, #0]
 8011bfc:	fa00 f009 	lsl.w	r0, r0, r9
 8011c00:	4302      	orrs	r2, r0
 8011c02:	f84a 2b04 	str.w	r2, [sl], #4
 8011c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c0a:	459c      	cmp	ip, r3
 8011c0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8011c10:	d8f3      	bhi.n	8011bfa <__lshift+0x6e>
 8011c12:	ebac 0304 	sub.w	r3, ip, r4
 8011c16:	3b15      	subs	r3, #21
 8011c18:	f023 0303 	bic.w	r3, r3, #3
 8011c1c:	3304      	adds	r3, #4
 8011c1e:	f104 0015 	add.w	r0, r4, #21
 8011c22:	4584      	cmp	ip, r0
 8011c24:	bf38      	it	cc
 8011c26:	2304      	movcc	r3, #4
 8011c28:	50ca      	str	r2, [r1, r3]
 8011c2a:	b10a      	cbz	r2, 8011c30 <__lshift+0xa4>
 8011c2c:	f108 0602 	add.w	r6, r8, #2
 8011c30:	3e01      	subs	r6, #1
 8011c32:	4638      	mov	r0, r7
 8011c34:	612e      	str	r6, [r5, #16]
 8011c36:	4621      	mov	r1, r4
 8011c38:	f7ff fdd6 	bl	80117e8 <_Bfree>
 8011c3c:	4628      	mov	r0, r5
 8011c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c42:	f842 0f04 	str.w	r0, [r2, #4]!
 8011c46:	3301      	adds	r3, #1
 8011c48:	e7c5      	b.n	8011bd6 <__lshift+0x4a>
 8011c4a:	3904      	subs	r1, #4
 8011c4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c50:	f841 2f04 	str.w	r2, [r1, #4]!
 8011c54:	459c      	cmp	ip, r3
 8011c56:	d8f9      	bhi.n	8011c4c <__lshift+0xc0>
 8011c58:	e7ea      	b.n	8011c30 <__lshift+0xa4>
 8011c5a:	bf00      	nop
 8011c5c:	08012ff3 	.word	0x08012ff3
 8011c60:	08013064 	.word	0x08013064

08011c64 <__mcmp>:
 8011c64:	b530      	push	{r4, r5, lr}
 8011c66:	6902      	ldr	r2, [r0, #16]
 8011c68:	690c      	ldr	r4, [r1, #16]
 8011c6a:	1b12      	subs	r2, r2, r4
 8011c6c:	d10e      	bne.n	8011c8c <__mcmp+0x28>
 8011c6e:	f100 0314 	add.w	r3, r0, #20
 8011c72:	3114      	adds	r1, #20
 8011c74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011c78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011c7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011c80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011c84:	42a5      	cmp	r5, r4
 8011c86:	d003      	beq.n	8011c90 <__mcmp+0x2c>
 8011c88:	d305      	bcc.n	8011c96 <__mcmp+0x32>
 8011c8a:	2201      	movs	r2, #1
 8011c8c:	4610      	mov	r0, r2
 8011c8e:	bd30      	pop	{r4, r5, pc}
 8011c90:	4283      	cmp	r3, r0
 8011c92:	d3f3      	bcc.n	8011c7c <__mcmp+0x18>
 8011c94:	e7fa      	b.n	8011c8c <__mcmp+0x28>
 8011c96:	f04f 32ff 	mov.w	r2, #4294967295
 8011c9a:	e7f7      	b.n	8011c8c <__mcmp+0x28>

08011c9c <__mdiff>:
 8011c9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ca0:	460c      	mov	r4, r1
 8011ca2:	4606      	mov	r6, r0
 8011ca4:	4611      	mov	r1, r2
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	4617      	mov	r7, r2
 8011caa:	f7ff ffdb 	bl	8011c64 <__mcmp>
 8011cae:	1e05      	subs	r5, r0, #0
 8011cb0:	d110      	bne.n	8011cd4 <__mdiff+0x38>
 8011cb2:	4629      	mov	r1, r5
 8011cb4:	4630      	mov	r0, r6
 8011cb6:	f7ff fd57 	bl	8011768 <_Balloc>
 8011cba:	b930      	cbnz	r0, 8011cca <__mdiff+0x2e>
 8011cbc:	4b39      	ldr	r3, [pc, #228]	; (8011da4 <__mdiff+0x108>)
 8011cbe:	4602      	mov	r2, r0
 8011cc0:	f240 2132 	movw	r1, #562	; 0x232
 8011cc4:	4838      	ldr	r0, [pc, #224]	; (8011da8 <__mdiff+0x10c>)
 8011cc6:	f000 fb47 	bl	8012358 <__assert_func>
 8011cca:	2301      	movs	r3, #1
 8011ccc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011cd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cd4:	bfa4      	itt	ge
 8011cd6:	463b      	movge	r3, r7
 8011cd8:	4627      	movge	r7, r4
 8011cda:	4630      	mov	r0, r6
 8011cdc:	6879      	ldr	r1, [r7, #4]
 8011cde:	bfa6      	itte	ge
 8011ce0:	461c      	movge	r4, r3
 8011ce2:	2500      	movge	r5, #0
 8011ce4:	2501      	movlt	r5, #1
 8011ce6:	f7ff fd3f 	bl	8011768 <_Balloc>
 8011cea:	b920      	cbnz	r0, 8011cf6 <__mdiff+0x5a>
 8011cec:	4b2d      	ldr	r3, [pc, #180]	; (8011da4 <__mdiff+0x108>)
 8011cee:	4602      	mov	r2, r0
 8011cf0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011cf4:	e7e6      	b.n	8011cc4 <__mdiff+0x28>
 8011cf6:	693e      	ldr	r6, [r7, #16]
 8011cf8:	60c5      	str	r5, [r0, #12]
 8011cfa:	6925      	ldr	r5, [r4, #16]
 8011cfc:	f107 0114 	add.w	r1, r7, #20
 8011d00:	f104 0914 	add.w	r9, r4, #20
 8011d04:	f100 0e14 	add.w	lr, r0, #20
 8011d08:	f107 0210 	add.w	r2, r7, #16
 8011d0c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011d10:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011d14:	46f2      	mov	sl, lr
 8011d16:	2700      	movs	r7, #0
 8011d18:	f859 3b04 	ldr.w	r3, [r9], #4
 8011d1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011d20:	fa1f f883 	uxth.w	r8, r3
 8011d24:	fa17 f78b 	uxtah	r7, r7, fp
 8011d28:	0c1b      	lsrs	r3, r3, #16
 8011d2a:	eba7 0808 	sub.w	r8, r7, r8
 8011d2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011d32:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011d36:	fa1f f888 	uxth.w	r8, r8
 8011d3a:	141f      	asrs	r7, r3, #16
 8011d3c:	454d      	cmp	r5, r9
 8011d3e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011d42:	f84a 3b04 	str.w	r3, [sl], #4
 8011d46:	d8e7      	bhi.n	8011d18 <__mdiff+0x7c>
 8011d48:	1b2b      	subs	r3, r5, r4
 8011d4a:	3b15      	subs	r3, #21
 8011d4c:	f023 0303 	bic.w	r3, r3, #3
 8011d50:	3304      	adds	r3, #4
 8011d52:	3415      	adds	r4, #21
 8011d54:	42a5      	cmp	r5, r4
 8011d56:	bf38      	it	cc
 8011d58:	2304      	movcc	r3, #4
 8011d5a:	4419      	add	r1, r3
 8011d5c:	4473      	add	r3, lr
 8011d5e:	469e      	mov	lr, r3
 8011d60:	460d      	mov	r5, r1
 8011d62:	4565      	cmp	r5, ip
 8011d64:	d30e      	bcc.n	8011d84 <__mdiff+0xe8>
 8011d66:	f10c 0203 	add.w	r2, ip, #3
 8011d6a:	1a52      	subs	r2, r2, r1
 8011d6c:	f022 0203 	bic.w	r2, r2, #3
 8011d70:	3903      	subs	r1, #3
 8011d72:	458c      	cmp	ip, r1
 8011d74:	bf38      	it	cc
 8011d76:	2200      	movcc	r2, #0
 8011d78:	441a      	add	r2, r3
 8011d7a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011d7e:	b17b      	cbz	r3, 8011da0 <__mdiff+0x104>
 8011d80:	6106      	str	r6, [r0, #16]
 8011d82:	e7a5      	b.n	8011cd0 <__mdiff+0x34>
 8011d84:	f855 8b04 	ldr.w	r8, [r5], #4
 8011d88:	fa17 f488 	uxtah	r4, r7, r8
 8011d8c:	1422      	asrs	r2, r4, #16
 8011d8e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8011d92:	b2a4      	uxth	r4, r4
 8011d94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8011d98:	f84e 4b04 	str.w	r4, [lr], #4
 8011d9c:	1417      	asrs	r7, r2, #16
 8011d9e:	e7e0      	b.n	8011d62 <__mdiff+0xc6>
 8011da0:	3e01      	subs	r6, #1
 8011da2:	e7ea      	b.n	8011d7a <__mdiff+0xde>
 8011da4:	08012ff3 	.word	0x08012ff3
 8011da8:	08013064 	.word	0x08013064

08011dac <__d2b>:
 8011dac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011db0:	4689      	mov	r9, r1
 8011db2:	2101      	movs	r1, #1
 8011db4:	ec57 6b10 	vmov	r6, r7, d0
 8011db8:	4690      	mov	r8, r2
 8011dba:	f7ff fcd5 	bl	8011768 <_Balloc>
 8011dbe:	4604      	mov	r4, r0
 8011dc0:	b930      	cbnz	r0, 8011dd0 <__d2b+0x24>
 8011dc2:	4602      	mov	r2, r0
 8011dc4:	4b25      	ldr	r3, [pc, #148]	; (8011e5c <__d2b+0xb0>)
 8011dc6:	4826      	ldr	r0, [pc, #152]	; (8011e60 <__d2b+0xb4>)
 8011dc8:	f240 310a 	movw	r1, #778	; 0x30a
 8011dcc:	f000 fac4 	bl	8012358 <__assert_func>
 8011dd0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011dd4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011dd8:	bb35      	cbnz	r5, 8011e28 <__d2b+0x7c>
 8011dda:	2e00      	cmp	r6, #0
 8011ddc:	9301      	str	r3, [sp, #4]
 8011dde:	d028      	beq.n	8011e32 <__d2b+0x86>
 8011de0:	4668      	mov	r0, sp
 8011de2:	9600      	str	r6, [sp, #0]
 8011de4:	f7ff fd8c 	bl	8011900 <__lo0bits>
 8011de8:	9900      	ldr	r1, [sp, #0]
 8011dea:	b300      	cbz	r0, 8011e2e <__d2b+0x82>
 8011dec:	9a01      	ldr	r2, [sp, #4]
 8011dee:	f1c0 0320 	rsb	r3, r0, #32
 8011df2:	fa02 f303 	lsl.w	r3, r2, r3
 8011df6:	430b      	orrs	r3, r1
 8011df8:	40c2      	lsrs	r2, r0
 8011dfa:	6163      	str	r3, [r4, #20]
 8011dfc:	9201      	str	r2, [sp, #4]
 8011dfe:	9b01      	ldr	r3, [sp, #4]
 8011e00:	61a3      	str	r3, [r4, #24]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	bf14      	ite	ne
 8011e06:	2202      	movne	r2, #2
 8011e08:	2201      	moveq	r2, #1
 8011e0a:	6122      	str	r2, [r4, #16]
 8011e0c:	b1d5      	cbz	r5, 8011e44 <__d2b+0x98>
 8011e0e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011e12:	4405      	add	r5, r0
 8011e14:	f8c9 5000 	str.w	r5, [r9]
 8011e18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011e1c:	f8c8 0000 	str.w	r0, [r8]
 8011e20:	4620      	mov	r0, r4
 8011e22:	b003      	add	sp, #12
 8011e24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011e2c:	e7d5      	b.n	8011dda <__d2b+0x2e>
 8011e2e:	6161      	str	r1, [r4, #20]
 8011e30:	e7e5      	b.n	8011dfe <__d2b+0x52>
 8011e32:	a801      	add	r0, sp, #4
 8011e34:	f7ff fd64 	bl	8011900 <__lo0bits>
 8011e38:	9b01      	ldr	r3, [sp, #4]
 8011e3a:	6163      	str	r3, [r4, #20]
 8011e3c:	2201      	movs	r2, #1
 8011e3e:	6122      	str	r2, [r4, #16]
 8011e40:	3020      	adds	r0, #32
 8011e42:	e7e3      	b.n	8011e0c <__d2b+0x60>
 8011e44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011e48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011e4c:	f8c9 0000 	str.w	r0, [r9]
 8011e50:	6918      	ldr	r0, [r3, #16]
 8011e52:	f7ff fd35 	bl	80118c0 <__hi0bits>
 8011e56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011e5a:	e7df      	b.n	8011e1c <__d2b+0x70>
 8011e5c:	08012ff3 	.word	0x08012ff3
 8011e60:	08013064 	.word	0x08013064

08011e64 <_calloc_r>:
 8011e64:	b513      	push	{r0, r1, r4, lr}
 8011e66:	434a      	muls	r2, r1
 8011e68:	4611      	mov	r1, r2
 8011e6a:	9201      	str	r2, [sp, #4]
 8011e6c:	f000 f85a 	bl	8011f24 <_malloc_r>
 8011e70:	4604      	mov	r4, r0
 8011e72:	b118      	cbz	r0, 8011e7c <_calloc_r+0x18>
 8011e74:	9a01      	ldr	r2, [sp, #4]
 8011e76:	2100      	movs	r1, #0
 8011e78:	f7fd fe96 	bl	800fba8 <memset>
 8011e7c:	4620      	mov	r0, r4
 8011e7e:	b002      	add	sp, #8
 8011e80:	bd10      	pop	{r4, pc}
	...

08011e84 <_free_r>:
 8011e84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011e86:	2900      	cmp	r1, #0
 8011e88:	d048      	beq.n	8011f1c <_free_r+0x98>
 8011e8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e8e:	9001      	str	r0, [sp, #4]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	f1a1 0404 	sub.w	r4, r1, #4
 8011e96:	bfb8      	it	lt
 8011e98:	18e4      	addlt	r4, r4, r3
 8011e9a:	f000 fae3 	bl	8012464 <__malloc_lock>
 8011e9e:	4a20      	ldr	r2, [pc, #128]	; (8011f20 <_free_r+0x9c>)
 8011ea0:	9801      	ldr	r0, [sp, #4]
 8011ea2:	6813      	ldr	r3, [r2, #0]
 8011ea4:	4615      	mov	r5, r2
 8011ea6:	b933      	cbnz	r3, 8011eb6 <_free_r+0x32>
 8011ea8:	6063      	str	r3, [r4, #4]
 8011eaa:	6014      	str	r4, [r2, #0]
 8011eac:	b003      	add	sp, #12
 8011eae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011eb2:	f000 badd 	b.w	8012470 <__malloc_unlock>
 8011eb6:	42a3      	cmp	r3, r4
 8011eb8:	d90b      	bls.n	8011ed2 <_free_r+0x4e>
 8011eba:	6821      	ldr	r1, [r4, #0]
 8011ebc:	1862      	adds	r2, r4, r1
 8011ebe:	4293      	cmp	r3, r2
 8011ec0:	bf04      	itt	eq
 8011ec2:	681a      	ldreq	r2, [r3, #0]
 8011ec4:	685b      	ldreq	r3, [r3, #4]
 8011ec6:	6063      	str	r3, [r4, #4]
 8011ec8:	bf04      	itt	eq
 8011eca:	1852      	addeq	r2, r2, r1
 8011ecc:	6022      	streq	r2, [r4, #0]
 8011ece:	602c      	str	r4, [r5, #0]
 8011ed0:	e7ec      	b.n	8011eac <_free_r+0x28>
 8011ed2:	461a      	mov	r2, r3
 8011ed4:	685b      	ldr	r3, [r3, #4]
 8011ed6:	b10b      	cbz	r3, 8011edc <_free_r+0x58>
 8011ed8:	42a3      	cmp	r3, r4
 8011eda:	d9fa      	bls.n	8011ed2 <_free_r+0x4e>
 8011edc:	6811      	ldr	r1, [r2, #0]
 8011ede:	1855      	adds	r5, r2, r1
 8011ee0:	42a5      	cmp	r5, r4
 8011ee2:	d10b      	bne.n	8011efc <_free_r+0x78>
 8011ee4:	6824      	ldr	r4, [r4, #0]
 8011ee6:	4421      	add	r1, r4
 8011ee8:	1854      	adds	r4, r2, r1
 8011eea:	42a3      	cmp	r3, r4
 8011eec:	6011      	str	r1, [r2, #0]
 8011eee:	d1dd      	bne.n	8011eac <_free_r+0x28>
 8011ef0:	681c      	ldr	r4, [r3, #0]
 8011ef2:	685b      	ldr	r3, [r3, #4]
 8011ef4:	6053      	str	r3, [r2, #4]
 8011ef6:	4421      	add	r1, r4
 8011ef8:	6011      	str	r1, [r2, #0]
 8011efa:	e7d7      	b.n	8011eac <_free_r+0x28>
 8011efc:	d902      	bls.n	8011f04 <_free_r+0x80>
 8011efe:	230c      	movs	r3, #12
 8011f00:	6003      	str	r3, [r0, #0]
 8011f02:	e7d3      	b.n	8011eac <_free_r+0x28>
 8011f04:	6825      	ldr	r5, [r4, #0]
 8011f06:	1961      	adds	r1, r4, r5
 8011f08:	428b      	cmp	r3, r1
 8011f0a:	bf04      	itt	eq
 8011f0c:	6819      	ldreq	r1, [r3, #0]
 8011f0e:	685b      	ldreq	r3, [r3, #4]
 8011f10:	6063      	str	r3, [r4, #4]
 8011f12:	bf04      	itt	eq
 8011f14:	1949      	addeq	r1, r1, r5
 8011f16:	6021      	streq	r1, [r4, #0]
 8011f18:	6054      	str	r4, [r2, #4]
 8011f1a:	e7c7      	b.n	8011eac <_free_r+0x28>
 8011f1c:	b003      	add	sp, #12
 8011f1e:	bd30      	pop	{r4, r5, pc}
 8011f20:	24000238 	.word	0x24000238

08011f24 <_malloc_r>:
 8011f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f26:	1ccd      	adds	r5, r1, #3
 8011f28:	f025 0503 	bic.w	r5, r5, #3
 8011f2c:	3508      	adds	r5, #8
 8011f2e:	2d0c      	cmp	r5, #12
 8011f30:	bf38      	it	cc
 8011f32:	250c      	movcc	r5, #12
 8011f34:	2d00      	cmp	r5, #0
 8011f36:	4606      	mov	r6, r0
 8011f38:	db01      	blt.n	8011f3e <_malloc_r+0x1a>
 8011f3a:	42a9      	cmp	r1, r5
 8011f3c:	d903      	bls.n	8011f46 <_malloc_r+0x22>
 8011f3e:	230c      	movs	r3, #12
 8011f40:	6033      	str	r3, [r6, #0]
 8011f42:	2000      	movs	r0, #0
 8011f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f46:	f000 fa8d 	bl	8012464 <__malloc_lock>
 8011f4a:	4921      	ldr	r1, [pc, #132]	; (8011fd0 <_malloc_r+0xac>)
 8011f4c:	680a      	ldr	r2, [r1, #0]
 8011f4e:	4614      	mov	r4, r2
 8011f50:	b99c      	cbnz	r4, 8011f7a <_malloc_r+0x56>
 8011f52:	4f20      	ldr	r7, [pc, #128]	; (8011fd4 <_malloc_r+0xb0>)
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	b923      	cbnz	r3, 8011f62 <_malloc_r+0x3e>
 8011f58:	4621      	mov	r1, r4
 8011f5a:	4630      	mov	r0, r6
 8011f5c:	f000 f996 	bl	801228c <_sbrk_r>
 8011f60:	6038      	str	r0, [r7, #0]
 8011f62:	4629      	mov	r1, r5
 8011f64:	4630      	mov	r0, r6
 8011f66:	f000 f991 	bl	801228c <_sbrk_r>
 8011f6a:	1c43      	adds	r3, r0, #1
 8011f6c:	d123      	bne.n	8011fb6 <_malloc_r+0x92>
 8011f6e:	230c      	movs	r3, #12
 8011f70:	6033      	str	r3, [r6, #0]
 8011f72:	4630      	mov	r0, r6
 8011f74:	f000 fa7c 	bl	8012470 <__malloc_unlock>
 8011f78:	e7e3      	b.n	8011f42 <_malloc_r+0x1e>
 8011f7a:	6823      	ldr	r3, [r4, #0]
 8011f7c:	1b5b      	subs	r3, r3, r5
 8011f7e:	d417      	bmi.n	8011fb0 <_malloc_r+0x8c>
 8011f80:	2b0b      	cmp	r3, #11
 8011f82:	d903      	bls.n	8011f8c <_malloc_r+0x68>
 8011f84:	6023      	str	r3, [r4, #0]
 8011f86:	441c      	add	r4, r3
 8011f88:	6025      	str	r5, [r4, #0]
 8011f8a:	e004      	b.n	8011f96 <_malloc_r+0x72>
 8011f8c:	6863      	ldr	r3, [r4, #4]
 8011f8e:	42a2      	cmp	r2, r4
 8011f90:	bf0c      	ite	eq
 8011f92:	600b      	streq	r3, [r1, #0]
 8011f94:	6053      	strne	r3, [r2, #4]
 8011f96:	4630      	mov	r0, r6
 8011f98:	f000 fa6a 	bl	8012470 <__malloc_unlock>
 8011f9c:	f104 000b 	add.w	r0, r4, #11
 8011fa0:	1d23      	adds	r3, r4, #4
 8011fa2:	f020 0007 	bic.w	r0, r0, #7
 8011fa6:	1ac2      	subs	r2, r0, r3
 8011fa8:	d0cc      	beq.n	8011f44 <_malloc_r+0x20>
 8011faa:	1a1b      	subs	r3, r3, r0
 8011fac:	50a3      	str	r3, [r4, r2]
 8011fae:	e7c9      	b.n	8011f44 <_malloc_r+0x20>
 8011fb0:	4622      	mov	r2, r4
 8011fb2:	6864      	ldr	r4, [r4, #4]
 8011fb4:	e7cc      	b.n	8011f50 <_malloc_r+0x2c>
 8011fb6:	1cc4      	adds	r4, r0, #3
 8011fb8:	f024 0403 	bic.w	r4, r4, #3
 8011fbc:	42a0      	cmp	r0, r4
 8011fbe:	d0e3      	beq.n	8011f88 <_malloc_r+0x64>
 8011fc0:	1a21      	subs	r1, r4, r0
 8011fc2:	4630      	mov	r0, r6
 8011fc4:	f000 f962 	bl	801228c <_sbrk_r>
 8011fc8:	3001      	adds	r0, #1
 8011fca:	d1dd      	bne.n	8011f88 <_malloc_r+0x64>
 8011fcc:	e7cf      	b.n	8011f6e <_malloc_r+0x4a>
 8011fce:	bf00      	nop
 8011fd0:	24000238 	.word	0x24000238
 8011fd4:	2400023c 	.word	0x2400023c

08011fd8 <__sfputc_r>:
 8011fd8:	6893      	ldr	r3, [r2, #8]
 8011fda:	3b01      	subs	r3, #1
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	b410      	push	{r4}
 8011fe0:	6093      	str	r3, [r2, #8]
 8011fe2:	da08      	bge.n	8011ff6 <__sfputc_r+0x1e>
 8011fe4:	6994      	ldr	r4, [r2, #24]
 8011fe6:	42a3      	cmp	r3, r4
 8011fe8:	db01      	blt.n	8011fee <__sfputc_r+0x16>
 8011fea:	290a      	cmp	r1, #10
 8011fec:	d103      	bne.n	8011ff6 <__sfputc_r+0x1e>
 8011fee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ff2:	f7fe bab1 	b.w	8010558 <__swbuf_r>
 8011ff6:	6813      	ldr	r3, [r2, #0]
 8011ff8:	1c58      	adds	r0, r3, #1
 8011ffa:	6010      	str	r0, [r2, #0]
 8011ffc:	7019      	strb	r1, [r3, #0]
 8011ffe:	4608      	mov	r0, r1
 8012000:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012004:	4770      	bx	lr

08012006 <__sfputs_r>:
 8012006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012008:	4606      	mov	r6, r0
 801200a:	460f      	mov	r7, r1
 801200c:	4614      	mov	r4, r2
 801200e:	18d5      	adds	r5, r2, r3
 8012010:	42ac      	cmp	r4, r5
 8012012:	d101      	bne.n	8012018 <__sfputs_r+0x12>
 8012014:	2000      	movs	r0, #0
 8012016:	e007      	b.n	8012028 <__sfputs_r+0x22>
 8012018:	f814 1b01 	ldrb.w	r1, [r4], #1
 801201c:	463a      	mov	r2, r7
 801201e:	4630      	mov	r0, r6
 8012020:	f7ff ffda 	bl	8011fd8 <__sfputc_r>
 8012024:	1c43      	adds	r3, r0, #1
 8012026:	d1f3      	bne.n	8012010 <__sfputs_r+0xa>
 8012028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801202c <_vfiprintf_r>:
 801202c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012030:	460d      	mov	r5, r1
 8012032:	b09d      	sub	sp, #116	; 0x74
 8012034:	4614      	mov	r4, r2
 8012036:	4698      	mov	r8, r3
 8012038:	4606      	mov	r6, r0
 801203a:	b118      	cbz	r0, 8012044 <_vfiprintf_r+0x18>
 801203c:	6983      	ldr	r3, [r0, #24]
 801203e:	b90b      	cbnz	r3, 8012044 <_vfiprintf_r+0x18>
 8012040:	f7ff fa72 	bl	8011528 <__sinit>
 8012044:	4b89      	ldr	r3, [pc, #548]	; (801226c <_vfiprintf_r+0x240>)
 8012046:	429d      	cmp	r5, r3
 8012048:	d11b      	bne.n	8012082 <_vfiprintf_r+0x56>
 801204a:	6875      	ldr	r5, [r6, #4]
 801204c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801204e:	07d9      	lsls	r1, r3, #31
 8012050:	d405      	bmi.n	801205e <_vfiprintf_r+0x32>
 8012052:	89ab      	ldrh	r3, [r5, #12]
 8012054:	059a      	lsls	r2, r3, #22
 8012056:	d402      	bmi.n	801205e <_vfiprintf_r+0x32>
 8012058:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801205a:	f7ff fb08 	bl	801166e <__retarget_lock_acquire_recursive>
 801205e:	89ab      	ldrh	r3, [r5, #12]
 8012060:	071b      	lsls	r3, r3, #28
 8012062:	d501      	bpl.n	8012068 <_vfiprintf_r+0x3c>
 8012064:	692b      	ldr	r3, [r5, #16]
 8012066:	b9eb      	cbnz	r3, 80120a4 <_vfiprintf_r+0x78>
 8012068:	4629      	mov	r1, r5
 801206a:	4630      	mov	r0, r6
 801206c:	f7fe fac6 	bl	80105fc <__swsetup_r>
 8012070:	b1c0      	cbz	r0, 80120a4 <_vfiprintf_r+0x78>
 8012072:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012074:	07dc      	lsls	r4, r3, #31
 8012076:	d50e      	bpl.n	8012096 <_vfiprintf_r+0x6a>
 8012078:	f04f 30ff 	mov.w	r0, #4294967295
 801207c:	b01d      	add	sp, #116	; 0x74
 801207e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012082:	4b7b      	ldr	r3, [pc, #492]	; (8012270 <_vfiprintf_r+0x244>)
 8012084:	429d      	cmp	r5, r3
 8012086:	d101      	bne.n	801208c <_vfiprintf_r+0x60>
 8012088:	68b5      	ldr	r5, [r6, #8]
 801208a:	e7df      	b.n	801204c <_vfiprintf_r+0x20>
 801208c:	4b79      	ldr	r3, [pc, #484]	; (8012274 <_vfiprintf_r+0x248>)
 801208e:	429d      	cmp	r5, r3
 8012090:	bf08      	it	eq
 8012092:	68f5      	ldreq	r5, [r6, #12]
 8012094:	e7da      	b.n	801204c <_vfiprintf_r+0x20>
 8012096:	89ab      	ldrh	r3, [r5, #12]
 8012098:	0598      	lsls	r0, r3, #22
 801209a:	d4ed      	bmi.n	8012078 <_vfiprintf_r+0x4c>
 801209c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801209e:	f7ff fae7 	bl	8011670 <__retarget_lock_release_recursive>
 80120a2:	e7e9      	b.n	8012078 <_vfiprintf_r+0x4c>
 80120a4:	2300      	movs	r3, #0
 80120a6:	9309      	str	r3, [sp, #36]	; 0x24
 80120a8:	2320      	movs	r3, #32
 80120aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80120ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80120b2:	2330      	movs	r3, #48	; 0x30
 80120b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012278 <_vfiprintf_r+0x24c>
 80120b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80120bc:	f04f 0901 	mov.w	r9, #1
 80120c0:	4623      	mov	r3, r4
 80120c2:	469a      	mov	sl, r3
 80120c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120c8:	b10a      	cbz	r2, 80120ce <_vfiprintf_r+0xa2>
 80120ca:	2a25      	cmp	r2, #37	; 0x25
 80120cc:	d1f9      	bne.n	80120c2 <_vfiprintf_r+0x96>
 80120ce:	ebba 0b04 	subs.w	fp, sl, r4
 80120d2:	d00b      	beq.n	80120ec <_vfiprintf_r+0xc0>
 80120d4:	465b      	mov	r3, fp
 80120d6:	4622      	mov	r2, r4
 80120d8:	4629      	mov	r1, r5
 80120da:	4630      	mov	r0, r6
 80120dc:	f7ff ff93 	bl	8012006 <__sfputs_r>
 80120e0:	3001      	adds	r0, #1
 80120e2:	f000 80aa 	beq.w	801223a <_vfiprintf_r+0x20e>
 80120e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80120e8:	445a      	add	r2, fp
 80120ea:	9209      	str	r2, [sp, #36]	; 0x24
 80120ec:	f89a 3000 	ldrb.w	r3, [sl]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	f000 80a2 	beq.w	801223a <_vfiprintf_r+0x20e>
 80120f6:	2300      	movs	r3, #0
 80120f8:	f04f 32ff 	mov.w	r2, #4294967295
 80120fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012100:	f10a 0a01 	add.w	sl, sl, #1
 8012104:	9304      	str	r3, [sp, #16]
 8012106:	9307      	str	r3, [sp, #28]
 8012108:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801210c:	931a      	str	r3, [sp, #104]	; 0x68
 801210e:	4654      	mov	r4, sl
 8012110:	2205      	movs	r2, #5
 8012112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012116:	4858      	ldr	r0, [pc, #352]	; (8012278 <_vfiprintf_r+0x24c>)
 8012118:	f7ee f8ea 	bl	80002f0 <memchr>
 801211c:	9a04      	ldr	r2, [sp, #16]
 801211e:	b9d8      	cbnz	r0, 8012158 <_vfiprintf_r+0x12c>
 8012120:	06d1      	lsls	r1, r2, #27
 8012122:	bf44      	itt	mi
 8012124:	2320      	movmi	r3, #32
 8012126:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801212a:	0713      	lsls	r3, r2, #28
 801212c:	bf44      	itt	mi
 801212e:	232b      	movmi	r3, #43	; 0x2b
 8012130:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012134:	f89a 3000 	ldrb.w	r3, [sl]
 8012138:	2b2a      	cmp	r3, #42	; 0x2a
 801213a:	d015      	beq.n	8012168 <_vfiprintf_r+0x13c>
 801213c:	9a07      	ldr	r2, [sp, #28]
 801213e:	4654      	mov	r4, sl
 8012140:	2000      	movs	r0, #0
 8012142:	f04f 0c0a 	mov.w	ip, #10
 8012146:	4621      	mov	r1, r4
 8012148:	f811 3b01 	ldrb.w	r3, [r1], #1
 801214c:	3b30      	subs	r3, #48	; 0x30
 801214e:	2b09      	cmp	r3, #9
 8012150:	d94e      	bls.n	80121f0 <_vfiprintf_r+0x1c4>
 8012152:	b1b0      	cbz	r0, 8012182 <_vfiprintf_r+0x156>
 8012154:	9207      	str	r2, [sp, #28]
 8012156:	e014      	b.n	8012182 <_vfiprintf_r+0x156>
 8012158:	eba0 0308 	sub.w	r3, r0, r8
 801215c:	fa09 f303 	lsl.w	r3, r9, r3
 8012160:	4313      	orrs	r3, r2
 8012162:	9304      	str	r3, [sp, #16]
 8012164:	46a2      	mov	sl, r4
 8012166:	e7d2      	b.n	801210e <_vfiprintf_r+0xe2>
 8012168:	9b03      	ldr	r3, [sp, #12]
 801216a:	1d19      	adds	r1, r3, #4
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	9103      	str	r1, [sp, #12]
 8012170:	2b00      	cmp	r3, #0
 8012172:	bfbb      	ittet	lt
 8012174:	425b      	neglt	r3, r3
 8012176:	f042 0202 	orrlt.w	r2, r2, #2
 801217a:	9307      	strge	r3, [sp, #28]
 801217c:	9307      	strlt	r3, [sp, #28]
 801217e:	bfb8      	it	lt
 8012180:	9204      	strlt	r2, [sp, #16]
 8012182:	7823      	ldrb	r3, [r4, #0]
 8012184:	2b2e      	cmp	r3, #46	; 0x2e
 8012186:	d10c      	bne.n	80121a2 <_vfiprintf_r+0x176>
 8012188:	7863      	ldrb	r3, [r4, #1]
 801218a:	2b2a      	cmp	r3, #42	; 0x2a
 801218c:	d135      	bne.n	80121fa <_vfiprintf_r+0x1ce>
 801218e:	9b03      	ldr	r3, [sp, #12]
 8012190:	1d1a      	adds	r2, r3, #4
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	9203      	str	r2, [sp, #12]
 8012196:	2b00      	cmp	r3, #0
 8012198:	bfb8      	it	lt
 801219a:	f04f 33ff 	movlt.w	r3, #4294967295
 801219e:	3402      	adds	r4, #2
 80121a0:	9305      	str	r3, [sp, #20]
 80121a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012288 <_vfiprintf_r+0x25c>
 80121a6:	7821      	ldrb	r1, [r4, #0]
 80121a8:	2203      	movs	r2, #3
 80121aa:	4650      	mov	r0, sl
 80121ac:	f7ee f8a0 	bl	80002f0 <memchr>
 80121b0:	b140      	cbz	r0, 80121c4 <_vfiprintf_r+0x198>
 80121b2:	2340      	movs	r3, #64	; 0x40
 80121b4:	eba0 000a 	sub.w	r0, r0, sl
 80121b8:	fa03 f000 	lsl.w	r0, r3, r0
 80121bc:	9b04      	ldr	r3, [sp, #16]
 80121be:	4303      	orrs	r3, r0
 80121c0:	3401      	adds	r4, #1
 80121c2:	9304      	str	r3, [sp, #16]
 80121c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121c8:	482c      	ldr	r0, [pc, #176]	; (801227c <_vfiprintf_r+0x250>)
 80121ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80121ce:	2206      	movs	r2, #6
 80121d0:	f7ee f88e 	bl	80002f0 <memchr>
 80121d4:	2800      	cmp	r0, #0
 80121d6:	d03f      	beq.n	8012258 <_vfiprintf_r+0x22c>
 80121d8:	4b29      	ldr	r3, [pc, #164]	; (8012280 <_vfiprintf_r+0x254>)
 80121da:	bb1b      	cbnz	r3, 8012224 <_vfiprintf_r+0x1f8>
 80121dc:	9b03      	ldr	r3, [sp, #12]
 80121de:	3307      	adds	r3, #7
 80121e0:	f023 0307 	bic.w	r3, r3, #7
 80121e4:	3308      	adds	r3, #8
 80121e6:	9303      	str	r3, [sp, #12]
 80121e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121ea:	443b      	add	r3, r7
 80121ec:	9309      	str	r3, [sp, #36]	; 0x24
 80121ee:	e767      	b.n	80120c0 <_vfiprintf_r+0x94>
 80121f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80121f4:	460c      	mov	r4, r1
 80121f6:	2001      	movs	r0, #1
 80121f8:	e7a5      	b.n	8012146 <_vfiprintf_r+0x11a>
 80121fa:	2300      	movs	r3, #0
 80121fc:	3401      	adds	r4, #1
 80121fe:	9305      	str	r3, [sp, #20]
 8012200:	4619      	mov	r1, r3
 8012202:	f04f 0c0a 	mov.w	ip, #10
 8012206:	4620      	mov	r0, r4
 8012208:	f810 2b01 	ldrb.w	r2, [r0], #1
 801220c:	3a30      	subs	r2, #48	; 0x30
 801220e:	2a09      	cmp	r2, #9
 8012210:	d903      	bls.n	801221a <_vfiprintf_r+0x1ee>
 8012212:	2b00      	cmp	r3, #0
 8012214:	d0c5      	beq.n	80121a2 <_vfiprintf_r+0x176>
 8012216:	9105      	str	r1, [sp, #20]
 8012218:	e7c3      	b.n	80121a2 <_vfiprintf_r+0x176>
 801221a:	fb0c 2101 	mla	r1, ip, r1, r2
 801221e:	4604      	mov	r4, r0
 8012220:	2301      	movs	r3, #1
 8012222:	e7f0      	b.n	8012206 <_vfiprintf_r+0x1da>
 8012224:	ab03      	add	r3, sp, #12
 8012226:	9300      	str	r3, [sp, #0]
 8012228:	462a      	mov	r2, r5
 801222a:	4b16      	ldr	r3, [pc, #88]	; (8012284 <_vfiprintf_r+0x258>)
 801222c:	a904      	add	r1, sp, #16
 801222e:	4630      	mov	r0, r6
 8012230:	f7fd fd52 	bl	800fcd8 <_printf_float>
 8012234:	4607      	mov	r7, r0
 8012236:	1c78      	adds	r0, r7, #1
 8012238:	d1d6      	bne.n	80121e8 <_vfiprintf_r+0x1bc>
 801223a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801223c:	07d9      	lsls	r1, r3, #31
 801223e:	d405      	bmi.n	801224c <_vfiprintf_r+0x220>
 8012240:	89ab      	ldrh	r3, [r5, #12]
 8012242:	059a      	lsls	r2, r3, #22
 8012244:	d402      	bmi.n	801224c <_vfiprintf_r+0x220>
 8012246:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012248:	f7ff fa12 	bl	8011670 <__retarget_lock_release_recursive>
 801224c:	89ab      	ldrh	r3, [r5, #12]
 801224e:	065b      	lsls	r3, r3, #25
 8012250:	f53f af12 	bmi.w	8012078 <_vfiprintf_r+0x4c>
 8012254:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012256:	e711      	b.n	801207c <_vfiprintf_r+0x50>
 8012258:	ab03      	add	r3, sp, #12
 801225a:	9300      	str	r3, [sp, #0]
 801225c:	462a      	mov	r2, r5
 801225e:	4b09      	ldr	r3, [pc, #36]	; (8012284 <_vfiprintf_r+0x258>)
 8012260:	a904      	add	r1, sp, #16
 8012262:	4630      	mov	r0, r6
 8012264:	f7fd ffc4 	bl	80101f0 <_printf_i>
 8012268:	e7e4      	b.n	8012234 <_vfiprintf_r+0x208>
 801226a:	bf00      	nop
 801226c:	08013024 	.word	0x08013024
 8012270:	08013044 	.word	0x08013044
 8012274:	08013004 	.word	0x08013004
 8012278:	080131c4 	.word	0x080131c4
 801227c:	080131ce 	.word	0x080131ce
 8012280:	0800fcd9 	.word	0x0800fcd9
 8012284:	08012007 	.word	0x08012007
 8012288:	080131ca 	.word	0x080131ca

0801228c <_sbrk_r>:
 801228c:	b538      	push	{r3, r4, r5, lr}
 801228e:	4d06      	ldr	r5, [pc, #24]	; (80122a8 <_sbrk_r+0x1c>)
 8012290:	2300      	movs	r3, #0
 8012292:	4604      	mov	r4, r0
 8012294:	4608      	mov	r0, r1
 8012296:	602b      	str	r3, [r5, #0]
 8012298:	f7f1 fb48 	bl	800392c <_sbrk>
 801229c:	1c43      	adds	r3, r0, #1
 801229e:	d102      	bne.n	80122a6 <_sbrk_r+0x1a>
 80122a0:	682b      	ldr	r3, [r5, #0]
 80122a2:	b103      	cbz	r3, 80122a6 <_sbrk_r+0x1a>
 80122a4:	6023      	str	r3, [r4, #0]
 80122a6:	bd38      	pop	{r3, r4, r5, pc}
 80122a8:	240005c0 	.word	0x240005c0

080122ac <__sread>:
 80122ac:	b510      	push	{r4, lr}
 80122ae:	460c      	mov	r4, r1
 80122b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122b4:	f000 f8e2 	bl	801247c <_read_r>
 80122b8:	2800      	cmp	r0, #0
 80122ba:	bfab      	itete	ge
 80122bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80122be:	89a3      	ldrhlt	r3, [r4, #12]
 80122c0:	181b      	addge	r3, r3, r0
 80122c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80122c6:	bfac      	ite	ge
 80122c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80122ca:	81a3      	strhlt	r3, [r4, #12]
 80122cc:	bd10      	pop	{r4, pc}

080122ce <__swrite>:
 80122ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122d2:	461f      	mov	r7, r3
 80122d4:	898b      	ldrh	r3, [r1, #12]
 80122d6:	05db      	lsls	r3, r3, #23
 80122d8:	4605      	mov	r5, r0
 80122da:	460c      	mov	r4, r1
 80122dc:	4616      	mov	r6, r2
 80122de:	d505      	bpl.n	80122ec <__swrite+0x1e>
 80122e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122e4:	2302      	movs	r3, #2
 80122e6:	2200      	movs	r2, #0
 80122e8:	f000 f898 	bl	801241c <_lseek_r>
 80122ec:	89a3      	ldrh	r3, [r4, #12]
 80122ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80122f6:	81a3      	strh	r3, [r4, #12]
 80122f8:	4632      	mov	r2, r6
 80122fa:	463b      	mov	r3, r7
 80122fc:	4628      	mov	r0, r5
 80122fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012302:	f000 b817 	b.w	8012334 <_write_r>

08012306 <__sseek>:
 8012306:	b510      	push	{r4, lr}
 8012308:	460c      	mov	r4, r1
 801230a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801230e:	f000 f885 	bl	801241c <_lseek_r>
 8012312:	1c43      	adds	r3, r0, #1
 8012314:	89a3      	ldrh	r3, [r4, #12]
 8012316:	bf15      	itete	ne
 8012318:	6560      	strne	r0, [r4, #84]	; 0x54
 801231a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801231e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012322:	81a3      	strheq	r3, [r4, #12]
 8012324:	bf18      	it	ne
 8012326:	81a3      	strhne	r3, [r4, #12]
 8012328:	bd10      	pop	{r4, pc}

0801232a <__sclose>:
 801232a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801232e:	f000 b831 	b.w	8012394 <_close_r>
	...

08012334 <_write_r>:
 8012334:	b538      	push	{r3, r4, r5, lr}
 8012336:	4d07      	ldr	r5, [pc, #28]	; (8012354 <_write_r+0x20>)
 8012338:	4604      	mov	r4, r0
 801233a:	4608      	mov	r0, r1
 801233c:	4611      	mov	r1, r2
 801233e:	2200      	movs	r2, #0
 8012340:	602a      	str	r2, [r5, #0]
 8012342:	461a      	mov	r2, r3
 8012344:	f7f0 fb60 	bl	8002a08 <_write>
 8012348:	1c43      	adds	r3, r0, #1
 801234a:	d102      	bne.n	8012352 <_write_r+0x1e>
 801234c:	682b      	ldr	r3, [r5, #0]
 801234e:	b103      	cbz	r3, 8012352 <_write_r+0x1e>
 8012350:	6023      	str	r3, [r4, #0]
 8012352:	bd38      	pop	{r3, r4, r5, pc}
 8012354:	240005c0 	.word	0x240005c0

08012358 <__assert_func>:
 8012358:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801235a:	4614      	mov	r4, r2
 801235c:	461a      	mov	r2, r3
 801235e:	4b09      	ldr	r3, [pc, #36]	; (8012384 <__assert_func+0x2c>)
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	4605      	mov	r5, r0
 8012364:	68d8      	ldr	r0, [r3, #12]
 8012366:	b14c      	cbz	r4, 801237c <__assert_func+0x24>
 8012368:	4b07      	ldr	r3, [pc, #28]	; (8012388 <__assert_func+0x30>)
 801236a:	9100      	str	r1, [sp, #0]
 801236c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012370:	4906      	ldr	r1, [pc, #24]	; (801238c <__assert_func+0x34>)
 8012372:	462b      	mov	r3, r5
 8012374:	f000 f81e 	bl	80123b4 <fiprintf>
 8012378:	f000 f89f 	bl	80124ba <abort>
 801237c:	4b04      	ldr	r3, [pc, #16]	; (8012390 <__assert_func+0x38>)
 801237e:	461c      	mov	r4, r3
 8012380:	e7f3      	b.n	801236a <__assert_func+0x12>
 8012382:	bf00      	nop
 8012384:	24000024 	.word	0x24000024
 8012388:	080131d5 	.word	0x080131d5
 801238c:	080131e2 	.word	0x080131e2
 8012390:	08013210 	.word	0x08013210

08012394 <_close_r>:
 8012394:	b538      	push	{r3, r4, r5, lr}
 8012396:	4d06      	ldr	r5, [pc, #24]	; (80123b0 <_close_r+0x1c>)
 8012398:	2300      	movs	r3, #0
 801239a:	4604      	mov	r4, r0
 801239c:	4608      	mov	r0, r1
 801239e:	602b      	str	r3, [r5, #0]
 80123a0:	f7f1 fa8f 	bl	80038c2 <_close>
 80123a4:	1c43      	adds	r3, r0, #1
 80123a6:	d102      	bne.n	80123ae <_close_r+0x1a>
 80123a8:	682b      	ldr	r3, [r5, #0]
 80123aa:	b103      	cbz	r3, 80123ae <_close_r+0x1a>
 80123ac:	6023      	str	r3, [r4, #0]
 80123ae:	bd38      	pop	{r3, r4, r5, pc}
 80123b0:	240005c0 	.word	0x240005c0

080123b4 <fiprintf>:
 80123b4:	b40e      	push	{r1, r2, r3}
 80123b6:	b503      	push	{r0, r1, lr}
 80123b8:	4601      	mov	r1, r0
 80123ba:	ab03      	add	r3, sp, #12
 80123bc:	4805      	ldr	r0, [pc, #20]	; (80123d4 <fiprintf+0x20>)
 80123be:	f853 2b04 	ldr.w	r2, [r3], #4
 80123c2:	6800      	ldr	r0, [r0, #0]
 80123c4:	9301      	str	r3, [sp, #4]
 80123c6:	f7ff fe31 	bl	801202c <_vfiprintf_r>
 80123ca:	b002      	add	sp, #8
 80123cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80123d0:	b003      	add	sp, #12
 80123d2:	4770      	bx	lr
 80123d4:	24000024 	.word	0x24000024

080123d8 <_fstat_r>:
 80123d8:	b538      	push	{r3, r4, r5, lr}
 80123da:	4d07      	ldr	r5, [pc, #28]	; (80123f8 <_fstat_r+0x20>)
 80123dc:	2300      	movs	r3, #0
 80123de:	4604      	mov	r4, r0
 80123e0:	4608      	mov	r0, r1
 80123e2:	4611      	mov	r1, r2
 80123e4:	602b      	str	r3, [r5, #0]
 80123e6:	f7f1 fa78 	bl	80038da <_fstat>
 80123ea:	1c43      	adds	r3, r0, #1
 80123ec:	d102      	bne.n	80123f4 <_fstat_r+0x1c>
 80123ee:	682b      	ldr	r3, [r5, #0]
 80123f0:	b103      	cbz	r3, 80123f4 <_fstat_r+0x1c>
 80123f2:	6023      	str	r3, [r4, #0]
 80123f4:	bd38      	pop	{r3, r4, r5, pc}
 80123f6:	bf00      	nop
 80123f8:	240005c0 	.word	0x240005c0

080123fc <_isatty_r>:
 80123fc:	b538      	push	{r3, r4, r5, lr}
 80123fe:	4d06      	ldr	r5, [pc, #24]	; (8012418 <_isatty_r+0x1c>)
 8012400:	2300      	movs	r3, #0
 8012402:	4604      	mov	r4, r0
 8012404:	4608      	mov	r0, r1
 8012406:	602b      	str	r3, [r5, #0]
 8012408:	f7f1 fa77 	bl	80038fa <_isatty>
 801240c:	1c43      	adds	r3, r0, #1
 801240e:	d102      	bne.n	8012416 <_isatty_r+0x1a>
 8012410:	682b      	ldr	r3, [r5, #0]
 8012412:	b103      	cbz	r3, 8012416 <_isatty_r+0x1a>
 8012414:	6023      	str	r3, [r4, #0]
 8012416:	bd38      	pop	{r3, r4, r5, pc}
 8012418:	240005c0 	.word	0x240005c0

0801241c <_lseek_r>:
 801241c:	b538      	push	{r3, r4, r5, lr}
 801241e:	4d07      	ldr	r5, [pc, #28]	; (801243c <_lseek_r+0x20>)
 8012420:	4604      	mov	r4, r0
 8012422:	4608      	mov	r0, r1
 8012424:	4611      	mov	r1, r2
 8012426:	2200      	movs	r2, #0
 8012428:	602a      	str	r2, [r5, #0]
 801242a:	461a      	mov	r2, r3
 801242c:	f7f1 fa70 	bl	8003910 <_lseek>
 8012430:	1c43      	adds	r3, r0, #1
 8012432:	d102      	bne.n	801243a <_lseek_r+0x1e>
 8012434:	682b      	ldr	r3, [r5, #0]
 8012436:	b103      	cbz	r3, 801243a <_lseek_r+0x1e>
 8012438:	6023      	str	r3, [r4, #0]
 801243a:	bd38      	pop	{r3, r4, r5, pc}
 801243c:	240005c0 	.word	0x240005c0

08012440 <__ascii_mbtowc>:
 8012440:	b082      	sub	sp, #8
 8012442:	b901      	cbnz	r1, 8012446 <__ascii_mbtowc+0x6>
 8012444:	a901      	add	r1, sp, #4
 8012446:	b142      	cbz	r2, 801245a <__ascii_mbtowc+0x1a>
 8012448:	b14b      	cbz	r3, 801245e <__ascii_mbtowc+0x1e>
 801244a:	7813      	ldrb	r3, [r2, #0]
 801244c:	600b      	str	r3, [r1, #0]
 801244e:	7812      	ldrb	r2, [r2, #0]
 8012450:	1e10      	subs	r0, r2, #0
 8012452:	bf18      	it	ne
 8012454:	2001      	movne	r0, #1
 8012456:	b002      	add	sp, #8
 8012458:	4770      	bx	lr
 801245a:	4610      	mov	r0, r2
 801245c:	e7fb      	b.n	8012456 <__ascii_mbtowc+0x16>
 801245e:	f06f 0001 	mvn.w	r0, #1
 8012462:	e7f8      	b.n	8012456 <__ascii_mbtowc+0x16>

08012464 <__malloc_lock>:
 8012464:	4801      	ldr	r0, [pc, #4]	; (801246c <__malloc_lock+0x8>)
 8012466:	f7ff b902 	b.w	801166e <__retarget_lock_acquire_recursive>
 801246a:	bf00      	nop
 801246c:	240005b8 	.word	0x240005b8

08012470 <__malloc_unlock>:
 8012470:	4801      	ldr	r0, [pc, #4]	; (8012478 <__malloc_unlock+0x8>)
 8012472:	f7ff b8fd 	b.w	8011670 <__retarget_lock_release_recursive>
 8012476:	bf00      	nop
 8012478:	240005b8 	.word	0x240005b8

0801247c <_read_r>:
 801247c:	b538      	push	{r3, r4, r5, lr}
 801247e:	4d07      	ldr	r5, [pc, #28]	; (801249c <_read_r+0x20>)
 8012480:	4604      	mov	r4, r0
 8012482:	4608      	mov	r0, r1
 8012484:	4611      	mov	r1, r2
 8012486:	2200      	movs	r2, #0
 8012488:	602a      	str	r2, [r5, #0]
 801248a:	461a      	mov	r2, r3
 801248c:	f7f1 f9fc 	bl	8003888 <_read>
 8012490:	1c43      	adds	r3, r0, #1
 8012492:	d102      	bne.n	801249a <_read_r+0x1e>
 8012494:	682b      	ldr	r3, [r5, #0]
 8012496:	b103      	cbz	r3, 801249a <_read_r+0x1e>
 8012498:	6023      	str	r3, [r4, #0]
 801249a:	bd38      	pop	{r3, r4, r5, pc}
 801249c:	240005c0 	.word	0x240005c0

080124a0 <__ascii_wctomb>:
 80124a0:	b149      	cbz	r1, 80124b6 <__ascii_wctomb+0x16>
 80124a2:	2aff      	cmp	r2, #255	; 0xff
 80124a4:	bf85      	ittet	hi
 80124a6:	238a      	movhi	r3, #138	; 0x8a
 80124a8:	6003      	strhi	r3, [r0, #0]
 80124aa:	700a      	strbls	r2, [r1, #0]
 80124ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80124b0:	bf98      	it	ls
 80124b2:	2001      	movls	r0, #1
 80124b4:	4770      	bx	lr
 80124b6:	4608      	mov	r0, r1
 80124b8:	4770      	bx	lr

080124ba <abort>:
 80124ba:	b508      	push	{r3, lr}
 80124bc:	2006      	movs	r0, #6
 80124be:	f000 f82b 	bl	8012518 <raise>
 80124c2:	2001      	movs	r0, #1
 80124c4:	f7f1 f9d6 	bl	8003874 <_exit>

080124c8 <_raise_r>:
 80124c8:	291f      	cmp	r1, #31
 80124ca:	b538      	push	{r3, r4, r5, lr}
 80124cc:	4604      	mov	r4, r0
 80124ce:	460d      	mov	r5, r1
 80124d0:	d904      	bls.n	80124dc <_raise_r+0x14>
 80124d2:	2316      	movs	r3, #22
 80124d4:	6003      	str	r3, [r0, #0]
 80124d6:	f04f 30ff 	mov.w	r0, #4294967295
 80124da:	bd38      	pop	{r3, r4, r5, pc}
 80124dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80124de:	b112      	cbz	r2, 80124e6 <_raise_r+0x1e>
 80124e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80124e4:	b94b      	cbnz	r3, 80124fa <_raise_r+0x32>
 80124e6:	4620      	mov	r0, r4
 80124e8:	f000 f830 	bl	801254c <_getpid_r>
 80124ec:	462a      	mov	r2, r5
 80124ee:	4601      	mov	r1, r0
 80124f0:	4620      	mov	r0, r4
 80124f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124f6:	f000 b817 	b.w	8012528 <_kill_r>
 80124fa:	2b01      	cmp	r3, #1
 80124fc:	d00a      	beq.n	8012514 <_raise_r+0x4c>
 80124fe:	1c59      	adds	r1, r3, #1
 8012500:	d103      	bne.n	801250a <_raise_r+0x42>
 8012502:	2316      	movs	r3, #22
 8012504:	6003      	str	r3, [r0, #0]
 8012506:	2001      	movs	r0, #1
 8012508:	e7e7      	b.n	80124da <_raise_r+0x12>
 801250a:	2400      	movs	r4, #0
 801250c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012510:	4628      	mov	r0, r5
 8012512:	4798      	blx	r3
 8012514:	2000      	movs	r0, #0
 8012516:	e7e0      	b.n	80124da <_raise_r+0x12>

08012518 <raise>:
 8012518:	4b02      	ldr	r3, [pc, #8]	; (8012524 <raise+0xc>)
 801251a:	4601      	mov	r1, r0
 801251c:	6818      	ldr	r0, [r3, #0]
 801251e:	f7ff bfd3 	b.w	80124c8 <_raise_r>
 8012522:	bf00      	nop
 8012524:	24000024 	.word	0x24000024

08012528 <_kill_r>:
 8012528:	b538      	push	{r3, r4, r5, lr}
 801252a:	4d07      	ldr	r5, [pc, #28]	; (8012548 <_kill_r+0x20>)
 801252c:	2300      	movs	r3, #0
 801252e:	4604      	mov	r4, r0
 8012530:	4608      	mov	r0, r1
 8012532:	4611      	mov	r1, r2
 8012534:	602b      	str	r3, [r5, #0]
 8012536:	f7f1 f98d 	bl	8003854 <_kill>
 801253a:	1c43      	adds	r3, r0, #1
 801253c:	d102      	bne.n	8012544 <_kill_r+0x1c>
 801253e:	682b      	ldr	r3, [r5, #0]
 8012540:	b103      	cbz	r3, 8012544 <_kill_r+0x1c>
 8012542:	6023      	str	r3, [r4, #0]
 8012544:	bd38      	pop	{r3, r4, r5, pc}
 8012546:	bf00      	nop
 8012548:	240005c0 	.word	0x240005c0

0801254c <_getpid_r>:
 801254c:	f7f1 b97a 	b.w	8003844 <_getpid>

08012550 <atan2>:
 8012550:	f000 b862 	b.w	8012618 <__ieee754_atan2>
 8012554:	0000      	movs	r0, r0
	...

08012558 <sqrt>:
 8012558:	b508      	push	{r3, lr}
 801255a:	ed2d 8b04 	vpush	{d8-d9}
 801255e:	eeb0 8b40 	vmov.f64	d8, d0
 8012562:	f000 f927 	bl	80127b4 <__ieee754_sqrt>
 8012566:	4b10      	ldr	r3, [pc, #64]	; (80125a8 <sqrt+0x50>)
 8012568:	f993 3000 	ldrsb.w	r3, [r3]
 801256c:	3301      	adds	r3, #1
 801256e:	d011      	beq.n	8012594 <sqrt+0x3c>
 8012570:	eeb4 8b48 	vcmp.f64	d8, d8
 8012574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012578:	d60c      	bvs.n	8012594 <sqrt+0x3c>
 801257a:	ed9f 9b09 	vldr	d9, [pc, #36]	; 80125a0 <sqrt+0x48>
 801257e:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8012582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012586:	d505      	bpl.n	8012594 <sqrt+0x3c>
 8012588:	f7fd fae4 	bl	800fb54 <__errno>
 801258c:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8012590:	2321      	movs	r3, #33	; 0x21
 8012592:	6003      	str	r3, [r0, #0]
 8012594:	ecbd 8b04 	vpop	{d8-d9}
 8012598:	bd08      	pop	{r3, pc}
 801259a:	bf00      	nop
 801259c:	f3af 8000 	nop.w
	...
 80125a8:	240001f4 	.word	0x240001f4

080125ac <asinf>:
 80125ac:	b508      	push	{r3, lr}
 80125ae:	ed2d 8b02 	vpush	{d8}
 80125b2:	eeb0 8a40 	vmov.f32	s16, s0
 80125b6:	f000 f901 	bl	80127bc <__ieee754_asinf>
 80125ba:	4b13      	ldr	r3, [pc, #76]	; (8012608 <asinf+0x5c>)
 80125bc:	f993 3000 	ldrsb.w	r3, [r3]
 80125c0:	3301      	adds	r3, #1
 80125c2:	eef0 8a40 	vmov.f32	s17, s0
 80125c6:	d01a      	beq.n	80125fe <asinf+0x52>
 80125c8:	eeb4 8a48 	vcmp.f32	s16, s16
 80125cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125d0:	d615      	bvs.n	80125fe <asinf+0x52>
 80125d2:	eeb0 0a48 	vmov.f32	s0, s16
 80125d6:	f000 fc53 	bl	8012e80 <fabsf>
 80125da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80125de:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80125e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125e6:	dd0a      	ble.n	80125fe <asinf+0x52>
 80125e8:	f7fd fab4 	bl	800fb54 <__errno>
 80125ec:	ecbd 8b02 	vpop	{d8}
 80125f0:	2321      	movs	r3, #33	; 0x21
 80125f2:	6003      	str	r3, [r0, #0]
 80125f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80125f8:	4804      	ldr	r0, [pc, #16]	; (801260c <asinf+0x60>)
 80125fa:	f000 bc49 	b.w	8012e90 <nanf>
 80125fe:	eeb0 0a68 	vmov.f32	s0, s17
 8012602:	ecbd 8b02 	vpop	{d8}
 8012606:	bd08      	pop	{r3, pc}
 8012608:	240001f4 	.word	0x240001f4
 801260c:	08013210 	.word	0x08013210

08012610 <atan2f>:
 8012610:	f000 b9ba 	b.w	8012988 <__ieee754_atan2f>
 8012614:	0000      	movs	r0, r0
	...

08012618 <__ieee754_atan2>:
 8012618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801261a:	ee11 6a10 	vmov	r6, s2
 801261e:	ee11 0a90 	vmov	r0, s3
 8012622:	4273      	negs	r3, r6
 8012624:	4f60      	ldr	r7, [pc, #384]	; (80127a8 <__ieee754_atan2+0x190>)
 8012626:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 801262a:	4333      	orrs	r3, r6
 801262c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8012630:	42bb      	cmp	r3, r7
 8012632:	ed8d 0b00 	vstr	d0, [sp]
 8012636:	d80b      	bhi.n	8012650 <__ieee754_atan2+0x38>
 8012638:	e9dd c500 	ldrd	ip, r5, [sp]
 801263c:	f1cc 0100 	rsb	r1, ip, #0
 8012640:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012644:	ea41 010c 	orr.w	r1, r1, ip
 8012648:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 801264c:	42b9      	cmp	r1, r7
 801264e:	d906      	bls.n	801265e <__ieee754_atan2+0x46>
 8012650:	ed9d 7b00 	vldr	d7, [sp]
 8012654:	ee37 7b01 	vadd.f64	d7, d7, d1
 8012658:	ed8d 7b00 	vstr	d7, [sp]
 801265c:	e054      	b.n	8012708 <__ieee754_atan2+0xf0>
 801265e:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 8012662:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8012666:	4331      	orrs	r1, r6
 8012668:	d104      	bne.n	8012674 <__ieee754_atan2+0x5c>
 801266a:	b003      	add	sp, #12
 801266c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012670:	f000 ba2e 	b.w	8012ad0 <atan>
 8012674:	1784      	asrs	r4, r0, #30
 8012676:	f004 0402 	and.w	r4, r4, #2
 801267a:	ea53 010c 	orrs.w	r1, r3, ip
 801267e:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8012682:	d109      	bne.n	8012698 <__ieee754_atan2+0x80>
 8012684:	2c02      	cmp	r4, #2
 8012686:	d069      	beq.n	801275c <__ieee754_atan2+0x144>
 8012688:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8012770 <__ieee754_atan2+0x158>
 801268c:	ed9d 6b00 	vldr	d6, [sp]
 8012690:	2c03      	cmp	r4, #3
 8012692:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8012696:	e7df      	b.n	8012658 <__ieee754_atan2+0x40>
 8012698:	ea52 0106 	orrs.w	r1, r2, r6
 801269c:	d107      	bne.n	80126ae <__ieee754_atan2+0x96>
 801269e:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8012778 <__ieee754_atan2+0x160>
 80126a2:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8012780 <__ieee754_atan2+0x168>
 80126a6:	2d00      	cmp	r5, #0
 80126a8:	fe26 7b07 	vselge.f64	d7, d6, d7
 80126ac:	e7d4      	b.n	8012658 <__ieee754_atan2+0x40>
 80126ae:	42ba      	cmp	r2, r7
 80126b0:	d10f      	bne.n	80126d2 <__ieee754_atan2+0xba>
 80126b2:	4293      	cmp	r3, r2
 80126b4:	f104 34ff 	add.w	r4, r4, #4294967295
 80126b8:	d107      	bne.n	80126ca <__ieee754_atan2+0xb2>
 80126ba:	2c02      	cmp	r4, #2
 80126bc:	d851      	bhi.n	8012762 <__ieee754_atan2+0x14a>
 80126be:	4b3b      	ldr	r3, [pc, #236]	; (80127ac <__ieee754_atan2+0x194>)
 80126c0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80126c4:	ed94 7b00 	vldr	d7, [r4]
 80126c8:	e7c6      	b.n	8012658 <__ieee754_atan2+0x40>
 80126ca:	2c02      	cmp	r4, #2
 80126cc:	d84c      	bhi.n	8012768 <__ieee754_atan2+0x150>
 80126ce:	4b38      	ldr	r3, [pc, #224]	; (80127b0 <__ieee754_atan2+0x198>)
 80126d0:	e7f6      	b.n	80126c0 <__ieee754_atan2+0xa8>
 80126d2:	42bb      	cmp	r3, r7
 80126d4:	d0e3      	beq.n	801269e <__ieee754_atan2+0x86>
 80126d6:	1a9b      	subs	r3, r3, r2
 80126d8:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80126dc:	ea4f 5223 	mov.w	r2, r3, asr #20
 80126e0:	da16      	bge.n	8012710 <__ieee754_atan2+0xf8>
 80126e2:	2800      	cmp	r0, #0
 80126e4:	da01      	bge.n	80126ea <__ieee754_atan2+0xd2>
 80126e6:	323c      	adds	r2, #60	; 0x3c
 80126e8:	db17      	blt.n	801271a <__ieee754_atan2+0x102>
 80126ea:	ed9d 7b00 	vldr	d7, [sp]
 80126ee:	ee87 0b01 	vdiv.f64	d0, d7, d1
 80126f2:	f000 fae7 	bl	8012cc4 <fabs>
 80126f6:	f000 f9eb 	bl	8012ad0 <atan>
 80126fa:	ed8d 0b00 	vstr	d0, [sp]
 80126fe:	2c01      	cmp	r4, #1
 8012700:	d00e      	beq.n	8012720 <__ieee754_atan2+0x108>
 8012702:	2c02      	cmp	r4, #2
 8012704:	d014      	beq.n	8012730 <__ieee754_atan2+0x118>
 8012706:	b9f4      	cbnz	r4, 8012746 <__ieee754_atan2+0x12e>
 8012708:	ed9d 0b00 	vldr	d0, [sp]
 801270c:	b003      	add	sp, #12
 801270e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012710:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8012778 <__ieee754_atan2+0x160>
 8012714:	ed8d 7b00 	vstr	d7, [sp]
 8012718:	e7f1      	b.n	80126fe <__ieee754_atan2+0xe6>
 801271a:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8012788 <__ieee754_atan2+0x170>
 801271e:	e7f9      	b.n	8012714 <__ieee754_atan2+0xfc>
 8012720:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012724:	9901      	ldr	r1, [sp, #4]
 8012726:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801272a:	e9cd 2300 	strd	r2, r3, [sp]
 801272e:	e7eb      	b.n	8012708 <__ieee754_atan2+0xf0>
 8012730:	ed9d 6b00 	vldr	d6, [sp]
 8012734:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8012790 <__ieee754_atan2+0x178>
 8012738:	ee36 7b47 	vsub.f64	d7, d6, d7
 801273c:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8012798 <__ieee754_atan2+0x180>
 8012740:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012744:	e788      	b.n	8012658 <__ieee754_atan2+0x40>
 8012746:	ed9d 6b00 	vldr	d6, [sp]
 801274a:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8012790 <__ieee754_atan2+0x178>
 801274e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012752:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8012798 <__ieee754_atan2+0x180>
 8012756:	ee37 7b46 	vsub.f64	d7, d7, d6
 801275a:	e77d      	b.n	8012658 <__ieee754_atan2+0x40>
 801275c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8012798 <__ieee754_atan2+0x180>
 8012760:	e77a      	b.n	8012658 <__ieee754_atan2+0x40>
 8012762:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80127a0 <__ieee754_atan2+0x188>
 8012766:	e777      	b.n	8012658 <__ieee754_atan2+0x40>
 8012768:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8012788 <__ieee754_atan2+0x170>
 801276c:	e774      	b.n	8012658 <__ieee754_atan2+0x40>
 801276e:	bf00      	nop
 8012770:	54442d18 	.word	0x54442d18
 8012774:	c00921fb 	.word	0xc00921fb
 8012778:	54442d18 	.word	0x54442d18
 801277c:	3ff921fb 	.word	0x3ff921fb
 8012780:	54442d18 	.word	0x54442d18
 8012784:	bff921fb 	.word	0xbff921fb
	...
 8012790:	33145c07 	.word	0x33145c07
 8012794:	3ca1a626 	.word	0x3ca1a626
 8012798:	54442d18 	.word	0x54442d18
 801279c:	400921fb 	.word	0x400921fb
 80127a0:	54442d18 	.word	0x54442d18
 80127a4:	3fe921fb 	.word	0x3fe921fb
 80127a8:	7ff00000 	.word	0x7ff00000
 80127ac:	08013320 	.word	0x08013320
 80127b0:	08013338 	.word	0x08013338

080127b4 <__ieee754_sqrt>:
 80127b4:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80127b8:	4770      	bx	lr
	...

080127bc <__ieee754_asinf>:
 80127bc:	b538      	push	{r3, r4, r5, lr}
 80127be:	ee10 5a10 	vmov	r5, s0
 80127c2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80127c6:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80127ca:	ed2d 8b04 	vpush	{d8-d9}
 80127ce:	d10c      	bne.n	80127ea <__ieee754_asinf+0x2e>
 80127d0:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8012948 <__ieee754_asinf+0x18c>
 80127d4:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 801294c <__ieee754_asinf+0x190>
 80127d8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80127dc:	eee0 7a07 	vfma.f32	s15, s0, s14
 80127e0:	eeb0 0a67 	vmov.f32	s0, s15
 80127e4:	ecbd 8b04 	vpop	{d8-d9}
 80127e8:	bd38      	pop	{r3, r4, r5, pc}
 80127ea:	dd04      	ble.n	80127f6 <__ieee754_asinf+0x3a>
 80127ec:	ee70 7a40 	vsub.f32	s15, s0, s0
 80127f0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80127f4:	e7f6      	b.n	80127e4 <__ieee754_asinf+0x28>
 80127f6:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80127fa:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80127fe:	da0b      	bge.n	8012818 <__ieee754_asinf+0x5c>
 8012800:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8012804:	da52      	bge.n	80128ac <__ieee754_asinf+0xf0>
 8012806:	eddf 7a52 	vldr	s15, [pc, #328]	; 8012950 <__ieee754_asinf+0x194>
 801280a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801280e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8012812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012816:	dce5      	bgt.n	80127e4 <__ieee754_asinf+0x28>
 8012818:	f000 fb32 	bl	8012e80 <fabsf>
 801281c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8012820:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8012824:	ee20 8a08 	vmul.f32	s16, s0, s16
 8012828:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8012954 <__ieee754_asinf+0x198>
 801282c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8012958 <__ieee754_asinf+0x19c>
 8012830:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 801295c <__ieee754_asinf+0x1a0>
 8012834:	eea8 7a27 	vfma.f32	s14, s16, s15
 8012838:	eddf 7a49 	vldr	s15, [pc, #292]	; 8012960 <__ieee754_asinf+0x1a4>
 801283c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012840:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8012964 <__ieee754_asinf+0x1a8>
 8012844:	eea7 7a88 	vfma.f32	s14, s15, s16
 8012848:	eddf 7a47 	vldr	s15, [pc, #284]	; 8012968 <__ieee754_asinf+0x1ac>
 801284c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012850:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801296c <__ieee754_asinf+0x1b0>
 8012854:	eea7 9a88 	vfma.f32	s18, s15, s16
 8012858:	eddf 7a45 	vldr	s15, [pc, #276]	; 8012970 <__ieee754_asinf+0x1b4>
 801285c:	eee8 7a07 	vfma.f32	s15, s16, s14
 8012860:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8012974 <__ieee754_asinf+0x1b8>
 8012864:	eea7 7a88 	vfma.f32	s14, s15, s16
 8012868:	eddf 7a43 	vldr	s15, [pc, #268]	; 8012978 <__ieee754_asinf+0x1bc>
 801286c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012870:	eeb0 0a48 	vmov.f32	s0, s16
 8012874:	eee7 8a88 	vfma.f32	s17, s15, s16
 8012878:	f000 f924 	bl	8012ac4 <__ieee754_sqrtf>
 801287c:	4b3f      	ldr	r3, [pc, #252]	; (801297c <__ieee754_asinf+0x1c0>)
 801287e:	ee29 9a08 	vmul.f32	s18, s18, s16
 8012882:	429c      	cmp	r4, r3
 8012884:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8012888:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801288c:	dd3d      	ble.n	801290a <__ieee754_asinf+0x14e>
 801288e:	eea0 0a06 	vfma.f32	s0, s0, s12
 8012892:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8012980 <__ieee754_asinf+0x1c4>
 8012896:	eee0 7a26 	vfma.f32	s15, s0, s13
 801289a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801294c <__ieee754_asinf+0x190>
 801289e:	ee30 0a67 	vsub.f32	s0, s0, s15
 80128a2:	2d00      	cmp	r5, #0
 80128a4:	bfd8      	it	le
 80128a6:	eeb1 0a40 	vnegle.f32	s0, s0
 80128aa:	e79b      	b.n	80127e4 <__ieee754_asinf+0x28>
 80128ac:	ee60 7a00 	vmul.f32	s15, s0, s0
 80128b0:	eddf 6a28 	vldr	s13, [pc, #160]	; 8012954 <__ieee754_asinf+0x198>
 80128b4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8012958 <__ieee754_asinf+0x19c>
 80128b8:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 801296c <__ieee754_asinf+0x1b0>
 80128bc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80128c0:	eddf 6a27 	vldr	s13, [pc, #156]	; 8012960 <__ieee754_asinf+0x1a4>
 80128c4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80128c8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8012964 <__ieee754_asinf+0x1a8>
 80128cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80128d0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8012968 <__ieee754_asinf+0x1ac>
 80128d4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80128d8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801295c <__ieee754_asinf+0x1a0>
 80128dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80128e0:	eddf 6a23 	vldr	s13, [pc, #140]	; 8012970 <__ieee754_asinf+0x1b4>
 80128e4:	eee7 6a86 	vfma.f32	s13, s15, s12
 80128e8:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8012974 <__ieee754_asinf+0x1b8>
 80128ec:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80128f0:	eddf 6a21 	vldr	s13, [pc, #132]	; 8012978 <__ieee754_asinf+0x1bc>
 80128f4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80128f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80128fc:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8012900:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8012904:	eea0 0a27 	vfma.f32	s0, s0, s15
 8012908:	e76c      	b.n	80127e4 <__ieee754_asinf+0x28>
 801290a:	ee10 3a10 	vmov	r3, s0
 801290e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012912:	f023 030f 	bic.w	r3, r3, #15
 8012916:	ee07 3a10 	vmov	s14, r3
 801291a:	eea7 8a47 	vfms.f32	s16, s14, s14
 801291e:	ee70 7a07 	vadd.f32	s15, s0, s14
 8012922:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012926:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801292a:	eddf 7a07 	vldr	s15, [pc, #28]	; 8012948 <__ieee754_asinf+0x18c>
 801292e:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8012932:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8012936:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8012984 <__ieee754_asinf+0x1c8>
 801293a:	eeb0 6a40 	vmov.f32	s12, s0
 801293e:	eea7 6a66 	vfms.f32	s12, s14, s13
 8012942:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8012946:	e7aa      	b.n	801289e <__ieee754_asinf+0xe2>
 8012948:	b33bbd2e 	.word	0xb33bbd2e
 801294c:	3fc90fdb 	.word	0x3fc90fdb
 8012950:	7149f2ca 	.word	0x7149f2ca
 8012954:	3811ef08 	.word	0x3811ef08
 8012958:	3a4f7f04 	.word	0x3a4f7f04
 801295c:	3e2aaaab 	.word	0x3e2aaaab
 8012960:	bd241146 	.word	0xbd241146
 8012964:	3e4e0aa8 	.word	0x3e4e0aa8
 8012968:	bea6b090 	.word	0xbea6b090
 801296c:	3d9dc62e 	.word	0x3d9dc62e
 8012970:	bf303361 	.word	0xbf303361
 8012974:	4001572d 	.word	0x4001572d
 8012978:	c019d139 	.word	0xc019d139
 801297c:	3f799999 	.word	0x3f799999
 8012980:	333bbd2e 	.word	0x333bbd2e
 8012984:	3f490fdb 	.word	0x3f490fdb

08012988 <__ieee754_atan2f>:
 8012988:	ee10 2a90 	vmov	r2, s1
 801298c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8012990:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012994:	b510      	push	{r4, lr}
 8012996:	eef0 7a40 	vmov.f32	s15, s0
 801299a:	dc06      	bgt.n	80129aa <__ieee754_atan2f+0x22>
 801299c:	ee10 0a10 	vmov	r0, s0
 80129a0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80129a4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80129a8:	dd04      	ble.n	80129b4 <__ieee754_atan2f+0x2c>
 80129aa:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80129ae:	eeb0 0a67 	vmov.f32	s0, s15
 80129b2:	bd10      	pop	{r4, pc}
 80129b4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80129b8:	d103      	bne.n	80129c2 <__ieee754_atan2f+0x3a>
 80129ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129be:	f000 b98b 	b.w	8012cd8 <atanf>
 80129c2:	1794      	asrs	r4, r2, #30
 80129c4:	f004 0402 	and.w	r4, r4, #2
 80129c8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80129cc:	b93b      	cbnz	r3, 80129de <__ieee754_atan2f+0x56>
 80129ce:	2c02      	cmp	r4, #2
 80129d0:	d05c      	beq.n	8012a8c <__ieee754_atan2f+0x104>
 80129d2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8012aa0 <__ieee754_atan2f+0x118>
 80129d6:	2c03      	cmp	r4, #3
 80129d8:	fe47 7a00 	vseleq.f32	s15, s14, s0
 80129dc:	e7e7      	b.n	80129ae <__ieee754_atan2f+0x26>
 80129de:	b939      	cbnz	r1, 80129f0 <__ieee754_atan2f+0x68>
 80129e0:	eddf 7a30 	vldr	s15, [pc, #192]	; 8012aa4 <__ieee754_atan2f+0x11c>
 80129e4:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8012aa8 <__ieee754_atan2f+0x120>
 80129e8:	2800      	cmp	r0, #0
 80129ea:	fe67 7a80 	vselge.f32	s15, s15, s0
 80129ee:	e7de      	b.n	80129ae <__ieee754_atan2f+0x26>
 80129f0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80129f4:	d110      	bne.n	8012a18 <__ieee754_atan2f+0x90>
 80129f6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80129fa:	f104 34ff 	add.w	r4, r4, #4294967295
 80129fe:	d107      	bne.n	8012a10 <__ieee754_atan2f+0x88>
 8012a00:	2c02      	cmp	r4, #2
 8012a02:	d846      	bhi.n	8012a92 <__ieee754_atan2f+0x10a>
 8012a04:	4b29      	ldr	r3, [pc, #164]	; (8012aac <__ieee754_atan2f+0x124>)
 8012a06:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012a0a:	edd4 7a00 	vldr	s15, [r4]
 8012a0e:	e7ce      	b.n	80129ae <__ieee754_atan2f+0x26>
 8012a10:	2c02      	cmp	r4, #2
 8012a12:	d841      	bhi.n	8012a98 <__ieee754_atan2f+0x110>
 8012a14:	4b26      	ldr	r3, [pc, #152]	; (8012ab0 <__ieee754_atan2f+0x128>)
 8012a16:	e7f6      	b.n	8012a06 <__ieee754_atan2f+0x7e>
 8012a18:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012a1c:	d0e0      	beq.n	80129e0 <__ieee754_atan2f+0x58>
 8012a1e:	1a5b      	subs	r3, r3, r1
 8012a20:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8012a24:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8012a28:	da1a      	bge.n	8012a60 <__ieee754_atan2f+0xd8>
 8012a2a:	2a00      	cmp	r2, #0
 8012a2c:	da01      	bge.n	8012a32 <__ieee754_atan2f+0xaa>
 8012a2e:	313c      	adds	r1, #60	; 0x3c
 8012a30:	db19      	blt.n	8012a66 <__ieee754_atan2f+0xde>
 8012a32:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8012a36:	f000 fa23 	bl	8012e80 <fabsf>
 8012a3a:	f000 f94d 	bl	8012cd8 <atanf>
 8012a3e:	eef0 7a40 	vmov.f32	s15, s0
 8012a42:	2c01      	cmp	r4, #1
 8012a44:	d012      	beq.n	8012a6c <__ieee754_atan2f+0xe4>
 8012a46:	2c02      	cmp	r4, #2
 8012a48:	d017      	beq.n	8012a7a <__ieee754_atan2f+0xf2>
 8012a4a:	2c00      	cmp	r4, #0
 8012a4c:	d0af      	beq.n	80129ae <__ieee754_atan2f+0x26>
 8012a4e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8012ab4 <__ieee754_atan2f+0x12c>
 8012a52:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012a56:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8012ab8 <__ieee754_atan2f+0x130>
 8012a5a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012a5e:	e7a6      	b.n	80129ae <__ieee754_atan2f+0x26>
 8012a60:	eddf 7a10 	vldr	s15, [pc, #64]	; 8012aa4 <__ieee754_atan2f+0x11c>
 8012a64:	e7ed      	b.n	8012a42 <__ieee754_atan2f+0xba>
 8012a66:	eddf 7a15 	vldr	s15, [pc, #84]	; 8012abc <__ieee754_atan2f+0x134>
 8012a6a:	e7ea      	b.n	8012a42 <__ieee754_atan2f+0xba>
 8012a6c:	ee17 3a90 	vmov	r3, s15
 8012a70:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012a74:	ee07 3a90 	vmov	s15, r3
 8012a78:	e799      	b.n	80129ae <__ieee754_atan2f+0x26>
 8012a7a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8012ab4 <__ieee754_atan2f+0x12c>
 8012a7e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012a82:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8012ab8 <__ieee754_atan2f+0x130>
 8012a86:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012a8a:	e790      	b.n	80129ae <__ieee754_atan2f+0x26>
 8012a8c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8012ab8 <__ieee754_atan2f+0x130>
 8012a90:	e78d      	b.n	80129ae <__ieee754_atan2f+0x26>
 8012a92:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8012ac0 <__ieee754_atan2f+0x138>
 8012a96:	e78a      	b.n	80129ae <__ieee754_atan2f+0x26>
 8012a98:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012abc <__ieee754_atan2f+0x134>
 8012a9c:	e787      	b.n	80129ae <__ieee754_atan2f+0x26>
 8012a9e:	bf00      	nop
 8012aa0:	c0490fdb 	.word	0xc0490fdb
 8012aa4:	3fc90fdb 	.word	0x3fc90fdb
 8012aa8:	bfc90fdb 	.word	0xbfc90fdb
 8012aac:	08013350 	.word	0x08013350
 8012ab0:	0801335c 	.word	0x0801335c
 8012ab4:	33bbbd2e 	.word	0x33bbbd2e
 8012ab8:	40490fdb 	.word	0x40490fdb
 8012abc:	00000000 	.word	0x00000000
 8012ac0:	3f490fdb 	.word	0x3f490fdb

08012ac4 <__ieee754_sqrtf>:
 8012ac4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012ac8:	4770      	bx	lr
 8012aca:	0000      	movs	r0, r0
 8012acc:	0000      	movs	r0, r0
	...

08012ad0 <atan>:
 8012ad0:	b538      	push	{r3, r4, r5, lr}
 8012ad2:	eeb0 7b40 	vmov.f64	d7, d0
 8012ad6:	ee17 5a90 	vmov	r5, s15
 8012ada:	4b73      	ldr	r3, [pc, #460]	; (8012ca8 <atan+0x1d8>)
 8012adc:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012ae0:	429c      	cmp	r4, r3
 8012ae2:	dd13      	ble.n	8012b0c <atan+0x3c>
 8012ae4:	4b71      	ldr	r3, [pc, #452]	; (8012cac <atan+0x1dc>)
 8012ae6:	429c      	cmp	r4, r3
 8012ae8:	dc03      	bgt.n	8012af2 <atan+0x22>
 8012aea:	d107      	bne.n	8012afc <atan+0x2c>
 8012aec:	ee10 3a10 	vmov	r3, s0
 8012af0:	b123      	cbz	r3, 8012afc <atan+0x2c>
 8012af2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012af6:	eeb0 0b47 	vmov.f64	d0, d7
 8012afa:	bd38      	pop	{r3, r4, r5, pc}
 8012afc:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8012c38 <atan+0x168>
 8012b00:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8012c40 <atan+0x170>
 8012b04:	2d00      	cmp	r5, #0
 8012b06:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8012b0a:	e7f4      	b.n	8012af6 <atan+0x26>
 8012b0c:	4b68      	ldr	r3, [pc, #416]	; (8012cb0 <atan+0x1e0>)
 8012b0e:	429c      	cmp	r4, r3
 8012b10:	dc11      	bgt.n	8012b36 <atan+0x66>
 8012b12:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012b16:	429c      	cmp	r4, r3
 8012b18:	dc0a      	bgt.n	8012b30 <atan+0x60>
 8012b1a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8012b1e:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8012c48 <atan+0x178>
 8012b22:	ee30 6b06 	vadd.f64	d6, d0, d6
 8012b26:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b2e:	dce2      	bgt.n	8012af6 <atan+0x26>
 8012b30:	f04f 33ff 	mov.w	r3, #4294967295
 8012b34:	e013      	b.n	8012b5e <atan+0x8e>
 8012b36:	f000 f8c5 	bl	8012cc4 <fabs>
 8012b3a:	4b5e      	ldr	r3, [pc, #376]	; (8012cb4 <atan+0x1e4>)
 8012b3c:	429c      	cmp	r4, r3
 8012b3e:	dc4f      	bgt.n	8012be0 <atan+0x110>
 8012b40:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8012b44:	429c      	cmp	r4, r3
 8012b46:	dc41      	bgt.n	8012bcc <atan+0xfc>
 8012b48:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8012b4c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8012b50:	2300      	movs	r3, #0
 8012b52:	eea0 6b07 	vfma.f64	d6, d0, d7
 8012b56:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012b5a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8012b5e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8012c50 <atan+0x180>
 8012b62:	ee27 4b07 	vmul.f64	d4, d7, d7
 8012b66:	ee24 5b04 	vmul.f64	d5, d4, d4
 8012b6a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8012c58 <atan+0x188>
 8012b6e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8012b72:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8012c60 <atan+0x190>
 8012b76:	eea3 6b05 	vfma.f64	d6, d3, d5
 8012b7a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8012c68 <atan+0x198>
 8012b7e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8012b82:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8012c70 <atan+0x1a0>
 8012b86:	eea3 6b05 	vfma.f64	d6, d3, d5
 8012b8a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8012c78 <atan+0x1a8>
 8012b8e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8012c80 <atan+0x1b0>
 8012b92:	eea6 3b05 	vfma.f64	d3, d6, d5
 8012b96:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8012c88 <atan+0x1b8>
 8012b9a:	eea5 2b06 	vfma.f64	d2, d5, d6
 8012b9e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8012c90 <atan+0x1c0>
 8012ba2:	eea2 6b05 	vfma.f64	d6, d2, d5
 8012ba6:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8012c98 <atan+0x1c8>
 8012baa:	eea6 2b05 	vfma.f64	d2, d6, d5
 8012bae:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8012ca0 <atan+0x1d0>
 8012bb2:	1c5a      	adds	r2, r3, #1
 8012bb4:	eea2 6b05 	vfma.f64	d6, d2, d5
 8012bb8:	ee26 6b05 	vmul.f64	d6, d6, d5
 8012bbc:	eea3 6b04 	vfma.f64	d6, d3, d4
 8012bc0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8012bc4:	d121      	bne.n	8012c0a <atan+0x13a>
 8012bc6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012bca:	e794      	b.n	8012af6 <atan+0x26>
 8012bcc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8012bd0:	2301      	movs	r3, #1
 8012bd2:	ee30 6b47 	vsub.f64	d6, d0, d7
 8012bd6:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012bda:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8012bde:	e7be      	b.n	8012b5e <atan+0x8e>
 8012be0:	4b35      	ldr	r3, [pc, #212]	; (8012cb8 <atan+0x1e8>)
 8012be2:	429c      	cmp	r4, r3
 8012be4:	da0b      	bge.n	8012bfe <atan+0x12e>
 8012be6:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8012bea:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012bee:	ee30 5b47 	vsub.f64	d5, d0, d7
 8012bf2:	eea0 6b07 	vfma.f64	d6, d0, d7
 8012bf6:	2302      	movs	r3, #2
 8012bf8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8012bfc:	e7af      	b.n	8012b5e <atan+0x8e>
 8012bfe:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8012c02:	2303      	movs	r3, #3
 8012c04:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8012c08:	e7a9      	b.n	8012b5e <atan+0x8e>
 8012c0a:	4a2c      	ldr	r2, [pc, #176]	; (8012cbc <atan+0x1ec>)
 8012c0c:	492c      	ldr	r1, [pc, #176]	; (8012cc0 <atan+0x1f0>)
 8012c0e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8012c12:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8012c16:	ed93 5b00 	vldr	d5, [r3]
 8012c1a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012c1e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012c22:	ed92 6b00 	vldr	d6, [r2]
 8012c26:	2d00      	cmp	r5, #0
 8012c28:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012c2c:	bfb8      	it	lt
 8012c2e:	eeb1 7b47 	vneglt.f64	d7, d7
 8012c32:	e760      	b.n	8012af6 <atan+0x26>
 8012c34:	f3af 8000 	nop.w
 8012c38:	54442d18 	.word	0x54442d18
 8012c3c:	3ff921fb 	.word	0x3ff921fb
 8012c40:	54442d18 	.word	0x54442d18
 8012c44:	bff921fb 	.word	0xbff921fb
 8012c48:	8800759c 	.word	0x8800759c
 8012c4c:	7e37e43c 	.word	0x7e37e43c
 8012c50:	e322da11 	.word	0xe322da11
 8012c54:	3f90ad3a 	.word	0x3f90ad3a
 8012c58:	24760deb 	.word	0x24760deb
 8012c5c:	3fa97b4b 	.word	0x3fa97b4b
 8012c60:	a0d03d51 	.word	0xa0d03d51
 8012c64:	3fb10d66 	.word	0x3fb10d66
 8012c68:	c54c206e 	.word	0xc54c206e
 8012c6c:	3fb745cd 	.word	0x3fb745cd
 8012c70:	920083ff 	.word	0x920083ff
 8012c74:	3fc24924 	.word	0x3fc24924
 8012c78:	5555550d 	.word	0x5555550d
 8012c7c:	3fd55555 	.word	0x3fd55555
 8012c80:	52defd9a 	.word	0x52defd9a
 8012c84:	bfadde2d 	.word	0xbfadde2d
 8012c88:	2c6a6c2f 	.word	0x2c6a6c2f
 8012c8c:	bfa2b444 	.word	0xbfa2b444
 8012c90:	af749a6d 	.word	0xaf749a6d
 8012c94:	bfb3b0f2 	.word	0xbfb3b0f2
 8012c98:	fe231671 	.word	0xfe231671
 8012c9c:	bfbc71c6 	.word	0xbfbc71c6
 8012ca0:	9998ebc4 	.word	0x9998ebc4
 8012ca4:	bfc99999 	.word	0xbfc99999
 8012ca8:	440fffff 	.word	0x440fffff
 8012cac:	7ff00000 	.word	0x7ff00000
 8012cb0:	3fdbffff 	.word	0x3fdbffff
 8012cb4:	3ff2ffff 	.word	0x3ff2ffff
 8012cb8:	40038000 	.word	0x40038000
 8012cbc:	08013368 	.word	0x08013368
 8012cc0:	08013388 	.word	0x08013388

08012cc4 <fabs>:
 8012cc4:	ec51 0b10 	vmov	r0, r1, d0
 8012cc8:	ee10 2a10 	vmov	r2, s0
 8012ccc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012cd0:	ec43 2b10 	vmov	d0, r2, r3
 8012cd4:	4770      	bx	lr
	...

08012cd8 <atanf>:
 8012cd8:	b538      	push	{r3, r4, r5, lr}
 8012cda:	ee10 5a10 	vmov	r5, s0
 8012cde:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012ce2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8012ce6:	eef0 7a40 	vmov.f32	s15, s0
 8012cea:	db0f      	blt.n	8012d0c <atanf+0x34>
 8012cec:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8012cf0:	dd04      	ble.n	8012cfc <atanf+0x24>
 8012cf2:	ee70 7a00 	vadd.f32	s15, s0, s0
 8012cf6:	eeb0 0a67 	vmov.f32	s0, s15
 8012cfa:	bd38      	pop	{r3, r4, r5, pc}
 8012cfc:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8012e34 <atanf+0x15c>
 8012d00:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8012e38 <atanf+0x160>
 8012d04:	2d00      	cmp	r5, #0
 8012d06:	fe77 7a80 	vselgt.f32	s15, s15, s0
 8012d0a:	e7f4      	b.n	8012cf6 <atanf+0x1e>
 8012d0c:	4b4b      	ldr	r3, [pc, #300]	; (8012e3c <atanf+0x164>)
 8012d0e:	429c      	cmp	r4, r3
 8012d10:	dc10      	bgt.n	8012d34 <atanf+0x5c>
 8012d12:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8012d16:	da0a      	bge.n	8012d2e <atanf+0x56>
 8012d18:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8012e40 <atanf+0x168>
 8012d1c:	ee30 7a07 	vadd.f32	s14, s0, s14
 8012d20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012d24:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8012d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d2c:	dce3      	bgt.n	8012cf6 <atanf+0x1e>
 8012d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8012d32:	e013      	b.n	8012d5c <atanf+0x84>
 8012d34:	f000 f8a4 	bl	8012e80 <fabsf>
 8012d38:	4b42      	ldr	r3, [pc, #264]	; (8012e44 <atanf+0x16c>)
 8012d3a:	429c      	cmp	r4, r3
 8012d3c:	dc4f      	bgt.n	8012dde <atanf+0x106>
 8012d3e:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8012d42:	429c      	cmp	r4, r3
 8012d44:	dc41      	bgt.n	8012dca <atanf+0xf2>
 8012d46:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8012d4a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8012d4e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012d52:	2300      	movs	r3, #0
 8012d54:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012d58:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012d5c:	1c5a      	adds	r2, r3, #1
 8012d5e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8012d62:	eddf 5a39 	vldr	s11, [pc, #228]	; 8012e48 <atanf+0x170>
 8012d66:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8012e4c <atanf+0x174>
 8012d6a:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8012e50 <atanf+0x178>
 8012d6e:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8012e54 <atanf+0x17c>
 8012d72:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8012d76:	eea7 6a25 	vfma.f32	s12, s14, s11
 8012d7a:	eddf 5a37 	vldr	s11, [pc, #220]	; 8012e58 <atanf+0x180>
 8012d7e:	eee6 5a07 	vfma.f32	s11, s12, s14
 8012d82:	ed9f 6a36 	vldr	s12, [pc, #216]	; 8012e5c <atanf+0x184>
 8012d86:	eea5 6a87 	vfma.f32	s12, s11, s14
 8012d8a:	eddf 5a35 	vldr	s11, [pc, #212]	; 8012e60 <atanf+0x188>
 8012d8e:	eee6 5a07 	vfma.f32	s11, s12, s14
 8012d92:	ed9f 6a34 	vldr	s12, [pc, #208]	; 8012e64 <atanf+0x18c>
 8012d96:	eea5 6a87 	vfma.f32	s12, s11, s14
 8012d9a:	eddf 5a33 	vldr	s11, [pc, #204]	; 8012e68 <atanf+0x190>
 8012d9e:	eee7 5a05 	vfma.f32	s11, s14, s10
 8012da2:	ed9f 5a32 	vldr	s10, [pc, #200]	; 8012e6c <atanf+0x194>
 8012da6:	eea5 5a87 	vfma.f32	s10, s11, s14
 8012daa:	eddf 5a31 	vldr	s11, [pc, #196]	; 8012e70 <atanf+0x198>
 8012dae:	eee5 5a07 	vfma.f32	s11, s10, s14
 8012db2:	eea5 0a87 	vfma.f32	s0, s11, s14
 8012db6:	ee20 0a07 	vmul.f32	s0, s0, s14
 8012dba:	eea6 0a26 	vfma.f32	s0, s12, s13
 8012dbe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012dc2:	d121      	bne.n	8012e08 <atanf+0x130>
 8012dc4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012dc8:	e795      	b.n	8012cf6 <atanf+0x1e>
 8012dca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012dce:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012dd2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012dd6:	2301      	movs	r3, #1
 8012dd8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012ddc:	e7be      	b.n	8012d5c <atanf+0x84>
 8012dde:	4b25      	ldr	r3, [pc, #148]	; (8012e74 <atanf+0x19c>)
 8012de0:	429c      	cmp	r4, r3
 8012de2:	dc0b      	bgt.n	8012dfc <atanf+0x124>
 8012de4:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8012de8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012dec:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012df0:	2302      	movs	r3, #2
 8012df2:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012df6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012dfa:	e7af      	b.n	8012d5c <atanf+0x84>
 8012dfc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8012e00:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012e04:	2303      	movs	r3, #3
 8012e06:	e7a9      	b.n	8012d5c <atanf+0x84>
 8012e08:	4a1b      	ldr	r2, [pc, #108]	; (8012e78 <atanf+0x1a0>)
 8012e0a:	491c      	ldr	r1, [pc, #112]	; (8012e7c <atanf+0x1a4>)
 8012e0c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012e10:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012e14:	ed93 7a00 	vldr	s14, [r3]
 8012e18:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012e1c:	2d00      	cmp	r5, #0
 8012e1e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012e22:	ed92 0a00 	vldr	s0, [r2]
 8012e26:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012e2a:	bfb8      	it	lt
 8012e2c:	eef1 7a67 	vneglt.f32	s15, s15
 8012e30:	e761      	b.n	8012cf6 <atanf+0x1e>
 8012e32:	bf00      	nop
 8012e34:	3fc90fdb 	.word	0x3fc90fdb
 8012e38:	bfc90fdb 	.word	0xbfc90fdb
 8012e3c:	3edfffff 	.word	0x3edfffff
 8012e40:	7149f2ca 	.word	0x7149f2ca
 8012e44:	3f97ffff 	.word	0x3f97ffff
 8012e48:	3c8569d7 	.word	0x3c8569d7
 8012e4c:	3d4bda59 	.word	0x3d4bda59
 8012e50:	bd15a221 	.word	0xbd15a221
 8012e54:	be4ccccd 	.word	0xbe4ccccd
 8012e58:	3d886b35 	.word	0x3d886b35
 8012e5c:	3dba2e6e 	.word	0x3dba2e6e
 8012e60:	3e124925 	.word	0x3e124925
 8012e64:	3eaaaaab 	.word	0x3eaaaaab
 8012e68:	bd6ef16b 	.word	0xbd6ef16b
 8012e6c:	bd9d8795 	.word	0xbd9d8795
 8012e70:	bde38e38 	.word	0xbde38e38
 8012e74:	401bffff 	.word	0x401bffff
 8012e78:	080133a8 	.word	0x080133a8
 8012e7c:	080133b8 	.word	0x080133b8

08012e80 <fabsf>:
 8012e80:	ee10 3a10 	vmov	r3, s0
 8012e84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012e88:	ee00 3a10 	vmov	s0, r3
 8012e8c:	4770      	bx	lr
	...

08012e90 <nanf>:
 8012e90:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012e98 <nanf+0x8>
 8012e94:	4770      	bx	lr
 8012e96:	bf00      	nop
 8012e98:	7fc00000 	.word	0x7fc00000

08012e9c <_init>:
 8012e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e9e:	bf00      	nop
 8012ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ea2:	bc08      	pop	{r3}
 8012ea4:	469e      	mov	lr, r3
 8012ea6:	4770      	bx	lr

08012ea8 <_fini>:
 8012ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012eaa:	bf00      	nop
 8012eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012eae:	bc08      	pop	{r3}
 8012eb0:	469e      	mov	lr, r3
 8012eb2:	4770      	bx	lr
