
Personal Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001377c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  08013a20  08013a20  00023a20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013f60  08013f60  00023f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013f68  08013f68  00023f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08013f6c  08013f6c  00023f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f8  24000000  08013f70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006b0  240001f8  08014168  000301f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240008a8  08014168  000308a8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002b87f  00000000  00000000  00030226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004516  00000000  00000000  0005baa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017d8  00000000  00000000  0005ffc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000016e0  00000000  00000000  00061798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000394d5  00000000  00000000  00062e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f528  00000000  00000000  0009c34d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001684f7  00000000  00000000  000bb875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00223d6c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007698  00000000  00000000  00223dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f8 	.word	0x240001f8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013a04 	.word	0x08013a04

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001fc 	.word	0x240001fc
 80002dc:	08013a04 	.word	0x08013a04

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <iBus_Check_CHKSUM>:
#include "FS-iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8000694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000698:	81fb      	strh	r3, [r7, #14]

	for(int i=0; i<len-2;i++)
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	e00a      	b.n	80006b6 <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	4413      	add	r3, r2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	89fa      	ldrh	r2, [r7, #14]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	81fb      	strh	r3, [r7, #14]
	for(int i=0; i<len-2;i++)
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	3301      	adds	r3, #1
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	78fb      	ldrb	r3, [r7, #3]
 80006b8:	3b02      	subs	r3, #2
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	429a      	cmp	r2, r3
 80006be:	dbef      	blt.n	80006a0 <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8) && data[31]);
 80006c0:	89fb      	ldrh	r3, [r7, #14]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	321e      	adds	r2, #30
 80006c8:	7812      	ldrb	r2, [r2, #0]
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d10b      	bne.n	80006e6 <iBus_Check_CHKSUM+0x5e>
 80006ce:	89fb      	ldrh	r3, [r7, #14]
 80006d0:	0a1b      	lsrs	r3, r3, #8
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d006      	beq.n	80006e6 <iBus_Check_CHKSUM+0x5e>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	331f      	adds	r3, #31
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <iBus_Check_CHKSUM+0x5e>
 80006e2:	2301      	movs	r3, #1
 80006e4:	e000      	b.n	80006e8 <iBus_Check_CHKSUM+0x60>
 80006e6:	2300      	movs	r3, #0
 80006e8:	b2db      	uxtb	r3, r3

}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus)
{
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
 80006fe:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8) & 0x0FFF;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3302      	adds	r3, #2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	b21a      	sxth	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3303      	adds	r3, #3
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	021b      	lsls	r3, r3, #8
 8000710:	b21b      	sxth	r3, r3
 8000712:	4313      	orrs	r3, r2
 8000714:	b21b      	sxth	r3, r3
 8000716:	b29b      	uxth	r3, r3
 8000718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800071c:	b29a      	uxth	r2, r3
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0FFF;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	3304      	adds	r3, #4
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	b21a      	sxth	r2, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	3305      	adds	r3, #5
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	021b      	lsls	r3, r3, #8
 8000732:	b21b      	sxth	r3, r3
 8000734:	4313      	orrs	r3, r2
 8000736:	b21b      	sxth	r3, r3
 8000738:	b29b      	uxth	r3, r3
 800073a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800073e:	b29a      	uxth	r2, r3
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0FFF;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3306      	adds	r3, #6
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b21a      	sxth	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3307      	adds	r3, #7
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	021b      	lsls	r3, r3, #8
 8000754:	b21b      	sxth	r3, r3
 8000756:	4313      	orrs	r3, r2
 8000758:	b21b      	sxth	r3, r3
 800075a:	b29b      	uxth	r3, r3
 800075c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000760:	b29a      	uxth	r2, r3
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9]<<8) & 0x0FFF;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	3308      	adds	r3, #8
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	b21a      	sxth	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	3309      	adds	r3, #9
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	021b      	lsls	r3, r3, #8
 8000776:	b21b      	sxth	r3, r3
 8000778:	4313      	orrs	r3, r2
 800077a:	b21b      	sxth	r3, r3
 800077c:	b29b      	uxth	r3, r3
 800077e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000782:	b29a      	uxth	r2, r3
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0FFF;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	330a      	adds	r3, #10
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b21a      	sxth	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	330b      	adds	r3, #11
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	b21b      	sxth	r3, r3
 800079a:	4313      	orrs	r3, r2
 800079c:	b21b      	sxth	r3, r3
 800079e:	b29b      	uxth	r3, r3
 80007a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	811a      	strh	r2, [r3, #8]
	iBus->SwB = (data[12] | data[13]<<8) & 0x0FFF;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	330c      	adds	r3, #12
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b21a      	sxth	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	330d      	adds	r3, #13
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b21b      	sxth	r3, r3
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	815a      	strh	r2, [r3, #10]
	iBus->VrA = (data[14] | data[15]<<8) & 0x0FFF;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	330e      	adds	r3, #14
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	330f      	adds	r3, #15
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	b21b      	sxth	r3, r3
 80007de:	4313      	orrs	r3, r2
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	821a      	strh	r2, [r3, #16]
	iBus->VrB = (data[16] | data[17]<<8) & 0x0FFF;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	3310      	adds	r3, #16
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b21a      	sxth	r2, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3311      	adds	r3, #17
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	021b      	lsls	r3, r3, #8
 80007fe:	b21b      	sxth	r3, r3
 8000800:	4313      	orrs	r3, r2
 8000802:	b21b      	sxth	r3, r3
 8000804:	b29b      	uxth	r3, r3
 8000806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800080a:	b29a      	uxth	r2, r3
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	825a      	strh	r2, [r3, #18]
	iBus->SwC = (data[18] | data[19]<<8) & 0x0FFF;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3312      	adds	r3, #18
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b21a      	sxth	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3313      	adds	r3, #19
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	021b      	lsls	r3, r3, #8
 8000820:	b21b      	sxth	r3, r3
 8000822:	4313      	orrs	r3, r2
 8000824:	b21b      	sxth	r3, r3
 8000826:	b29b      	uxth	r3, r3
 8000828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800082c:	b29a      	uxth	r2, r3
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	819a      	strh	r2, [r3, #12]
	iBus->SwD = (data[20] | data[21]<<8) & 0x0FFF;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3314      	adds	r3, #20
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b21a      	sxth	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3315      	adds	r3, #21
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	021b      	lsls	r3, r3, #8
 8000842:	b21b      	sxth	r3, r3
 8000844:	4313      	orrs	r3, r2
 8000846:	b21b      	sxth	r3, r3
 8000848:	b29b      	uxth	r3, r3
 800084a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800084e:	b29a      	uxth	r2, r3
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	81da      	strh	r2, [r3, #14]

//	iBus->FailSafe = (iBus->SwB == 1500) && (iBus->SwD == 1500);
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <MPU9250_Init>:
float MPU9250_Acc_LSB = 16384.0;
float MPU9250_Mag_LSB = 0.15;

//Functions
uint8_t MPU9250_Init(I2C_HandleTypeDef *I2Cx, uint8_t Gyro_FS, uint8_t Acc_FS, uint8_t DLPF_CFG, uint8_t A_DLPF_CFG)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af04      	add	r7, sp, #16
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	4608      	mov	r0, r1
 800086a:	4611      	mov	r1, r2
 800086c:	461a      	mov	r2, r3
 800086e:	4603      	mov	r3, r0
 8000870:	70fb      	strb	r3, [r7, #3]
 8000872:	460b      	mov	r3, r1
 8000874:	70bb      	strb	r3, [r7, #2]
 8000876:	4613      	mov	r3, r2
 8000878:	707b      	strb	r3, [r7, #1]
	//Save LSB/Unit for both gyro and acc in order to use them later
	switch(Gyro_FS)
 800087a:	78fb      	ldrb	r3, [r7, #3]
 800087c:	2b03      	cmp	r3, #3
 800087e:	d81b      	bhi.n	80008b8 <MPU9250_Init+0x58>
 8000880:	a201      	add	r2, pc, #4	; (adr r2, 8000888 <MPU9250_Init+0x28>)
 8000882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000886:	bf00      	nop
 8000888:	08000899 	.word	0x08000899
 800088c:	080008a1 	.word	0x080008a1
 8000890:	080008a9 	.word	0x080008a9
 8000894:	080008b1 	.word	0x080008b1
	{
	case 0: //250dps
		MPU9250_Gyro_LSB = 131.0;
 8000898:	4b5d      	ldr	r3, [pc, #372]	; (8000a10 <MPU9250_Init+0x1b0>)
 800089a:	4a5e      	ldr	r2, [pc, #376]	; (8000a14 <MPU9250_Init+0x1b4>)
 800089c:	601a      	str	r2, [r3, #0]
		break;
 800089e:	e00c      	b.n	80008ba <MPU9250_Init+0x5a>
	case 1: //500dps
		MPU9250_Gyro_LSB = 65.5;
 80008a0:	4b5b      	ldr	r3, [pc, #364]	; (8000a10 <MPU9250_Init+0x1b0>)
 80008a2:	4a5d      	ldr	r2, [pc, #372]	; (8000a18 <MPU9250_Init+0x1b8>)
 80008a4:	601a      	str	r2, [r3, #0]
		break;
 80008a6:	e008      	b.n	80008ba <MPU9250_Init+0x5a>
	case 2: //1000dps
		MPU9250_Gyro_LSB = 32.8;
 80008a8:	4b59      	ldr	r3, [pc, #356]	; (8000a10 <MPU9250_Init+0x1b0>)
 80008aa:	4a5c      	ldr	r2, [pc, #368]	; (8000a1c <MPU9250_Init+0x1bc>)
 80008ac:	601a      	str	r2, [r3, #0]
		break;
 80008ae:	e004      	b.n	80008ba <MPU9250_Init+0x5a>
	case 3: //2000dps
		MPU9250_Gyro_LSB = 16.4;
 80008b0:	4b57      	ldr	r3, [pc, #348]	; (8000a10 <MPU9250_Init+0x1b0>)
 80008b2:	4a5b      	ldr	r2, [pc, #364]	; (8000a20 <MPU9250_Init+0x1c0>)
 80008b4:	601a      	str	r2, [r3, #0]
		break;
 80008b6:	e000      	b.n	80008ba <MPU9250_Init+0x5a>
	default:
		break;
 80008b8:	bf00      	nop
	}

	switch(Acc_FS)
 80008ba:	78bb      	ldrb	r3, [r7, #2]
 80008bc:	2b03      	cmp	r3, #3
 80008be:	d81f      	bhi.n	8000900 <MPU9250_Init+0xa0>
 80008c0:	a201      	add	r2, pc, #4	; (adr r2, 80008c8 <MPU9250_Init+0x68>)
 80008c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c6:	bf00      	nop
 80008c8:	080008d9 	.word	0x080008d9
 80008cc:	080008e3 	.word	0x080008e3
 80008d0:	080008ed 	.word	0x080008ed
 80008d4:	080008f7 	.word	0x080008f7
	{
	case 0: //2g
		MPU9250_Acc_LSB = 16384.0;
 80008d8:	4b52      	ldr	r3, [pc, #328]	; (8000a24 <MPU9250_Init+0x1c4>)
 80008da:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80008de:	601a      	str	r2, [r3, #0]
		break;
 80008e0:	e00f      	b.n	8000902 <MPU9250_Init+0xa2>
	case 1: //4g
		MPU9250_Acc_LSB = 8192.0;
 80008e2:	4b50      	ldr	r3, [pc, #320]	; (8000a24 <MPU9250_Init+0x1c4>)
 80008e4:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80008e8:	601a      	str	r2, [r3, #0]
		break;
 80008ea:	e00a      	b.n	8000902 <MPU9250_Init+0xa2>
	case 2: //8g
		MPU9250_Acc_LSB = 4096.0;
 80008ec:	4b4d      	ldr	r3, [pc, #308]	; (8000a24 <MPU9250_Init+0x1c4>)
 80008ee:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80008f2:	601a      	str	r2, [r3, #0]
		break;
 80008f4:	e005      	b.n	8000902 <MPU9250_Init+0xa2>
	case 3: //16g
		MPU9250_Acc_LSB = 2048.0;
 80008f6:	4b4b      	ldr	r3, [pc, #300]	; (8000a24 <MPU9250_Init+0x1c4>)
 80008f8:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 80008fc:	601a      	str	r2, [r3, #0]
		break;
 80008fe:	e000      	b.n	8000902 <MPU9250_Init+0xa2>
	default:
		break;
 8000900:	bf00      	nop
	}

	HAL_I2C_Mem_Read(I2Cx, MPU6500_ADDR, MPU6500_WHO_AM_I, 1, &MPU9250_rx, 1, 100);
 8000902:	2364      	movs	r3, #100	; 0x64
 8000904:	9302      	str	r3, [sp, #8]
 8000906:	2301      	movs	r3, #1
 8000908:	9301      	str	r3, [sp, #4]
 800090a:	4b47      	ldr	r3, [pc, #284]	; (8000a28 <MPU9250_Init+0x1c8>)
 800090c:	9300      	str	r3, [sp, #0]
 800090e:	2301      	movs	r3, #1
 8000910:	2275      	movs	r2, #117	; 0x75
 8000912:	21d0      	movs	r1, #208	; 0xd0
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f007 fd3f 	bl	8008398 <HAL_I2C_Mem_Read>
	if (MPU9250_rx == 0x71)
 800091a:	4b43      	ldr	r3, [pc, #268]	; (8000a28 <MPU9250_Init+0x1c8>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b71      	cmp	r3, #113	; 0x71
 8000920:	d171      	bne.n	8000a06 <MPU9250_Init+0x1a6>
	{
		MPU9250_tx = 0x01; // Set Sampling by 2 = 500Hz
 8000922:	4b42      	ldr	r3, [pc, #264]	; (8000a2c <MPU9250_Init+0x1cc>)
 8000924:	2201      	movs	r2, #1
 8000926:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_SMPLRT_DIV, 1, &MPU9250_tx, 1, 100);
 8000928:	2364      	movs	r3, #100	; 0x64
 800092a:	9302      	str	r3, [sp, #8]
 800092c:	2301      	movs	r3, #1
 800092e:	9301      	str	r3, [sp, #4]
 8000930:	4b3e      	ldr	r3, [pc, #248]	; (8000a2c <MPU9250_Init+0x1cc>)
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	2301      	movs	r3, #1
 8000936:	2219      	movs	r2, #25
 8000938:	21d0      	movs	r1, #208	; 0xd0
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f007 fc18 	bl	8008170 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000940:	200a      	movs	r0, #10
 8000942:	f004 fa0d 	bl	8004d60 <HAL_Delay>

		MPU9250_tx = DLPF_CFG; // Digital Low Pass Filter Setting
 8000946:	4a39      	ldr	r2, [pc, #228]	; (8000a2c <MPU9250_Init+0x1cc>)
 8000948:	787b      	ldrb	r3, [r7, #1]
 800094a:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_CONFIG, 1, &MPU9250_tx, 1, 100);
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	9302      	str	r3, [sp, #8]
 8000950:	2301      	movs	r3, #1
 8000952:	9301      	str	r3, [sp, #4]
 8000954:	4b35      	ldr	r3, [pc, #212]	; (8000a2c <MPU9250_Init+0x1cc>)
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2301      	movs	r3, #1
 800095a:	221a      	movs	r2, #26
 800095c:	21d0      	movs	r1, #208	; 0xd0
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f007 fc06 	bl	8008170 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000964:	200a      	movs	r0, #10
 8000966:	f004 f9fb 	bl	8004d60 <HAL_Delay>

		MPU9250_tx = Gyro_FS << 3;
 800096a:	78fb      	ldrb	r3, [r7, #3]
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	b2da      	uxtb	r2, r3
 8000970:	4b2e      	ldr	r3, [pc, #184]	; (8000a2c <MPU9250_Init+0x1cc>)
 8000972:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_GYRO_CONFIG, 1, &MPU9250_tx, 1, 100);
 8000974:	2364      	movs	r3, #100	; 0x64
 8000976:	9302      	str	r3, [sp, #8]
 8000978:	2301      	movs	r3, #1
 800097a:	9301      	str	r3, [sp, #4]
 800097c:	4b2b      	ldr	r3, [pc, #172]	; (8000a2c <MPU9250_Init+0x1cc>)
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2301      	movs	r3, #1
 8000982:	221b      	movs	r2, #27
 8000984:	21d0      	movs	r1, #208	; 0xd0
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f007 fbf2 	bl	8008170 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 800098c:	200a      	movs	r0, #10
 800098e:	f004 f9e7 	bl	8004d60 <HAL_Delay>

		MPU9250_tx = Acc_FS << 3;
 8000992:	78bb      	ldrb	r3, [r7, #2]
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	b2da      	uxtb	r2, r3
 8000998:	4b24      	ldr	r3, [pc, #144]	; (8000a2c <MPU9250_Init+0x1cc>)
 800099a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG, 1, &MPU9250_tx, 1, 100);
 800099c:	2364      	movs	r3, #100	; 0x64
 800099e:	9302      	str	r3, [sp, #8]
 80009a0:	2301      	movs	r3, #1
 80009a2:	9301      	str	r3, [sp, #4]
 80009a4:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <MPU9250_Init+0x1cc>)
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	2301      	movs	r3, #1
 80009aa:	221c      	movs	r2, #28
 80009ac:	21d0      	movs	r1, #208	; 0xd0
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f007 fbde 	bl	8008170 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80009b4:	200a      	movs	r0, #10
 80009b6:	f004 f9d3 	bl	8004d60 <HAL_Delay>

		MPU9250_tx = A_DLPF_CFG;
 80009ba:	4a1c      	ldr	r2, [pc, #112]	; (8000a2c <MPU9250_Init+0x1cc>)
 80009bc:	7c3b      	ldrb	r3, [r7, #16]
 80009be:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG2, 1, &MPU9250_tx, 1, 100);
 80009c0:	2364      	movs	r3, #100	; 0x64
 80009c2:	9302      	str	r3, [sp, #8]
 80009c4:	2301      	movs	r3, #1
 80009c6:	9301      	str	r3, [sp, #4]
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <MPU9250_Init+0x1cc>)
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	2301      	movs	r3, #1
 80009ce:	221d      	movs	r2, #29
 80009d0:	21d0      	movs	r1, #208	; 0xd0
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f007 fbcc 	bl	8008170 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80009d8:	200a      	movs	r0, #10
 80009da:	f004 f9c1 	bl	8004d60 <HAL_Delay>

		MPU9250_tx = 0x00;
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <MPU9250_Init+0x1cc>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 80009e4:	2364      	movs	r3, #100	; 0x64
 80009e6:	9302      	str	r3, [sp, #8]
 80009e8:	2301      	movs	r3, #1
 80009ea:	9301      	str	r3, [sp, #4]
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MPU9250_Init+0x1cc>)
 80009ee:	9300      	str	r3, [sp, #0]
 80009f0:	2301      	movs	r3, #1
 80009f2:	226b      	movs	r2, #107	; 0x6b
 80009f4:	21d0      	movs	r1, #208	; 0xd0
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f007 fbba 	bl	8008170 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80009fc:	200a      	movs	r0, #10
 80009fe:	f004 f9af 	bl	8004d60 <HAL_Delay>

		return 1;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e000      	b.n	8000a08 <MPU9250_Init+0x1a8>
	}
	return 0;
 8000a06:	2300      	movs	r3, #0
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	24000000 	.word	0x24000000
 8000a14:	43030000 	.word	0x43030000
 8000a18:	42830000 	.word	0x42830000
 8000a1c:	42033333 	.word	0x42033333
 8000a20:	41833333 	.word	0x41833333
 8000a24:	24000004 	.word	0x24000004
 8000a28:	240002d9 	.word	0x240002d9
 8000a2c:	24000261 	.word	0x24000261

08000a30 <MPU9250_Bypass>:

void MPU9250_Bypass(I2C_HandleTypeDef *I2Cx)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af04      	add	r7, sp, #16
 8000a36:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Master Mode
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <MPU9250_Bypass+0x58>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Disable
 8000a3e:	2364      	movs	r3, #100	; 0x64
 8000a40:	9302      	str	r3, [sp, #8]
 8000a42:	2301      	movs	r3, #1
 8000a44:	9301      	str	r3, [sp, #4]
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <MPU9250_Bypass+0x58>)
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	226a      	movs	r2, #106	; 0x6a
 8000a4e:	21d0      	movs	r1, #208	; 0xd0
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f007 fb8d 	bl	8008170 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a56:	200a      	movs	r0, #10
 8000a58:	f004 f982 	bl	8004d60 <HAL_Delay>

	MPU9250_tx = 0b00000010; //Enable Bypass Mode
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <MPU9250_Bypass+0x58>)
 8000a5e:	2202      	movs	r2, #2
 8000a60:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Bypass Enable
 8000a62:	2364      	movs	r3, #100	; 0x64
 8000a64:	9302      	str	r3, [sp, #8]
 8000a66:	2301      	movs	r3, #1
 8000a68:	9301      	str	r3, [sp, #4]
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <MPU9250_Bypass+0x58>)
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2301      	movs	r3, #1
 8000a70:	2237      	movs	r2, #55	; 0x37
 8000a72:	21d0      	movs	r1, #208	; 0xd0
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f007 fb7b 	bl	8008170 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a7a:	200a      	movs	r0, #10
 8000a7c:	f004 f970 	bl	8004d60 <HAL_Delay>
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	24000261 	.word	0x24000261

08000a8c <MPU9250_Master>:

void MPU9250_Master(I2C_HandleTypeDef *I2Cx)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af04      	add	r7, sp, #16
 8000a92:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Bypass Mode
 8000a94:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <MPU9250_Master+0xa0>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Disable Bypass
 8000a9a:	2364      	movs	r3, #100	; 0x64
 8000a9c:	9302      	str	r3, [sp, #8]
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	9301      	str	r3, [sp, #4]
 8000aa2:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <MPU9250_Master+0xa0>)
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	2237      	movs	r2, #55	; 0x37
 8000aaa:	21d0      	movs	r1, #208	; 0xd0
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f007 fb5f 	bl	8008170 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000ab2:	200a      	movs	r0, #10
 8000ab4:	f004 f954 	bl	8004d60 <HAL_Delay>

	MPU9250_tx = 0b00100000; //Enable Master Mode
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <MPU9250_Master+0xa0>)
 8000aba:	2220      	movs	r2, #32
 8000abc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Enable
 8000abe:	2364      	movs	r3, #100	; 0x64
 8000ac0:	9302      	str	r3, [sp, #8]
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	9301      	str	r3, [sp, #4]
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <MPU9250_Master+0xa0>)
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	2301      	movs	r3, #1
 8000acc:	226a      	movs	r2, #106	; 0x6a
 8000ace:	21d0      	movs	r1, #208	; 0xd0
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f007 fb4d 	bl	8008170 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000ad6:	200a      	movs	r0, #10
 8000ad8:	f004 f942 	bl	8004d60 <HAL_Delay>

	MPU9250_tx = 0b00001101; //Set I2C Clock to 400kHz
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <MPU9250_Master+0xa0>)
 8000ade:	220d      	movs	r2, #13
 8000ae0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_MST_CTRL, 1, &MPU9250_tx, 1, 100); //Master Clock to 400kHz
 8000ae2:	2364      	movs	r3, #100	; 0x64
 8000ae4:	9302      	str	r3, [sp, #8]
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	9301      	str	r3, [sp, #4]
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <MPU9250_Master+0xa0>)
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	2301      	movs	r3, #1
 8000af0:	2224      	movs	r2, #36	; 0x24
 8000af2:	21d0      	movs	r1, #208	; 0xd0
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f007 fb3b 	bl	8008170 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000afa:	200a      	movs	r0, #10
 8000afc:	f004 f930 	bl	8004d60 <HAL_Delay>

	MPU9250_tx = 0x00;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <MPU9250_Master+0xa0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 8000b06:	2364      	movs	r3, #100	; 0x64
 8000b08:	9302      	str	r3, [sp, #8]
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	9301      	str	r3, [sp, #4]
 8000b0e:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <MPU9250_Master+0xa0>)
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	2301      	movs	r3, #1
 8000b14:	226b      	movs	r2, #107	; 0x6b
 8000b16:	21d0      	movs	r1, #208	; 0xd0
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f007 fb29 	bl	8008170 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b1e:	200a      	movs	r0, #10
 8000b20:	f004 f91e 	bl	8004d60 <HAL_Delay>
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	24000261 	.word	0x24000261

08000b30 <MPU9250_AK8963_Setup>:

uint8_t MPU9250_AK8963_Setup(I2C_HandleTypeDef *I2Cx, MPU9250_t *DataStruct)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af04      	add	r7, sp, #16
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
	MPU9250_tx = AK8963_CNTL1_Continous2; //Continuous Mode 2 (100Hz) + 16Bit Output
 8000b3a:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <MPU9250_AK8963_Setup+0xa0>)
 8000b3c:	2216      	movs	r2, #22
 8000b3e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, AK8963_ADDR, AK8963_CNTL1, 1, &MPU9250_tx, 1, 100);
 8000b40:	2364      	movs	r3, #100	; 0x64
 8000b42:	9302      	str	r3, [sp, #8]
 8000b44:	2301      	movs	r3, #1
 8000b46:	9301      	str	r3, [sp, #4]
 8000b48:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <MPU9250_AK8963_Setup+0xa0>)
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	220a      	movs	r2, #10
 8000b50:	2118      	movs	r1, #24
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f007 fb0c 	bl	8008170 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b58:	200a      	movs	r0, #10
 8000b5a:	f004 f901 	bl	8004d60 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_MPU9250_ASAX, 1, &MPU9250_rx_buf[0], 3, 100);
 8000b5e:	2364      	movs	r3, #100	; 0x64
 8000b60:	9302      	str	r3, [sp, #8]
 8000b62:	2303      	movs	r3, #3
 8000b64:	9301      	str	r3, [sp, #4]
 8000b66:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <MPU9250_AK8963_Setup+0xa4>)
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	2210      	movs	r2, #16
 8000b6e:	2118      	movs	r1, #24
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f007 fc11 	bl	8008398 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8000b76:	200a      	movs	r0, #10
 8000b78:	f004 f8f2 	bl	8004d60 <HAL_Delay>

	DataStruct->ASAX = MPU9250_rx_buf[0];
 8000b7c:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <MPU9250_AK8963_Setup+0xa4>)
 8000b7e:	781a      	ldrb	r2, [r3, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	DataStruct->ASAY = MPU9250_rx_buf[1];
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MPU9250_AK8963_Setup+0xa4>)
 8000b88:	785a      	ldrb	r2, [r3, #1]
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	DataStruct->ASAZ = MPU9250_rx_buf[2];
 8000b90:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <MPU9250_AK8963_Setup+0xa4>)
 8000b92:	789a      	ldrb	r2, [r3, #2]
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_WIA, 1, &AK8963_WAI, 3, 100);
 8000b9a:	2364      	movs	r3, #100	; 0x64
 8000b9c:	9302      	str	r3, [sp, #8]
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	9301      	str	r3, [sp, #4]
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <MPU9250_AK8963_Setup+0xa8>)
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2118      	movs	r1, #24
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f007 fbf3 	bl	8008398 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8000bb2:	200a      	movs	r0, #10
 8000bb4:	f004 f8d4 	bl	8004d60 <HAL_Delay>

	if(AK8963_WAI == 0b01001000) return 1;
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <MPU9250_AK8963_Setup+0xa8>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b48      	cmp	r3, #72	; 0x48
 8000bbe:	d101      	bne.n	8000bc4 <MPU9250_AK8963_Setup+0x94>
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e000      	b.n	8000bc6 <MPU9250_AK8963_Setup+0x96>
	return 0;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	24000261 	.word	0x24000261
 8000bd4:	240002dc 	.word	0x240002dc
 8000bd8:	240002d8 	.word	0x240002d8

08000bdc <MPU9250_Slave0_Enable>:

void MPU9250_Slave0_Enable(I2C_HandleTypeDef *I2Cx)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af04      	add	r7, sp, #16
 8000be2:	6078      	str	r0, [r7, #4]
	MPU9250_tx = (AK8963_ADDR >> 1) | 0x80; //Access Slave into read mode
 8000be4:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <MPU9250_Slave0_Enable+0x7c>)
 8000be6:	228c      	movs	r2, #140	; 0x8c
 8000be8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_ADDR, 1, &MPU9250_tx, 1, 100);
 8000bea:	2364      	movs	r3, #100	; 0x64
 8000bec:	9302      	str	r3, [sp, #8]
 8000bee:	2301      	movs	r3, #1
 8000bf0:	9301      	str	r3, [sp, #4]
 8000bf2:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <MPU9250_Slave0_Enable+0x7c>)
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	2225      	movs	r2, #37	; 0x25
 8000bfa:	21d0      	movs	r1, #208	; 0xd0
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f007 fab7 	bl	8008170 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c02:	200a      	movs	r0, #10
 8000c04:	f004 f8ac 	bl	8004d60 <HAL_Delay>

	MPU9250_tx = AK8963_HXL; //Slave REG for reading to take place
 8000c08:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <MPU9250_Slave0_Enable+0x7c>)
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_REG, 1, &MPU9250_tx, 1, 100);
 8000c0e:	2364      	movs	r3, #100	; 0x64
 8000c10:	9302      	str	r3, [sp, #8]
 8000c12:	2301      	movs	r3, #1
 8000c14:	9301      	str	r3, [sp, #4]
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <MPU9250_Slave0_Enable+0x7c>)
 8000c18:	9300      	str	r3, [sp, #0]
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	2226      	movs	r2, #38	; 0x26
 8000c1e:	21d0      	movs	r1, #208	; 0xd0
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f007 faa5 	bl	8008170 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c26:	200a      	movs	r0, #10
 8000c28:	f004 f89a 	bl	8004d60 <HAL_Delay>

	MPU9250_tx = 0x80 | 0x07; //Number of data bytes
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <MPU9250_Slave0_Enable+0x7c>)
 8000c2e:	2287      	movs	r2, #135	; 0x87
 8000c30:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_CTRL, 1, &MPU9250_tx, 1, 100);
 8000c32:	2364      	movs	r3, #100	; 0x64
 8000c34:	9302      	str	r3, [sp, #8]
 8000c36:	2301      	movs	r3, #1
 8000c38:	9301      	str	r3, [sp, #4]
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <MPU9250_Slave0_Enable+0x7c>)
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	2301      	movs	r3, #1
 8000c40:	2227      	movs	r2, #39	; 0x27
 8000c42:	21d0      	movs	r1, #208	; 0xd0
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f007 fa93 	bl	8008170 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c4a:	200a      	movs	r0, #10
 8000c4c:	f004 f888 	bl	8004d60 <HAL_Delay>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	24000261 	.word	0x24000261

08000c5c <MPU9250_Read_All>:

void MPU9250_Read_All(I2C_HandleTypeDef *I2Cx)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af02      	add	r7, sp, #8
 8000c62:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_XOUT_H, 1, &MPU9250_rx_buf[0], 20);
 8000c64:	2314      	movs	r3, #20
 8000c66:	9301      	str	r3, [sp, #4]
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <MPU9250_Read_All+0x24>)
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	223b      	movs	r2, #59	; 0x3b
 8000c70:	21d0      	movs	r1, #208	; 0xd0
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f007 fcaa 	bl	80085cc <HAL_I2C_Mem_Read_DMA>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	240002dc 	.word	0x240002dc
 8000c84:	00000000 	.word	0x00000000

08000c88 <MPU9250_Parsing>:

void MPU9250_Parsing(MPU9250_t *DataStruct)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = -(MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8000c90:	4bb9      	ldr	r3, [pc, #740]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	021b      	lsls	r3, r3, #8
 8000c96:	b21a      	sxth	r2, r3
 8000c98:	4bb7      	ldr	r3, [pc, #732]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000c9a:	785b      	ldrb	r3, [r3, #1]
 8000c9c:	b21b      	sxth	r3, r3
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	b21b      	sxth	r3, r3
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	425b      	negs	r3, r3
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	b21a      	sxth	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = (MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8000cae:	4bb2      	ldr	r3, [pc, #712]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000cb0:	789b      	ldrb	r3, [r3, #2]
 8000cb2:	021b      	lsls	r3, r3, #8
 8000cb4:	b21a      	sxth	r2, r3
 8000cb6:	4bb0      	ldr	r3, [pc, #704]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000cb8:	78db      	ldrb	r3, [r3, #3]
 8000cba:	b21b      	sxth	r3, r3
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	b21a      	sxth	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = (MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]);
 8000cc4:	4bac      	ldr	r3, [pc, #688]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000cc6:	791b      	ldrb	r3, [r3, #4]
 8000cc8:	021b      	lsls	r3, r3, #8
 8000cca:	b21a      	sxth	r2, r3
 8000ccc:	4baa      	ldr	r3, [pc, #680]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000cce:	795b      	ldrb	r3, [r3, #5]
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b21a      	sxth	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	809a      	strh	r2, [r3, #4]
	// Didn't Save Temp Value
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8000cda:	4ba7      	ldr	r3, [pc, #668]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000cdc:	7a1b      	ldrb	r3, [r3, #8]
 8000cde:	021b      	lsls	r3, r3, #8
 8000ce0:	b21a      	sxth	r2, r3
 8000ce2:	4ba5      	ldr	r3, [pc, #660]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000ce4:	7a5b      	ldrb	r3, [r3, #9]
 8000ce6:	b21b      	sxth	r3, r3
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	b21a      	sxth	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8000cf0:	4ba1      	ldr	r3, [pc, #644]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000cf2:	7a9b      	ldrb	r3, [r3, #10]
 8000cf4:	021b      	lsls	r3, r3, #8
 8000cf6:	b21a      	sxth	r2, r3
 8000cf8:	4b9f      	ldr	r3, [pc, #636]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000cfa:	7adb      	ldrb	r3, [r3, #11]
 8000cfc:	b21b      	sxth	r3, r3
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	b21b      	sxth	r3, r3
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	425b      	negs	r3, r3
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	b21a      	sxth	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 8000d0e:	4b9a      	ldr	r3, [pc, #616]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000d10:	7b1b      	ldrb	r3, [r3, #12]
 8000d12:	021b      	lsls	r3, r3, #8
 8000d14:	b21a      	sxth	r2, r3
 8000d16:	4b98      	ldr	r3, [pc, #608]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000d18:	7b5b      	ldrb	r3, [r3, #13]
 8000d1a:	b21b      	sxth	r3, r3
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	b21b      	sxth	r3, r3
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	425b      	negs	r3, r3
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	b21a      	sxth	r2, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	831a      	strh	r2, [r3, #24]

	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 8000d2c:	4b92      	ldr	r3, [pc, #584]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000d2e:	7bdb      	ldrb	r3, [r3, #15]
 8000d30:	021b      	lsls	r3, r3, #8
 8000d32:	b21a      	sxth	r2, r3
 8000d34:	4b90      	ldr	r3, [pc, #576]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000d36:	7b9b      	ldrb	r3, [r3, #14]
 8000d38:	b21b      	sxth	r3, r3
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	b21b      	sxth	r3, r3
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	425b      	negs	r3, r3
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	b21a      	sxth	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	875a      	strh	r2, [r3, #58]	; 0x3a
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 8000d4a:	4b8b      	ldr	r3, [pc, #556]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000d4c:	7c5b      	ldrb	r3, [r3, #17]
 8000d4e:	021b      	lsls	r3, r3, #8
 8000d50:	b21a      	sxth	r2, r3
 8000d52:	4b89      	ldr	r3, [pc, #548]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000d54:	7c1b      	ldrb	r3, [r3, #16]
 8000d56:	b21b      	sxth	r3, r3
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	b21a      	sxth	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	871a      	strh	r2, [r3, #56]	; 0x38
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 8000d60:	4b85      	ldr	r3, [pc, #532]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000d62:	7cdb      	ldrb	r3, [r3, #19]
 8000d64:	021b      	lsls	r3, r3, #8
 8000d66:	b21a      	sxth	r2, r3
 8000d68:	4b83      	ldr	r3, [pc, #524]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000d6a:	7c9b      	ldrb	r3, [r3, #18]
 8000d6c:	b21b      	sxth	r3, r3
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	b21a      	sxth	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	879a      	strh	r2, [r3, #60]	; 0x3c

	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000d7c:	ee07 3a90 	vmov	s15, r3
 8000d80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d84:	4b7d      	ldr	r3, [pc, #500]	; (8000f7c <MPU9250_Parsing+0x2f4>)
 8000d86:	ed93 7a00 	vldr	s14, [r3]
 8000d8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000d9a:	ee07 3a90 	vmov	s15, r3
 8000d9e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000da2:	4b76      	ldr	r3, [pc, #472]	; (8000f7c <MPU9250_Parsing+0x2f4>)
 8000da4:	ed93 7a00 	vldr	s14, [r3]
 8000da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000db8:	ee07 3a90 	vmov	s15, r3
 8000dbc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dc0:	4b6e      	ldr	r3, [pc, #440]	; (8000f7c <MPU9250_Parsing+0x2f4>)
 8000dc2:	ed93 7a00 	vldr	s14, [r3]
 8000dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dd6:	ee07 3a90 	vmov	s15, r3
 8000dda:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dde:	4b68      	ldr	r3, [pc, #416]	; (8000f80 <MPU9250_Parsing+0x2f8>)
 8000de0:	ed93 7a00 	vldr	s14, [r3]
 8000de4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000df4:	ee07 3a90 	vmov	s15, r3
 8000df8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dfc:	4b60      	ldr	r3, [pc, #384]	; (8000f80 <MPU9250_Parsing+0x2f8>)
 8000dfe:	ed93 7a00 	vldr	s14, [r3]
 8000e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = ((DataStruct->Az_Raw / MPU9250_Acc_LSB)-0.15) / 1.08;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e12:	ee07 3a90 	vmov	s15, r3
 8000e16:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e1a:	4b59      	ldr	r3, [pc, #356]	; (8000f80 <MPU9250_Parsing+0x2f8>)
 8000e1c:	ed93 7a00 	vldr	s14, [r3]
 8000e20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e28:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 8000f68 <MPU9250_Parsing+0x2e0>
 8000e2c:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000e30:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8000f70 <MPU9250_Parsing+0x2e8>
 8000e34:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Mx = (DataStruct->Mx_Raw * ((DataStruct->ASAX - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8000e48:	461a      	mov	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000e50:	3b80      	subs	r3, #128	; 0x80
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	da00      	bge.n	8000e58 <MPU9250_Parsing+0x1d0>
 8000e56:	33ff      	adds	r3, #255	; 0xff
 8000e58:	121b      	asrs	r3, r3, #8
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	fb03 f302 	mul.w	r3, r3, r2
 8000e60:	ee07 3a90 	vmov	s15, r3
 8000e64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e68:	4b46      	ldr	r3, [pc, #280]	; (8000f84 <MPU9250_Parsing+0x2fc>)
 8000e6a:	edd3 7a00 	vldr	s15, [r3]
 8000e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	DataStruct->My = (DataStruct->My_Raw * ((DataStruct->ASAY - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8000e7e:	461a      	mov	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8000e86:	3b80      	subs	r3, #128	; 0x80
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	da00      	bge.n	8000e8e <MPU9250_Parsing+0x206>
 8000e8c:	33ff      	adds	r3, #255	; 0xff
 8000e8e:	121b      	asrs	r3, r3, #8
 8000e90:	3301      	adds	r3, #1
 8000e92:	fb03 f302 	mul.w	r3, r3, r2
 8000e96:	ee07 3a90 	vmov	s15, r3
 8000e9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e9e:	4b39      	ldr	r3, [pc, #228]	; (8000f84 <MPU9250_Parsing+0x2fc>)
 8000ea0:	edd3 7a00 	vldr	s15, [r3]
 8000ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	DataStruct->Mz = (DataStruct->Mz_Raw * ((DataStruct->ASAZ - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000ebc:	3b80      	subs	r3, #128	; 0x80
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	da00      	bge.n	8000ec4 <MPU9250_Parsing+0x23c>
 8000ec2:	33ff      	adds	r3, #255	; 0xff
 8000ec4:	121b      	asrs	r3, r3, #8
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	fb03 f302 	mul.w	r3, r3, r2
 8000ecc:	ee07 3a90 	vmov	s15, r3
 8000ed0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ed4:	4b2b      	ldr	r3, [pc, #172]	; (8000f84 <MPU9250_Parsing+0x2fc>)
 8000ed6:	edd3 7a00 	vldr	s15, [r3]
 8000eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70

	DataStruct->Gx -= DataStruct->Gx_Offset;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	ed93 7a08 	vldr	s14, [r3, #32]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000ef0:	ee07 3a90 	vmov	s15, r3
 8000ef4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy -= DataStruct->Gy_Offset;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000f0e:	ee07 3a90 	vmov	s15, r3
 8000f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz -= DataStruct->Gz_Offset;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000f2c:	ee07 3a90 	vmov	s15, r3
 8000f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Gx_Rad = DataStruct->Gx * D2R;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	edd3 7a08 	vldr	s15, [r3, #32]
 8000f44:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000f88 <MPU9250_Parsing+0x300>
 8000f48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	DataStruct->Gy_Rad = DataStruct->Gy * D2R;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000f58:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000f88 <MPU9250_Parsing+0x300>
 8000f5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f60:	e014      	b.n	8000f8c <MPU9250_Parsing+0x304>
 8000f62:	bf00      	nop
 8000f64:	f3af 8000 	nop.w
 8000f68:	33333333 	.word	0x33333333
 8000f6c:	3fc33333 	.word	0x3fc33333
 8000f70:	147ae148 	.word	0x147ae148
 8000f74:	3ff147ae 	.word	0x3ff147ae
 8000f78:	240002dc 	.word	0x240002dc
 8000f7c:	24000000 	.word	0x24000000
 8000f80:	24000004 	.word	0x24000004
 8000f84:	24000008 	.word	0x24000008
 8000f88:	3c8efa35 	.word	0x3c8efa35
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	DataStruct->Gz_Rad = DataStruct->Gz * D2R;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000f98:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8000f88 <MPU9250_Parsing+0x300>
 8000f9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	DataStruct->Mx -= DataStruct->Mx_Offset;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8000fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	DataStruct->My -= DataStruct->My_Offset;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8000fc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	DataStruct->Mz -= DataStruct->Mz_Offset;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8000fde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	0000      	movs	r0, r0
	...

08000ff8 <MPU9250_Parsing_NoOffset>:

void MPU9250_Parsing_NoOffset(MPU9250_t *DataStruct)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = -(MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8001000:	4bb1      	ldr	r3, [pc, #708]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	021b      	lsls	r3, r3, #8
 8001006:	b21a      	sxth	r2, r3
 8001008:	4baf      	ldr	r3, [pc, #700]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 800100a:	785b      	ldrb	r3, [r3, #1]
 800100c:	b21b      	sxth	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	b21b      	sxth	r3, r3
 8001012:	b29b      	uxth	r3, r3
 8001014:	425b      	negs	r3, r3
 8001016:	b29b      	uxth	r3, r3
 8001018:	b21a      	sxth	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = (MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 800101e:	4baa      	ldr	r3, [pc, #680]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 8001020:	789b      	ldrb	r3, [r3, #2]
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	b21a      	sxth	r2, r3
 8001026:	4ba8      	ldr	r3, [pc, #672]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 8001028:	78db      	ldrb	r3, [r3, #3]
 800102a:	b21b      	sxth	r3, r3
 800102c:	4313      	orrs	r3, r2
 800102e:	b21a      	sxth	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = (MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]);
 8001034:	4ba4      	ldr	r3, [pc, #656]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 8001036:	791b      	ldrb	r3, [r3, #4]
 8001038:	021b      	lsls	r3, r3, #8
 800103a:	b21a      	sxth	r2, r3
 800103c:	4ba2      	ldr	r3, [pc, #648]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 800103e:	795b      	ldrb	r3, [r3, #5]
 8001040:	b21b      	sxth	r3, r3
 8001042:	4313      	orrs	r3, r2
 8001044:	b21a      	sxth	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	809a      	strh	r2, [r3, #4]
	// Didn't Save Temp Value
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 800104a:	4b9f      	ldr	r3, [pc, #636]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 800104c:	7a1b      	ldrb	r3, [r3, #8]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	b21a      	sxth	r2, r3
 8001052:	4b9d      	ldr	r3, [pc, #628]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 8001054:	7a5b      	ldrb	r3, [r3, #9]
 8001056:	b21b      	sxth	r3, r3
 8001058:	4313      	orrs	r3, r2
 800105a:	b21a      	sxth	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8001060:	4b99      	ldr	r3, [pc, #612]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 8001062:	7a9b      	ldrb	r3, [r3, #10]
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	b21a      	sxth	r2, r3
 8001068:	4b97      	ldr	r3, [pc, #604]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 800106a:	7adb      	ldrb	r3, [r3, #11]
 800106c:	b21b      	sxth	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b21b      	sxth	r3, r3
 8001072:	b29b      	uxth	r3, r3
 8001074:	425b      	negs	r3, r3
 8001076:	b29b      	uxth	r3, r3
 8001078:	b21a      	sxth	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 800107e:	4b92      	ldr	r3, [pc, #584]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 8001080:	7b1b      	ldrb	r3, [r3, #12]
 8001082:	021b      	lsls	r3, r3, #8
 8001084:	b21a      	sxth	r2, r3
 8001086:	4b90      	ldr	r3, [pc, #576]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 8001088:	7b5b      	ldrb	r3, [r3, #13]
 800108a:	b21b      	sxth	r3, r3
 800108c:	4313      	orrs	r3, r2
 800108e:	b21b      	sxth	r3, r3
 8001090:	b29b      	uxth	r3, r3
 8001092:	425b      	negs	r3, r3
 8001094:	b29b      	uxth	r3, r3
 8001096:	b21a      	sxth	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	831a      	strh	r2, [r3, #24]

	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 800109c:	4b8a      	ldr	r3, [pc, #552]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 800109e:	7bdb      	ldrb	r3, [r3, #15]
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	4b88      	ldr	r3, [pc, #544]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 80010a6:	7b9b      	ldrb	r3, [r3, #14]
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	4313      	orrs	r3, r2
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	425b      	negs	r3, r3
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	875a      	strh	r2, [r3, #58]	; 0x3a
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 80010ba:	4b83      	ldr	r3, [pc, #524]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 80010bc:	7c5b      	ldrb	r3, [r3, #17]
 80010be:	021b      	lsls	r3, r3, #8
 80010c0:	b21a      	sxth	r2, r3
 80010c2:	4b81      	ldr	r3, [pc, #516]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 80010c4:	7c1b      	ldrb	r3, [r3, #16]
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	871a      	strh	r2, [r3, #56]	; 0x38
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 80010d0:	4b7d      	ldr	r3, [pc, #500]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 80010d2:	7cdb      	ldrb	r3, [r3, #19]
 80010d4:	021b      	lsls	r3, r3, #8
 80010d6:	b21a      	sxth	r2, r3
 80010d8:	4b7b      	ldr	r3, [pc, #492]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 80010da:	7c9b      	ldrb	r3, [r3, #18]
 80010dc:	b21b      	sxth	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	879a      	strh	r2, [r3, #60]	; 0x3c

	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB* D2R;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010f4:	4b75      	ldr	r3, [pc, #468]	; (80012cc <MPU9250_Parsing_NoOffset+0x2d4>)
 80010f6:	ed93 7a00 	vldr	s14, [r3]
 80010fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010fe:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80012d0 <MPU9250_Parsing_NoOffset+0x2d8>
 8001102:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB* D2R;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001112:	ee07 3a90 	vmov	s15, r3
 8001116:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800111a:	4b6c      	ldr	r3, [pc, #432]	; (80012cc <MPU9250_Parsing_NoOffset+0x2d4>)
 800111c:	ed93 7a00 	vldr	s14, [r3]
 8001120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001124:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80012d0 <MPU9250_Parsing_NoOffset+0x2d8>
 8001128:	ee67 7a87 	vmul.f32	s15, s15, s14
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB* D2R;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001138:	ee07 3a90 	vmov	s15, r3
 800113c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001140:	4b62      	ldr	r3, [pc, #392]	; (80012cc <MPU9250_Parsing_NoOffset+0x2d4>)
 8001142:	ed93 7a00 	vldr	s14, [r3]
 8001146:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800114a:	ed9f 7a61 	vldr	s14, [pc, #388]	; 80012d0 <MPU9250_Parsing_NoOffset+0x2d8>
 800114e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Gx_Rad = DataStruct->Gx * D2R;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	edd3 7a08 	vldr	s15, [r3, #32]
 800115e:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80012d0 <MPU9250_Parsing_NoOffset+0x2d8>
 8001162:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	DataStruct->Gy_Rad = DataStruct->Gy * D2R;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001172:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80012d0 <MPU9250_Parsing_NoOffset+0x2d8>
 8001176:	ee67 7a87 	vmul.f32	s15, s15, s14
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	DataStruct->Gz_Rad = DataStruct->Gz * D2R;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001186:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80012d0 <MPU9250_Parsing_NoOffset+0x2d8>
 800118a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011a2:	4b4c      	ldr	r3, [pc, #304]	; (80012d4 <MPU9250_Parsing_NoOffset+0x2dc>)
 80011a4:	ed93 7a00 	vldr	s14, [r3]
 80011a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011b8:	ee07 3a90 	vmov	s15, r3
 80011bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011c0:	4b44      	ldr	r3, [pc, #272]	; (80012d4 <MPU9250_Parsing_NoOffset+0x2dc>)
 80011c2:	ed93 7a00 	vldr	s14, [r3]
 80011c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = ((DataStruct->Az_Raw / MPU9250_Acc_LSB)-0.15) / 1.08;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011d6:	ee07 3a90 	vmov	s15, r3
 80011da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011de:	4b3d      	ldr	r3, [pc, #244]	; (80012d4 <MPU9250_Parsing_NoOffset+0x2dc>)
 80011e0:	ed93 7a00 	vldr	s14, [r3]
 80011e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011ec:	ed9f 6b32 	vldr	d6, [pc, #200]	; 80012b8 <MPU9250_Parsing_NoOffset+0x2c0>
 80011f0:	ee37 6b46 	vsub.f64	d6, d7, d6
 80011f4:	ed9f 5b32 	vldr	d5, [pc, #200]	; 80012c0 <MPU9250_Parsing_NoOffset+0x2c8>
 80011f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Mx = (DataStruct->Mx_Raw * ((DataStruct->ASAX - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800120c:	461a      	mov	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001214:	3b80      	subs	r3, #128	; 0x80
 8001216:	2b00      	cmp	r3, #0
 8001218:	da00      	bge.n	800121c <MPU9250_Parsing_NoOffset+0x224>
 800121a:	33ff      	adds	r3, #255	; 0xff
 800121c:	121b      	asrs	r3, r3, #8
 800121e:	3301      	adds	r3, #1
 8001220:	fb03 f302 	mul.w	r3, r3, r2
 8001224:	ee07 3a90 	vmov	s15, r3
 8001228:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800122c:	4b2a      	ldr	r3, [pc, #168]	; (80012d8 <MPU9250_Parsing_NoOffset+0x2e0>)
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	DataStruct->My = (DataStruct->My_Raw * ((DataStruct->ASAY - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8001242:	461a      	mov	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800124a:	3b80      	subs	r3, #128	; 0x80
 800124c:	2b00      	cmp	r3, #0
 800124e:	da00      	bge.n	8001252 <MPU9250_Parsing_NoOffset+0x25a>
 8001250:	33ff      	adds	r3, #255	; 0xff
 8001252:	121b      	asrs	r3, r3, #8
 8001254:	3301      	adds	r3, #1
 8001256:	fb03 f302 	mul.w	r3, r3, r2
 800125a:	ee07 3a90 	vmov	s15, r3
 800125e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001262:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <MPU9250_Parsing_NoOffset+0x2e0>)
 8001264:	edd3 7a00 	vldr	s15, [r3]
 8001268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	DataStruct->Mz = (DataStruct->Mz_Raw * ((DataStruct->ASAZ - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8001278:	461a      	mov	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001280:	3b80      	subs	r3, #128	; 0x80
 8001282:	2b00      	cmp	r3, #0
 8001284:	da00      	bge.n	8001288 <MPU9250_Parsing_NoOffset+0x290>
 8001286:	33ff      	adds	r3, #255	; 0xff
 8001288:	121b      	asrs	r3, r3, #8
 800128a:	3301      	adds	r3, #1
 800128c:	fb03 f302 	mul.w	r3, r3, r2
 8001290:	ee07 3a90 	vmov	s15, r3
 8001294:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <MPU9250_Parsing_NoOffset+0x2e0>)
 800129a:	edd3 7a00 	vldr	s15, [r3]
 800129e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	f3af 8000 	nop.w
 80012b8:	33333333 	.word	0x33333333
 80012bc:	3fc33333 	.word	0x3fc33333
 80012c0:	147ae148 	.word	0x147ae148
 80012c4:	3ff147ae 	.word	0x3ff147ae
 80012c8:	240002dc 	.word	0x240002dc
 80012cc:	24000000 	.word	0x24000000
 80012d0:	3c8efa35 	.word	0x3c8efa35
 80012d4:	24000004 	.word	0x24000004
 80012d8:	24000008 	.word	0x24000008

080012dc <MadgwickAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b0ae      	sub	sp, #184	; 0xb8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80012e6:	edc7 0a08 	vstr	s1, [r7, #32]
 80012ea:	ed87 1a07 	vstr	s2, [r7, #28]
 80012ee:	edc7 1a06 	vstr	s3, [r7, #24]
 80012f2:	ed87 2a05 	vstr	s4, [r7, #20]
 80012f6:	edc7 2a04 	vstr	s5, [r7, #16]
 80012fa:	ed87 3a03 	vstr	s6, [r7, #12]
 80012fe:	edc7 3a02 	vstr	s7, [r7, #8]
 8001302:	ed87 4a01 	vstr	s8, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;
	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8001306:	edd7 7a03 	vldr	s15, [r7, #12]
 800130a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800130e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001312:	d11d      	bne.n	8001350 <MadgwickAHRSupdate+0x74>
 8001314:	edd7 7a02 	vldr	s15, [r7, #8]
 8001318:	eef5 7a40 	vcmp.f32	s15, #0.0
 800131c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001320:	d116      	bne.n	8001350 <MadgwickAHRSupdate+0x74>
 8001322:	edd7 7a01 	vldr	s15, [r7, #4]
 8001326:	eef5 7a40 	vcmp.f32	s15, #0.0
 800132a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132e:	d10f      	bne.n	8001350 <MadgwickAHRSupdate+0x74>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 8001330:	edd7 2a04 	vldr	s5, [r7, #16]
 8001334:	ed97 2a05 	vldr	s4, [r7, #20]
 8001338:	edd7 1a06 	vldr	s3, [r7, #24]
 800133c:	ed97 1a07 	vldr	s2, [r7, #28]
 8001340:	edd7 0a08 	vldr	s1, [r7, #32]
 8001344:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001348:	f000 ffd6 	bl	80022f8 <MadgwickAHRSupdateIMU>
		return;
 800134c:	f000 bfb4 	b.w	80022b8 <MadgwickAHRSupdate+0xfdc>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8001350:	4be6      	ldr	r3, [pc, #920]	; (80016ec <MadgwickAHRSupdate+0x410>)
 8001352:	edd3 7a00 	vldr	s15, [r3]
 8001356:	eeb1 7a67 	vneg.f32	s14, s15
 800135a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800135e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001362:	4be3      	ldr	r3, [pc, #908]	; (80016f0 <MadgwickAHRSupdate+0x414>)
 8001364:	edd3 6a00 	vldr	s13, [r3]
 8001368:	edd7 7a08 	vldr	s15, [r7, #32]
 800136c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001370:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001374:	4bdf      	ldr	r3, [pc, #892]	; (80016f4 <MadgwickAHRSupdate+0x418>)
 8001376:	edd3 6a00 	vldr	s13, [r3]
 800137a:	edd7 7a07 	vldr	s15, [r7, #28]
 800137e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001382:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001386:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800138a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800138e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8001392:	4bd9      	ldr	r3, [pc, #868]	; (80016f8 <MadgwickAHRSupdate+0x41c>)
 8001394:	ed93 7a00 	vldr	s14, [r3]
 8001398:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800139c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013a0:	4bd3      	ldr	r3, [pc, #844]	; (80016f0 <MadgwickAHRSupdate+0x414>)
 80013a2:	edd3 6a00 	vldr	s13, [r3]
 80013a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80013aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013b2:	4bd0      	ldr	r3, [pc, #832]	; (80016f4 <MadgwickAHRSupdate+0x418>)
 80013b4:	edd3 6a00 	vldr	s13, [r3]
 80013b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80013bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013cc:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80013d0:	4bc9      	ldr	r3, [pc, #804]	; (80016f8 <MadgwickAHRSupdate+0x41c>)
 80013d2:	ed93 7a00 	vldr	s14, [r3]
 80013d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80013da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013de:	4bc3      	ldr	r3, [pc, #780]	; (80016ec <MadgwickAHRSupdate+0x410>)
 80013e0:	edd3 6a00 	vldr	s13, [r3]
 80013e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80013e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013f0:	4bc0      	ldr	r3, [pc, #768]	; (80016f4 <MadgwickAHRSupdate+0x418>)
 80013f2:	edd3 6a00 	vldr	s13, [r3]
 80013f6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001402:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800140e:	4bba      	ldr	r3, [pc, #744]	; (80016f8 <MadgwickAHRSupdate+0x41c>)
 8001410:	ed93 7a00 	vldr	s14, [r3]
 8001414:	edd7 7a07 	vldr	s15, [r7, #28]
 8001418:	ee27 7a27 	vmul.f32	s14, s14, s15
 800141c:	4bb3      	ldr	r3, [pc, #716]	; (80016ec <MadgwickAHRSupdate+0x410>)
 800141e:	edd3 6a00 	vldr	s13, [r3]
 8001422:	edd7 7a08 	vldr	s15, [r7, #32]
 8001426:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800142a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800142e:	4bb0      	ldr	r3, [pc, #704]	; (80016f0 <MadgwickAHRSupdate+0x414>)
 8001430:	edd3 6a00 	vldr	s13, [r3]
 8001434:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001438:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800143c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001440:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001444:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001448:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 800144c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001450:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001458:	d10e      	bne.n	8001478 <MadgwickAHRSupdate+0x19c>
 800145a:	edd7 7a05 	vldr	s15, [r7, #20]
 800145e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001466:	d107      	bne.n	8001478 <MadgwickAHRSupdate+0x19c>
 8001468:	edd7 7a04 	vldr	s15, [r7, #16]
 800146c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001474:	f000 85a6 	beq.w	8001fc4 <MadgwickAHRSupdate+0xce8>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001478:	edd7 7a06 	vldr	s15, [r7, #24]
 800147c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001480:	edd7 7a05 	vldr	s15, [r7, #20]
 8001484:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001488:	ee37 7a27 	vadd.f32	s14, s14, s15
 800148c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001490:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001494:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001498:	eeb0 0a67 	vmov.f32	s0, s15
 800149c:	f001 fb5a 	bl	8002b54 <invSqrt>
 80014a0:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		ax *= recipNorm;
 80014a4:	ed97 7a06 	vldr	s14, [r7, #24]
 80014a8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b0:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 80014b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80014b8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c0:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;   
 80014c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80014c8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d0:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 80014d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80014d8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80014dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80014e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f4:	eeb0 0a67 	vmov.f32	s0, s15
 80014f8:	f001 fb2c 	bl	8002b54 <invSqrt>
 80014fc:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		mx *= recipNorm;
 8001500:	ed97 7a03 	vldr	s14, [r7, #12]
 8001504:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800150c:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 8001510:	ed97 7a02 	vldr	s14, [r7, #8]
 8001514:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800151c:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 8001520:	ed97 7a01 	vldr	s14, [r7, #4]
 8001524:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800152c:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 8001530:	4b71      	ldr	r3, [pc, #452]	; (80016f8 <MadgwickAHRSupdate+0x41c>)
 8001532:	edd3 7a00 	vldr	s15, [r3]
 8001536:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800153a:	ed97 7a03 	vldr	s14, [r7, #12]
 800153e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001542:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0my = 2.0f * q0 * my;
 8001546:	4b6c      	ldr	r3, [pc, #432]	; (80016f8 <MadgwickAHRSupdate+0x41c>)
 8001548:	edd3 7a00 	vldr	s15, [r3]
 800154c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001550:	ed97 7a02 	vldr	s14, [r7, #8]
 8001554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001558:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q0mz = 2.0f * q0 * mz;
 800155c:	4b66      	ldr	r3, [pc, #408]	; (80016f8 <MadgwickAHRSupdate+0x41c>)
 800155e:	edd3 7a00 	vldr	s15, [r3]
 8001562:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001566:	ed97 7a01 	vldr	s14, [r7, #4]
 800156a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800156e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		_2q1mx = 2.0f * q1 * mx;
 8001572:	4b5e      	ldr	r3, [pc, #376]	; (80016ec <MadgwickAHRSupdate+0x410>)
 8001574:	edd3 7a00 	vldr	s15, [r3]
 8001578:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800157c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001584:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		_2q0 = 2.0f * q0;
 8001588:	4b5b      	ldr	r3, [pc, #364]	; (80016f8 <MadgwickAHRSupdate+0x41c>)
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001592:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		_2q1 = 2.0f * q1;
 8001596:	4b55      	ldr	r3, [pc, #340]	; (80016ec <MadgwickAHRSupdate+0x410>)
 8001598:	edd3 7a00 	vldr	s15, [r3]
 800159c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015a0:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		_2q2 = 2.0f * q2;
 80015a4:	4b52      	ldr	r3, [pc, #328]	; (80016f0 <MadgwickAHRSupdate+0x414>)
 80015a6:	edd3 7a00 	vldr	s15, [r3]
 80015aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015ae:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q3 = 2.0f * q3;
 80015b2:	4b50      	ldr	r3, [pc, #320]	; (80016f4 <MadgwickAHRSupdate+0x418>)
 80015b4:	edd3 7a00 	vldr	s15, [r3]
 80015b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015bc:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0q2 = 2.0f * q0 * q2;
 80015c0:	4b4d      	ldr	r3, [pc, #308]	; (80016f8 <MadgwickAHRSupdate+0x41c>)
 80015c2:	edd3 7a00 	vldr	s15, [r3]
 80015c6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80015ca:	4b49      	ldr	r3, [pc, #292]	; (80016f0 <MadgwickAHRSupdate+0x414>)
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d4:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q2q3 = 2.0f * q2 * q3;
 80015d8:	4b45      	ldr	r3, [pc, #276]	; (80016f0 <MadgwickAHRSupdate+0x414>)
 80015da:	edd3 7a00 	vldr	s15, [r3]
 80015de:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80015e2:	4b44      	ldr	r3, [pc, #272]	; (80016f4 <MadgwickAHRSupdate+0x418>)
 80015e4:	edd3 7a00 	vldr	s15, [r3]
 80015e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ec:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q0q0 = q0 * q0;
 80015f0:	4b41      	ldr	r3, [pc, #260]	; (80016f8 <MadgwickAHRSupdate+0x41c>)
 80015f2:	ed93 7a00 	vldr	s14, [r3]
 80015f6:	4b40      	ldr	r3, [pc, #256]	; (80016f8 <MadgwickAHRSupdate+0x41c>)
 80015f8:	edd3 7a00 	vldr	s15, [r3]
 80015fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001600:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q0q1 = q0 * q1;
 8001604:	4b3c      	ldr	r3, [pc, #240]	; (80016f8 <MadgwickAHRSupdate+0x41c>)
 8001606:	ed93 7a00 	vldr	s14, [r3]
 800160a:	4b38      	ldr	r3, [pc, #224]	; (80016ec <MadgwickAHRSupdate+0x410>)
 800160c:	edd3 7a00 	vldr	s15, [r3]
 8001610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001614:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q0q2 = q0 * q2;
 8001618:	4b37      	ldr	r3, [pc, #220]	; (80016f8 <MadgwickAHRSupdate+0x41c>)
 800161a:	ed93 7a00 	vldr	s14, [r3]
 800161e:	4b34      	ldr	r3, [pc, #208]	; (80016f0 <MadgwickAHRSupdate+0x414>)
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001628:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q0q3 = q0 * q3;
 800162c:	4b32      	ldr	r3, [pc, #200]	; (80016f8 <MadgwickAHRSupdate+0x41c>)
 800162e:	ed93 7a00 	vldr	s14, [r3]
 8001632:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <MadgwickAHRSupdate+0x418>)
 8001634:	edd3 7a00 	vldr	s15, [r3]
 8001638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800163c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		q1q1 = q1 * q1;
 8001640:	4b2a      	ldr	r3, [pc, #168]	; (80016ec <MadgwickAHRSupdate+0x410>)
 8001642:	ed93 7a00 	vldr	s14, [r3]
 8001646:	4b29      	ldr	r3, [pc, #164]	; (80016ec <MadgwickAHRSupdate+0x410>)
 8001648:	edd3 7a00 	vldr	s15, [r3]
 800164c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001650:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q1q2 = q1 * q2;
 8001654:	4b25      	ldr	r3, [pc, #148]	; (80016ec <MadgwickAHRSupdate+0x410>)
 8001656:	ed93 7a00 	vldr	s14, [r3]
 800165a:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <MadgwickAHRSupdate+0x414>)
 800165c:	edd3 7a00 	vldr	s15, [r3]
 8001660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001664:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q3 = q1 * q3;
 8001668:	4b20      	ldr	r3, [pc, #128]	; (80016ec <MadgwickAHRSupdate+0x410>)
 800166a:	ed93 7a00 	vldr	s14, [r3]
 800166e:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <MadgwickAHRSupdate+0x418>)
 8001670:	edd3 7a00 	vldr	s15, [r3]
 8001674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001678:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 800167c:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <MadgwickAHRSupdate+0x414>)
 800167e:	ed93 7a00 	vldr	s14, [r3]
 8001682:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <MadgwickAHRSupdate+0x414>)
 8001684:	edd3 7a00 	vldr	s15, [r3]
 8001688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800168c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q2q3 = q2 * q3;
 8001690:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <MadgwickAHRSupdate+0x414>)
 8001692:	ed93 7a00 	vldr	s14, [r3]
 8001696:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <MadgwickAHRSupdate+0x418>)
 8001698:	edd3 7a00 	vldr	s15, [r3]
 800169c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q3q3 = q3 * q3;
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <MadgwickAHRSupdate+0x418>)
 80016a6:	ed93 7a00 	vldr	s14, [r3]
 80016aa:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <MadgwickAHRSupdate+0x418>)
 80016ac:	edd3 7a00 	vldr	s15, [r3]
 80016b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 80016b8:	ed97 7a03 	vldr	s14, [r7, #12]
 80016bc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80016c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <MadgwickAHRSupdate+0x418>)
 80016c6:	edd3 6a00 	vldr	s13, [r3]
 80016ca:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80016ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <MadgwickAHRSupdate+0x414>)
 80016d8:	edd3 6a00 	vldr	s13, [r3]
 80016dc:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80016e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016e8:	e008      	b.n	80016fc <MadgwickAHRSupdate+0x420>
 80016ea:	bf00      	nop
 80016ec:	24000214 	.word	0x24000214
 80016f0:	24000218 	.word	0x24000218
 80016f4:	2400021c 	.word	0x2400021c
 80016f8:	24000010 	.word	0x24000010
 80016fc:	edd7 6a03 	vldr	s13, [r7, #12]
 8001700:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001704:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001708:	ee37 7a27 	vadd.f32	s14, s14, s15
 800170c:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001710:	edd7 7a02 	vldr	s15, [r7, #8]
 8001714:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001718:	4bf5      	ldr	r3, [pc, #980]	; (8001af0 <MadgwickAHRSupdate+0x814>)
 800171a:	edd3 7a00 	vldr	s15, [r3]
 800171e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001722:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001726:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800172a:	edd7 7a01 	vldr	s15, [r7, #4]
 800172e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001732:	4bf0      	ldr	r3, [pc, #960]	; (8001af4 <MadgwickAHRSupdate+0x818>)
 8001734:	edd3 7a00 	vldr	s15, [r3]
 8001738:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800173c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001740:	edd7 6a03 	vldr	s13, [r7, #12]
 8001744:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001748:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800174c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001750:	edd7 6a03 	vldr	s13, [r7, #12]
 8001754:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001758:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800175c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001760:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8001764:	4be3      	ldr	r3, [pc, #908]	; (8001af4 <MadgwickAHRSupdate+0x818>)
 8001766:	ed93 7a00 	vldr	s14, [r3]
 800176a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800176e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001772:	edd7 6a02 	vldr	s13, [r7, #8]
 8001776:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800177a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800177e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001782:	4bdd      	ldr	r3, [pc, #884]	; (8001af8 <MadgwickAHRSupdate+0x81c>)
 8001784:	edd3 6a00 	vldr	s13, [r3]
 8001788:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800178c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001790:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001794:	4bd6      	ldr	r3, [pc, #856]	; (8001af0 <MadgwickAHRSupdate+0x814>)
 8001796:	edd3 6a00 	vldr	s13, [r3]
 800179a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800179e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017a6:	edd7 6a02 	vldr	s13, [r7, #8]
 80017aa:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80017ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017b6:	edd7 6a02 	vldr	s13, [r7, #8]
 80017ba:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80017be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017c6:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80017ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80017ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017d2:	4bc8      	ldr	r3, [pc, #800]	; (8001af4 <MadgwickAHRSupdate+0x818>)
 80017d4:	edd3 7a00 	vldr	s15, [r3]
 80017d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017e0:	edd7 6a02 	vldr	s13, [r7, #8]
 80017e4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80017e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 80017f4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80017f8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80017fc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001800:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001804:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001808:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800180c:	eeb0 0b47 	vmov.f64	d0, d7
 8001810:	f011 fc56 	bl	80130c0 <sqrt>
 8001814:	eeb0 7b40 	vmov.f64	d7, d0
 8001818:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800181c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8001820:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001824:	eeb1 7a67 	vneg.f32	s14, s15
 8001828:	4bb1      	ldr	r3, [pc, #708]	; (8001af0 <MadgwickAHRSupdate+0x814>)
 800182a:	edd3 7a00 	vldr	s15, [r3]
 800182e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001832:	4bb1      	ldr	r3, [pc, #708]	; (8001af8 <MadgwickAHRSupdate+0x81c>)
 8001834:	edd3 6a00 	vldr	s13, [r3]
 8001838:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800183c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001840:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001844:	edd7 6a01 	vldr	s13, [r7, #4]
 8001848:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800184c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001850:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001854:	4ba7      	ldr	r3, [pc, #668]	; (8001af4 <MadgwickAHRSupdate+0x818>)
 8001856:	edd3 6a00 	vldr	s13, [r3]
 800185a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800185e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001862:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001866:	edd7 6a01 	vldr	s13, [r7, #4]
 800186a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800186e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001872:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001876:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800187a:	edd7 7a02 	vldr	s15, [r7, #8]
 800187e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001882:	4b9c      	ldr	r3, [pc, #624]	; (8001af4 <MadgwickAHRSupdate+0x818>)
 8001884:	edd3 7a00 	vldr	s15, [r3]
 8001888:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800188c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001890:	edd7 6a01 	vldr	s13, [r7, #4]
 8001894:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001898:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800189c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018a0:	edd7 6a01 	vldr	s13, [r7, #4]
 80018a4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80018a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4bx = 2.0f * _2bx;
 80018b4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018bc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_4bz = 2.0f * _2bz;
 80018c0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018c8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80018cc:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80018d0:	eeb1 7a67 	vneg.f32	s14, s15
 80018d4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80018d8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80018dc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80018e0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80018e8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018f0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80018f4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80018f8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80018fc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001900:	edd7 7a05 	vldr	s15, [r7, #20]
 8001904:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001908:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800190c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001910:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001914:	4b76      	ldr	r3, [pc, #472]	; (8001af0 <MadgwickAHRSupdate+0x814>)
 8001916:	edd3 6a00 	vldr	s13, [r3]
 800191a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800191e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001922:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001926:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800192a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800192e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001932:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001936:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800193a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800193e:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001942:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001946:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800194a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800194e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001952:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001956:	edd7 7a03 	vldr	s15, [r7, #12]
 800195a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800195e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001962:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001966:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800196a:	eef1 6a67 	vneg.f32	s13, s15
 800196e:	4b61      	ldr	r3, [pc, #388]	; (8001af4 <MadgwickAHRSupdate+0x818>)
 8001970:	edd3 7a00 	vldr	s15, [r3]
 8001974:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001978:	4b5f      	ldr	r3, [pc, #380]	; (8001af8 <MadgwickAHRSupdate+0x81c>)
 800197a:	ed93 6a00 	vldr	s12, [r3]
 800197e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001982:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001986:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800198a:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800198e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001992:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001996:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800199a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800199e:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80019a2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80019a6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80019aa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019ae:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019b2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80019ba:	ee76 7a67 	vsub.f32	s15, s12, s15
 80019be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019c6:	4b4a      	ldr	r3, [pc, #296]	; (8001af0 <MadgwickAHRSupdate+0x814>)
 80019c8:	edd3 6a00 	vldr	s13, [r3]
 80019cc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019d4:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80019d8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80019dc:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019e0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80019e8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80019ec:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80019f0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80019f4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80019f8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80019fc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a00:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a04:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a08:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a0c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a18:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001a1c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a20:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001a24:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001a28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a34:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001a38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a3c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001a40:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001a44:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001a48:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a50:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a54:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001a58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a60:	4b25      	ldr	r3, [pc, #148]	; (8001af8 <MadgwickAHRSupdate+0x81c>)
 8001a62:	edd3 7a00 	vldr	s15, [r3]
 8001a66:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001a6a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001a6e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001a72:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a76:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001a7a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a7e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a82:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a86:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a8e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a9a:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <MadgwickAHRSupdate+0x818>)
 8001a9c:	edd3 6a00 	vldr	s13, [r3]
 8001aa0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001aa4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001aa8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001aac:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001ab0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ab4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001ab8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001abc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ac0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ac4:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001ac8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001acc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001ad0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ad4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ad8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001adc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ae0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001ae4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ae8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aec:	e006      	b.n	8001afc <MadgwickAHRSupdate+0x820>
 8001aee:	bf00      	nop
 8001af0:	24000218 	.word	0x24000218
 8001af4:	2400021c 	.word	0x2400021c
 8001af8:	24000214 	.word	0x24000214
 8001afc:	4bf6      	ldr	r3, [pc, #984]	; (8001ed8 <MadgwickAHRSupdate+0xbfc>)
 8001afe:	edd3 6a00 	vldr	s13, [r3]
 8001b02:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b06:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b0a:	4bf4      	ldr	r3, [pc, #976]	; (8001edc <MadgwickAHRSupdate+0xc00>)
 8001b0c:	ed93 6a00 	vldr	s12, [r3]
 8001b10:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b14:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b18:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b1c:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001b20:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001b24:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001b28:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b2c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b30:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001b34:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001b38:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001b3c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b40:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b44:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b48:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b4c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b58:	4be1      	ldr	r3, [pc, #900]	; (8001ee0 <MadgwickAHRSupdate+0xc04>)
 8001b5a:	edd3 6a00 	vldr	s13, [r3]
 8001b5e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b62:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b66:	4bdf      	ldr	r3, [pc, #892]	; (8001ee4 <MadgwickAHRSupdate+0xc08>)
 8001b68:	ed93 6a00 	vldr	s12, [r3]
 8001b6c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b70:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b74:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b78:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001b7c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b80:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b84:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b88:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b8c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001b90:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b94:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b98:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b9c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001ba0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ba4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ba8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001bac:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bb0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bbc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001bc0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001bc4:	eeb1 7a67 	vneg.f32	s14, s15
 8001bc8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001bcc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001bd0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001bd4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001bd8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bdc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001be0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001be4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001be8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001bec:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001bf0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001bf4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bf8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001bfc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001c00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c08:	4bb3      	ldr	r3, [pc, #716]	; (8001ed8 <MadgwickAHRSupdate+0xbfc>)
 8001c0a:	edd3 7a00 	vldr	s15, [r3]
 8001c0e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001c12:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001c16:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001c1a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c1e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001c22:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c26:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c2a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c2e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c32:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c36:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c42:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001c46:	eef1 6a67 	vneg.f32	s13, s15
 8001c4a:	4ba3      	ldr	r3, [pc, #652]	; (8001ed8 <MadgwickAHRSupdate+0xbfc>)
 8001c4c:	edd3 7a00 	vldr	s15, [r3]
 8001c50:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c54:	4ba1      	ldr	r3, [pc, #644]	; (8001edc <MadgwickAHRSupdate+0xc00>)
 8001c56:	ed93 6a00 	vldr	s12, [r3]
 8001c5a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c5e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c62:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c66:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001c6a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c6e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c72:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001c76:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c7a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c7e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c82:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001c86:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001c8a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001c8e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c92:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c96:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c9e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001ca2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ca6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001caa:	4b8e      	ldr	r3, [pc, #568]	; (8001ee4 <MadgwickAHRSupdate+0xc08>)
 8001cac:	edd3 6a00 	vldr	s13, [r3]
 8001cb0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001cb4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001cb8:	4b89      	ldr	r3, [pc, #548]	; (8001ee0 <MadgwickAHRSupdate+0xc04>)
 8001cba:	ed93 6a00 	vldr	s12, [r3]
 8001cbe:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cc2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cc6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001cca:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001cce:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001cd2:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001cd6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001cda:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cde:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001ce2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001ce6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001cea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cee:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001cf2:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001cf6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cfa:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001cfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d06:	4b75      	ldr	r3, [pc, #468]	; (8001edc <MadgwickAHRSupdate+0xc00>)
 8001d08:	edd3 6a00 	vldr	s13, [r3]
 8001d0c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d10:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d14:	4b70      	ldr	r3, [pc, #448]	; (8001ed8 <MadgwickAHRSupdate+0xbfc>)
 8001d16:	ed93 6a00 	vldr	s12, [r3]
 8001d1a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001d1e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d22:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d26:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001d2a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d2e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001d32:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d36:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d3a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001d3e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001d42:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001d46:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001d4a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001d4e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d52:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d56:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001d5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d5e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d6a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001d6e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d72:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001d76:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001d7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d7e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d86:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001d8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d8e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001d92:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001d96:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001d9a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001da2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001da6:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001daa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001db2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001db6:	eef1 6a67 	vneg.f32	s13, s15
 8001dba:	4b49      	ldr	r3, [pc, #292]	; (8001ee0 <MadgwickAHRSupdate+0xc04>)
 8001dbc:	edd3 7a00 	vldr	s15, [r3]
 8001dc0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001dc4:	4b47      	ldr	r3, [pc, #284]	; (8001ee4 <MadgwickAHRSupdate+0xc08>)
 8001dc6:	ed93 6a00 	vldr	s12, [r3]
 8001dca:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001dce:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001dd2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001dd6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001dda:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001dde:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001de2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001de6:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001dea:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001dee:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001df2:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001df6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001dfa:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001dfe:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e02:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e06:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e0e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e1a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e1e:	eef1 6a67 	vneg.f32	s13, s15
 8001e22:	4b2e      	ldr	r3, [pc, #184]	; (8001edc <MadgwickAHRSupdate+0xc00>)
 8001e24:	edd3 7a00 	vldr	s15, [r3]
 8001e28:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e2c:	4b2a      	ldr	r3, [pc, #168]	; (8001ed8 <MadgwickAHRSupdate+0xbfc>)
 8001e2e:	ed93 6a00 	vldr	s12, [r3]
 8001e32:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e36:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e3a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e3e:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001e42:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001e46:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001e4a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e4e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e52:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001e56:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001e5a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001e5e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e62:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e66:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e6e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <MadgwickAHRSupdate+0xc08>)
 8001e7c:	edd3 6a00 	vldr	s13, [r3]
 8001e80:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e84:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e88:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001e8c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001e90:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e94:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e98:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e9c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001ea0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001ea4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001ea8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001eac:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001eb0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001eb4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001eb8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ebc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ec0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001ec4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ecc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001ed0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001ed4:	e008      	b.n	8001ee8 <MadgwickAHRSupdate+0xc0c>
 8001ed6:	bf00      	nop
 8001ed8:	24000218 	.word	0x24000218
 8001edc:	24000010 	.word	0x24000010
 8001ee0:	2400021c 	.word	0x2400021c
 8001ee4:	24000214 	.word	0x24000214
 8001ee8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001eec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001ef0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ef4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ef8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001efc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f04:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f08:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f10:	eeb0 0a67 	vmov.f32	s0, s15
 8001f14:	f000 fe1e 	bl	8002b54 <invSqrt>
 8001f18:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		s0 *= recipNorm;
 8001f1c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001f20:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f28:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 8001f2c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001f30:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f38:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 8001f3c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001f40:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f48:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 8001f4c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001f50:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f58:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 8001f5c:	4bd8      	ldr	r3, [pc, #864]	; (80022c0 <MadgwickAHRSupdate+0xfe4>)
 8001f5e:	ed93 7a00 	vldr	s14, [r3]
 8001f62:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f6a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f72:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 8001f76:	4bd2      	ldr	r3, [pc, #840]	; (80022c0 <MadgwickAHRSupdate+0xfe4>)
 8001f78:	ed93 7a00 	vldr	s14, [r3]
 8001f7c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f84:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001f88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f8c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 8001f90:	4bcb      	ldr	r3, [pc, #812]	; (80022c0 <MadgwickAHRSupdate+0xfe4>)
 8001f92:	ed93 7a00 	vldr	s14, [r3]
 8001f96:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f9e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001fa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fa6:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 8001faa:	4bc5      	ldr	r3, [pc, #788]	; (80022c0 <MadgwickAHRSupdate+0xfe4>)
 8001fac:	ed93 7a00 	vldr	s14, [r3]
 8001fb0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb8:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001fbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fc0:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8001fc4:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001fc8:	ed9f 7abe 	vldr	s14, [pc, #760]	; 80022c4 <MadgwickAHRSupdate+0xfe8>
 8001fcc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fd0:	4bbd      	ldr	r3, [pc, #756]	; (80022c8 <MadgwickAHRSupdate+0xfec>)
 8001fd2:	edd3 7a00 	vldr	s15, [r3]
 8001fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fda:	4bbb      	ldr	r3, [pc, #748]	; (80022c8 <MadgwickAHRSupdate+0xfec>)
 8001fdc:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8001fe0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001fe4:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80022c4 <MadgwickAHRSupdate+0xfe8>
 8001fe8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fec:	4bb7      	ldr	r3, [pc, #732]	; (80022cc <MadgwickAHRSupdate+0xff0>)
 8001fee:	edd3 7a00 	vldr	s15, [r3]
 8001ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff6:	4bb5      	ldr	r3, [pc, #724]	; (80022cc <MadgwickAHRSupdate+0xff0>)
 8001ff8:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8001ffc:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002000:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 80022c4 <MadgwickAHRSupdate+0xfe8>
 8002004:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002008:	4bb1      	ldr	r3, [pc, #708]	; (80022d0 <MadgwickAHRSupdate+0xff4>)
 800200a:	edd3 7a00 	vldr	s15, [r3]
 800200e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002012:	4baf      	ldr	r3, [pc, #700]	; (80022d0 <MadgwickAHRSupdate+0xff4>)
 8002014:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002018:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800201c:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80022c4 <MadgwickAHRSupdate+0xfe8>
 8002020:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002024:	4bab      	ldr	r3, [pc, #684]	; (80022d4 <MadgwickAHRSupdate+0xff8>)
 8002026:	edd3 7a00 	vldr	s15, [r3]
 800202a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800202e:	4ba9      	ldr	r3, [pc, #676]	; (80022d4 <MadgwickAHRSupdate+0xff8>)
 8002030:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002034:	4ba4      	ldr	r3, [pc, #656]	; (80022c8 <MadgwickAHRSupdate+0xfec>)
 8002036:	ed93 7a00 	vldr	s14, [r3]
 800203a:	4ba3      	ldr	r3, [pc, #652]	; (80022c8 <MadgwickAHRSupdate+0xfec>)
 800203c:	edd3 7a00 	vldr	s15, [r3]
 8002040:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002044:	4ba1      	ldr	r3, [pc, #644]	; (80022cc <MadgwickAHRSupdate+0xff0>)
 8002046:	edd3 6a00 	vldr	s13, [r3]
 800204a:	4ba0      	ldr	r3, [pc, #640]	; (80022cc <MadgwickAHRSupdate+0xff0>)
 800204c:	edd3 7a00 	vldr	s15, [r3]
 8002050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002054:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002058:	4b9d      	ldr	r3, [pc, #628]	; (80022d0 <MadgwickAHRSupdate+0xff4>)
 800205a:	edd3 6a00 	vldr	s13, [r3]
 800205e:	4b9c      	ldr	r3, [pc, #624]	; (80022d0 <MadgwickAHRSupdate+0xff4>)
 8002060:	edd3 7a00 	vldr	s15, [r3]
 8002064:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002068:	ee37 7a27 	vadd.f32	s14, s14, s15
 800206c:	4b99      	ldr	r3, [pc, #612]	; (80022d4 <MadgwickAHRSupdate+0xff8>)
 800206e:	edd3 6a00 	vldr	s13, [r3]
 8002072:	4b98      	ldr	r3, [pc, #608]	; (80022d4 <MadgwickAHRSupdate+0xff8>)
 8002074:	edd3 7a00 	vldr	s15, [r3]
 8002078:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800207c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002080:	eeb0 0a67 	vmov.f32	s0, s15
 8002084:	f000 fd66 	bl	8002b54 <invSqrt>
 8002088:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 800208c:	4b8e      	ldr	r3, [pc, #568]	; (80022c8 <MadgwickAHRSupdate+0xfec>)
 800208e:	ed93 7a00 	vldr	s14, [r3]
 8002092:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800209a:	4b8b      	ldr	r3, [pc, #556]	; (80022c8 <MadgwickAHRSupdate+0xfec>)
 800209c:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80020a0:	4b8a      	ldr	r3, [pc, #552]	; (80022cc <MadgwickAHRSupdate+0xff0>)
 80020a2:	ed93 7a00 	vldr	s14, [r3]
 80020a6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80020aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ae:	4b87      	ldr	r3, [pc, #540]	; (80022cc <MadgwickAHRSupdate+0xff0>)
 80020b0:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80020b4:	4b86      	ldr	r3, [pc, #536]	; (80022d0 <MadgwickAHRSupdate+0xff4>)
 80020b6:	ed93 7a00 	vldr	s14, [r3]
 80020ba:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80020be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c2:	4b83      	ldr	r3, [pc, #524]	; (80022d0 <MadgwickAHRSupdate+0xff4>)
 80020c4:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80020c8:	4b82      	ldr	r3, [pc, #520]	; (80022d4 <MadgwickAHRSupdate+0xff8>)
 80020ca:	ed93 7a00 	vldr	s14, [r3]
 80020ce:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80020d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d6:	4b7f      	ldr	r3, [pc, #508]	; (80022d4 <MadgwickAHRSupdate+0xff8>)
 80020d8:	edc3 7a00 	vstr	s15, [r3]

	//Roll, Pitch, Yaw System Conversion
	System_Roll  = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 80020dc:	4b7a      	ldr	r3, [pc, #488]	; (80022c8 <MadgwickAHRSupdate+0xfec>)
 80020de:	ed93 7a00 	vldr	s14, [r3]
 80020e2:	4b7a      	ldr	r3, [pc, #488]	; (80022cc <MadgwickAHRSupdate+0xff0>)
 80020e4:	edd3 7a00 	vldr	s15, [r3]
 80020e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020ec:	4b78      	ldr	r3, [pc, #480]	; (80022d0 <MadgwickAHRSupdate+0xff4>)
 80020ee:	edd3 6a00 	vldr	s13, [r3]
 80020f2:	4b78      	ldr	r3, [pc, #480]	; (80022d4 <MadgwickAHRSupdate+0xff8>)
 80020f4:	edd3 7a00 	vldr	s15, [r3]
 80020f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020fc:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002100:	4b72      	ldr	r3, [pc, #456]	; (80022cc <MadgwickAHRSupdate+0xff0>)
 8002102:	ed93 7a00 	vldr	s14, [r3]
 8002106:	4b71      	ldr	r3, [pc, #452]	; (80022cc <MadgwickAHRSupdate+0xff0>)
 8002108:	edd3 7a00 	vldr	s15, [r3]
 800210c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002110:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002114:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002118:	4b6d      	ldr	r3, [pc, #436]	; (80022d0 <MadgwickAHRSupdate+0xff4>)
 800211a:	edd3 6a00 	vldr	s13, [r3]
 800211e:	4b6c      	ldr	r3, [pc, #432]	; (80022d0 <MadgwickAHRSupdate+0xff4>)
 8002120:	edd3 7a00 	vldr	s15, [r3]
 8002124:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002128:	ee77 7a67 	vsub.f32	s15, s14, s15
 800212c:	eef0 0a67 	vmov.f32	s1, s15
 8002130:	eeb0 0a46 	vmov.f32	s0, s12
 8002134:	f011 f820 	bl	8013178 <atan2f>
 8002138:	eef0 7a40 	vmov.f32	s15, s0
 800213c:	4b66      	ldr	r3, [pc, #408]	; (80022d8 <MadgwickAHRSupdate+0xffc>)
 800213e:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 8002142:	4b62      	ldr	r3, [pc, #392]	; (80022cc <MadgwickAHRSupdate+0xff0>)
 8002144:	ed93 7a00 	vldr	s14, [r3]
 8002148:	4b62      	ldr	r3, [pc, #392]	; (80022d4 <MadgwickAHRSupdate+0xff8>)
 800214a:	edd3 7a00 	vldr	s15, [r3]
 800214e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002152:	4b5d      	ldr	r3, [pc, #372]	; (80022c8 <MadgwickAHRSupdate+0xfec>)
 8002154:	edd3 6a00 	vldr	s13, [r3]
 8002158:	4b5d      	ldr	r3, [pc, #372]	; (80022d0 <MadgwickAHRSupdate+0xff4>)
 800215a:	edd3 7a00 	vldr	s15, [r3]
 800215e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002166:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800216a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800216e:	eeb0 0a67 	vmov.f32	s0, s15
 8002172:	f010 ffcf 	bl	8013114 <asinf>
 8002176:	eef0 7a40 	vmov.f32	s15, s0
 800217a:	4b58      	ldr	r3, [pc, #352]	; (80022dc <MadgwickAHRSupdate+0x1000>)
 800217c:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw = atan2(2.0f * (q1*q2 + q0*q3),q0*q0 + q1*q1 - q2*q2 - q3*q3);
 8002180:	4b52      	ldr	r3, [pc, #328]	; (80022cc <MadgwickAHRSupdate+0xff0>)
 8002182:	ed93 7a00 	vldr	s14, [r3]
 8002186:	4b52      	ldr	r3, [pc, #328]	; (80022d0 <MadgwickAHRSupdate+0xff4>)
 8002188:	edd3 7a00 	vldr	s15, [r3]
 800218c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002190:	4b4d      	ldr	r3, [pc, #308]	; (80022c8 <MadgwickAHRSupdate+0xfec>)
 8002192:	edd3 6a00 	vldr	s13, [r3]
 8002196:	4b4f      	ldr	r3, [pc, #316]	; (80022d4 <MadgwickAHRSupdate+0xff8>)
 8002198:	edd3 7a00 	vldr	s15, [r3]
 800219c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021ac:	4b46      	ldr	r3, [pc, #280]	; (80022c8 <MadgwickAHRSupdate+0xfec>)
 80021ae:	ed93 6a00 	vldr	s12, [r3]
 80021b2:	4b45      	ldr	r3, [pc, #276]	; (80022c8 <MadgwickAHRSupdate+0xfec>)
 80021b4:	edd3 6a00 	vldr	s13, [r3]
 80021b8:	ee26 6a26 	vmul.f32	s12, s12, s13
 80021bc:	4b43      	ldr	r3, [pc, #268]	; (80022cc <MadgwickAHRSupdate+0xff0>)
 80021be:	edd3 5a00 	vldr	s11, [r3]
 80021c2:	4b42      	ldr	r3, [pc, #264]	; (80022cc <MadgwickAHRSupdate+0xff0>)
 80021c4:	edd3 6a00 	vldr	s13, [r3]
 80021c8:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80021cc:	ee36 6a26 	vadd.f32	s12, s12, s13
 80021d0:	4b3f      	ldr	r3, [pc, #252]	; (80022d0 <MadgwickAHRSupdate+0xff4>)
 80021d2:	edd3 5a00 	vldr	s11, [r3]
 80021d6:	4b3e      	ldr	r3, [pc, #248]	; (80022d0 <MadgwickAHRSupdate+0xff4>)
 80021d8:	edd3 6a00 	vldr	s13, [r3]
 80021dc:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80021e0:	ee36 6a66 	vsub.f32	s12, s12, s13
 80021e4:	4b3b      	ldr	r3, [pc, #236]	; (80022d4 <MadgwickAHRSupdate+0xff8>)
 80021e6:	edd3 5a00 	vldr	s11, [r3]
 80021ea:	4b3a      	ldr	r3, [pc, #232]	; (80022d4 <MadgwickAHRSupdate+0xff8>)
 80021ec:	edd3 6a00 	vldr	s13, [r3]
 80021f0:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80021f4:	ee76 6a66 	vsub.f32	s13, s12, s13
 80021f8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80021fc:	eeb0 1b46 	vmov.f64	d1, d6
 8002200:	eeb0 0b47 	vmov.f64	d0, d7
 8002204:	f010 ff58 	bl	80130b8 <atan2>
 8002208:	eeb0 7b40 	vmov.f64	d7, d0
 800220c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002210:	4b33      	ldr	r3, [pc, #204]	; (80022e0 <MadgwickAHRSupdate+0x1004>)
 8002212:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  *= 57.295779515f;
 8002216:	4b30      	ldr	r3, [pc, #192]	; (80022d8 <MadgwickAHRSupdate+0xffc>)
 8002218:	edd3 7a00 	vldr	s15, [r3]
 800221c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80022e4 <MadgwickAHRSupdate+0x1008>
 8002220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002224:	4b2c      	ldr	r3, [pc, #176]	; (80022d8 <MadgwickAHRSupdate+0xffc>)
 8002226:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch *= 57.295779515f;
 800222a:	4b2c      	ldr	r3, [pc, #176]	; (80022dc <MadgwickAHRSupdate+0x1000>)
 800222c:	edd3 7a00 	vldr	s15, [r3]
 8002230:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80022e4 <MadgwickAHRSupdate+0x1008>
 8002234:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002238:	4b28      	ldr	r3, [pc, #160]	; (80022dc <MadgwickAHRSupdate+0x1000>)
 800223a:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   *= 57.295779515f;
 800223e:	4b28      	ldr	r3, [pc, #160]	; (80022e0 <MadgwickAHRSupdate+0x1004>)
 8002240:	edd3 7a00 	vldr	s15, [r3]
 8002244:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80022e4 <MadgwickAHRSupdate+0x1008>
 8002248:	ee67 7a87 	vmul.f32	s15, s15, s14
 800224c:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <MadgwickAHRSupdate+0x1004>)
 800224e:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  -= System_Roll_Offset;
 8002252:	4b21      	ldr	r3, [pc, #132]	; (80022d8 <MadgwickAHRSupdate+0xffc>)
 8002254:	ed93 7a00 	vldr	s14, [r3]
 8002258:	4b23      	ldr	r3, [pc, #140]	; (80022e8 <MadgwickAHRSupdate+0x100c>)
 800225a:	edd3 7a00 	vldr	s15, [r3]
 800225e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002262:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <MadgwickAHRSupdate+0xffc>)
 8002264:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch -= System_Pitch_Offset;
 8002268:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <MadgwickAHRSupdate+0x1000>)
 800226a:	ed93 7a00 	vldr	s14, [r3]
 800226e:	4b1f      	ldr	r3, [pc, #124]	; (80022ec <MadgwickAHRSupdate+0x1010>)
 8002270:	edd3 7a00 	vldr	s15, [r3]
 8002274:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002278:	4b18      	ldr	r3, [pc, #96]	; (80022dc <MadgwickAHRSupdate+0x1000>)
 800227a:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   -= System_Yaw_Offset;
 800227e:	4b18      	ldr	r3, [pc, #96]	; (80022e0 <MadgwickAHRSupdate+0x1004>)
 8002280:	ed93 7a00 	vldr	s14, [r3]
 8002284:	4b1a      	ldr	r3, [pc, #104]	; (80022f0 <MadgwickAHRSupdate+0x1014>)
 8002286:	edd3 7a00 	vldr	s15, [r3]
 800228a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800228e:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <MadgwickAHRSupdate+0x1004>)
 8002290:	edc3 7a00 	vstr	s15, [r3]
	if(System_Yaw < 0)
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <MadgwickAHRSupdate+0x1004>)
 8002296:	edd3 7a00 	vldr	s15, [r3]
 800229a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800229e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a2:	d509      	bpl.n	80022b8 <MadgwickAHRSupdate+0xfdc>
	{
		System_Yaw = 360.0f + System_Yaw;
 80022a4:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <MadgwickAHRSupdate+0x1004>)
 80022a6:	edd3 7a00 	vldr	s15, [r3]
 80022aa:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80022f4 <MadgwickAHRSupdate+0x1018>
 80022ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <MadgwickAHRSupdate+0x1004>)
 80022b4:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80022b8:	37b8      	adds	r7, #184	; 0xb8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	2400000c 	.word	0x2400000c
 80022c4:	3b03126f 	.word	0x3b03126f
 80022c8:	24000010 	.word	0x24000010
 80022cc:	24000214 	.word	0x24000214
 80022d0:	24000218 	.word	0x24000218
 80022d4:	2400021c 	.word	0x2400021c
 80022d8:	240002f4 	.word	0x240002f4
 80022dc:	240002f8 	.word	0x240002f8
 80022e0:	240002f0 	.word	0x240002f0
 80022e4:	42652ee1 	.word	0x42652ee1
 80022e8:	24000220 	.word	0x24000220
 80022ec:	24000224 	.word	0x24000224
 80022f0:	24000228 	.word	0x24000228
 80022f4:	43b40000 	.word	0x43b40000

080022f8 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b09c      	sub	sp, #112	; 0x70
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	ed87 0a05 	vstr	s0, [r7, #20]
 8002302:	edc7 0a04 	vstr	s1, [r7, #16]
 8002306:	ed87 1a03 	vstr	s2, [r7, #12]
 800230a:	edc7 1a02 	vstr	s3, [r7, #8]
 800230e:	ed87 2a01 	vstr	s4, [r7, #4]
 8002312:	edc7 2a00 	vstr	s5, [r7]
	float recipNorm;
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;
	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8002316:	4bee      	ldr	r3, [pc, #952]	; (80026d0 <MadgwickAHRSupdateIMU+0x3d8>)
 8002318:	edd3 7a00 	vldr	s15, [r3]
 800231c:	eeb1 7a67 	vneg.f32	s14, s15
 8002320:	edd7 7a05 	vldr	s15, [r7, #20]
 8002324:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002328:	4bea      	ldr	r3, [pc, #936]	; (80026d4 <MadgwickAHRSupdateIMU+0x3dc>)
 800232a:	edd3 6a00 	vldr	s13, [r3]
 800232e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002332:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002336:	ee37 7a67 	vsub.f32	s14, s14, s15
 800233a:	4be7      	ldr	r3, [pc, #924]	; (80026d8 <MadgwickAHRSupdateIMU+0x3e0>)
 800233c:	edd3 6a00 	vldr	s13, [r3]
 8002340:	edd7 7a03 	vldr	s15, [r7, #12]
 8002344:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002348:	ee77 7a67 	vsub.f32	s15, s14, s15
 800234c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002350:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002354:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8002358:	4be0      	ldr	r3, [pc, #896]	; (80026dc <MadgwickAHRSupdateIMU+0x3e4>)
 800235a:	ed93 7a00 	vldr	s14, [r3]
 800235e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002362:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002366:	4bdb      	ldr	r3, [pc, #876]	; (80026d4 <MadgwickAHRSupdateIMU+0x3dc>)
 8002368:	edd3 6a00 	vldr	s13, [r3]
 800236c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002370:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002374:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002378:	4bd7      	ldr	r3, [pc, #860]	; (80026d8 <MadgwickAHRSupdateIMU+0x3e0>)
 800237a:	edd3 6a00 	vldr	s13, [r3]
 800237e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002382:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002386:	ee77 7a67 	vsub.f32	s15, s14, s15
 800238a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800238e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002392:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8002396:	4bd1      	ldr	r3, [pc, #836]	; (80026dc <MadgwickAHRSupdateIMU+0x3e4>)
 8002398:	ed93 7a00 	vldr	s14, [r3]
 800239c:	edd7 7a04 	vldr	s15, [r7, #16]
 80023a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023a4:	4bca      	ldr	r3, [pc, #808]	; (80026d0 <MadgwickAHRSupdateIMU+0x3d8>)
 80023a6:	edd3 6a00 	vldr	s13, [r3]
 80023aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80023ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023b6:	4bc8      	ldr	r3, [pc, #800]	; (80026d8 <MadgwickAHRSupdateIMU+0x3e0>)
 80023b8:	edd3 6a00 	vldr	s13, [r3]
 80023bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80023c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023d0:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80023d4:	4bc1      	ldr	r3, [pc, #772]	; (80026dc <MadgwickAHRSupdateIMU+0x3e4>)
 80023d6:	ed93 7a00 	vldr	s14, [r3]
 80023da:	edd7 7a03 	vldr	s15, [r7, #12]
 80023de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023e2:	4bbb      	ldr	r3, [pc, #748]	; (80026d0 <MadgwickAHRSupdateIMU+0x3d8>)
 80023e4:	edd3 6a00 	vldr	s13, [r3]
 80023e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80023ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023f4:	4bb7      	ldr	r3, [pc, #732]	; (80026d4 <MadgwickAHRSupdateIMU+0x3dc>)
 80023f6:	edd3 6a00 	vldr	s13, [r3]
 80023fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80023fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002402:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002406:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800240a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800240e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002412:	edd7 7a02 	vldr	s15, [r7, #8]
 8002416:	eef5 7a40 	vcmp.f32	s15, #0.0
 800241a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241e:	d10e      	bne.n	800243e <MadgwickAHRSupdateIMU+0x146>
 8002420:	edd7 7a01 	vldr	s15, [r7, #4]
 8002424:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242c:	d107      	bne.n	800243e <MadgwickAHRSupdateIMU+0x146>
 800242e:	edd7 7a00 	vldr	s15, [r7]
 8002432:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243a:	f000 81e5 	beq.w	8002808 <MadgwickAHRSupdateIMU+0x510>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800243e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002442:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002446:	edd7 7a01 	vldr	s15, [r7, #4]
 800244a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800244e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002452:	edd7 7a00 	vldr	s15, [r7]
 8002456:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800245a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800245e:	eeb0 0a67 	vmov.f32	s0, s15
 8002462:	f000 fb77 	bl	8002b54 <invSqrt>
 8002466:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 800246a:	ed97 7a02 	vldr	s14, [r7, #8]
 800246e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002476:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 800247a:	ed97 7a01 	vldr	s14, [r7, #4]
 800247e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002486:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;   
 800248a:	ed97 7a00 	vldr	s14, [r7]
 800248e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002496:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 800249a:	4b90      	ldr	r3, [pc, #576]	; (80026dc <MadgwickAHRSupdateIMU+0x3e4>)
 800249c:	edd3 7a00 	vldr	s15, [r3]
 80024a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024a4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * q1;
 80024a8:	4b89      	ldr	r3, [pc, #548]	; (80026d0 <MadgwickAHRSupdateIMU+0x3d8>)
 80024aa:	edd3 7a00 	vldr	s15, [r3]
 80024ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024b2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * q2;
 80024b6:	4b87      	ldr	r3, [pc, #540]	; (80026d4 <MadgwickAHRSupdateIMU+0x3dc>)
 80024b8:	edd3 7a00 	vldr	s15, [r3]
 80024bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024c0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * q3;
 80024c4:	4b84      	ldr	r3, [pc, #528]	; (80026d8 <MadgwickAHRSupdateIMU+0x3e0>)
 80024c6:	edd3 7a00 	vldr	s15, [r3]
 80024ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024ce:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * q0;
 80024d2:	4b82      	ldr	r3, [pc, #520]	; (80026dc <MadgwickAHRSupdateIMU+0x3e4>)
 80024d4:	edd3 7a00 	vldr	s15, [r3]
 80024d8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80024dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024e0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * q1;
 80024e4:	4b7a      	ldr	r3, [pc, #488]	; (80026d0 <MadgwickAHRSupdateIMU+0x3d8>)
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80024ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024f2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * q2;
 80024f6:	4b77      	ldr	r3, [pc, #476]	; (80026d4 <MadgwickAHRSupdateIMU+0x3dc>)
 80024f8:	edd3 7a00 	vldr	s15, [r3]
 80024fc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002500:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002504:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * q1;
 8002508:	4b71      	ldr	r3, [pc, #452]	; (80026d0 <MadgwickAHRSupdateIMU+0x3d8>)
 800250a:	edd3 7a00 	vldr	s15, [r3]
 800250e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002512:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002516:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * q2;
 800251a:	4b6e      	ldr	r3, [pc, #440]	; (80026d4 <MadgwickAHRSupdateIMU+0x3dc>)
 800251c:	edd3 7a00 	vldr	s15, [r3]
 8002520:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002524:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002528:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = q0 * q0;
 800252c:	4b6b      	ldr	r3, [pc, #428]	; (80026dc <MadgwickAHRSupdateIMU+0x3e4>)
 800252e:	ed93 7a00 	vldr	s14, [r3]
 8002532:	4b6a      	ldr	r3, [pc, #424]	; (80026dc <MadgwickAHRSupdateIMU+0x3e4>)
 8002534:	edd3 7a00 	vldr	s15, [r3]
 8002538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800253c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = q1 * q1;
 8002540:	4b63      	ldr	r3, [pc, #396]	; (80026d0 <MadgwickAHRSupdateIMU+0x3d8>)
 8002542:	ed93 7a00 	vldr	s14, [r3]
 8002546:	4b62      	ldr	r3, [pc, #392]	; (80026d0 <MadgwickAHRSupdateIMU+0x3d8>)
 8002548:	edd3 7a00 	vldr	s15, [r3]
 800254c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002550:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = q2 * q2;
 8002554:	4b5f      	ldr	r3, [pc, #380]	; (80026d4 <MadgwickAHRSupdateIMU+0x3dc>)
 8002556:	ed93 7a00 	vldr	s14, [r3]
 800255a:	4b5e      	ldr	r3, [pc, #376]	; (80026d4 <MadgwickAHRSupdateIMU+0x3dc>)
 800255c:	edd3 7a00 	vldr	s15, [r3]
 8002560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002564:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = q3 * q3;
 8002568:	4b5b      	ldr	r3, [pc, #364]	; (80026d8 <MadgwickAHRSupdateIMU+0x3e0>)
 800256a:	ed93 7a00 	vldr	s14, [r3]
 800256e:	4b5a      	ldr	r3, [pc, #360]	; (80026d8 <MadgwickAHRSupdateIMU+0x3e0>)
 8002570:	edd3 7a00 	vldr	s15, [r3]
 8002574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002578:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800257c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002580:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002584:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002588:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800258c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002590:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002594:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002598:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800259c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80025a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025a8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80025ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80025b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80025bc:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80025c0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80025c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025c8:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80025cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80025d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025d8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80025dc:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80025e0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80025e4:	4b3a      	ldr	r3, [pc, #232]	; (80026d0 <MadgwickAHRSupdateIMU+0x3d8>)
 80025e6:	edd3 7a00 	vldr	s15, [r3]
 80025ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025f2:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80025f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80025fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002602:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002606:	ee37 7a67 	vsub.f32	s14, s14, s15
 800260a:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800260e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002612:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002616:	ee37 7a27 	vadd.f32	s14, s14, s15
 800261a:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800261e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002622:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002626:	ee37 7a27 	vadd.f32	s14, s14, s15
 800262a:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800262e:	edd7 7a00 	vldr	s15, [r7]
 8002632:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800263a:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800263e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002642:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002646:	ee27 7a87 	vmul.f32	s14, s15, s14
 800264a:	4b22      	ldr	r3, [pc, #136]	; (80026d4 <MadgwickAHRSupdateIMU+0x3dc>)
 800264c:	edd3 7a00 	vldr	s15, [r3]
 8002650:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002654:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002658:	edd7 7a02 	vldr	s15, [r7, #8]
 800265c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002660:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002664:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002668:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800266c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002670:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002674:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8002678:	edd7 7a01 	vldr	s15, [r7, #4]
 800267c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002680:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002684:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002688:	ee37 7a67 	vsub.f32	s14, s14, s15
 800268c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002690:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002694:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002698:	ee37 7a27 	vadd.f32	s14, s14, s15
 800269c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80026a0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80026a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026ac:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80026b0:	edd7 7a00 	vldr	s15, [r7]
 80026b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026bc:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 80026c0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80026c4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80026c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026cc:	e008      	b.n	80026e0 <MadgwickAHRSupdateIMU+0x3e8>
 80026ce:	bf00      	nop
 80026d0:	24000214 	.word	0x24000214
 80026d4:	24000218 	.word	0x24000218
 80026d8:	2400021c 	.word	0x2400021c
 80026dc:	24000010 	.word	0x24000010
 80026e0:	4be0      	ldr	r3, [pc, #896]	; (8002a64 <MadgwickAHRSupdateIMU+0x76c>)
 80026e2:	edd3 7a00 	vldr	s15, [r3]
 80026e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026ea:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80026ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80026f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026fa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80026fe:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002702:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002706:	4bd7      	ldr	r3, [pc, #860]	; (8002a64 <MadgwickAHRSupdateIMU+0x76c>)
 8002708:	edd3 7a00 	vldr	s15, [r3]
 800270c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002710:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002714:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002718:	edd7 7a01 	vldr	s15, [r7, #4]
 800271c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002720:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002724:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002728:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800272c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002730:	edd7 7a08 	vldr	s15, [r7, #32]
 8002734:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002738:	ee37 7a27 	vadd.f32	s14, s14, s15
 800273c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002740:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002744:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002748:	edd7 7a06 	vldr	s15, [r7, #24]
 800274c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002754:	eeb0 0a67 	vmov.f32	s0, s15
 8002758:	f000 f9fc 	bl	8002b54 <invSqrt>
 800275c:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 8002760:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002764:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800276c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 8002770:	ed97 7a08 	vldr	s14, [r7, #32]
 8002774:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800277c:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 8002780:	ed97 7a07 	vldr	s14, [r7, #28]
 8002784:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002788:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278c:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 8002790:	ed97 7a06 	vldr	s14, [r7, #24]
 8002794:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800279c:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 80027a0:	4bb1      	ldr	r3, [pc, #708]	; (8002a68 <MadgwickAHRSupdateIMU+0x770>)
 80027a2:	ed93 7a00 	vldr	s14, [r3]
 80027a6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80027aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ae:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80027b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027b6:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 80027ba:	4bab      	ldr	r3, [pc, #684]	; (8002a68 <MadgwickAHRSupdateIMU+0x770>)
 80027bc:	ed93 7a00 	vldr	s14, [r3]
 80027c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80027c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c8:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80027cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027d0:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 80027d4:	4ba4      	ldr	r3, [pc, #656]	; (8002a68 <MadgwickAHRSupdateIMU+0x770>)
 80027d6:	ed93 7a00 	vldr	s14, [r3]
 80027da:	edd7 7a07 	vldr	s15, [r7, #28]
 80027de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027e2:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80027e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ea:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 80027ee:	4b9e      	ldr	r3, [pc, #632]	; (8002a68 <MadgwickAHRSupdateIMU+0x770>)
 80027f0:	ed93 7a00 	vldr	s14, [r3]
 80027f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80027f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027fc:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002800:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002804:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8002808:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800280c:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8002a6c <MadgwickAHRSupdateIMU+0x774>
 8002810:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002814:	4b96      	ldr	r3, [pc, #600]	; (8002a70 <MadgwickAHRSupdateIMU+0x778>)
 8002816:	edd3 7a00 	vldr	s15, [r3]
 800281a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281e:	4b94      	ldr	r3, [pc, #592]	; (8002a70 <MadgwickAHRSupdateIMU+0x778>)
 8002820:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8002824:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002828:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8002a6c <MadgwickAHRSupdateIMU+0x774>
 800282c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002830:	4b90      	ldr	r3, [pc, #576]	; (8002a74 <MadgwickAHRSupdateIMU+0x77c>)
 8002832:	edd3 7a00 	vldr	s15, [r3]
 8002836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800283a:	4b8e      	ldr	r3, [pc, #568]	; (8002a74 <MadgwickAHRSupdateIMU+0x77c>)
 800283c:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002840:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002844:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8002a6c <MadgwickAHRSupdateIMU+0x774>
 8002848:	ee27 7a87 	vmul.f32	s14, s15, s14
 800284c:	4b8a      	ldr	r3, [pc, #552]	; (8002a78 <MadgwickAHRSupdateIMU+0x780>)
 800284e:	edd3 7a00 	vldr	s15, [r3]
 8002852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002856:	4b88      	ldr	r3, [pc, #544]	; (8002a78 <MadgwickAHRSupdateIMU+0x780>)
 8002858:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 800285c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002860:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8002a6c <MadgwickAHRSupdateIMU+0x774>
 8002864:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002868:	4b7e      	ldr	r3, [pc, #504]	; (8002a64 <MadgwickAHRSupdateIMU+0x76c>)
 800286a:	edd3 7a00 	vldr	s15, [r3]
 800286e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002872:	4b7c      	ldr	r3, [pc, #496]	; (8002a64 <MadgwickAHRSupdateIMU+0x76c>)
 8002874:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002878:	4b7d      	ldr	r3, [pc, #500]	; (8002a70 <MadgwickAHRSupdateIMU+0x778>)
 800287a:	ed93 7a00 	vldr	s14, [r3]
 800287e:	4b7c      	ldr	r3, [pc, #496]	; (8002a70 <MadgwickAHRSupdateIMU+0x778>)
 8002880:	edd3 7a00 	vldr	s15, [r3]
 8002884:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002888:	4b7a      	ldr	r3, [pc, #488]	; (8002a74 <MadgwickAHRSupdateIMU+0x77c>)
 800288a:	edd3 6a00 	vldr	s13, [r3]
 800288e:	4b79      	ldr	r3, [pc, #484]	; (8002a74 <MadgwickAHRSupdateIMU+0x77c>)
 8002890:	edd3 7a00 	vldr	s15, [r3]
 8002894:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002898:	ee37 7a27 	vadd.f32	s14, s14, s15
 800289c:	4b76      	ldr	r3, [pc, #472]	; (8002a78 <MadgwickAHRSupdateIMU+0x780>)
 800289e:	edd3 6a00 	vldr	s13, [r3]
 80028a2:	4b75      	ldr	r3, [pc, #468]	; (8002a78 <MadgwickAHRSupdateIMU+0x780>)
 80028a4:	edd3 7a00 	vldr	s15, [r3]
 80028a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028b0:	4b6c      	ldr	r3, [pc, #432]	; (8002a64 <MadgwickAHRSupdateIMU+0x76c>)
 80028b2:	edd3 6a00 	vldr	s13, [r3]
 80028b6:	4b6b      	ldr	r3, [pc, #428]	; (8002a64 <MadgwickAHRSupdateIMU+0x76c>)
 80028b8:	edd3 7a00 	vldr	s15, [r3]
 80028bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c4:	eeb0 0a67 	vmov.f32	s0, s15
 80028c8:	f000 f944 	bl	8002b54 <invSqrt>
 80028cc:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	q0 *= recipNorm;
 80028d0:	4b67      	ldr	r3, [pc, #412]	; (8002a70 <MadgwickAHRSupdateIMU+0x778>)
 80028d2:	ed93 7a00 	vldr	s14, [r3]
 80028d6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80028da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028de:	4b64      	ldr	r3, [pc, #400]	; (8002a70 <MadgwickAHRSupdateIMU+0x778>)
 80028e0:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80028e4:	4b63      	ldr	r3, [pc, #396]	; (8002a74 <MadgwickAHRSupdateIMU+0x77c>)
 80028e6:	ed93 7a00 	vldr	s14, [r3]
 80028ea:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80028ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028f2:	4b60      	ldr	r3, [pc, #384]	; (8002a74 <MadgwickAHRSupdateIMU+0x77c>)
 80028f4:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80028f8:	4b5f      	ldr	r3, [pc, #380]	; (8002a78 <MadgwickAHRSupdateIMU+0x780>)
 80028fa:	ed93 7a00 	vldr	s14, [r3]
 80028fe:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002906:	4b5c      	ldr	r3, [pc, #368]	; (8002a78 <MadgwickAHRSupdateIMU+0x780>)
 8002908:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 800290c:	4b55      	ldr	r3, [pc, #340]	; (8002a64 <MadgwickAHRSupdateIMU+0x76c>)
 800290e:	ed93 7a00 	vldr	s14, [r3]
 8002912:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800291a:	4b52      	ldr	r3, [pc, #328]	; (8002a64 <MadgwickAHRSupdateIMU+0x76c>)
 800291c:	edc3 7a00 	vstr	s15, [r3]

	//Roll, Pitch, Yaw System Conversion
	System_Roll  = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 8002920:	4b53      	ldr	r3, [pc, #332]	; (8002a70 <MadgwickAHRSupdateIMU+0x778>)
 8002922:	ed93 7a00 	vldr	s14, [r3]
 8002926:	4b53      	ldr	r3, [pc, #332]	; (8002a74 <MadgwickAHRSupdateIMU+0x77c>)
 8002928:	edd3 7a00 	vldr	s15, [r3]
 800292c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002930:	4b51      	ldr	r3, [pc, #324]	; (8002a78 <MadgwickAHRSupdateIMU+0x780>)
 8002932:	edd3 6a00 	vldr	s13, [r3]
 8002936:	4b4b      	ldr	r3, [pc, #300]	; (8002a64 <MadgwickAHRSupdateIMU+0x76c>)
 8002938:	edd3 7a00 	vldr	s15, [r3]
 800293c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002940:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002944:	4b4b      	ldr	r3, [pc, #300]	; (8002a74 <MadgwickAHRSupdateIMU+0x77c>)
 8002946:	ed93 7a00 	vldr	s14, [r3]
 800294a:	4b4a      	ldr	r3, [pc, #296]	; (8002a74 <MadgwickAHRSupdateIMU+0x77c>)
 800294c:	edd3 7a00 	vldr	s15, [r3]
 8002950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002954:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002958:	ee37 7a67 	vsub.f32	s14, s14, s15
 800295c:	4b46      	ldr	r3, [pc, #280]	; (8002a78 <MadgwickAHRSupdateIMU+0x780>)
 800295e:	edd3 6a00 	vldr	s13, [r3]
 8002962:	4b45      	ldr	r3, [pc, #276]	; (8002a78 <MadgwickAHRSupdateIMU+0x780>)
 8002964:	edd3 7a00 	vldr	s15, [r3]
 8002968:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800296c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002970:	eef0 0a67 	vmov.f32	s1, s15
 8002974:	eeb0 0a46 	vmov.f32	s0, s12
 8002978:	f010 fbfe 	bl	8013178 <atan2f>
 800297c:	eef0 7a40 	vmov.f32	s15, s0
 8002980:	4b3e      	ldr	r3, [pc, #248]	; (8002a7c <MadgwickAHRSupdateIMU+0x784>)
 8002982:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 8002986:	4b3b      	ldr	r3, [pc, #236]	; (8002a74 <MadgwickAHRSupdateIMU+0x77c>)
 8002988:	ed93 7a00 	vldr	s14, [r3]
 800298c:	4b35      	ldr	r3, [pc, #212]	; (8002a64 <MadgwickAHRSupdateIMU+0x76c>)
 800298e:	edd3 7a00 	vldr	s15, [r3]
 8002992:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002996:	4b36      	ldr	r3, [pc, #216]	; (8002a70 <MadgwickAHRSupdateIMU+0x778>)
 8002998:	edd3 6a00 	vldr	s13, [r3]
 800299c:	4b36      	ldr	r3, [pc, #216]	; (8002a78 <MadgwickAHRSupdateIMU+0x780>)
 800299e:	edd3 7a00 	vldr	s15, [r3]
 80029a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029aa:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80029ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029b2:	eeb0 0a67 	vmov.f32	s0, s15
 80029b6:	f010 fbad 	bl	8013114 <asinf>
 80029ba:	eef0 7a40 	vmov.f32	s15, s0
 80029be:	4b30      	ldr	r3, [pc, #192]	; (8002a80 <MadgwickAHRSupdateIMU+0x788>)
 80029c0:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw = atan2(2.0f * (q1*q2 + q0*q3),q0*q0 + q1*q1 - q2*q2 - q3*q3);
 80029c4:	4b2b      	ldr	r3, [pc, #172]	; (8002a74 <MadgwickAHRSupdateIMU+0x77c>)
 80029c6:	ed93 7a00 	vldr	s14, [r3]
 80029ca:	4b2b      	ldr	r3, [pc, #172]	; (8002a78 <MadgwickAHRSupdateIMU+0x780>)
 80029cc:	edd3 7a00 	vldr	s15, [r3]
 80029d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029d4:	4b26      	ldr	r3, [pc, #152]	; (8002a70 <MadgwickAHRSupdateIMU+0x778>)
 80029d6:	edd3 6a00 	vldr	s13, [r3]
 80029da:	4b22      	ldr	r3, [pc, #136]	; (8002a64 <MadgwickAHRSupdateIMU+0x76c>)
 80029dc:	edd3 7a00 	vldr	s15, [r3]
 80029e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029f0:	4b1f      	ldr	r3, [pc, #124]	; (8002a70 <MadgwickAHRSupdateIMU+0x778>)
 80029f2:	ed93 6a00 	vldr	s12, [r3]
 80029f6:	4b1e      	ldr	r3, [pc, #120]	; (8002a70 <MadgwickAHRSupdateIMU+0x778>)
 80029f8:	edd3 6a00 	vldr	s13, [r3]
 80029fc:	ee26 6a26 	vmul.f32	s12, s12, s13
 8002a00:	4b1c      	ldr	r3, [pc, #112]	; (8002a74 <MadgwickAHRSupdateIMU+0x77c>)
 8002a02:	edd3 5a00 	vldr	s11, [r3]
 8002a06:	4b1b      	ldr	r3, [pc, #108]	; (8002a74 <MadgwickAHRSupdateIMU+0x77c>)
 8002a08:	edd3 6a00 	vldr	s13, [r3]
 8002a0c:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002a10:	ee36 6a26 	vadd.f32	s12, s12, s13
 8002a14:	4b18      	ldr	r3, [pc, #96]	; (8002a78 <MadgwickAHRSupdateIMU+0x780>)
 8002a16:	edd3 5a00 	vldr	s11, [r3]
 8002a1a:	4b17      	ldr	r3, [pc, #92]	; (8002a78 <MadgwickAHRSupdateIMU+0x780>)
 8002a1c:	edd3 6a00 	vldr	s13, [r3]
 8002a20:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002a24:	ee36 6a66 	vsub.f32	s12, s12, s13
 8002a28:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <MadgwickAHRSupdateIMU+0x76c>)
 8002a2a:	edd3 5a00 	vldr	s11, [r3]
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <MadgwickAHRSupdateIMU+0x76c>)
 8002a30:	edd3 6a00 	vldr	s13, [r3]
 8002a34:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002a38:	ee76 6a66 	vsub.f32	s13, s12, s13
 8002a3c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002a40:	eeb0 1b46 	vmov.f64	d1, d6
 8002a44:	eeb0 0b47 	vmov.f64	d0, d7
 8002a48:	f010 fb36 	bl	80130b8 <atan2>
 8002a4c:	eeb0 7b40 	vmov.f64	d7, d0
 8002a50:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <MadgwickAHRSupdateIMU+0x78c>)
 8002a56:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  *= 57.295779515f;
 8002a5a:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <MadgwickAHRSupdateIMU+0x784>)
 8002a5c:	edd3 7a00 	vldr	s15, [r3]
 8002a60:	e014      	b.n	8002a8c <MadgwickAHRSupdateIMU+0x794>
 8002a62:	bf00      	nop
 8002a64:	2400021c 	.word	0x2400021c
 8002a68:	2400000c 	.word	0x2400000c
 8002a6c:	3b03126f 	.word	0x3b03126f
 8002a70:	24000010 	.word	0x24000010
 8002a74:	24000214 	.word	0x24000214
 8002a78:	24000218 	.word	0x24000218
 8002a7c:	240002f4 	.word	0x240002f4
 8002a80:	240002f8 	.word	0x240002f8
 8002a84:	240002f0 	.word	0x240002f0
 8002a88:	42652ee1 	.word	0x42652ee1
 8002a8c:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8002a88 <MadgwickAHRSupdateIMU+0x790>
 8002a90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a94:	4b27      	ldr	r3, [pc, #156]	; (8002b34 <MadgwickAHRSupdateIMU+0x83c>)
 8002a96:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch *= 57.295779515f;
 8002a9a:	4b27      	ldr	r3, [pc, #156]	; (8002b38 <MadgwickAHRSupdateIMU+0x840>)
 8002a9c:	edd3 7a00 	vldr	s15, [r3]
 8002aa0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002b3c <MadgwickAHRSupdateIMU+0x844>
 8002aa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aa8:	4b23      	ldr	r3, [pc, #140]	; (8002b38 <MadgwickAHRSupdateIMU+0x840>)
 8002aaa:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   *= 57.295779515f;
 8002aae:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <MadgwickAHRSupdateIMU+0x848>)
 8002ab0:	edd3 7a00 	vldr	s15, [r3]
 8002ab4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002b3c <MadgwickAHRSupdateIMU+0x844>
 8002ab8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002abc:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <MadgwickAHRSupdateIMU+0x848>)
 8002abe:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  -= System_Roll_Offset;
 8002ac2:	4b1c      	ldr	r3, [pc, #112]	; (8002b34 <MadgwickAHRSupdateIMU+0x83c>)
 8002ac4:	ed93 7a00 	vldr	s14, [r3]
 8002ac8:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <MadgwickAHRSupdateIMU+0x84c>)
 8002aca:	edd3 7a00 	vldr	s15, [r3]
 8002ace:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad2:	4b18      	ldr	r3, [pc, #96]	; (8002b34 <MadgwickAHRSupdateIMU+0x83c>)
 8002ad4:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch -= System_Pitch_Offset;
 8002ad8:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <MadgwickAHRSupdateIMU+0x840>)
 8002ada:	ed93 7a00 	vldr	s14, [r3]
 8002ade:	4b1a      	ldr	r3, [pc, #104]	; (8002b48 <MadgwickAHRSupdateIMU+0x850>)
 8002ae0:	edd3 7a00 	vldr	s15, [r3]
 8002ae4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ae8:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <MadgwickAHRSupdateIMU+0x840>)
 8002aea:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   -= System_Yaw_Offset;
 8002aee:	4b14      	ldr	r3, [pc, #80]	; (8002b40 <MadgwickAHRSupdateIMU+0x848>)
 8002af0:	ed93 7a00 	vldr	s14, [r3]
 8002af4:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <MadgwickAHRSupdateIMU+0x854>)
 8002af6:	edd3 7a00 	vldr	s15, [r3]
 8002afa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002afe:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <MadgwickAHRSupdateIMU+0x848>)
 8002b00:	edc3 7a00 	vstr	s15, [r3]
	if(System_Yaw < 0)
 8002b04:	4b0e      	ldr	r3, [pc, #56]	; (8002b40 <MadgwickAHRSupdateIMU+0x848>)
 8002b06:	edd3 7a00 	vldr	s15, [r3]
 8002b0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b12:	d400      	bmi.n	8002b16 <MadgwickAHRSupdateIMU+0x81e>
	{
		System_Yaw = 360.0f + System_Yaw;
	}
}
 8002b14:	e009      	b.n	8002b2a <MadgwickAHRSupdateIMU+0x832>
		System_Yaw = 360.0f + System_Yaw;
 8002b16:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <MadgwickAHRSupdateIMU+0x848>)
 8002b18:	edd3 7a00 	vldr	s15, [r3]
 8002b1c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002b50 <MadgwickAHRSupdateIMU+0x858>
 8002b20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b24:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <MadgwickAHRSupdateIMU+0x848>)
 8002b26:	edc3 7a00 	vstr	s15, [r3]
}
 8002b2a:	bf00      	nop
 8002b2c:	3770      	adds	r7, #112	; 0x70
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	240002f4 	.word	0x240002f4
 8002b38:	240002f8 	.word	0x240002f8
 8002b3c:	42652ee1 	.word	0x42652ee1
 8002b40:	240002f0 	.word	0x240002f0
 8002b44:	24000220 	.word	0x24000220
 8002b48:	24000224 	.word	0x24000224
 8002b4c:	24000228 	.word	0x24000228
 8002b50:	43b40000 	.word	0x43b40000

08002b54 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002b5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b62:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b6a:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8002b72:	f107 0310 	add.w	r3, r7, #16
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	105a      	asrs	r2, r3, #1
 8002b7e:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <invSqrt+0x74>)
 8002b80:	1a9b      	subs	r3, r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002b84:	f107 030c 	add.w	r3, r7, #12
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002b8c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b90:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b98:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002ba4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ba8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb0:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	ee07 3a90 	vmov	s15, r3
}
 8002bba:	eeb0 0a67 	vmov.f32	s0, s15
 8002bbe:	371c      	adds	r7, #28
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	5f3759df 	.word	0x5f3759df

08002bcc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* p, int len)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_DMA(&huart1, p, len);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	461a      	mov	r2, r3
 8002bde:	68b9      	ldr	r1, [r7, #8]
 8002be0:	4803      	ldr	r0, [pc, #12]	; (8002bf0 <_write+0x24>)
 8002be2:	f00b fc61 	bl	800e4a8 <HAL_UART_Transmit_DMA>
}
 8002be6:	bf00      	nop
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	24000540 	.word	0x24000540

08002bf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bf8:	b088      	sub	sp, #32
 8002bfa:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bfc:	f002 f81e 	bl	8004c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c00:	f000 f9b8 	bl	8002f74 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002c04:	f000 fa34 	bl	8003070 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c08:	f000 fc82 	bl	8003510 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c0c:	f000 fc48 	bl	80034a0 <MX_DMA_Init>
  MX_TIM7_Init();
 8002c10:	f000 fae0 	bl	80031d4 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8002c14:	f000 fb60 	bl	80032d8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002c18:	f000 fa46 	bl	80030a8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002c1c:	f000 fa84 	bl	8003128 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002c20:	f000 fba6 	bl	8003370 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8002c24:	f000 fb0c 	bl	8003240 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8002c28:	f000 fbee 	bl	8003408 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim7);
 8002c2c:	48b8      	ldr	r0, [pc, #736]	; (8002f10 <main+0x31c>)
 8002c2e:	f00b f8ad 	bl	800dd8c <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 8002c32:	2201      	movs	r2, #1
 8002c34:	49b7      	ldr	r1, [pc, #732]	; (8002f14 <main+0x320>)
 8002c36:	48b8      	ldr	r0, [pc, #736]	; (8002f18 <main+0x324>)
 8002c38:	f00b fbf0 	bl	800e41c <HAL_UART_Receive_IT>
	HAL_UART_Receive_DMA(&huart2, &ibus_rx_buf[0], 32);
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	49b7      	ldr	r1, [pc, #732]	; (8002f1c <main+0x328>)
 8002c40:	48b7      	ldr	r0, [pc, #732]	; (8002f20 <main+0x32c>)
 8002c42:	f00b fcb1 	bl	800e5a8 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	//Receiver Check
	while(Is_iBus_Received(ibus_rx_cplt_flag) == 0)
 8002c46:	e007      	b.n	8002c58 <main+0x64>
	{
		HAL_Delay(500);
 8002c48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c4c:	f002 f888 	bl	8004d60 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8002c50:	2102      	movs	r1, #2
 8002c52:	48b4      	ldr	r0, [pc, #720]	; (8002f24 <main+0x330>)
 8002c54:	f005 f9e1 	bl	800801a <HAL_GPIO_TogglePin>
	while(Is_iBus_Received(ibus_rx_cplt_flag) == 0)
 8002c58:	4bb3      	ldr	r3, [pc, #716]	; (8002f28 <main+0x334>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f001 fa5f 	bl	8004120 <Is_iBus_Received>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0ef      	beq.n	8002c48 <main+0x54>
	}

	//Initialize MPU9250
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8002c68:	e009      	b.n	8002c7e <main+0x8a>
	{
		if(tim1_20ms_flag == 1)
 8002c6a:	4bb0      	ldr	r3, [pc, #704]	; (8002f2c <main+0x338>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d105      	bne.n	8002c7e <main+0x8a>
		{
			tim1_20ms_flag = 0;
 8002c72:	4bae      	ldr	r3, [pc, #696]	; (8002f2c <main+0x338>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
			printf("MPU9250 Initialing \n");
 8002c78:	48ad      	ldr	r0, [pc, #692]	; (8002f30 <main+0x33c>)
 8002c7a:	f00e fa19 	bl	80110b0 <puts>
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8002c7e:	2303      	movs	r3, #3
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	2303      	movs	r3, #3
 8002c84:	2203      	movs	r2, #3
 8002c86:	2103      	movs	r1, #3
 8002c88:	48aa      	ldr	r0, [pc, #680]	; (8002f34 <main+0x340>)
 8002c8a:	f7fd fde9 	bl	8000860 <MPU9250_Init>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0ea      	beq.n	8002c6a <main+0x76>
		}
	}
	MPU9250_Bypass(&hi2c1);
 8002c94:	48a7      	ldr	r0, [pc, #668]	; (8002f34 <main+0x340>)
 8002c96:	f7fd fecb 	bl	8000a30 <MPU9250_Bypass>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 8002c9a:	e009      	b.n	8002cb0 <main+0xbc>
	{
		if(tim1_20ms_flag == 1)
 8002c9c:	4ba3      	ldr	r3, [pc, #652]	; (8002f2c <main+0x338>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d105      	bne.n	8002cb0 <main+0xbc>
		{
			tim1_20ms_flag = 0;
 8002ca4:	4ba1      	ldr	r3, [pc, #644]	; (8002f2c <main+0x338>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	701a      	strb	r2, [r3, #0]
			printf("AK8963 Initialing \n");
 8002caa:	48a3      	ldr	r0, [pc, #652]	; (8002f38 <main+0x344>)
 8002cac:	f00e fa00 	bl	80110b0 <puts>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 8002cb0:	49a2      	ldr	r1, [pc, #648]	; (8002f3c <main+0x348>)
 8002cb2:	48a0      	ldr	r0, [pc, #640]	; (8002f34 <main+0x340>)
 8002cb4:	f7fd ff3c 	bl	8000b30 <MPU9250_AK8963_Setup>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0ee      	beq.n	8002c9c <main+0xa8>
		}
	}
	MPU9250_Master(&hi2c1);
 8002cbe:	489d      	ldr	r0, [pc, #628]	; (8002f34 <main+0x340>)
 8002cc0:	f7fd fee4 	bl	8000a8c <MPU9250_Master>
	MPU9250_Slave0_Enable(&hi2c1);
 8002cc4:	489b      	ldr	r0, [pc, #620]	; (8002f34 <main+0x340>)
 8002cc6:	f7fd ff89 	bl	8000bdc <MPU9250_Slave0_Enable>


	//Initialize MS5611

	//EEPROM
	W25qxx_Init();
 8002cca:	f001 fc87 	bl	80045dc <W25qxx_Init>
	W25qxx_ReadSector(Mag_Calib, 0, 0, 12);
 8002cce:	230c      	movs	r3, #12
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	489a      	ldr	r0, [pc, #616]	; (8002f40 <main+0x34c>)
 8002cd6:	f001 ff25 	bl	8004b24 <W25qxx_ReadSector>
	MPU9250.Mx_Offset = *(float*)&Mag_Calib[0];
 8002cda:	4b99      	ldr	r3, [pc, #612]	; (8002f40 <main+0x34c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a97      	ldr	r2, [pc, #604]	; (8002f3c <main+0x348>)
 8002ce0:	65d3      	str	r3, [r2, #92]	; 0x5c
	MPU9250.My_Offset = *(float*)&Mag_Calib[4];
 8002ce2:	4b98      	ldr	r3, [pc, #608]	; (8002f44 <main+0x350>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a95      	ldr	r2, [pc, #596]	; (8002f3c <main+0x348>)
 8002ce8:	6613      	str	r3, [r2, #96]	; 0x60
	MPU9250.Mz_Offset = *(float*)&Mag_Calib[8];
 8002cea:	4b97      	ldr	r3, [pc, #604]	; (8002f48 <main+0x354>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a93      	ldr	r2, [pc, #588]	; (8002f3c <main+0x348>)
 8002cf0:	6653      	str	r3, [r2, #100]	; 0x64

	while (1)
	{
		Receive_Command();
 8002cf2:	f001 f9bd 	bl	8004070 <Receive_Command>
		Compass_Calibration(mag_calibration_enable);
 8002cf6:	4b95      	ldr	r3, [pc, #596]	; (8002f4c <main+0x358>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 fc70 	bl	80035e0 <Compass_Calibration>

		Is_iBus_Received(ibus_rx_cplt_flag);
 8002d00:	4b89      	ldr	r3, [pc, #548]	; (8002f28 <main+0x334>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f001 fa0b 	bl	8004120 <Is_iBus_Received>

		//Read MPU9250 + Motor Control
		if(tim1_2ms_flag == 1)
 8002d0a:	4b91      	ldr	r3, [pc, #580]	; (8002f50 <main+0x35c>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d133      	bne.n	8002d7a <main+0x186>
		{
			tim1_2ms_flag = 0;
 8002d12:	4b8f      	ldr	r3, [pc, #572]	; (8002f50 <main+0x35c>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
			MPU9250_Read_All(&hi2c1);
 8002d18:	4886      	ldr	r0, [pc, #536]	; (8002f34 <main+0x340>)
 8002d1a:	f7fd ff9f 	bl	8000c5c <MPU9250_Read_All>
			MPU9250_Parsing(&MPU9250);
 8002d1e:	4887      	ldr	r0, [pc, #540]	; (8002f3c <main+0x348>)
 8002d20:	f7fd ffb2 	bl	8000c88 <MPU9250_Parsing>
			MadgwickAHRSupdate(MPU9250.Gx_Rad, MPU9250.Gy_Rad, MPU9250.Gz_Rad, MPU9250.Ax, MPU9250.Ay, MPU9250.Az, MPU9250.Mx, MPU9250.My, MPU9250.Mz);
 8002d24:	4b85      	ldr	r3, [pc, #532]	; (8002f3c <main+0x348>)
 8002d26:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002d2a:	4b84      	ldr	r3, [pc, #528]	; (8002f3c <main+0x348>)
 8002d2c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002d30:	4b82      	ldr	r3, [pc, #520]	; (8002f3c <main+0x348>)
 8002d32:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8002d36:	4b81      	ldr	r3, [pc, #516]	; (8002f3c <main+0x348>)
 8002d38:	ed93 6a02 	vldr	s12, [r3, #8]
 8002d3c:	4b7f      	ldr	r3, [pc, #508]	; (8002f3c <main+0x348>)
 8002d3e:	edd3 5a03 	vldr	s11, [r3, #12]
 8002d42:	4b7e      	ldr	r3, [pc, #504]	; (8002f3c <main+0x348>)
 8002d44:	ed93 5a04 	vldr	s10, [r3, #16]
 8002d48:	4b7c      	ldr	r3, [pc, #496]	; (8002f3c <main+0x348>)
 8002d4a:	edd3 4a1a 	vldr	s9, [r3, #104]	; 0x68
 8002d4e:	4b7b      	ldr	r3, [pc, #492]	; (8002f3c <main+0x348>)
 8002d50:	edd3 3a1b 	vldr	s7, [r3, #108]	; 0x6c
 8002d54:	4b79      	ldr	r3, [pc, #484]	; (8002f3c <main+0x348>)
 8002d56:	ed93 4a1c 	vldr	s8, [r3, #112]	; 0x70
 8002d5a:	eeb0 3a64 	vmov.f32	s6, s9
 8002d5e:	eef0 2a45 	vmov.f32	s5, s10
 8002d62:	eeb0 2a65 	vmov.f32	s4, s11
 8002d66:	eef0 1a46 	vmov.f32	s3, s12
 8002d6a:	eeb0 1a66 	vmov.f32	s2, s13
 8002d6e:	eef0 0a47 	vmov.f32	s1, s14
 8002d72:	eeb0 0a67 	vmov.f32	s0, s15
 8002d76:	f7fe fab1 	bl	80012dc <MadgwickAHRSupdate>
		}

		//Print According to the Input
		if(tim1_20ms_flag == 1)
 8002d7a:	4b6c      	ldr	r3, [pc, #432]	; (8002f2c <main+0x338>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	f040 80c2 	bne.w	8002f08 <main+0x314>
		{
			tim1_20ms_flag = 0;
 8002d84:	4b69      	ldr	r3, [pc, #420]	; (8002f2c <main+0x338>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]

			switch(print_mode)
 8002d8a:	4b72      	ldr	r3, [pc, #456]	; (8002f54 <main+0x360>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	2b06      	cmp	r3, #6
 8002d92:	f200 80bb 	bhi.w	8002f0c <main+0x318>
 8002d96:	a201      	add	r2, pc, #4	; (adr r2, 8002d9c <main+0x1a8>)
 8002d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9c:	08002db9 	.word	0x08002db9
 8002da0:	08002f0d 	.word	0x08002f0d
 8002da4:	08002deb 	.word	0x08002deb
 8002da8:	08002e1d 	.word	0x08002e1d
 8002dac:	08002e4f 	.word	0x08002e4f
 8002db0:	08002e81 	.word	0x08002e81
 8002db4:	08002eb3 	.word	0x08002eb3
			{
			case 1: printf("%.2f \t %.2f \t %.2f \t \n", System_Roll, System_Pitch, System_Yaw); break; //Roll, Pitch, Yaw
 8002db8:	4b67      	ldr	r3, [pc, #412]	; (8002f58 <main+0x364>)
 8002dba:	edd3 7a00 	vldr	s15, [r3]
 8002dbe:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002dc2:	4b66      	ldr	r3, [pc, #408]	; (8002f5c <main+0x368>)
 8002dc4:	edd3 7a00 	vldr	s15, [r3]
 8002dc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002dcc:	4b64      	ldr	r3, [pc, #400]	; (8002f60 <main+0x36c>)
 8002dce:	edd3 6a00 	vldr	s13, [r3]
 8002dd2:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002dd6:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002dda:	ed8d 7b00 	vstr	d7, [sp]
 8002dde:	ec53 2b15 	vmov	r2, r3, d5
 8002de2:	4860      	ldr	r0, [pc, #384]	; (8002f64 <main+0x370>)
 8002de4:	f00e f8de 	bl	8010fa4 <iprintf>
 8002de8:	e091      	b.n	8002f0e <main+0x31a>
			case 2: /* printf("%.2f \t %.2f \t \m", Alt, Alt_Filt); */ break; //Alt Raw, Alt Filt
			case 3: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Gx, MPU9250.Gy, MPU9250.Gz); break; //Gyro
 8002dea:	4b54      	ldr	r3, [pc, #336]	; (8002f3c <main+0x348>)
 8002dec:	edd3 7a08 	vldr	s15, [r3, #32]
 8002df0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002df4:	4b51      	ldr	r3, [pc, #324]	; (8002f3c <main+0x348>)
 8002df6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002dfa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002dfe:	4b4f      	ldr	r3, [pc, #316]	; (8002f3c <main+0x348>)
 8002e00:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002e04:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002e08:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002e0c:	ed8d 7b00 	vstr	d7, [sp]
 8002e10:	ec53 2b15 	vmov	r2, r3, d5
 8002e14:	4853      	ldr	r0, [pc, #332]	; (8002f64 <main+0x370>)
 8002e16:	f00e f8c5 	bl	8010fa4 <iprintf>
 8002e1a:	e078      	b.n	8002f0e <main+0x31a>
			case 4: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Ax, MPU9250.Ay, MPU9250.Az); break; //Accel
 8002e1c:	4b47      	ldr	r3, [pc, #284]	; (8002f3c <main+0x348>)
 8002e1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e22:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002e26:	4b45      	ldr	r3, [pc, #276]	; (8002f3c <main+0x348>)
 8002e28:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e30:	4b42      	ldr	r3, [pc, #264]	; (8002f3c <main+0x348>)
 8002e32:	edd3 6a04 	vldr	s13, [r3, #16]
 8002e36:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002e3a:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002e3e:	ed8d 7b00 	vstr	d7, [sp]
 8002e42:	ec53 2b15 	vmov	r2, r3, d5
 8002e46:	4847      	ldr	r0, [pc, #284]	; (8002f64 <main+0x370>)
 8002e48:	f00e f8ac 	bl	8010fa4 <iprintf>
 8002e4c:	e05f      	b.n	8002f0e <main+0x31a>
			case 5: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Mx, MPU9250.My, MPU9250.Mz); break; //Mag
 8002e4e:	4b3b      	ldr	r3, [pc, #236]	; (8002f3c <main+0x348>)
 8002e50:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002e54:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002e58:	4b38      	ldr	r3, [pc, #224]	; (8002f3c <main+0x348>)
 8002e5a:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002e5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e62:	4b36      	ldr	r3, [pc, #216]	; (8002f3c <main+0x348>)
 8002e64:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8002e68:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002e6c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002e70:	ed8d 7b00 	vstr	d7, [sp]
 8002e74:	ec53 2b15 	vmov	r2, r3, d5
 8002e78:	483a      	ldr	r0, [pc, #232]	; (8002f64 <main+0x370>)
 8002e7a:	f00e f893 	bl	8010fa4 <iprintf>
 8002e7e:	e046      	b.n	8002f0e <main+0x31a>
			case 6: printf("%f \t %f \t %f \t \n", MPU9250.Mx_Offset, MPU9250.My_Offset, MPU9250.Mz_Offset); break; //Mag_Offset
 8002e80:	4b2e      	ldr	r3, [pc, #184]	; (8002f3c <main+0x348>)
 8002e82:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002e86:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002e8a:	4b2c      	ldr	r3, [pc, #176]	; (8002f3c <main+0x348>)
 8002e8c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002e90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e94:	4b29      	ldr	r3, [pc, #164]	; (8002f3c <main+0x348>)
 8002e96:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8002e9a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002e9e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002ea2:	ed8d 7b00 	vstr	d7, [sp]
 8002ea6:	ec53 2b15 	vmov	r2, r3, d5
 8002eaa:	482f      	ldr	r0, [pc, #188]	; (8002f68 <main+0x374>)
 8002eac:	f00e f87a 	bl	8010fa4 <iprintf>
 8002eb0:	e02d      	b.n	8002f0e <main+0x31a>
			case 7: printf("%d %d %d %d %d %d %d %d %d %d \n", iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwB, iBus.VrA, iBus.VrB, iBus.SwC, iBus.SwD); break; //Mag_Offset
 8002eb2:	4b2e      	ldr	r3, [pc, #184]	; (8002f6c <main+0x378>)
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	469c      	mov	ip, r3
 8002eb8:	4b2c      	ldr	r3, [pc, #176]	; (8002f6c <main+0x378>)
 8002eba:	885b      	ldrh	r3, [r3, #2]
 8002ebc:	469e      	mov	lr, r3
 8002ebe:	4b2b      	ldr	r3, [pc, #172]	; (8002f6c <main+0x378>)
 8002ec0:	889b      	ldrh	r3, [r3, #4]
 8002ec2:	4698      	mov	r8, r3
 8002ec4:	4b29      	ldr	r3, [pc, #164]	; (8002f6c <main+0x378>)
 8002ec6:	88db      	ldrh	r3, [r3, #6]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4b28      	ldr	r3, [pc, #160]	; (8002f6c <main+0x378>)
 8002ecc:	891b      	ldrh	r3, [r3, #8]
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4b26      	ldr	r3, [pc, #152]	; (8002f6c <main+0x378>)
 8002ed2:	895b      	ldrh	r3, [r3, #10]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	4b25      	ldr	r3, [pc, #148]	; (8002f6c <main+0x378>)
 8002ed8:	8a1b      	ldrh	r3, [r3, #16]
 8002eda:	461c      	mov	r4, r3
 8002edc:	4b23      	ldr	r3, [pc, #140]	; (8002f6c <main+0x378>)
 8002ede:	8a5b      	ldrh	r3, [r3, #18]
 8002ee0:	461d      	mov	r5, r3
 8002ee2:	4b22      	ldr	r3, [pc, #136]	; (8002f6c <main+0x378>)
 8002ee4:	899b      	ldrh	r3, [r3, #12]
 8002ee6:	461e      	mov	r6, r3
 8002ee8:	4b20      	ldr	r3, [pc, #128]	; (8002f6c <main+0x378>)
 8002eea:	89db      	ldrh	r3, [r3, #14]
 8002eec:	9306      	str	r3, [sp, #24]
 8002eee:	9605      	str	r6, [sp, #20]
 8002ef0:	9504      	str	r5, [sp, #16]
 8002ef2:	9403      	str	r4, [sp, #12]
 8002ef4:	9002      	str	r0, [sp, #8]
 8002ef6:	9101      	str	r1, [sp, #4]
 8002ef8:	9200      	str	r2, [sp, #0]
 8002efa:	4643      	mov	r3, r8
 8002efc:	4672      	mov	r2, lr
 8002efe:	4661      	mov	r1, ip
 8002f00:	481b      	ldr	r0, [pc, #108]	; (8002f70 <main+0x37c>)
 8002f02:	f00e f84f 	bl	8010fa4 <iprintf>
 8002f06:	e002      	b.n	8002f0e <main+0x31a>
			default: break;
			}
		}
 8002f08:	bf00      	nop
 8002f0a:	e6f2      	b.n	8002cf2 <main+0xfe>
			default: break;
 8002f0c:	bf00      	nop
	{
 8002f0e:	e6f0      	b.n	8002cf2 <main+0xfe>
 8002f10:	240007fc 	.word	0x240007fc
 8002f14:	24000231 	.word	0x24000231
 8002f18:	24000540 	.word	0x24000540
 8002f1c:	2400084c 	.word	0x2400084c
 8002f20:	24000760 	.word	0x24000760
 8002f24:	58020000 	.word	0x58020000
 8002f28:	24000232 	.word	0x24000232
 8002f2c:	2400022f 	.word	0x2400022f
 8002f30:	08013a20 	.word	0x08013a20
 8002f34:	2400047c 	.word	0x2400047c
 8002f38:	08013a34 	.word	0x08013a34
 8002f3c:	24000264 	.word	0x24000264
 8002f40:	240007f0 	.word	0x240007f0
 8002f44:	240007f4 	.word	0x240007f4
 8002f48:	240007f8 	.word	0x240007f8
 8002f4c:	2400022d 	.word	0x2400022d
 8002f50:	2400022e 	.word	0x2400022e
 8002f54:	2400022c 	.word	0x2400022c
 8002f58:	240002f4 	.word	0x240002f4
 8002f5c:	240002f8 	.word	0x240002f8
 8002f60:	240002f0 	.word	0x240002f0
 8002f64:	08013a48 	.word	0x08013a48
 8002f68:	08013a60 	.word	0x08013a60
 8002f6c:	24000248 	.word	0x24000248
 8002f70:	08013a74 	.word	0x08013a74

08002f74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b09c      	sub	sp, #112	; 0x70
 8002f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f7e:	224c      	movs	r2, #76	; 0x4c
 8002f80:	2100      	movs	r1, #0
 8002f82:	4618      	mov	r0, r3
 8002f84:	f00d fbc4 	bl	8010710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f88:	1d3b      	adds	r3, r7, #4
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f00d fbbe 	bl	8010710 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002f94:	2002      	movs	r0, #2
 8002f96:	f007 faaf 	bl	800a4f8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	603b      	str	r3, [r7, #0]
 8002f9e:	4b32      	ldr	r3, [pc, #200]	; (8003068 <SystemClock_Config+0xf4>)
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	4a31      	ldr	r2, [pc, #196]	; (8003068 <SystemClock_Config+0xf4>)
 8002fa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fa8:	6193      	str	r3, [r2, #24]
 8002faa:	4b2f      	ldr	r3, [pc, #188]	; (8003068 <SystemClock_Config+0xf4>)
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	4b2d      	ldr	r3, [pc, #180]	; (800306c <SystemClock_Config+0xf8>)
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	4a2c      	ldr	r2, [pc, #176]	; (800306c <SystemClock_Config+0xf8>)
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002fc0:	4b2a      	ldr	r3, [pc, #168]	; (800306c <SystemClock_Config+0xf8>)
 8002fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	603b      	str	r3, [r7, #0]
 8002fca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002fcc:	bf00      	nop
 8002fce:	4b26      	ldr	r3, [pc, #152]	; (8003068 <SystemClock_Config+0xf4>)
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fda:	d1f8      	bne.n	8002fce <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fe0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002fea:	2340      	movs	r3, #64	; 0x40
 8002fec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002ff6:	2305      	movs	r3, #5
 8002ff8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002ffa:	23c0      	movs	r3, #192	; 0xc0
 8002ffc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002ffe:	2302      	movs	r3, #2
 8003000:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003002:	2302      	movs	r3, #2
 8003004:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003006:	2302      	movs	r3, #2
 8003008:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800300a:	2308      	movs	r3, #8
 800300c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800300e:	2300      	movs	r3, #0
 8003010:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800301a:	4618      	mov	r0, r3
 800301c:	f007 faa6 	bl	800a56c <HAL_RCC_OscConfig>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8003026:	f000 fbc9 	bl	80037bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800302a:	233f      	movs	r3, #63	; 0x3f
 800302c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800302e:	2303      	movs	r3, #3
 8003030:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003036:	2308      	movs	r3, #8
 8003038:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800303a:	2340      	movs	r3, #64	; 0x40
 800303c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800303e:	2340      	movs	r3, #64	; 0x40
 8003040:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003046:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003048:	2340      	movs	r3, #64	; 0x40
 800304a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800304c:	1d3b      	adds	r3, r7, #4
 800304e:	2104      	movs	r1, #4
 8003050:	4618      	mov	r0, r3
 8003052:	f007 fe9b 	bl	800ad8c <HAL_RCC_ClockConfig>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <SystemClock_Config+0xec>
  {
    Error_Handler();
 800305c:	f000 fbae 	bl	80037bc <Error_Handler>
  }
}
 8003060:	bf00      	nop
 8003062:	3770      	adds	r7, #112	; 0x70
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	58024800 	.word	0x58024800
 800306c:	58000400 	.word	0x58000400

08003070 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b0b0      	sub	sp, #192	; 0xc0
 8003074:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003076:	1d3b      	adds	r3, r7, #4
 8003078:	22bc      	movs	r2, #188	; 0xbc
 800307a:	2100      	movs	r1, #0
 800307c:	4618      	mov	r0, r3
 800307e:	f00d fb47 	bl	8010710 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8003082:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003086:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8003088:	2300      	movs	r3, #0
 800308a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800308c:	1d3b      	adds	r3, r7, #4
 800308e:	4618      	mov	r0, r3
 8003090:	f008 fa08 	bl	800b4a4 <HAL_RCCEx_PeriphCLKConfig>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 800309a:	f000 fb8f 	bl	80037bc <Error_Handler>
  }
}
 800309e:	bf00      	nop
 80030a0:	37c0      	adds	r7, #192	; 0xc0
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80030ac:	4b1b      	ldr	r3, [pc, #108]	; (800311c <MX_I2C1_Init+0x74>)
 80030ae:	4a1c      	ldr	r2, [pc, #112]	; (8003120 <MX_I2C1_Init+0x78>)
 80030b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 80030b2:	4b1a      	ldr	r3, [pc, #104]	; (800311c <MX_I2C1_Init+0x74>)
 80030b4:	4a1b      	ldr	r2, [pc, #108]	; (8003124 <MX_I2C1_Init+0x7c>)
 80030b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80030b8:	4b18      	ldr	r3, [pc, #96]	; (800311c <MX_I2C1_Init+0x74>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030be:	4b17      	ldr	r3, [pc, #92]	; (800311c <MX_I2C1_Init+0x74>)
 80030c0:	2201      	movs	r2, #1
 80030c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80030c4:	4b15      	ldr	r3, [pc, #84]	; (800311c <MX_I2C1_Init+0x74>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80030ca:	4b14      	ldr	r3, [pc, #80]	; (800311c <MX_I2C1_Init+0x74>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80030d0:	4b12      	ldr	r3, [pc, #72]	; (800311c <MX_I2C1_Init+0x74>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80030d6:	4b11      	ldr	r3, [pc, #68]	; (800311c <MX_I2C1_Init+0x74>)
 80030d8:	2200      	movs	r2, #0
 80030da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80030dc:	4b0f      	ldr	r3, [pc, #60]	; (800311c <MX_I2C1_Init+0x74>)
 80030de:	2200      	movs	r2, #0
 80030e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80030e2:	480e      	ldr	r0, [pc, #56]	; (800311c <MX_I2C1_Init+0x74>)
 80030e4:	f004 ffb4 	bl	8008050 <HAL_I2C_Init>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80030ee:	f000 fb65 	bl	80037bc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80030f2:	2100      	movs	r1, #0
 80030f4:	4809      	ldr	r0, [pc, #36]	; (800311c <MX_I2C1_Init+0x74>)
 80030f6:	f007 f967 	bl	800a3c8 <HAL_I2CEx_ConfigAnalogFilter>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003100:	f000 fb5c 	bl	80037bc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003104:	2100      	movs	r1, #0
 8003106:	4805      	ldr	r0, [pc, #20]	; (800311c <MX_I2C1_Init+0x74>)
 8003108:	f007 f9a9 	bl	800a45e <HAL_I2CEx_ConfigDigitalFilter>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003112:	f000 fb53 	bl	80037bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	2400047c 	.word	0x2400047c
 8003120:	40005400 	.word	0x40005400
 8003124:	00b03fdb 	.word	0x00b03fdb

08003128 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800312c:	4b27      	ldr	r3, [pc, #156]	; (80031cc <MX_SPI1_Init+0xa4>)
 800312e:	4a28      	ldr	r2, [pc, #160]	; (80031d0 <MX_SPI1_Init+0xa8>)
 8003130:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003132:	4b26      	ldr	r3, [pc, #152]	; (80031cc <MX_SPI1_Init+0xa4>)
 8003134:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003138:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800313a:	4b24      	ldr	r3, [pc, #144]	; (80031cc <MX_SPI1_Init+0xa4>)
 800313c:	2200      	movs	r2, #0
 800313e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003140:	4b22      	ldr	r3, [pc, #136]	; (80031cc <MX_SPI1_Init+0xa4>)
 8003142:	2207      	movs	r2, #7
 8003144:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003146:	4b21      	ldr	r3, [pc, #132]	; (80031cc <MX_SPI1_Init+0xa4>)
 8003148:	2200      	movs	r2, #0
 800314a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800314c:	4b1f      	ldr	r3, [pc, #124]	; (80031cc <MX_SPI1_Init+0xa4>)
 800314e:	2200      	movs	r2, #0
 8003150:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003152:	4b1e      	ldr	r3, [pc, #120]	; (80031cc <MX_SPI1_Init+0xa4>)
 8003154:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003158:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800315a:	4b1c      	ldr	r3, [pc, #112]	; (80031cc <MX_SPI1_Init+0xa4>)
 800315c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8003160:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003162:	4b1a      	ldr	r3, [pc, #104]	; (80031cc <MX_SPI1_Init+0xa4>)
 8003164:	2200      	movs	r2, #0
 8003166:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003168:	4b18      	ldr	r3, [pc, #96]	; (80031cc <MX_SPI1_Init+0xa4>)
 800316a:	2200      	movs	r2, #0
 800316c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800316e:	4b17      	ldr	r3, [pc, #92]	; (80031cc <MX_SPI1_Init+0xa4>)
 8003170:	2200      	movs	r2, #0
 8003172:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003174:	4b15      	ldr	r3, [pc, #84]	; (80031cc <MX_SPI1_Init+0xa4>)
 8003176:	2200      	movs	r2, #0
 8003178:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800317a:	4b14      	ldr	r3, [pc, #80]	; (80031cc <MX_SPI1_Init+0xa4>)
 800317c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003180:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003182:	4b12      	ldr	r3, [pc, #72]	; (80031cc <MX_SPI1_Init+0xa4>)
 8003184:	2200      	movs	r2, #0
 8003186:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003188:	4b10      	ldr	r3, [pc, #64]	; (80031cc <MX_SPI1_Init+0xa4>)
 800318a:	2200      	movs	r2, #0
 800318c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800318e:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <MX_SPI1_Init+0xa4>)
 8003190:	2200      	movs	r2, #0
 8003192:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003194:	4b0d      	ldr	r3, [pc, #52]	; (80031cc <MX_SPI1_Init+0xa4>)
 8003196:	2200      	movs	r2, #0
 8003198:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800319a:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <MX_SPI1_Init+0xa4>)
 800319c:	2200      	movs	r2, #0
 800319e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80031a0:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <MX_SPI1_Init+0xa4>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80031a6:	4b09      	ldr	r3, [pc, #36]	; (80031cc <MX_SPI1_Init+0xa4>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80031ac:	4b07      	ldr	r3, [pc, #28]	; (80031cc <MX_SPI1_Init+0xa4>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80031b2:	4b06      	ldr	r3, [pc, #24]	; (80031cc <MX_SPI1_Init+0xa4>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80031b8:	4804      	ldr	r0, [pc, #16]	; (80031cc <MX_SPI1_Init+0xa4>)
 80031ba:	f009 fcd5 	bl	800cb68 <HAL_SPI_Init>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80031c4:	f000 fafa 	bl	80037bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80031c8:	bf00      	nop
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	240006d8 	.word	0x240006d8
 80031d0:	40013000 	.word	0x40013000

080031d4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031da:	1d3b      	adds	r3, r7, #4
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80031e4:	4b14      	ldr	r3, [pc, #80]	; (8003238 <MX_TIM7_Init+0x64>)
 80031e6:	4a15      	ldr	r2, [pc, #84]	; (800323c <MX_TIM7_Init+0x68>)
 80031e8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 39999;
 80031ea:	4b13      	ldr	r3, [pc, #76]	; (8003238 <MX_TIM7_Init+0x64>)
 80031ec:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80031f0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031f2:	4b11      	ldr	r3, [pc, #68]	; (8003238 <MX_TIM7_Init+0x64>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5;
 80031f8:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <MX_TIM7_Init+0x64>)
 80031fa:	2205      	movs	r2, #5
 80031fc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80031fe:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <MX_TIM7_Init+0x64>)
 8003200:	2280      	movs	r2, #128	; 0x80
 8003202:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003204:	480c      	ldr	r0, [pc, #48]	; (8003238 <MX_TIM7_Init+0x64>)
 8003206:	f00a fd6a 	bl	800dcde <HAL_TIM_Base_Init>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003210:	f000 fad4 	bl	80037bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003214:	2300      	movs	r3, #0
 8003216:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800321c:	1d3b      	adds	r3, r7, #4
 800321e:	4619      	mov	r1, r3
 8003220:	4805      	ldr	r0, [pc, #20]	; (8003238 <MX_TIM7_Init+0x64>)
 8003222:	f00b f805 	bl	800e230 <HAL_TIMEx_MasterConfigSynchronization>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800322c:	f000 fac6 	bl	80037bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003230:	bf00      	nop
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	240007fc 	.word	0x240007fc
 800323c:	40001400 	.word	0x40001400

08003240 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003244:	4b22      	ldr	r3, [pc, #136]	; (80032d0 <MX_UART4_Init+0x90>)
 8003246:	4a23      	ldr	r2, [pc, #140]	; (80032d4 <MX_UART4_Init+0x94>)
 8003248:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800324a:	4b21      	ldr	r3, [pc, #132]	; (80032d0 <MX_UART4_Init+0x90>)
 800324c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003250:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003252:	4b1f      	ldr	r3, [pc, #124]	; (80032d0 <MX_UART4_Init+0x90>)
 8003254:	2200      	movs	r2, #0
 8003256:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003258:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <MX_UART4_Init+0x90>)
 800325a:	2200      	movs	r2, #0
 800325c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800325e:	4b1c      	ldr	r3, [pc, #112]	; (80032d0 <MX_UART4_Init+0x90>)
 8003260:	2200      	movs	r2, #0
 8003262:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003264:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <MX_UART4_Init+0x90>)
 8003266:	220c      	movs	r2, #12
 8003268:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800326a:	4b19      	ldr	r3, [pc, #100]	; (80032d0 <MX_UART4_Init+0x90>)
 800326c:	2200      	movs	r2, #0
 800326e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003270:	4b17      	ldr	r3, [pc, #92]	; (80032d0 <MX_UART4_Init+0x90>)
 8003272:	2200      	movs	r2, #0
 8003274:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003276:	4b16      	ldr	r3, [pc, #88]	; (80032d0 <MX_UART4_Init+0x90>)
 8003278:	2200      	movs	r2, #0
 800327a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800327c:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <MX_UART4_Init+0x90>)
 800327e:	2200      	movs	r2, #0
 8003280:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003282:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <MX_UART4_Init+0x90>)
 8003284:	2200      	movs	r2, #0
 8003286:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003288:	4811      	ldr	r0, [pc, #68]	; (80032d0 <MX_UART4_Init+0x90>)
 800328a:	f00b f877 	bl	800e37c <HAL_UART_Init>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003294:	f000 fa92 	bl	80037bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003298:	2100      	movs	r1, #0
 800329a:	480d      	ldr	r0, [pc, #52]	; (80032d0 <MX_UART4_Init+0x90>)
 800329c:	f00d f943 	bl	8010526 <HAL_UARTEx_SetTxFifoThreshold>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80032a6:	f000 fa89 	bl	80037bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032aa:	2100      	movs	r1, #0
 80032ac:	4808      	ldr	r0, [pc, #32]	; (80032d0 <MX_UART4_Init+0x90>)
 80032ae:	f00d f978 	bl	80105a2 <HAL_UARTEx_SetRxFifoThreshold>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80032b8:	f000 fa80 	bl	80037bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80032bc:	4804      	ldr	r0, [pc, #16]	; (80032d0 <MX_UART4_Init+0x90>)
 80032be:	f00d f8f9 	bl	80104b4 <HAL_UARTEx_DisableFifoMode>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80032c8:	f000 fa78 	bl	80037bc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80032cc:	bf00      	nop
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	24000648 	.word	0x24000648
 80032d4:	40004c00 	.word	0x40004c00

080032d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80032dc:	4b22      	ldr	r3, [pc, #136]	; (8003368 <MX_USART1_UART_Init+0x90>)
 80032de:	4a23      	ldr	r2, [pc, #140]	; (800336c <MX_USART1_UART_Init+0x94>)
 80032e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80032e2:	4b21      	ldr	r3, [pc, #132]	; (8003368 <MX_USART1_UART_Init+0x90>)
 80032e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80032e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80032ea:	4b1f      	ldr	r3, [pc, #124]	; (8003368 <MX_USART1_UART_Init+0x90>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80032f0:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <MX_USART1_UART_Init+0x90>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80032f6:	4b1c      	ldr	r3, [pc, #112]	; (8003368 <MX_USART1_UART_Init+0x90>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80032fc:	4b1a      	ldr	r3, [pc, #104]	; (8003368 <MX_USART1_UART_Init+0x90>)
 80032fe:	220c      	movs	r2, #12
 8003300:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003302:	4b19      	ldr	r3, [pc, #100]	; (8003368 <MX_USART1_UART_Init+0x90>)
 8003304:	2200      	movs	r2, #0
 8003306:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003308:	4b17      	ldr	r3, [pc, #92]	; (8003368 <MX_USART1_UART_Init+0x90>)
 800330a:	2200      	movs	r2, #0
 800330c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800330e:	4b16      	ldr	r3, [pc, #88]	; (8003368 <MX_USART1_UART_Init+0x90>)
 8003310:	2200      	movs	r2, #0
 8003312:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003314:	4b14      	ldr	r3, [pc, #80]	; (8003368 <MX_USART1_UART_Init+0x90>)
 8003316:	2200      	movs	r2, #0
 8003318:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800331a:	4b13      	ldr	r3, [pc, #76]	; (8003368 <MX_USART1_UART_Init+0x90>)
 800331c:	2200      	movs	r2, #0
 800331e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003320:	4811      	ldr	r0, [pc, #68]	; (8003368 <MX_USART1_UART_Init+0x90>)
 8003322:	f00b f82b 	bl	800e37c <HAL_UART_Init>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800332c:	f000 fa46 	bl	80037bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003330:	2100      	movs	r1, #0
 8003332:	480d      	ldr	r0, [pc, #52]	; (8003368 <MX_USART1_UART_Init+0x90>)
 8003334:	f00d f8f7 	bl	8010526 <HAL_UARTEx_SetTxFifoThreshold>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800333e:	f000 fa3d 	bl	80037bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003342:	2100      	movs	r1, #0
 8003344:	4808      	ldr	r0, [pc, #32]	; (8003368 <MX_USART1_UART_Init+0x90>)
 8003346:	f00d f92c 	bl	80105a2 <HAL_UARTEx_SetRxFifoThreshold>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003350:	f000 fa34 	bl	80037bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003354:	4804      	ldr	r0, [pc, #16]	; (8003368 <MX_USART1_UART_Init+0x90>)
 8003356:	f00d f8ad 	bl	80104b4 <HAL_UARTEx_DisableFifoMode>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003360:	f000 fa2c 	bl	80037bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003364:	bf00      	nop
 8003366:	bd80      	pop	{r7, pc}
 8003368:	24000540 	.word	0x24000540
 800336c:	40011000 	.word	0x40011000

08003370 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003374:	4b22      	ldr	r3, [pc, #136]	; (8003400 <MX_USART2_UART_Init+0x90>)
 8003376:	4a23      	ldr	r2, [pc, #140]	; (8003404 <MX_USART2_UART_Init+0x94>)
 8003378:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800337a:	4b21      	ldr	r3, [pc, #132]	; (8003400 <MX_USART2_UART_Init+0x90>)
 800337c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003380:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003382:	4b1f      	ldr	r3, [pc, #124]	; (8003400 <MX_USART2_UART_Init+0x90>)
 8003384:	2200      	movs	r2, #0
 8003386:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003388:	4b1d      	ldr	r3, [pc, #116]	; (8003400 <MX_USART2_UART_Init+0x90>)
 800338a:	2200      	movs	r2, #0
 800338c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800338e:	4b1c      	ldr	r3, [pc, #112]	; (8003400 <MX_USART2_UART_Init+0x90>)
 8003390:	2200      	movs	r2, #0
 8003392:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003394:	4b1a      	ldr	r3, [pc, #104]	; (8003400 <MX_USART2_UART_Init+0x90>)
 8003396:	220c      	movs	r2, #12
 8003398:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800339a:	4b19      	ldr	r3, [pc, #100]	; (8003400 <MX_USART2_UART_Init+0x90>)
 800339c:	2200      	movs	r2, #0
 800339e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033a0:	4b17      	ldr	r3, [pc, #92]	; (8003400 <MX_USART2_UART_Init+0x90>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033a6:	4b16      	ldr	r3, [pc, #88]	; (8003400 <MX_USART2_UART_Init+0x90>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80033ac:	4b14      	ldr	r3, [pc, #80]	; (8003400 <MX_USART2_UART_Init+0x90>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033b2:	4b13      	ldr	r3, [pc, #76]	; (8003400 <MX_USART2_UART_Init+0x90>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80033b8:	4811      	ldr	r0, [pc, #68]	; (8003400 <MX_USART2_UART_Init+0x90>)
 80033ba:	f00a ffdf 	bl	800e37c <HAL_UART_Init>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80033c4:	f000 f9fa 	bl	80037bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033c8:	2100      	movs	r1, #0
 80033ca:	480d      	ldr	r0, [pc, #52]	; (8003400 <MX_USART2_UART_Init+0x90>)
 80033cc:	f00d f8ab 	bl	8010526 <HAL_UARTEx_SetTxFifoThreshold>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80033d6:	f000 f9f1 	bl	80037bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033da:	2100      	movs	r1, #0
 80033dc:	4808      	ldr	r0, [pc, #32]	; (8003400 <MX_USART2_UART_Init+0x90>)
 80033de:	f00d f8e0 	bl	80105a2 <HAL_UARTEx_SetRxFifoThreshold>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80033e8:	f000 f9e8 	bl	80037bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80033ec:	4804      	ldr	r0, [pc, #16]	; (8003400 <MX_USART2_UART_Init+0x90>)
 80033ee:	f00d f861 	bl	80104b4 <HAL_UARTEx_DisableFifoMode>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80033f8:	f000 f9e0 	bl	80037bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80033fc:	bf00      	nop
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	24000760 	.word	0x24000760
 8003404:	40004400 	.word	0x40004400

08003408 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800340c:	4b22      	ldr	r3, [pc, #136]	; (8003498 <MX_USART3_UART_Init+0x90>)
 800340e:	4a23      	ldr	r2, [pc, #140]	; (800349c <MX_USART3_UART_Init+0x94>)
 8003410:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003412:	4b21      	ldr	r3, [pc, #132]	; (8003498 <MX_USART3_UART_Init+0x90>)
 8003414:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003418:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800341a:	4b1f      	ldr	r3, [pc, #124]	; (8003498 <MX_USART3_UART_Init+0x90>)
 800341c:	2200      	movs	r2, #0
 800341e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003420:	4b1d      	ldr	r3, [pc, #116]	; (8003498 <MX_USART3_UART_Init+0x90>)
 8003422:	2200      	movs	r2, #0
 8003424:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003426:	4b1c      	ldr	r3, [pc, #112]	; (8003498 <MX_USART3_UART_Init+0x90>)
 8003428:	2200      	movs	r2, #0
 800342a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800342c:	4b1a      	ldr	r3, [pc, #104]	; (8003498 <MX_USART3_UART_Init+0x90>)
 800342e:	220c      	movs	r2, #12
 8003430:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003432:	4b19      	ldr	r3, [pc, #100]	; (8003498 <MX_USART3_UART_Init+0x90>)
 8003434:	2200      	movs	r2, #0
 8003436:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003438:	4b17      	ldr	r3, [pc, #92]	; (8003498 <MX_USART3_UART_Init+0x90>)
 800343a:	2200      	movs	r2, #0
 800343c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800343e:	4b16      	ldr	r3, [pc, #88]	; (8003498 <MX_USART3_UART_Init+0x90>)
 8003440:	2200      	movs	r2, #0
 8003442:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003444:	4b14      	ldr	r3, [pc, #80]	; (8003498 <MX_USART3_UART_Init+0x90>)
 8003446:	2200      	movs	r2, #0
 8003448:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800344a:	4b13      	ldr	r3, [pc, #76]	; (8003498 <MX_USART3_UART_Init+0x90>)
 800344c:	2200      	movs	r2, #0
 800344e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003450:	4811      	ldr	r0, [pc, #68]	; (8003498 <MX_USART3_UART_Init+0x90>)
 8003452:	f00a ff93 	bl	800e37c <HAL_UART_Init>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800345c:	f000 f9ae 	bl	80037bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003460:	2100      	movs	r1, #0
 8003462:	480d      	ldr	r0, [pc, #52]	; (8003498 <MX_USART3_UART_Init+0x90>)
 8003464:	f00d f85f 	bl	8010526 <HAL_UARTEx_SetTxFifoThreshold>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800346e:	f000 f9a5 	bl	80037bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003472:	2100      	movs	r1, #0
 8003474:	4808      	ldr	r0, [pc, #32]	; (8003498 <MX_USART3_UART_Init+0x90>)
 8003476:	f00d f894 	bl	80105a2 <HAL_UARTEx_SetRxFifoThreshold>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003480:	f000 f99c 	bl	80037bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003484:	4804      	ldr	r0, [pc, #16]	; (8003498 <MX_USART3_UART_Init+0x90>)
 8003486:	f00d f815 	bl	80104b4 <HAL_UARTEx_DisableFifoMode>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003490:	f000 f994 	bl	80037bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003494:	bf00      	nop
 8003496:	bd80      	pop	{r7, pc}
 8003498:	240003ec 	.word	0x240003ec
 800349c:	40004800 	.word	0x40004800

080034a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034a6:	4b19      	ldr	r3, [pc, #100]	; (800350c <MX_DMA_Init+0x6c>)
 80034a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80034ac:	4a17      	ldr	r2, [pc, #92]	; (800350c <MX_DMA_Init+0x6c>)
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80034b6:	4b15      	ldr	r3, [pc, #84]	; (800350c <MX_DMA_Init+0x6c>)
 80034b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	607b      	str	r3, [r7, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80034c4:	2200      	movs	r2, #0
 80034c6:	2100      	movs	r1, #0
 80034c8:	200b      	movs	r0, #11
 80034ca:	f001 fd54 	bl	8004f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80034ce:	200b      	movs	r0, #11
 80034d0:	f001 fd6b 	bl	8004faa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80034d4:	2200      	movs	r2, #0
 80034d6:	2100      	movs	r1, #0
 80034d8:	200c      	movs	r0, #12
 80034da:	f001 fd4c 	bl	8004f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80034de:	200c      	movs	r0, #12
 80034e0:	f001 fd63 	bl	8004faa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80034e4:	2200      	movs	r2, #0
 80034e6:	2100      	movs	r1, #0
 80034e8:	200d      	movs	r0, #13
 80034ea:	f001 fd44 	bl	8004f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80034ee:	200d      	movs	r0, #13
 80034f0:	f001 fd5b 	bl	8004faa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80034f4:	2200      	movs	r2, #0
 80034f6:	2100      	movs	r1, #0
 80034f8:	200e      	movs	r0, #14
 80034fa:	f001 fd3c 	bl	8004f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80034fe:	200e      	movs	r0, #14
 8003500:	f001 fd53 	bl	8004faa <HAL_NVIC_EnableIRQ>

}
 8003504:	bf00      	nop
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	58024400 	.word	0x58024400

08003510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003516:	f107 030c 	add.w	r3, r7, #12
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	605a      	str	r2, [r3, #4]
 8003520:	609a      	str	r2, [r3, #8]
 8003522:	60da      	str	r2, [r3, #12]
 8003524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003526:	4b2b      	ldr	r3, [pc, #172]	; (80035d4 <MX_GPIO_Init+0xc4>)
 8003528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800352c:	4a29      	ldr	r2, [pc, #164]	; (80035d4 <MX_GPIO_Init+0xc4>)
 800352e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003532:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003536:	4b27      	ldr	r3, [pc, #156]	; (80035d4 <MX_GPIO_Init+0xc4>)
 8003538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800353c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003540:	60bb      	str	r3, [r7, #8]
 8003542:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003544:	4b23      	ldr	r3, [pc, #140]	; (80035d4 <MX_GPIO_Init+0xc4>)
 8003546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800354a:	4a22      	ldr	r2, [pc, #136]	; (80035d4 <MX_GPIO_Init+0xc4>)
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003554:	4b1f      	ldr	r3, [pc, #124]	; (80035d4 <MX_GPIO_Init+0xc4>)
 8003556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	607b      	str	r3, [r7, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003562:	4b1c      	ldr	r3, [pc, #112]	; (80035d4 <MX_GPIO_Init+0xc4>)
 8003564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003568:	4a1a      	ldr	r2, [pc, #104]	; (80035d4 <MX_GPIO_Init+0xc4>)
 800356a:	f043 0302 	orr.w	r3, r3, #2
 800356e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003572:	4b18      	ldr	r3, [pc, #96]	; (80035d4 <MX_GPIO_Init+0xc4>)
 8003574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	603b      	str	r3, [r7, #0]
 800357e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003580:	2200      	movs	r2, #0
 8003582:	2102      	movs	r1, #2
 8003584:	4814      	ldr	r0, [pc, #80]	; (80035d8 <MX_GPIO_Init+0xc8>)
 8003586:	f004 fd2f 	bl	8007fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800358a:	2200      	movs	r2, #0
 800358c:	2140      	movs	r1, #64	; 0x40
 800358e:	4813      	ldr	r0, [pc, #76]	; (80035dc <MX_GPIO_Init+0xcc>)
 8003590:	f004 fd2a 	bl	8007fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003594:	2302      	movs	r3, #2
 8003596:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003598:	2301      	movs	r3, #1
 800359a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359c:	2300      	movs	r3, #0
 800359e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80035a4:	f107 030c 	add.w	r3, r7, #12
 80035a8:	4619      	mov	r1, r3
 80035aa:	480b      	ldr	r0, [pc, #44]	; (80035d8 <MX_GPIO_Init+0xc8>)
 80035ac:	f004 fb6c 	bl	8007c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80035b0:	2340      	movs	r3, #64	; 0x40
 80035b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035b4:	2301      	movs	r3, #1
 80035b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035bc:	2300      	movs	r3, #0
 80035be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c0:	f107 030c 	add.w	r3, r7, #12
 80035c4:	4619      	mov	r1, r3
 80035c6:	4805      	ldr	r0, [pc, #20]	; (80035dc <MX_GPIO_Init+0xcc>)
 80035c8:	f004 fb5e 	bl	8007c88 <HAL_GPIO_Init>

}
 80035cc:	bf00      	nop
 80035ce:	3720      	adds	r7, #32
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	58024400 	.word	0x58024400
 80035d8:	58020000 	.word	0x58020000
 80035dc:	58020400 	.word	0x58020400

080035e0 <Compass_Calibration>:

/* USER CODE BEGIN 4 */
void Compass_Calibration(uint8_t mag_calibration_enable)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	71fb      	strb	r3, [r7, #7]
	if(mag_calibration_enable == 1)
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	f040 80d6 	bne.w	800379e <Compass_Calibration+0x1be>
	{
		for(int i =0;i<5;i++)
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	e00b      	b.n	8003610 <Compass_Calibration+0x30>
		{
			MPU9250_Read_All(&hi2c1);
 80035f8:	486b      	ldr	r0, [pc, #428]	; (80037a8 <Compass_Calibration+0x1c8>)
 80035fa:	f7fd fb2f 	bl	8000c5c <MPU9250_Read_All>
			HAL_Delay(1);
 80035fe:	2001      	movs	r0, #1
 8003600:	f001 fbae 	bl	8004d60 <HAL_Delay>
			MPU9250_Parsing_NoOffset(&MPU9250);
 8003604:	4869      	ldr	r0, [pc, #420]	; (80037ac <Compass_Calibration+0x1cc>)
 8003606:	f7fd fcf7 	bl	8000ff8 <MPU9250_Parsing_NoOffset>
		for(int i =0;i<5;i++)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	3301      	adds	r3, #1
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b04      	cmp	r3, #4
 8003614:	ddf0      	ble.n	80035f8 <Compass_Calibration+0x18>
		}
		MPU9250.Mx_Max = MPU9250.Mx;
 8003616:	4b65      	ldr	r3, [pc, #404]	; (80037ac <Compass_Calibration+0x1cc>)
 8003618:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800361a:	4a64      	ldr	r2, [pc, #400]	; (80037ac <Compass_Calibration+0x1cc>)
 800361c:	6513      	str	r3, [r2, #80]	; 0x50
		MPU9250.Mx_Min = MPU9250.Mx;
 800361e:	4b63      	ldr	r3, [pc, #396]	; (80037ac <Compass_Calibration+0x1cc>)
 8003620:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003622:	4a62      	ldr	r2, [pc, #392]	; (80037ac <Compass_Calibration+0x1cc>)
 8003624:	6453      	str	r3, [r2, #68]	; 0x44
		MPU9250.My_Max = MPU9250.My;
 8003626:	4b61      	ldr	r3, [pc, #388]	; (80037ac <Compass_Calibration+0x1cc>)
 8003628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800362a:	4a60      	ldr	r2, [pc, #384]	; (80037ac <Compass_Calibration+0x1cc>)
 800362c:	6553      	str	r3, [r2, #84]	; 0x54
		MPU9250.My_Min = MPU9250.My;
 800362e:	4b5f      	ldr	r3, [pc, #380]	; (80037ac <Compass_Calibration+0x1cc>)
 8003630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003632:	4a5e      	ldr	r2, [pc, #376]	; (80037ac <Compass_Calibration+0x1cc>)
 8003634:	6493      	str	r3, [r2, #72]	; 0x48
		MPU9250.Mz_Max = MPU9250.Mz;
 8003636:	4b5d      	ldr	r3, [pc, #372]	; (80037ac <Compass_Calibration+0x1cc>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	4a5c      	ldr	r2, [pc, #368]	; (80037ac <Compass_Calibration+0x1cc>)
 800363c:	6593      	str	r3, [r2, #88]	; 0x58
		MPU9250.Mz_Min = MPU9250.Mz;
 800363e:	4b5b      	ldr	r3, [pc, #364]	; (80037ac <Compass_Calibration+0x1cc>)
 8003640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003642:	4a5a      	ldr	r2, [pc, #360]	; (80037ac <Compass_Calibration+0x1cc>)
 8003644:	64d3      	str	r3, [r2, #76]	; 0x4c

		while(mag_calibration_enable != 0)
 8003646:	e065      	b.n	8003714 <Compass_Calibration+0x134>
		{
			Receive_Command();
 8003648:	f000 fd12 	bl	8004070 <Receive_Command>
			MPU9250_Read_All(&hi2c1);
 800364c:	4856      	ldr	r0, [pc, #344]	; (80037a8 <Compass_Calibration+0x1c8>)
 800364e:	f7fd fb05 	bl	8000c5c <MPU9250_Read_All>
			HAL_Delay(1);
 8003652:	2001      	movs	r0, #1
 8003654:	f001 fb84 	bl	8004d60 <HAL_Delay>
			MPU9250_Parsing_NoOffset(&MPU9250);
 8003658:	4854      	ldr	r0, [pc, #336]	; (80037ac <Compass_Calibration+0x1cc>)
 800365a:	f7fd fccd 	bl	8000ff8 <MPU9250_Parsing_NoOffset>
			if(MPU9250.Mx > MPU9250.Mx_Max) MPU9250.Mx_Max = MPU9250.Mx;
 800365e:	4b53      	ldr	r3, [pc, #332]	; (80037ac <Compass_Calibration+0x1cc>)
 8003660:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8003664:	4b51      	ldr	r3, [pc, #324]	; (80037ac <Compass_Calibration+0x1cc>)
 8003666:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800366a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800366e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003672:	dd03      	ble.n	800367c <Compass_Calibration+0x9c>
 8003674:	4b4d      	ldr	r3, [pc, #308]	; (80037ac <Compass_Calibration+0x1cc>)
 8003676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003678:	4a4c      	ldr	r2, [pc, #304]	; (80037ac <Compass_Calibration+0x1cc>)
 800367a:	6513      	str	r3, [r2, #80]	; 0x50
			if(MPU9250.Mx < MPU9250.Mx_Min) MPU9250.Mx_Min = MPU9250.Mx;
 800367c:	4b4b      	ldr	r3, [pc, #300]	; (80037ac <Compass_Calibration+0x1cc>)
 800367e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8003682:	4b4a      	ldr	r3, [pc, #296]	; (80037ac <Compass_Calibration+0x1cc>)
 8003684:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003688:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800368c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003690:	d503      	bpl.n	800369a <Compass_Calibration+0xba>
 8003692:	4b46      	ldr	r3, [pc, #280]	; (80037ac <Compass_Calibration+0x1cc>)
 8003694:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003696:	4a45      	ldr	r2, [pc, #276]	; (80037ac <Compass_Calibration+0x1cc>)
 8003698:	6453      	str	r3, [r2, #68]	; 0x44

			if(MPU9250.My > MPU9250.My_Max) MPU9250.My_Max = MPU9250.My;
 800369a:	4b44      	ldr	r3, [pc, #272]	; (80037ac <Compass_Calibration+0x1cc>)
 800369c:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 80036a0:	4b42      	ldr	r3, [pc, #264]	; (80037ac <Compass_Calibration+0x1cc>)
 80036a2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80036a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ae:	dd03      	ble.n	80036b8 <Compass_Calibration+0xd8>
 80036b0:	4b3e      	ldr	r3, [pc, #248]	; (80037ac <Compass_Calibration+0x1cc>)
 80036b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036b4:	4a3d      	ldr	r2, [pc, #244]	; (80037ac <Compass_Calibration+0x1cc>)
 80036b6:	6553      	str	r3, [r2, #84]	; 0x54
			if(MPU9250.My < MPU9250.My_Min) MPU9250.My_Min = MPU9250.My;
 80036b8:	4b3c      	ldr	r3, [pc, #240]	; (80037ac <Compass_Calibration+0x1cc>)
 80036ba:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 80036be:	4b3b      	ldr	r3, [pc, #236]	; (80037ac <Compass_Calibration+0x1cc>)
 80036c0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80036c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036cc:	d503      	bpl.n	80036d6 <Compass_Calibration+0xf6>
 80036ce:	4b37      	ldr	r3, [pc, #220]	; (80037ac <Compass_Calibration+0x1cc>)
 80036d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d2:	4a36      	ldr	r2, [pc, #216]	; (80037ac <Compass_Calibration+0x1cc>)
 80036d4:	6493      	str	r3, [r2, #72]	; 0x48

			if(MPU9250.Mz > MPU9250.Mz_Max) MPU9250.Mz_Max = MPU9250.Mz;
 80036d6:	4b35      	ldr	r3, [pc, #212]	; (80037ac <Compass_Calibration+0x1cc>)
 80036d8:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80036dc:	4b33      	ldr	r3, [pc, #204]	; (80037ac <Compass_Calibration+0x1cc>)
 80036de:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80036e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ea:	dd03      	ble.n	80036f4 <Compass_Calibration+0x114>
 80036ec:	4b2f      	ldr	r3, [pc, #188]	; (80037ac <Compass_Calibration+0x1cc>)
 80036ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f0:	4a2e      	ldr	r2, [pc, #184]	; (80037ac <Compass_Calibration+0x1cc>)
 80036f2:	6593      	str	r3, [r2, #88]	; 0x58
			if(MPU9250.Mz < MPU9250.Mz_Min) MPU9250.Mz_Min = MPU9250.Mz;
 80036f4:	4b2d      	ldr	r3, [pc, #180]	; (80037ac <Compass_Calibration+0x1cc>)
 80036f6:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80036fa:	4b2c      	ldr	r3, [pc, #176]	; (80037ac <Compass_Calibration+0x1cc>)
 80036fc:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003700:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003708:	d400      	bmi.n	800370c <Compass_Calibration+0x12c>
 800370a:	e003      	b.n	8003714 <Compass_Calibration+0x134>
 800370c:	4b27      	ldr	r3, [pc, #156]	; (80037ac <Compass_Calibration+0x1cc>)
 800370e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003710:	4a26      	ldr	r2, [pc, #152]	; (80037ac <Compass_Calibration+0x1cc>)
 8003712:	64d3      	str	r3, [r2, #76]	; 0x4c
		while(mag_calibration_enable != 0)
 8003714:	79fb      	ldrb	r3, [r7, #7]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d196      	bne.n	8003648 <Compass_Calibration+0x68>
		}
		MPU9250.Mx_Offset = (MPU9250.Mx_Max + MPU9250.Mx_Min) / 2;
 800371a:	4b24      	ldr	r3, [pc, #144]	; (80037ac <Compass_Calibration+0x1cc>)
 800371c:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8003720:	4b22      	ldr	r3, [pc, #136]	; (80037ac <Compass_Calibration+0x1cc>)
 8003722:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003726:	ee37 7a27 	vadd.f32	s14, s14, s15
 800372a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800372e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003732:	4b1e      	ldr	r3, [pc, #120]	; (80037ac <Compass_Calibration+0x1cc>)
 8003734:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		MPU9250.My_Offset = (MPU9250.My_Max + MPU9250.My_Min) / 2;
 8003738:	4b1c      	ldr	r3, [pc, #112]	; (80037ac <Compass_Calibration+0x1cc>)
 800373a:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800373e:	4b1b      	ldr	r3, [pc, #108]	; (80037ac <Compass_Calibration+0x1cc>)
 8003740:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003744:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003748:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800374c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003750:	4b16      	ldr	r3, [pc, #88]	; (80037ac <Compass_Calibration+0x1cc>)
 8003752:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		MPU9250.Mz_Offset = (MPU9250.Mz_Max + MPU9250.Mz_Min) / 2;
 8003756:	4b15      	ldr	r3, [pc, #84]	; (80037ac <Compass_Calibration+0x1cc>)
 8003758:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800375c:	4b13      	ldr	r3, [pc, #76]	; (80037ac <Compass_Calibration+0x1cc>)
 800375e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003762:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003766:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800376a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800376e:	4b0f      	ldr	r3, [pc, #60]	; (80037ac <Compass_Calibration+0x1cc>)
 8003770:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

		*(float*)&Mag_Calib[0] = MPU9250.Mx_Offset;
 8003774:	4a0e      	ldr	r2, [pc, #56]	; (80037b0 <Compass_Calibration+0x1d0>)
 8003776:	4b0d      	ldr	r3, [pc, #52]	; (80037ac <Compass_Calibration+0x1cc>)
 8003778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377a:	6013      	str	r3, [r2, #0]
		*(float*)&Mag_Calib[4] = MPU9250.My_Offset;
 800377c:	4a0d      	ldr	r2, [pc, #52]	; (80037b4 <Compass_Calibration+0x1d4>)
 800377e:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <Compass_Calibration+0x1cc>)
 8003780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003782:	6013      	str	r3, [r2, #0]
		*(float*)&Mag_Calib[8] = MPU9250.Mz_Offset;
 8003784:	4a0c      	ldr	r2, [pc, #48]	; (80037b8 <Compass_Calibration+0x1d8>)
 8003786:	4b09      	ldr	r3, [pc, #36]	; (80037ac <Compass_Calibration+0x1cc>)
 8003788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800378a:	6013      	str	r3, [r2, #0]

		W25qxx_EraseSector(0);
 800378c:	2000      	movs	r0, #0
 800378e:	f000 fff7 	bl	8004780 <W25qxx_EraseSector>
		W25qxx_WriteSector(Mag_Calib, 0, 0, 12);
 8003792:	230c      	movs	r3, #12
 8003794:	2200      	movs	r2, #0
 8003796:	2100      	movs	r1, #0
 8003798:	4805      	ldr	r0, [pc, #20]	; (80037b0 <Compass_Calibration+0x1d0>)
 800379a:	f001 f8e3 	bl	8004964 <W25qxx_WriteSector>
	}
}
 800379e:	bf00      	nop
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	2400047c 	.word	0x2400047c
 80037ac:	24000264 	.word	0x24000264
 80037b0:	240007f0 	.word	0x240007f0
 80037b4:	240007f4 	.word	0x240007f4
 80037b8:	240007f8 	.word	0x240007f8

080037bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037c0:	b672      	cpsid	i
}
 80037c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80037c4:	e7fe      	b.n	80037c4 <Error_Handler+0x8>
	...

080037c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ce:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <HAL_MspInit+0x30>)
 80037d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80037d4:	4a08      	ldr	r2, [pc, #32]	; (80037f8 <HAL_MspInit+0x30>)
 80037d6:	f043 0302 	orr.w	r3, r3, #2
 80037da:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80037de:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <HAL_MspInit+0x30>)
 80037e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	607b      	str	r3, [r7, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	58024400 	.word	0x58024400

080037fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b0b8      	sub	sp, #224	; 0xe0
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003804:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	605a      	str	r2, [r3, #4]
 800380e:	609a      	str	r2, [r3, #8]
 8003810:	60da      	str	r2, [r3, #12]
 8003812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003814:	f107 0310 	add.w	r3, r7, #16
 8003818:	22bc      	movs	r2, #188	; 0xbc
 800381a:	2100      	movs	r1, #0
 800381c:	4618      	mov	r0, r3
 800381e:	f00c ff77 	bl	8010710 <memset>
  if(hi2c->Instance==I2C1)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a3f      	ldr	r2, [pc, #252]	; (8003924 <HAL_I2C_MspInit+0x128>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d177      	bne.n	800391c <HAL_I2C_MspInit+0x120>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800382c:	2308      	movs	r3, #8
 800382e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003830:	2300      	movs	r3, #0
 8003832:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003836:	f107 0310 	add.w	r3, r7, #16
 800383a:	4618      	mov	r0, r3
 800383c:	f007 fe32 	bl	800b4a4 <HAL_RCCEx_PeriphCLKConfig>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003846:	f7ff ffb9 	bl	80037bc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800384a:	4b37      	ldr	r3, [pc, #220]	; (8003928 <HAL_I2C_MspInit+0x12c>)
 800384c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003850:	4a35      	ldr	r2, [pc, #212]	; (8003928 <HAL_I2C_MspInit+0x12c>)
 8003852:	f043 0302 	orr.w	r3, r3, #2
 8003856:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800385a:	4b33      	ldr	r3, [pc, #204]	; (8003928 <HAL_I2C_MspInit+0x12c>)
 800385c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003868:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800386c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003870:	2312      	movs	r3, #18
 8003872:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003876:	2300      	movs	r3, #0
 8003878:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800387c:	2300      	movs	r3, #0
 800387e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003882:	2304      	movs	r3, #4
 8003884:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003888:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800388c:	4619      	mov	r1, r3
 800388e:	4827      	ldr	r0, [pc, #156]	; (800392c <HAL_I2C_MspInit+0x130>)
 8003890:	f004 f9fa 	bl	8007c88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003894:	4b24      	ldr	r3, [pc, #144]	; (8003928 <HAL_I2C_MspInit+0x12c>)
 8003896:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800389a:	4a23      	ldr	r2, [pc, #140]	; (8003928 <HAL_I2C_MspInit+0x12c>)
 800389c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038a0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038a4:	4b20      	ldr	r3, [pc, #128]	; (8003928 <HAL_I2C_MspInit+0x12c>)
 80038a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ae:	60bb      	str	r3, [r7, #8]
 80038b0:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream1;
 80038b2:	4b1f      	ldr	r3, [pc, #124]	; (8003930 <HAL_I2C_MspInit+0x134>)
 80038b4:	4a1f      	ldr	r2, [pc, #124]	; (8003934 <HAL_I2C_MspInit+0x138>)
 80038b6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80038b8:	4b1d      	ldr	r3, [pc, #116]	; (8003930 <HAL_I2C_MspInit+0x134>)
 80038ba:	2221      	movs	r2, #33	; 0x21
 80038bc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038be:	4b1c      	ldr	r3, [pc, #112]	; (8003930 <HAL_I2C_MspInit+0x134>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038c4:	4b1a      	ldr	r3, [pc, #104]	; (8003930 <HAL_I2C_MspInit+0x134>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038ca:	4b19      	ldr	r3, [pc, #100]	; (8003930 <HAL_I2C_MspInit+0x134>)
 80038cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038d0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038d2:	4b17      	ldr	r3, [pc, #92]	; (8003930 <HAL_I2C_MspInit+0x134>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038d8:	4b15      	ldr	r3, [pc, #84]	; (8003930 <HAL_I2C_MspInit+0x134>)
 80038da:	2200      	movs	r2, #0
 80038dc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80038de:	4b14      	ldr	r3, [pc, #80]	; (8003930 <HAL_I2C_MspInit+0x134>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80038e4:	4b12      	ldr	r3, [pc, #72]	; (8003930 <HAL_I2C_MspInit+0x134>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038ea:	4b11      	ldr	r3, [pc, #68]	; (8003930 <HAL_I2C_MspInit+0x134>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80038f0:	480f      	ldr	r0, [pc, #60]	; (8003930 <HAL_I2C_MspInit+0x134>)
 80038f2:	f001 fb75 	bl	8004fe0 <HAL_DMA_Init>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <HAL_I2C_MspInit+0x104>
    {
      Error_Handler();
 80038fc:	f7ff ff5e 	bl	80037bc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a0b      	ldr	r2, [pc, #44]	; (8003930 <HAL_I2C_MspInit+0x134>)
 8003904:	63da      	str	r2, [r3, #60]	; 0x3c
 8003906:	4a0a      	ldr	r2, [pc, #40]	; (8003930 <HAL_I2C_MspInit+0x134>)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800390c:	2200      	movs	r2, #0
 800390e:	2100      	movs	r1, #0
 8003910:	201f      	movs	r0, #31
 8003912:	f001 fb30 	bl	8004f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003916:	201f      	movs	r0, #31
 8003918:	f001 fb47 	bl	8004faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800391c:	bf00      	nop
 800391e:	37e0      	adds	r7, #224	; 0xe0
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40005400 	.word	0x40005400
 8003928:	58024400 	.word	0x58024400
 800392c:	58020400 	.word	0x58020400
 8003930:	240005d0 	.word	0x240005d0
 8003934:	40020028 	.word	0x40020028

08003938 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b0b8      	sub	sp, #224	; 0xe0
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003940:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	605a      	str	r2, [r3, #4]
 800394a:	609a      	str	r2, [r3, #8]
 800394c:	60da      	str	r2, [r3, #12]
 800394e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003950:	f107 0310 	add.w	r3, r7, #16
 8003954:	22bc      	movs	r2, #188	; 0xbc
 8003956:	2100      	movs	r1, #0
 8003958:	4618      	mov	r0, r3
 800395a:	f00c fed9 	bl	8010710 <memset>
  if(hspi->Instance==SPI1)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a25      	ldr	r2, [pc, #148]	; (80039f8 <HAL_SPI_MspInit+0xc0>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d142      	bne.n	80039ee <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800396c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 800396e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003972:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003974:	f107 0310 	add.w	r3, r7, #16
 8003978:	4618      	mov	r0, r3
 800397a:	f007 fd93 	bl	800b4a4 <HAL_RCCEx_PeriphCLKConfig>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8003984:	f7ff ff1a 	bl	80037bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003988:	4b1c      	ldr	r3, [pc, #112]	; (80039fc <HAL_SPI_MspInit+0xc4>)
 800398a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800398e:	4a1b      	ldr	r2, [pc, #108]	; (80039fc <HAL_SPI_MspInit+0xc4>)
 8003990:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003994:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003998:	4b18      	ldr	r3, [pc, #96]	; (80039fc <HAL_SPI_MspInit+0xc4>)
 800399a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800399e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a6:	4b15      	ldr	r3, [pc, #84]	; (80039fc <HAL_SPI_MspInit+0xc4>)
 80039a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039ac:	4a13      	ldr	r2, [pc, #76]	; (80039fc <HAL_SPI_MspInit+0xc4>)
 80039ae:	f043 0301 	orr.w	r3, r3, #1
 80039b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039b6:	4b11      	ldr	r3, [pc, #68]	; (80039fc <HAL_SPI_MspInit+0xc4>)
 80039b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80039c4:	23e0      	movs	r3, #224	; 0xe0
 80039c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ca:	2302      	movs	r3, #2
 80039cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d6:	2300      	movs	r3, #0
 80039d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80039dc:	2305      	movs	r3, #5
 80039de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80039e6:	4619      	mov	r1, r3
 80039e8:	4805      	ldr	r0, [pc, #20]	; (8003a00 <HAL_SPI_MspInit+0xc8>)
 80039ea:	f004 f94d 	bl	8007c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80039ee:	bf00      	nop
 80039f0:	37e0      	adds	r7, #224	; 0xe0
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40013000 	.word	0x40013000
 80039fc:	58024400 	.word	0x58024400
 8003a00:	58020000 	.word	0x58020000

08003a04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a0e      	ldr	r2, [pc, #56]	; (8003a4c <HAL_TIM_Base_MspInit+0x48>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d116      	bne.n	8003a44 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003a16:	4b0e      	ldr	r3, [pc, #56]	; (8003a50 <HAL_TIM_Base_MspInit+0x4c>)
 8003a18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a1c:	4a0c      	ldr	r2, [pc, #48]	; (8003a50 <HAL_TIM_Base_MspInit+0x4c>)
 8003a1e:	f043 0320 	orr.w	r3, r3, #32
 8003a22:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a26:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <HAL_TIM_Base_MspInit+0x4c>)
 8003a28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a2c:	f003 0320 	and.w	r3, r3, #32
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003a34:	2200      	movs	r2, #0
 8003a36:	2100      	movs	r1, #0
 8003a38:	2037      	movs	r0, #55	; 0x37
 8003a3a:	f001 fa9c 	bl	8004f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003a3e:	2037      	movs	r0, #55	; 0x37
 8003a40:	f001 fab3 	bl	8004faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003a44:	bf00      	nop
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40001400 	.word	0x40001400
 8003a50:	58024400 	.word	0x58024400

08003a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b0be      	sub	sp, #248	; 0xf8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a5c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	605a      	str	r2, [r3, #4]
 8003a66:	609a      	str	r2, [r3, #8]
 8003a68:	60da      	str	r2, [r3, #12]
 8003a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a70:	22bc      	movs	r2, #188	; 0xbc
 8003a72:	2100      	movs	r1, #0
 8003a74:	4618      	mov	r0, r3
 8003a76:	f00c fe4b 	bl	8010710 <memset>
  if(huart->Instance==UART4)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4aac      	ldr	r2, [pc, #688]	; (8003d30 <HAL_UART_MspInit+0x2dc>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d158      	bne.n	8003b36 <HAL_UART_MspInit+0xe2>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003a84:	2302      	movs	r3, #2
 8003a86:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a92:	4618      	mov	r0, r3
 8003a94:	f007 fd06 	bl	800b4a4 <HAL_RCCEx_PeriphCLKConfig>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003a9e:	f7ff fe8d 	bl	80037bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003aa2:	4ba4      	ldr	r3, [pc, #656]	; (8003d34 <HAL_UART_MspInit+0x2e0>)
 8003aa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003aa8:	4aa2      	ldr	r2, [pc, #648]	; (8003d34 <HAL_UART_MspInit+0x2e0>)
 8003aaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003aae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ab2:	4ba0      	ldr	r3, [pc, #640]	; (8003d34 <HAL_UART_MspInit+0x2e0>)
 8003ab4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ab8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac0:	4b9c      	ldr	r3, [pc, #624]	; (8003d34 <HAL_UART_MspInit+0x2e0>)
 8003ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ac6:	4a9b      	ldr	r2, [pc, #620]	; (8003d34 <HAL_UART_MspInit+0x2e0>)
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ad0:	4b98      	ldr	r3, [pc, #608]	; (8003d34 <HAL_UART_MspInit+0x2e0>)
 8003ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	623b      	str	r3, [r7, #32]
 8003adc:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af0:	2300      	movs	r3, #0
 8003af2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003af6:	2308      	movs	r3, #8
 8003af8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003afc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003b00:	4619      	mov	r1, r3
 8003b02:	488d      	ldr	r0, [pc, #564]	; (8003d38 <HAL_UART_MspInit+0x2e4>)
 8003b04:	f004 f8c0 	bl	8007c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003b08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b10:	2302      	movs	r3, #2
 8003b12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b16:	2300      	movs	r3, #0
 8003b18:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 8003b22:	2306      	movs	r3, #6
 8003b24:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b28:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4882      	ldr	r0, [pc, #520]	; (8003d38 <HAL_UART_MspInit+0x2e4>)
 8003b30:	f004 f8aa 	bl	8007c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003b34:	e18d      	b.n	8003e52 <HAL_UART_MspInit+0x3fe>
  else if(huart->Instance==USART1)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a80      	ldr	r2, [pc, #512]	; (8003d3c <HAL_UART_MspInit+0x2e8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d178      	bne.n	8003c32 <HAL_UART_MspInit+0x1de>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003b40:	2301      	movs	r3, #1
 8003b42:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003b44:	2300      	movs	r3, #0
 8003b46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f007 fca8 	bl	800b4a4 <HAL_RCCEx_PeriphCLKConfig>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <HAL_UART_MspInit+0x10a>
      Error_Handler();
 8003b5a:	f7ff fe2f 	bl	80037bc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b5e:	4b75      	ldr	r3, [pc, #468]	; (8003d34 <HAL_UART_MspInit+0x2e0>)
 8003b60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b64:	4a73      	ldr	r2, [pc, #460]	; (8003d34 <HAL_UART_MspInit+0x2e0>)
 8003b66:	f043 0310 	orr.w	r3, r3, #16
 8003b6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003b6e:	4b71      	ldr	r3, [pc, #452]	; (8003d34 <HAL_UART_MspInit+0x2e0>)
 8003b70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b74:	f003 0310 	and.w	r3, r3, #16
 8003b78:	61fb      	str	r3, [r7, #28]
 8003b7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b7c:	4b6d      	ldr	r3, [pc, #436]	; (8003d34 <HAL_UART_MspInit+0x2e0>)
 8003b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b82:	4a6c      	ldr	r2, [pc, #432]	; (8003d34 <HAL_UART_MspInit+0x2e0>)
 8003b84:	f043 0302 	orr.w	r3, r3, #2
 8003b88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b8c:	4b69      	ldr	r3, [pc, #420]	; (8003d34 <HAL_UART_MspInit+0x2e0>)
 8003b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	61bb      	str	r3, [r7, #24]
 8003b98:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003b9a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003bb4:	2304      	movs	r3, #4
 8003bb6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	485f      	ldr	r0, [pc, #380]	; (8003d40 <HAL_UART_MspInit+0x2ec>)
 8003bc2:	f004 f861 	bl	8007c88 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Stream0;
 8003bc6:	4b5f      	ldr	r3, [pc, #380]	; (8003d44 <HAL_UART_MspInit+0x2f0>)
 8003bc8:	4a5f      	ldr	r2, [pc, #380]	; (8003d48 <HAL_UART_MspInit+0x2f4>)
 8003bca:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003bcc:	4b5d      	ldr	r3, [pc, #372]	; (8003d44 <HAL_UART_MspInit+0x2f0>)
 8003bce:	222a      	movs	r2, #42	; 0x2a
 8003bd0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003bd2:	4b5c      	ldr	r3, [pc, #368]	; (8003d44 <HAL_UART_MspInit+0x2f0>)
 8003bd4:	2240      	movs	r2, #64	; 0x40
 8003bd6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bd8:	4b5a      	ldr	r3, [pc, #360]	; (8003d44 <HAL_UART_MspInit+0x2f0>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003bde:	4b59      	ldr	r3, [pc, #356]	; (8003d44 <HAL_UART_MspInit+0x2f0>)
 8003be0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003be4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003be6:	4b57      	ldr	r3, [pc, #348]	; (8003d44 <HAL_UART_MspInit+0x2f0>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bec:	4b55      	ldr	r3, [pc, #340]	; (8003d44 <HAL_UART_MspInit+0x2f0>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003bf2:	4b54      	ldr	r3, [pc, #336]	; (8003d44 <HAL_UART_MspInit+0x2f0>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003bf8:	4b52      	ldr	r3, [pc, #328]	; (8003d44 <HAL_UART_MspInit+0x2f0>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bfe:	4b51      	ldr	r3, [pc, #324]	; (8003d44 <HAL_UART_MspInit+0x2f0>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003c04:	484f      	ldr	r0, [pc, #316]	; (8003d44 <HAL_UART_MspInit+0x2f0>)
 8003c06:	f001 f9eb 	bl	8004fe0 <HAL_DMA_Init>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 8003c10:	f7ff fdd4 	bl	80037bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a4b      	ldr	r2, [pc, #300]	; (8003d44 <HAL_UART_MspInit+0x2f0>)
 8003c18:	679a      	str	r2, [r3, #120]	; 0x78
 8003c1a:	4a4a      	ldr	r2, [pc, #296]	; (8003d44 <HAL_UART_MspInit+0x2f0>)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003c20:	2200      	movs	r2, #0
 8003c22:	2100      	movs	r1, #0
 8003c24:	2025      	movs	r0, #37	; 0x25
 8003c26:	f001 f9a6 	bl	8004f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c2a:	2025      	movs	r0, #37	; 0x25
 8003c2c:	f001 f9bd 	bl	8004faa <HAL_NVIC_EnableIRQ>
}
 8003c30:	e10f      	b.n	8003e52 <HAL_UART_MspInit+0x3fe>
  else if(huart->Instance==USART2)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a45      	ldr	r2, [pc, #276]	; (8003d4c <HAL_UART_MspInit+0x2f8>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	f040 808d 	bne.w	8003d58 <HAL_UART_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003c3e:	2302      	movs	r3, #2
 8003c40:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003c42:	2300      	movs	r3, #0
 8003c44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f007 fc29 	bl	800b4a4 <HAL_RCCEx_PeriphCLKConfig>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <HAL_UART_MspInit+0x208>
      Error_Handler();
 8003c58:	f7ff fdb0 	bl	80037bc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c5c:	4b35      	ldr	r3, [pc, #212]	; (8003d34 <HAL_UART_MspInit+0x2e0>)
 8003c5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c62:	4a34      	ldr	r2, [pc, #208]	; (8003d34 <HAL_UART_MspInit+0x2e0>)
 8003c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c68:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c6c:	4b31      	ldr	r3, [pc, #196]	; (8003d34 <HAL_UART_MspInit+0x2e0>)
 8003c6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c7a:	4b2e      	ldr	r3, [pc, #184]	; (8003d34 <HAL_UART_MspInit+0x2e0>)
 8003c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c80:	4a2c      	ldr	r2, [pc, #176]	; (8003d34 <HAL_UART_MspInit+0x2e0>)
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c8a:	4b2a      	ldr	r3, [pc, #168]	; (8003d34 <HAL_UART_MspInit+0x2e0>)
 8003c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003c98:	230c      	movs	r3, #12
 8003c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003caa:	2300      	movs	r3, #0
 8003cac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003cb0:	2307      	movs	r3, #7
 8003cb2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cb6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003cba:	4619      	mov	r1, r3
 8003cbc:	481e      	ldr	r0, [pc, #120]	; (8003d38 <HAL_UART_MspInit+0x2e4>)
 8003cbe:	f003 ffe3 	bl	8007c88 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream2;
 8003cc2:	4b23      	ldr	r3, [pc, #140]	; (8003d50 <HAL_UART_MspInit+0x2fc>)
 8003cc4:	4a23      	ldr	r2, [pc, #140]	; (8003d54 <HAL_UART_MspInit+0x300>)
 8003cc6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003cc8:	4b21      	ldr	r3, [pc, #132]	; (8003d50 <HAL_UART_MspInit+0x2fc>)
 8003cca:	222b      	movs	r2, #43	; 0x2b
 8003ccc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cce:	4b20      	ldr	r3, [pc, #128]	; (8003d50 <HAL_UART_MspInit+0x2fc>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cd4:	4b1e      	ldr	r3, [pc, #120]	; (8003d50 <HAL_UART_MspInit+0x2fc>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003cda:	4b1d      	ldr	r3, [pc, #116]	; (8003d50 <HAL_UART_MspInit+0x2fc>)
 8003cdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ce0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ce2:	4b1b      	ldr	r3, [pc, #108]	; (8003d50 <HAL_UART_MspInit+0x2fc>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ce8:	4b19      	ldr	r3, [pc, #100]	; (8003d50 <HAL_UART_MspInit+0x2fc>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003cee:	4b18      	ldr	r3, [pc, #96]	; (8003d50 <HAL_UART_MspInit+0x2fc>)
 8003cf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cf4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003cf6:	4b16      	ldr	r3, [pc, #88]	; (8003d50 <HAL_UART_MspInit+0x2fc>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003cfc:	4b14      	ldr	r3, [pc, #80]	; (8003d50 <HAL_UART_MspInit+0x2fc>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003d02:	4813      	ldr	r0, [pc, #76]	; (8003d50 <HAL_UART_MspInit+0x2fc>)
 8003d04:	f001 f96c 	bl	8004fe0 <HAL_DMA_Init>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_UART_MspInit+0x2be>
      Error_Handler();
 8003d0e:	f7ff fd55 	bl	80037bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a0e      	ldr	r2, [pc, #56]	; (8003d50 <HAL_UART_MspInit+0x2fc>)
 8003d16:	67da      	str	r2, [r3, #124]	; 0x7c
 8003d18:	4a0d      	ldr	r2, [pc, #52]	; (8003d50 <HAL_UART_MspInit+0x2fc>)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003d1e:	2200      	movs	r2, #0
 8003d20:	2100      	movs	r1, #0
 8003d22:	2026      	movs	r0, #38	; 0x26
 8003d24:	f001 f927 	bl	8004f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003d28:	2026      	movs	r0, #38	; 0x26
 8003d2a:	f001 f93e 	bl	8004faa <HAL_NVIC_EnableIRQ>
}
 8003d2e:	e090      	b.n	8003e52 <HAL_UART_MspInit+0x3fe>
 8003d30:	40004c00 	.word	0x40004c00
 8003d34:	58024400 	.word	0x58024400
 8003d38:	58020000 	.word	0x58020000
 8003d3c:	40011000 	.word	0x40011000
 8003d40:	58020400 	.word	0x58020400
 8003d44:	240004c8 	.word	0x240004c8
 8003d48:	40020010 	.word	0x40020010
 8003d4c:	40004400 	.word	0x40004400
 8003d50:	240002fc 	.word	0x240002fc
 8003d54:	40020040 	.word	0x40020040
  else if(huart->Instance==USART3)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a3f      	ldr	r2, [pc, #252]	; (8003e5c <HAL_UART_MspInit+0x408>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d177      	bne.n	8003e52 <HAL_UART_MspInit+0x3fe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003d62:	2302      	movs	r3, #2
 8003d64:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003d66:	2300      	movs	r3, #0
 8003d68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d70:	4618      	mov	r0, r3
 8003d72:	f007 fb97 	bl	800b4a4 <HAL_RCCEx_PeriphCLKConfig>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <HAL_UART_MspInit+0x32c>
      Error_Handler();
 8003d7c:	f7ff fd1e 	bl	80037bc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003d80:	4b37      	ldr	r3, [pc, #220]	; (8003e60 <HAL_UART_MspInit+0x40c>)
 8003d82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d86:	4a36      	ldr	r2, [pc, #216]	; (8003e60 <HAL_UART_MspInit+0x40c>)
 8003d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d8c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003d90:	4b33      	ldr	r3, [pc, #204]	; (8003e60 <HAL_UART_MspInit+0x40c>)
 8003d92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d9e:	4b30      	ldr	r3, [pc, #192]	; (8003e60 <HAL_UART_MspInit+0x40c>)
 8003da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003da4:	4a2e      	ldr	r2, [pc, #184]	; (8003e60 <HAL_UART_MspInit+0x40c>)
 8003da6:	f043 0302 	orr.w	r3, r3, #2
 8003daa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003dae:	4b2c      	ldr	r3, [pc, #176]	; (8003e60 <HAL_UART_MspInit+0x40c>)
 8003db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003dbc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003dc0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003dd6:	2307      	movs	r3, #7
 8003dd8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ddc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003de0:	4619      	mov	r1, r3
 8003de2:	4820      	ldr	r0, [pc, #128]	; (8003e64 <HAL_UART_MspInit+0x410>)
 8003de4:	f003 ff50 	bl	8007c88 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream3;
 8003de8:	4b1f      	ldr	r3, [pc, #124]	; (8003e68 <HAL_UART_MspInit+0x414>)
 8003dea:	4a20      	ldr	r2, [pc, #128]	; (8003e6c <HAL_UART_MspInit+0x418>)
 8003dec:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003dee:	4b1e      	ldr	r3, [pc, #120]	; (8003e68 <HAL_UART_MspInit+0x414>)
 8003df0:	222d      	movs	r2, #45	; 0x2d
 8003df2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003df4:	4b1c      	ldr	r3, [pc, #112]	; (8003e68 <HAL_UART_MspInit+0x414>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dfa:	4b1b      	ldr	r3, [pc, #108]	; (8003e68 <HAL_UART_MspInit+0x414>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e00:	4b19      	ldr	r3, [pc, #100]	; (8003e68 <HAL_UART_MspInit+0x414>)
 8003e02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e06:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e08:	4b17      	ldr	r3, [pc, #92]	; (8003e68 <HAL_UART_MspInit+0x414>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e0e:	4b16      	ldr	r3, [pc, #88]	; (8003e68 <HAL_UART_MspInit+0x414>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003e14:	4b14      	ldr	r3, [pc, #80]	; (8003e68 <HAL_UART_MspInit+0x414>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e1a:	4b13      	ldr	r3, [pc, #76]	; (8003e68 <HAL_UART_MspInit+0x414>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e20:	4b11      	ldr	r3, [pc, #68]	; (8003e68 <HAL_UART_MspInit+0x414>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003e26:	4810      	ldr	r0, [pc, #64]	; (8003e68 <HAL_UART_MspInit+0x414>)
 8003e28:	f001 f8da 	bl	8004fe0 <HAL_DMA_Init>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <HAL_UART_MspInit+0x3e2>
      Error_Handler();
 8003e32:	f7ff fcc3 	bl	80037bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a0b      	ldr	r2, [pc, #44]	; (8003e68 <HAL_UART_MspInit+0x414>)
 8003e3a:	67da      	str	r2, [r3, #124]	; 0x7c
 8003e3c:	4a0a      	ldr	r2, [pc, #40]	; (8003e68 <HAL_UART_MspInit+0x414>)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003e42:	2200      	movs	r2, #0
 8003e44:	2100      	movs	r1, #0
 8003e46:	2027      	movs	r0, #39	; 0x27
 8003e48:	f001 f895 	bl	8004f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003e4c:	2027      	movs	r0, #39	; 0x27
 8003e4e:	f001 f8ac 	bl	8004faa <HAL_NVIC_EnableIRQ>
}
 8003e52:	bf00      	nop
 8003e54:	37f8      	adds	r7, #248	; 0xf8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40004800 	.word	0x40004800
 8003e60:	58024400 	.word	0x58024400
 8003e64:	58020400 	.word	0x58020400
 8003e68:	24000374 	.word	0x24000374
 8003e6c:	40020058 	.word	0x40020058

08003e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8003e74:	e7fe      	b.n	8003e74 <NMI_Handler+0x4>

08003e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e76:	b480      	push	{r7}
 8003e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e7a:	e7fe      	b.n	8003e7a <HardFault_Handler+0x4>

08003e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e80:	e7fe      	b.n	8003e80 <MemManage_Handler+0x4>

08003e82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e82:	b480      	push	{r7}
 8003e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e86:	e7fe      	b.n	8003e86 <BusFault_Handler+0x4>

08003e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e8c:	e7fe      	b.n	8003e8c <UsageFault_Handler+0x4>

08003e8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e92:	bf00      	nop
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ea0:	bf00      	nop
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003eae:	bf00      	nop
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ebc:	f000 ff30 	bl	8004d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ec0:	bf00      	nop
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003ec8:	4802      	ldr	r0, [pc, #8]	; (8003ed4 <DMA1_Stream0_IRQHandler+0x10>)
 8003eca:	f002 fbb1 	bl	8006630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003ece:	bf00      	nop
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	240004c8 	.word	0x240004c8

08003ed8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003edc:	4802      	ldr	r0, [pc, #8]	; (8003ee8 <DMA1_Stream1_IRQHandler+0x10>)
 8003ede:	f002 fba7 	bl	8006630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003ee2:	bf00      	nop
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	240005d0 	.word	0x240005d0

08003eec <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003ef0:	4802      	ldr	r0, [pc, #8]	; (8003efc <DMA1_Stream2_IRQHandler+0x10>)
 8003ef2:	f002 fb9d 	bl	8006630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003ef6:	bf00      	nop
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	240002fc 	.word	0x240002fc

08003f00 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003f04:	4802      	ldr	r0, [pc, #8]	; (8003f10 <DMA1_Stream3_IRQHandler+0x10>)
 8003f06:	f002 fb93 	bl	8006630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003f0a:	bf00      	nop
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	24000374 	.word	0x24000374

08003f14 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003f18:	4802      	ldr	r0, [pc, #8]	; (8003f24 <I2C1_EV_IRQHandler+0x10>)
 8003f1a:	f004 fc4f 	bl	80087bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003f1e:	bf00      	nop
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	2400047c 	.word	0x2400047c

08003f28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003f2c:	4802      	ldr	r0, [pc, #8]	; (8003f38 <USART1_IRQHandler+0x10>)
 8003f2e:	f00a fb81 	bl	800e634 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003f32:	bf00      	nop
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	24000540 	.word	0x24000540

08003f3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003f40:	4802      	ldr	r0, [pc, #8]	; (8003f4c <USART2_IRQHandler+0x10>)
 8003f42:	f00a fb77 	bl	800e634 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003f46:	bf00      	nop
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	24000760 	.word	0x24000760

08003f50 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003f54:	4802      	ldr	r0, [pc, #8]	; (8003f60 <USART3_IRQHandler+0x10>)
 8003f56:	f00a fb6d 	bl	800e634 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003f5a:	bf00      	nop
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	240003ec 	.word	0x240003ec

08003f64 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003f68:	4802      	ldr	r0, [pc, #8]	; (8003f74 <TIM7_IRQHandler+0x10>)
 8003f6a:	f009 ff7f 	bl	800de6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003f6e:	bf00      	nop
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	240007fc 	.word	0x240007fc

08003f78 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
	static unsigned int tim1_2ms_count = 0;
	static unsigned int tim1_20ms_count = 0;

	if(htim->Instance == TIM7)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a13      	ldr	r2, [pc, #76]	; (8003fd4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d11d      	bne.n	8003fc6 <HAL_TIM_PeriodElapsedCallback+0x4e>
	{
		tim1_2ms_count++;
 8003f8a:	4b13      	ldr	r3, [pc, #76]	; (8003fd8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	4a11      	ldr	r2, [pc, #68]	; (8003fd8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003f92:	6013      	str	r3, [r2, #0]
		if(tim1_2ms_count == 2)
 8003f94:	4b10      	ldr	r3, [pc, #64]	; (8003fd8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d105      	bne.n	8003fa8 <HAL_TIM_PeriodElapsedCallback+0x30>
		{
			tim1_2ms_count = 0;
 8003f9c:	4b0e      	ldr	r3, [pc, #56]	; (8003fd8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]
			tim1_2ms_flag = 1;
 8003fa2:	4b0e      	ldr	r3, [pc, #56]	; (8003fdc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	701a      	strb	r2, [r3, #0]
		}
		tim1_20ms_count++;
 8003fa8:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3301      	adds	r3, #1
 8003fae:	4a0c      	ldr	r2, [pc, #48]	; (8003fe0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003fb0:	6013      	str	r3, [r2, #0]
		if(tim1_20ms_count == 20)
 8003fb2:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b14      	cmp	r3, #20
 8003fb8:	d105      	bne.n	8003fc6 <HAL_TIM_PeriodElapsedCallback+0x4e>
		{
			tim1_20ms_count = 0;
 8003fba:	4b09      	ldr	r3, [pc, #36]	; (8003fe0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]
			tim1_20ms_flag = 1;
 8003fc0:	4b08      	ldr	r3, [pc, #32]	; (8003fe4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40001400 	.word	0x40001400
 8003fd8:	24000234 	.word	0x24000234
 8003fdc:	2400022e 	.word	0x2400022e
 8003fe0:	24000238 	.word	0x24000238
 8003fe4:	2400022f 	.word	0x2400022f

08003fe8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a17      	ldr	r2, [pc, #92]	; (8004054 <HAL_UART_RxCpltCallback+0x6c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d108      	bne.n	800400c <HAL_UART_RxCpltCallback+0x24>
	{
		uart1_rx_flag = 1;
 8003ffa:	4b17      	ldr	r3, [pc, #92]	; (8004058 <HAL_UART_RxCpltCallback+0x70>)
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 8004000:	2201      	movs	r2, #1
 8004002:	4916      	ldr	r1, [pc, #88]	; (800405c <HAL_UART_RxCpltCallback+0x74>)
 8004004:	4816      	ldr	r0, [pc, #88]	; (8004060 <HAL_UART_RxCpltCallback+0x78>)
 8004006:	f00a fa09 	bl	800e41c <HAL_UART_Receive_IT>
	else if(huart->Instance == USART2)
	{
		if((ibus_rx_buf[0] == 0x20) && (ibus_rx_buf[1] == 0x40)) ibus_rx_cplt_flag = 1;
		else for(int j = 0; j < 32; j++) ibus_rx_buf[j] = 0;
	}
}
 800400a:	e01e      	b.n	800404a <HAL_UART_RxCpltCallback+0x62>
	else if(huart->Instance == USART2)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a14      	ldr	r2, [pc, #80]	; (8004064 <HAL_UART_RxCpltCallback+0x7c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d119      	bne.n	800404a <HAL_UART_RxCpltCallback+0x62>
		if((ibus_rx_buf[0] == 0x20) && (ibus_rx_buf[1] == 0x40)) ibus_rx_cplt_flag = 1;
 8004016:	4b14      	ldr	r3, [pc, #80]	; (8004068 <HAL_UART_RxCpltCallback+0x80>)
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	2b20      	cmp	r3, #32
 800401c:	d107      	bne.n	800402e <HAL_UART_RxCpltCallback+0x46>
 800401e:	4b12      	ldr	r3, [pc, #72]	; (8004068 <HAL_UART_RxCpltCallback+0x80>)
 8004020:	785b      	ldrb	r3, [r3, #1]
 8004022:	2b40      	cmp	r3, #64	; 0x40
 8004024:	d103      	bne.n	800402e <HAL_UART_RxCpltCallback+0x46>
 8004026:	4b11      	ldr	r3, [pc, #68]	; (800406c <HAL_UART_RxCpltCallback+0x84>)
 8004028:	2201      	movs	r2, #1
 800402a:	701a      	strb	r2, [r3, #0]
}
 800402c:	e00d      	b.n	800404a <HAL_UART_RxCpltCallback+0x62>
		else for(int j = 0; j < 32; j++) ibus_rx_buf[j] = 0;
 800402e:	2300      	movs	r3, #0
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	e007      	b.n	8004044 <HAL_UART_RxCpltCallback+0x5c>
 8004034:	4a0c      	ldr	r2, [pc, #48]	; (8004068 <HAL_UART_RxCpltCallback+0x80>)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	4413      	add	r3, r2
 800403a:	2200      	movs	r2, #0
 800403c:	701a      	strb	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3301      	adds	r3, #1
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2b1f      	cmp	r3, #31
 8004048:	ddf4      	ble.n	8004034 <HAL_UART_RxCpltCallback+0x4c>
}
 800404a:	bf00      	nop
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40011000 	.word	0x40011000
 8004058:	24000230 	.word	0x24000230
 800405c:	24000231 	.word	0x24000231
 8004060:	24000540 	.word	0x24000540
 8004064:	40004400 	.word	0x40004400
 8004068:	2400084c 	.word	0x2400084c
 800406c:	24000232 	.word	0x24000232

08004070 <Receive_Command>:

void Receive_Command(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
	if(uart1_rx_flag == 1)
 8004074:	4b26      	ldr	r3, [pc, #152]	; (8004110 <Receive_Command+0xa0>)
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d142      	bne.n	8004102 <Receive_Command+0x92>
	{
		uart1_rx_flag = 0;
 800407c:	4b24      	ldr	r3, [pc, #144]	; (8004110 <Receive_Command+0xa0>)
 800407e:	2200      	movs	r2, #0
 8004080:	701a      	strb	r2, [r3, #0]

		switch(uart1_rx_data)
 8004082:	4b24      	ldr	r3, [pc, #144]	; (8004114 <Receive_Command+0xa4>)
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	3b31      	subs	r3, #49	; 0x31
 8004088:	2b07      	cmp	r3, #7
 800408a:	d833      	bhi.n	80040f4 <Receive_Command+0x84>
 800408c:	a201      	add	r2, pc, #4	; (adr r2, 8004094 <Receive_Command+0x24>)
 800408e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004092:	bf00      	nop
 8004094:	080040b5 	.word	0x080040b5
 8004098:	080040bd 	.word	0x080040bd
 800409c:	080040c5 	.word	0x080040c5
 80040a0:	080040cd 	.word	0x080040cd
 80040a4:	080040d5 	.word	0x080040d5
 80040a8:	080040dd 	.word	0x080040dd
 80040ac:	080040e5 	.word	0x080040e5
 80040b0:	080040ed 	.word	0x080040ed
		{
		case '1': print_mode = 1; break; //Roll, Pitch, Yaw
 80040b4:	4b18      	ldr	r3, [pc, #96]	; (8004118 <Receive_Command+0xa8>)
 80040b6:	2201      	movs	r2, #1
 80040b8:	701a      	strb	r2, [r3, #0]
 80040ba:	e023      	b.n	8004104 <Receive_Command+0x94>
		case '2': print_mode = 2; break; //Alt Raw, Alt Filt
 80040bc:	4b16      	ldr	r3, [pc, #88]	; (8004118 <Receive_Command+0xa8>)
 80040be:	2202      	movs	r2, #2
 80040c0:	701a      	strb	r2, [r3, #0]
 80040c2:	e01f      	b.n	8004104 <Receive_Command+0x94>
		case '3': print_mode = 3; break; //Gyro
 80040c4:	4b14      	ldr	r3, [pc, #80]	; (8004118 <Receive_Command+0xa8>)
 80040c6:	2203      	movs	r2, #3
 80040c8:	701a      	strb	r2, [r3, #0]
 80040ca:	e01b      	b.n	8004104 <Receive_Command+0x94>
		case '4': print_mode = 4; break; //Accel
 80040cc:	4b12      	ldr	r3, [pc, #72]	; (8004118 <Receive_Command+0xa8>)
 80040ce:	2204      	movs	r2, #4
 80040d0:	701a      	strb	r2, [r3, #0]
 80040d2:	e017      	b.n	8004104 <Receive_Command+0x94>
		case '5': print_mode = 5; break; //Mag
 80040d4:	4b10      	ldr	r3, [pc, #64]	; (8004118 <Receive_Command+0xa8>)
 80040d6:	2205      	movs	r2, #5
 80040d8:	701a      	strb	r2, [r3, #0]
 80040da:	e013      	b.n	8004104 <Receive_Command+0x94>
		case '6': print_mode = 6; break; //Mag_Offset
 80040dc:	4b0e      	ldr	r3, [pc, #56]	; (8004118 <Receive_Command+0xa8>)
 80040de:	2206      	movs	r2, #6
 80040e0:	701a      	strb	r2, [r3, #0]
 80040e2:	e00f      	b.n	8004104 <Receive_Command+0x94>
		case '7': print_mode = 7; break; //Controller Channels
 80040e4:	4b0c      	ldr	r3, [pc, #48]	; (8004118 <Receive_Command+0xa8>)
 80040e6:	2207      	movs	r2, #7
 80040e8:	701a      	strb	r2, [r3, #0]
 80040ea:	e00b      	b.n	8004104 <Receive_Command+0x94>
		case '8': mag_calibration_enable = 1; break; //Mag_Raw
 80040ec:	4b0b      	ldr	r3, [pc, #44]	; (800411c <Receive_Command+0xac>)
 80040ee:	2201      	movs	r2, #1
 80040f0:	701a      	strb	r2, [r3, #0]
 80040f2:	e007      	b.n	8004104 <Receive_Command+0x94>
		default: print_mode = 0; mag_calibration_enable = 0; break; // Stop Printing
 80040f4:	4b08      	ldr	r3, [pc, #32]	; (8004118 <Receive_Command+0xa8>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	701a      	strb	r2, [r3, #0]
 80040fa:	4b08      	ldr	r3, [pc, #32]	; (800411c <Receive_Command+0xac>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	701a      	strb	r2, [r3, #0]
 8004100:	e000      	b.n	8004104 <Receive_Command+0x94>
		}
	}
 8004102:	bf00      	nop
}
 8004104:	bf00      	nop
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	24000230 	.word	0x24000230
 8004114:	24000231 	.word	0x24000231
 8004118:	2400022c 	.word	0x2400022c
 800411c:	2400022d 	.word	0x2400022d

08004120 <Is_iBus_Received>:

int Is_iBus_Received(uint8_t ibus_rx_cplt_flag)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	4603      	mov	r3, r0
 8004128:	71fb      	strb	r3, [r7, #7]
	if(ibus_rx_cplt_flag==1)
 800412a:	79fb      	ldrb	r3, [r7, #7]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d10e      	bne.n	800414e <Is_iBus_Received+0x2e>
		{
			ibus_rx_cplt_flag=0;
 8004130:	2300      	movs	r3, #0
 8004132:	71fb      	strb	r3, [r7, #7]
			if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32)==1)
 8004134:	2120      	movs	r1, #32
 8004136:	4808      	ldr	r0, [pc, #32]	; (8004158 <Is_iBus_Received+0x38>)
 8004138:	f7fc faa6 	bl	8000688 <iBus_Check_CHKSUM>
 800413c:	4603      	mov	r3, r0
 800413e:	2b01      	cmp	r3, #1
 8004140:	d105      	bne.n	800414e <Is_iBus_Received+0x2e>
			{
				iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8004142:	4906      	ldr	r1, [pc, #24]	; (800415c <Is_iBus_Received+0x3c>)
 8004144:	4804      	ldr	r0, [pc, #16]	; (8004158 <Is_iBus_Received+0x38>)
 8004146:	f7fc fad6 	bl	80006f6 <iBus_Parsing>
				return 1;
 800414a:	2301      	movs	r3, #1
 800414c:	e000      	b.n	8004150 <Is_iBus_Received+0x30>
			}
		}
		return 0;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	2400084c 	.word	0x2400084c
 800415c:	24000248 	.word	0x24000248

08004160 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
	return 1;
 8004164:	2301      	movs	r3, #1
}
 8004166:	4618      	mov	r0, r3
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <_kill>:

int _kill(int pid, int sig)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800417a:	f00c fa9f 	bl	80106bc <__errno>
 800417e:	4603      	mov	r3, r0
 8004180:	2216      	movs	r2, #22
 8004182:	601a      	str	r2, [r3, #0]
	return -1;
 8004184:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004188:	4618      	mov	r0, r3
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <_exit>:

void _exit (int status)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004198:	f04f 31ff 	mov.w	r1, #4294967295
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff ffe7 	bl	8004170 <_kill>
	while (1) {}		/* Make sure we hang here */
 80041a2:	e7fe      	b.n	80041a2 <_exit+0x12>

080041a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	e00a      	b.n	80041cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80041b6:	f3af 8000 	nop.w
 80041ba:	4601      	mov	r1, r0
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	60ba      	str	r2, [r7, #8]
 80041c2:	b2ca      	uxtb	r2, r1
 80041c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	3301      	adds	r3, #1
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	dbf0      	blt.n	80041b6 <_read+0x12>
	}

return len;
 80041d4:	687b      	ldr	r3, [r7, #4]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <_close>:
	}
	return len;
}

int _close(int file)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
	return -1;
 80041e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
 80041fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004206:	605a      	str	r2, [r3, #4]
	return 0;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <_isatty>:

int _isatty(int file)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
	return 1;
 800421e:	2301      	movs	r3, #1
}
 8004220:	4618      	mov	r0, r3
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
	return 0;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
	...

08004248 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004250:	4a14      	ldr	r2, [pc, #80]	; (80042a4 <_sbrk+0x5c>)
 8004252:	4b15      	ldr	r3, [pc, #84]	; (80042a8 <_sbrk+0x60>)
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800425c:	4b13      	ldr	r3, [pc, #76]	; (80042ac <_sbrk+0x64>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d102      	bne.n	800426a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004264:	4b11      	ldr	r3, [pc, #68]	; (80042ac <_sbrk+0x64>)
 8004266:	4a12      	ldr	r2, [pc, #72]	; (80042b0 <_sbrk+0x68>)
 8004268:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800426a:	4b10      	ldr	r3, [pc, #64]	; (80042ac <_sbrk+0x64>)
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4413      	add	r3, r2
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	429a      	cmp	r2, r3
 8004276:	d207      	bcs.n	8004288 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004278:	f00c fa20 	bl	80106bc <__errno>
 800427c:	4603      	mov	r3, r0
 800427e:	220c      	movs	r2, #12
 8004280:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004282:	f04f 33ff 	mov.w	r3, #4294967295
 8004286:	e009      	b.n	800429c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004288:	4b08      	ldr	r3, [pc, #32]	; (80042ac <_sbrk+0x64>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800428e:	4b07      	ldr	r3, [pc, #28]	; (80042ac <_sbrk+0x64>)
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4413      	add	r3, r2
 8004296:	4a05      	ldr	r2, [pc, #20]	; (80042ac <_sbrk+0x64>)
 8004298:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800429a:	68fb      	ldr	r3, [r7, #12]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3718      	adds	r7, #24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	24080000 	.word	0x24080000
 80042a8:	00000400 	.word	0x00000400
 80042ac:	2400023c 	.word	0x2400023c
 80042b0:	240008a8 	.word	0x240008a8

080042b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80042b8:	4b39      	ldr	r3, [pc, #228]	; (80043a0 <SystemInit+0xec>)
 80042ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042be:	4a38      	ldr	r2, [pc, #224]	; (80043a0 <SystemInit+0xec>)
 80042c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80042c8:	4b36      	ldr	r3, [pc, #216]	; (80043a4 <SystemInit+0xf0>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 030f 	and.w	r3, r3, #15
 80042d0:	2b06      	cmp	r3, #6
 80042d2:	d807      	bhi.n	80042e4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80042d4:	4b33      	ldr	r3, [pc, #204]	; (80043a4 <SystemInit+0xf0>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f023 030f 	bic.w	r3, r3, #15
 80042dc:	4a31      	ldr	r2, [pc, #196]	; (80043a4 <SystemInit+0xf0>)
 80042de:	f043 0307 	orr.w	r3, r3, #7
 80042e2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80042e4:	4b30      	ldr	r3, [pc, #192]	; (80043a8 <SystemInit+0xf4>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a2f      	ldr	r2, [pc, #188]	; (80043a8 <SystemInit+0xf4>)
 80042ea:	f043 0301 	orr.w	r3, r3, #1
 80042ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80042f0:	4b2d      	ldr	r3, [pc, #180]	; (80043a8 <SystemInit+0xf4>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80042f6:	4b2c      	ldr	r3, [pc, #176]	; (80043a8 <SystemInit+0xf4>)
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	492b      	ldr	r1, [pc, #172]	; (80043a8 <SystemInit+0xf4>)
 80042fc:	4b2b      	ldr	r3, [pc, #172]	; (80043ac <SystemInit+0xf8>)
 80042fe:	4013      	ands	r3, r2
 8004300:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004302:	4b28      	ldr	r3, [pc, #160]	; (80043a4 <SystemInit+0xf0>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	2b00      	cmp	r3, #0
 800430c:	d007      	beq.n	800431e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800430e:	4b25      	ldr	r3, [pc, #148]	; (80043a4 <SystemInit+0xf0>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f023 030f 	bic.w	r3, r3, #15
 8004316:	4a23      	ldr	r2, [pc, #140]	; (80043a4 <SystemInit+0xf0>)
 8004318:	f043 0307 	orr.w	r3, r3, #7
 800431c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800431e:	4b22      	ldr	r3, [pc, #136]	; (80043a8 <SystemInit+0xf4>)
 8004320:	2200      	movs	r2, #0
 8004322:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004324:	4b20      	ldr	r3, [pc, #128]	; (80043a8 <SystemInit+0xf4>)
 8004326:	2200      	movs	r2, #0
 8004328:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800432a:	4b1f      	ldr	r3, [pc, #124]	; (80043a8 <SystemInit+0xf4>)
 800432c:	2200      	movs	r2, #0
 800432e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004330:	4b1d      	ldr	r3, [pc, #116]	; (80043a8 <SystemInit+0xf4>)
 8004332:	4a1f      	ldr	r2, [pc, #124]	; (80043b0 <SystemInit+0xfc>)
 8004334:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004336:	4b1c      	ldr	r3, [pc, #112]	; (80043a8 <SystemInit+0xf4>)
 8004338:	4a1e      	ldr	r2, [pc, #120]	; (80043b4 <SystemInit+0x100>)
 800433a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800433c:	4b1a      	ldr	r3, [pc, #104]	; (80043a8 <SystemInit+0xf4>)
 800433e:	4a1e      	ldr	r2, [pc, #120]	; (80043b8 <SystemInit+0x104>)
 8004340:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004342:	4b19      	ldr	r3, [pc, #100]	; (80043a8 <SystemInit+0xf4>)
 8004344:	2200      	movs	r2, #0
 8004346:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004348:	4b17      	ldr	r3, [pc, #92]	; (80043a8 <SystemInit+0xf4>)
 800434a:	4a1b      	ldr	r2, [pc, #108]	; (80043b8 <SystemInit+0x104>)
 800434c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800434e:	4b16      	ldr	r3, [pc, #88]	; (80043a8 <SystemInit+0xf4>)
 8004350:	2200      	movs	r2, #0
 8004352:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004354:	4b14      	ldr	r3, [pc, #80]	; (80043a8 <SystemInit+0xf4>)
 8004356:	4a18      	ldr	r2, [pc, #96]	; (80043b8 <SystemInit+0x104>)
 8004358:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800435a:	4b13      	ldr	r3, [pc, #76]	; (80043a8 <SystemInit+0xf4>)
 800435c:	2200      	movs	r2, #0
 800435e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004360:	4b11      	ldr	r3, [pc, #68]	; (80043a8 <SystemInit+0xf4>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a10      	ldr	r2, [pc, #64]	; (80043a8 <SystemInit+0xf4>)
 8004366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800436a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800436c:	4b0e      	ldr	r3, [pc, #56]	; (80043a8 <SystemInit+0xf4>)
 800436e:	2200      	movs	r2, #0
 8004370:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004372:	4b12      	ldr	r3, [pc, #72]	; (80043bc <SystemInit+0x108>)
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	4b12      	ldr	r3, [pc, #72]	; (80043c0 <SystemInit+0x10c>)
 8004378:	4013      	ands	r3, r2
 800437a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800437e:	d202      	bcs.n	8004386 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004380:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <SystemInit+0x110>)
 8004382:	2201      	movs	r2, #1
 8004384:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004386:	4b10      	ldr	r3, [pc, #64]	; (80043c8 <SystemInit+0x114>)
 8004388:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800438c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800438e:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <SystemInit+0xec>)
 8004390:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004394:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004396:	bf00      	nop
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	e000ed00 	.word	0xe000ed00
 80043a4:	52002000 	.word	0x52002000
 80043a8:	58024400 	.word	0x58024400
 80043ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80043b0:	02020200 	.word	0x02020200
 80043b4:	01ff0000 	.word	0x01ff0000
 80043b8:	01010280 	.word	0x01010280
 80043bc:	5c001000 	.word	0x5c001000
 80043c0:	ffff0000 	.word	0xffff0000
 80043c4:	51008108 	.word	0x51008108
 80043c8:	52004000 	.word	0x52004000

080043cc <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	4603      	mov	r3, r0
 80043d4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 80043d6:	f107 020f 	add.w	r2, r7, #15
 80043da:	1df9      	adds	r1, r7, #7
 80043dc:	2364      	movs	r3, #100	; 0x64
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	2301      	movs	r3, #1
 80043e2:	4804      	ldr	r0, [pc, #16]	; (80043f4 <W25qxx_Spi+0x28>)
 80043e4:	f009 f8a6 	bl	800d534 <HAL_SPI_TransmitReceive>
	return ret;
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	240006d8 	.word	0x240006d8

080043f8 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80043fe:	2300      	movs	r3, #0
 8004400:	60fb      	str	r3, [r7, #12]
 8004402:	2300      	movs	r3, #0
 8004404:	60bb      	str	r3, [r7, #8]
 8004406:	2300      	movs	r3, #0
 8004408:	607b      	str	r3, [r7, #4]
 800440a:	2300      	movs	r3, #0
 800440c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800440e:	2200      	movs	r2, #0
 8004410:	2140      	movs	r1, #64	; 0x40
 8004412:	4813      	ldr	r0, [pc, #76]	; (8004460 <W25qxx_ReadID+0x68>)
 8004414:	f003 fde8 	bl	8007fe8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8004418:	209f      	movs	r0, #159	; 0x9f
 800441a:	f7ff ffd7 	bl	80043cc <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800441e:	20a5      	movs	r0, #165	; 0xa5
 8004420:	f7ff ffd4 	bl	80043cc <W25qxx_Spi>
 8004424:	4603      	mov	r3, r0
 8004426:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004428:	20a5      	movs	r0, #165	; 0xa5
 800442a:	f7ff ffcf 	bl	80043cc <W25qxx_Spi>
 800442e:	4603      	mov	r3, r0
 8004430:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004432:	20a5      	movs	r0, #165	; 0xa5
 8004434:	f7ff ffca 	bl	80043cc <W25qxx_Spi>
 8004438:	4603      	mov	r3, r0
 800443a:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800443c:	2201      	movs	r2, #1
 800443e:	2140      	movs	r1, #64	; 0x40
 8004440:	4807      	ldr	r0, [pc, #28]	; (8004460 <W25qxx_ReadID+0x68>)
 8004442:	f003 fdd1 	bl	8007fe8 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	041a      	lsls	r2, r3, #16
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	021b      	lsls	r3, r3, #8
 800444e:	4313      	orrs	r3, r2
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	4313      	orrs	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]
	return Temp;
 8004456:	68fb      	ldr	r3, [r7, #12]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	58020400 	.word	0x58020400

08004464 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8004464:	b590      	push	{r4, r7, lr}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800446a:	2200      	movs	r2, #0
 800446c:	2140      	movs	r1, #64	; 0x40
 800446e:	4816      	ldr	r0, [pc, #88]	; (80044c8 <W25qxx_ReadUniqID+0x64>)
 8004470:	f003 fdba 	bl	8007fe8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8004474:	204b      	movs	r0, #75	; 0x4b
 8004476:	f7ff ffa9 	bl	80043cc <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800447a:	2300      	movs	r3, #0
 800447c:	71fb      	strb	r3, [r7, #7]
 800447e:	e005      	b.n	800448c <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004480:	20a5      	movs	r0, #165	; 0xa5
 8004482:	f7ff ffa3 	bl	80043cc <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8004486:	79fb      	ldrb	r3, [r7, #7]
 8004488:	3301      	adds	r3, #1
 800448a:	71fb      	strb	r3, [r7, #7]
 800448c:	79fb      	ldrb	r3, [r7, #7]
 800448e:	2b03      	cmp	r3, #3
 8004490:	d9f6      	bls.n	8004480 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8004492:	2300      	movs	r3, #0
 8004494:	71bb      	strb	r3, [r7, #6]
 8004496:	e00b      	b.n	80044b0 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004498:	79bc      	ldrb	r4, [r7, #6]
 800449a:	20a5      	movs	r0, #165	; 0xa5
 800449c:	f7ff ff96 	bl	80043cc <W25qxx_Spi>
 80044a0:	4603      	mov	r3, r0
 80044a2:	461a      	mov	r2, r3
 80044a4:	4b09      	ldr	r3, [pc, #36]	; (80044cc <W25qxx_ReadUniqID+0x68>)
 80044a6:	4423      	add	r3, r4
 80044a8:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 80044aa:	79bb      	ldrb	r3, [r7, #6]
 80044ac:	3301      	adds	r3, #1
 80044ae:	71bb      	strb	r3, [r7, #6]
 80044b0:	79bb      	ldrb	r3, [r7, #6]
 80044b2:	2b07      	cmp	r3, #7
 80044b4:	d9f0      	bls.n	8004498 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80044b6:	2201      	movs	r2, #1
 80044b8:	2140      	movs	r1, #64	; 0x40
 80044ba:	4803      	ldr	r0, [pc, #12]	; (80044c8 <W25qxx_ReadUniqID+0x64>)
 80044bc:	f003 fd94 	bl	8007fe8 <HAL_GPIO_WritePin>
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd90      	pop	{r4, r7, pc}
 80044c8:	58020400 	.word	0x58020400
 80044cc:	2400086c 	.word	0x2400086c

080044d0 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80044d4:	2200      	movs	r2, #0
 80044d6:	2140      	movs	r1, #64	; 0x40
 80044d8:	4807      	ldr	r0, [pc, #28]	; (80044f8 <W25qxx_WriteEnable+0x28>)
 80044da:	f003 fd85 	bl	8007fe8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 80044de:	2006      	movs	r0, #6
 80044e0:	f7ff ff74 	bl	80043cc <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80044e4:	2201      	movs	r2, #1
 80044e6:	2140      	movs	r1, #64	; 0x40
 80044e8:	4803      	ldr	r0, [pc, #12]	; (80044f8 <W25qxx_WriteEnable+0x28>)
 80044ea:	f003 fd7d 	bl	8007fe8 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80044ee:	2001      	movs	r0, #1
 80044f0:	f000 fc36 	bl	8004d60 <HAL_Delay>
}
 80044f4:	bf00      	nop
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	58020400 	.word	0x58020400

080044fc <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	4603      	mov	r3, r0
 8004504:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8004506:	2300      	movs	r3, #0
 8004508:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800450a:	2200      	movs	r2, #0
 800450c:	2140      	movs	r1, #64	; 0x40
 800450e:	481c      	ldr	r0, [pc, #112]	; (8004580 <W25qxx_ReadStatusRegister+0x84>)
 8004510:	f003 fd6a 	bl	8007fe8 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8004514:	79fb      	ldrb	r3, [r7, #7]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d10c      	bne.n	8004534 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 800451a:	2005      	movs	r0, #5
 800451c:	f7ff ff56 	bl	80043cc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004520:	20a5      	movs	r0, #165	; 0xa5
 8004522:	f7ff ff53 	bl	80043cc <W25qxx_Spi>
 8004526:	4603      	mov	r3, r0
 8004528:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 800452a:	4a16      	ldr	r2, [pc, #88]	; (8004584 <W25qxx_ReadStatusRegister+0x88>)
 800452c:	7bfb      	ldrb	r3, [r7, #15]
 800452e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8004532:	e01b      	b.n	800456c <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8004534:	79fb      	ldrb	r3, [r7, #7]
 8004536:	2b02      	cmp	r3, #2
 8004538:	d10c      	bne.n	8004554 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 800453a:	2035      	movs	r0, #53	; 0x35
 800453c:	f7ff ff46 	bl	80043cc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004540:	20a5      	movs	r0, #165	; 0xa5
 8004542:	f7ff ff43 	bl	80043cc <W25qxx_Spi>
 8004546:	4603      	mov	r3, r0
 8004548:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 800454a:	4a0e      	ldr	r2, [pc, #56]	; (8004584 <W25qxx_ReadStatusRegister+0x88>)
 800454c:	7bfb      	ldrb	r3, [r7, #15]
 800454e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8004552:	e00b      	b.n	800456c <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8004554:	2015      	movs	r0, #21
 8004556:	f7ff ff39 	bl	80043cc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800455a:	20a5      	movs	r0, #165	; 0xa5
 800455c:	f7ff ff36 	bl	80043cc <W25qxx_Spi>
 8004560:	4603      	mov	r3, r0
 8004562:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8004564:	4a07      	ldr	r2, [pc, #28]	; (8004584 <W25qxx_ReadStatusRegister+0x88>)
 8004566:	7bfb      	ldrb	r3, [r7, #15]
 8004568:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800456c:	2201      	movs	r2, #1
 800456e:	2140      	movs	r1, #64	; 0x40
 8004570:	4803      	ldr	r0, [pc, #12]	; (8004580 <W25qxx_ReadStatusRegister+0x84>)
 8004572:	f003 fd39 	bl	8007fe8 <HAL_GPIO_WritePin>
	return status;
 8004576:	7bfb      	ldrb	r3, [r7, #15]
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	58020400 	.word	0x58020400
 8004584:	2400086c 	.word	0x2400086c

08004588 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 800458c:	2001      	movs	r0, #1
 800458e:	f000 fbe7 	bl	8004d60 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004592:	2200      	movs	r2, #0
 8004594:	2140      	movs	r1, #64	; 0x40
 8004596:	480f      	ldr	r0, [pc, #60]	; (80045d4 <W25qxx_WaitForWriteEnd+0x4c>)
 8004598:	f003 fd26 	bl	8007fe8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 800459c:	2005      	movs	r0, #5
 800459e:	f7ff ff15 	bl	80043cc <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80045a2:	20a5      	movs	r0, #165	; 0xa5
 80045a4:	f7ff ff12 	bl	80043cc <W25qxx_Spi>
 80045a8:	4603      	mov	r3, r0
 80045aa:	461a      	mov	r2, r3
 80045ac:	4b0a      	ldr	r3, [pc, #40]	; (80045d8 <W25qxx_WaitForWriteEnd+0x50>)
 80045ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 80045b2:	2001      	movs	r0, #1
 80045b4:	f000 fbd4 	bl	8004d60 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80045b8:	4b07      	ldr	r3, [pc, #28]	; (80045d8 <W25qxx_WaitForWriteEnd+0x50>)
 80045ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1ed      	bne.n	80045a2 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80045c6:	2201      	movs	r2, #1
 80045c8:	2140      	movs	r1, #64	; 0x40
 80045ca:	4802      	ldr	r0, [pc, #8]	; (80045d4 <W25qxx_WaitForWriteEnd+0x4c>)
 80045cc:	f003 fd0c 	bl	8007fe8 <HAL_GPIO_WritePin>
}
 80045d0:	bf00      	nop
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	58020400 	.word	0x58020400
 80045d8:	2400086c 	.word	0x2400086c

080045dc <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 80045e2:	4b65      	ldr	r3, [pc, #404]	; (8004778 <W25qxx_Init+0x19c>)
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 80045ea:	e002      	b.n	80045f2 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 80045ec:	2001      	movs	r0, #1
 80045ee:	f000 fbb7 	bl	8004d60 <HAL_Delay>
	while (HAL_GetTick() < 100)
 80045f2:	f000 fba9 	bl	8004d48 <HAL_GetTick>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b63      	cmp	r3, #99	; 0x63
 80045fa:	d9f7      	bls.n	80045ec <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80045fc:	2201      	movs	r2, #1
 80045fe:	2140      	movs	r1, #64	; 0x40
 8004600:	485e      	ldr	r0, [pc, #376]	; (800477c <W25qxx_Init+0x1a0>)
 8004602:	f003 fcf1 	bl	8007fe8 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8004606:	2064      	movs	r0, #100	; 0x64
 8004608:	f000 fbaa 	bl	8004d60 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 800460c:	f7ff fef4 	bl	80043f8 <W25qxx_ReadID>
 8004610:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	b2db      	uxtb	r3, r3
 8004616:	3b11      	subs	r3, #17
 8004618:	2b0f      	cmp	r3, #15
 800461a:	d86c      	bhi.n	80046f6 <W25qxx_Init+0x11a>
 800461c:	a201      	add	r2, pc, #4	; (adr r2, 8004624 <W25qxx_Init+0x48>)
 800461e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004622:	bf00      	nop
 8004624:	080046e9 	.word	0x080046e9
 8004628:	080046db 	.word	0x080046db
 800462c:	080046cd 	.word	0x080046cd
 8004630:	080046bf 	.word	0x080046bf
 8004634:	080046b1 	.word	0x080046b1
 8004638:	080046a3 	.word	0x080046a3
 800463c:	08004695 	.word	0x08004695
 8004640:	08004685 	.word	0x08004685
 8004644:	08004675 	.word	0x08004675
 8004648:	080046f7 	.word	0x080046f7
 800464c:	080046f7 	.word	0x080046f7
 8004650:	080046f7 	.word	0x080046f7
 8004654:	080046f7 	.word	0x080046f7
 8004658:	080046f7 	.word	0x080046f7
 800465c:	080046f7 	.word	0x080046f7
 8004660:	08004665 	.word	0x08004665
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8004664:	4b44      	ldr	r3, [pc, #272]	; (8004778 <W25qxx_Init+0x19c>)
 8004666:	220a      	movs	r2, #10
 8004668:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 800466a:	4b43      	ldr	r3, [pc, #268]	; (8004778 <W25qxx_Init+0x19c>)
 800466c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004670:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8004672:	e046      	b.n	8004702 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8004674:	4b40      	ldr	r3, [pc, #256]	; (8004778 <W25qxx_Init+0x19c>)
 8004676:	2209      	movs	r2, #9
 8004678:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 800467a:	4b3f      	ldr	r3, [pc, #252]	; (8004778 <W25qxx_Init+0x19c>)
 800467c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004680:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8004682:	e03e      	b.n	8004702 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8004684:	4b3c      	ldr	r3, [pc, #240]	; (8004778 <W25qxx_Init+0x19c>)
 8004686:	2208      	movs	r2, #8
 8004688:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 800468a:	4b3b      	ldr	r3, [pc, #236]	; (8004778 <W25qxx_Init+0x19c>)
 800468c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004690:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8004692:	e036      	b.n	8004702 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8004694:	4b38      	ldr	r3, [pc, #224]	; (8004778 <W25qxx_Init+0x19c>)
 8004696:	2207      	movs	r2, #7
 8004698:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 800469a:	4b37      	ldr	r3, [pc, #220]	; (8004778 <W25qxx_Init+0x19c>)
 800469c:	2280      	movs	r2, #128	; 0x80
 800469e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 80046a0:	e02f      	b.n	8004702 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 80046a2:	4b35      	ldr	r3, [pc, #212]	; (8004778 <W25qxx_Init+0x19c>)
 80046a4:	2206      	movs	r2, #6
 80046a6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 80046a8:	4b33      	ldr	r3, [pc, #204]	; (8004778 <W25qxx_Init+0x19c>)
 80046aa:	2240      	movs	r2, #64	; 0x40
 80046ac:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 80046ae:	e028      	b.n	8004702 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 80046b0:	4b31      	ldr	r3, [pc, #196]	; (8004778 <W25qxx_Init+0x19c>)
 80046b2:	2205      	movs	r2, #5
 80046b4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 80046b6:	4b30      	ldr	r3, [pc, #192]	; (8004778 <W25qxx_Init+0x19c>)
 80046b8:	2220      	movs	r2, #32
 80046ba:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 80046bc:	e021      	b.n	8004702 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 80046be:	4b2e      	ldr	r3, [pc, #184]	; (8004778 <W25qxx_Init+0x19c>)
 80046c0:	2204      	movs	r2, #4
 80046c2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 80046c4:	4b2c      	ldr	r3, [pc, #176]	; (8004778 <W25qxx_Init+0x19c>)
 80046c6:	2210      	movs	r2, #16
 80046c8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 80046ca:	e01a      	b.n	8004702 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 80046cc:	4b2a      	ldr	r3, [pc, #168]	; (8004778 <W25qxx_Init+0x19c>)
 80046ce:	2203      	movs	r2, #3
 80046d0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 80046d2:	4b29      	ldr	r3, [pc, #164]	; (8004778 <W25qxx_Init+0x19c>)
 80046d4:	2208      	movs	r2, #8
 80046d6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 80046d8:	e013      	b.n	8004702 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 80046da:	4b27      	ldr	r3, [pc, #156]	; (8004778 <W25qxx_Init+0x19c>)
 80046dc:	2202      	movs	r2, #2
 80046de:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 80046e0:	4b25      	ldr	r3, [pc, #148]	; (8004778 <W25qxx_Init+0x19c>)
 80046e2:	2204      	movs	r2, #4
 80046e4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 80046e6:	e00c      	b.n	8004702 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 80046e8:	4b23      	ldr	r3, [pc, #140]	; (8004778 <W25qxx_Init+0x19c>)
 80046ea:	2201      	movs	r2, #1
 80046ec:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 80046ee:	4b22      	ldr	r3, [pc, #136]	; (8004778 <W25qxx_Init+0x19c>)
 80046f0:	2202      	movs	r2, #2
 80046f2:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 80046f4:	e005      	b.n	8004702 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 80046f6:	4b20      	ldr	r3, [pc, #128]	; (8004778 <W25qxx_Init+0x19c>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 80046fe:	2300      	movs	r3, #0
 8004700:	e036      	b.n	8004770 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8004702:	4b1d      	ldr	r3, [pc, #116]	; (8004778 <W25qxx_Init+0x19c>)
 8004704:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004708:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800470a:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <W25qxx_Init+0x19c>)
 800470c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004710:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8004712:	4b19      	ldr	r3, [pc, #100]	; (8004778 <W25qxx_Init+0x19c>)
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	011b      	lsls	r3, r3, #4
 8004718:	4a17      	ldr	r2, [pc, #92]	; (8004778 <W25qxx_Init+0x19c>)
 800471a:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800471c:	4b16      	ldr	r3, [pc, #88]	; (8004778 <W25qxx_Init+0x19c>)
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	4a15      	ldr	r2, [pc, #84]	; (8004778 <W25qxx_Init+0x19c>)
 8004722:	6912      	ldr	r2, [r2, #16]
 8004724:	fb02 f303 	mul.w	r3, r2, r3
 8004728:	4a13      	ldr	r2, [pc, #76]	; (8004778 <W25qxx_Init+0x19c>)
 800472a:	8952      	ldrh	r2, [r2, #10]
 800472c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004730:	4a11      	ldr	r2, [pc, #68]	; (8004778 <W25qxx_Init+0x19c>)
 8004732:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8004734:	4b10      	ldr	r3, [pc, #64]	; (8004778 <W25qxx_Init+0x19c>)
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	011b      	lsls	r3, r3, #4
 800473a:	4a0f      	ldr	r2, [pc, #60]	; (8004778 <W25qxx_Init+0x19c>)
 800473c:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 800473e:	4b0e      	ldr	r3, [pc, #56]	; (8004778 <W25qxx_Init+0x19c>)
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	4a0d      	ldr	r2, [pc, #52]	; (8004778 <W25qxx_Init+0x19c>)
 8004744:	6912      	ldr	r2, [r2, #16]
 8004746:	fb02 f303 	mul.w	r3, r2, r3
 800474a:	0a9b      	lsrs	r3, r3, #10
 800474c:	4a0a      	ldr	r2, [pc, #40]	; (8004778 <W25qxx_Init+0x19c>)
 800474e:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8004750:	f7ff fe88 	bl	8004464 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8004754:	2001      	movs	r0, #1
 8004756:	f7ff fed1 	bl	80044fc <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800475a:	2002      	movs	r0, #2
 800475c:	f7ff fece 	bl	80044fc <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8004760:	2003      	movs	r0, #3
 8004762:	f7ff fecb 	bl	80044fc <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8004766:	4b04      	ldr	r3, [pc, #16]	; (8004778 <W25qxx_Init+0x19c>)
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800476e:	2301      	movs	r3, #1
}
 8004770:	4618      	mov	r0, r3
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	2400086c 	.word	0x2400086c
 800477c:	58020400 	.word	0x58020400

08004780 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8004788:	e002      	b.n	8004790 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 800478a:	2001      	movs	r0, #1
 800478c:	f000 fae8 	bl	8004d60 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004790:	4b25      	ldr	r3, [pc, #148]	; (8004828 <W25qxx_EraseSector+0xa8>)
 8004792:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004796:	2b01      	cmp	r3, #1
 8004798:	d0f7      	beq.n	800478a <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 800479a:	4b23      	ldr	r3, [pc, #140]	; (8004828 <W25qxx_EraseSector+0xa8>)
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 80047a2:	f7ff fef1 	bl	8004588 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80047a6:	4b20      	ldr	r3, [pc, #128]	; (8004828 <W25qxx_EraseSector+0xa8>)
 80047a8:	691a      	ldr	r2, [r3, #16]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	fb02 f303 	mul.w	r3, r2, r3
 80047b0:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 80047b2:	f7ff fe8d 	bl	80044d0 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80047b6:	2200      	movs	r2, #0
 80047b8:	2140      	movs	r1, #64	; 0x40
 80047ba:	481c      	ldr	r0, [pc, #112]	; (800482c <W25qxx_EraseSector+0xac>)
 80047bc:	f003 fc14 	bl	8007fe8 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80047c0:	4b19      	ldr	r3, [pc, #100]	; (8004828 <W25qxx_EraseSector+0xa8>)
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d909      	bls.n	80047dc <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 80047c8:	2021      	movs	r0, #33	; 0x21
 80047ca:	f7ff fdff 	bl	80043cc <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	0e1b      	lsrs	r3, r3, #24
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff fdf9 	bl	80043cc <W25qxx_Spi>
 80047da:	e002      	b.n	80047e2 <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 80047dc:	2020      	movs	r0, #32
 80047de:	f7ff fdf5 	bl	80043cc <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	0c1b      	lsrs	r3, r3, #16
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7ff fdef 	bl	80043cc <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	0a1b      	lsrs	r3, r3, #8
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff fde9 	bl	80043cc <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff fde4 	bl	80043cc <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004804:	2201      	movs	r2, #1
 8004806:	2140      	movs	r1, #64	; 0x40
 8004808:	4808      	ldr	r0, [pc, #32]	; (800482c <W25qxx_EraseSector+0xac>)
 800480a:	f003 fbed 	bl	8007fe8 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800480e:	f7ff febb 	bl	8004588 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 8004812:	2001      	movs	r0, #1
 8004814:	f000 faa4 	bl	8004d60 <HAL_Delay>
	w25qxx.Lock = 0;
 8004818:	4b03      	ldr	r3, [pc, #12]	; (8004828 <W25qxx_EraseSector+0xa8>)
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004820:	bf00      	nop
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	2400086c 	.word	0x2400086c
 800482c:	58020400 	.word	0x58020400

08004830 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8004838:	4b07      	ldr	r3, [pc, #28]	; (8004858 <W25qxx_SectorToPage+0x28>)
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	fb02 f303 	mul.w	r3, r2, r3
 8004842:	4a05      	ldr	r2, [pc, #20]	; (8004858 <W25qxx_SectorToPage+0x28>)
 8004844:	8952      	ldrh	r2, [r2, #10]
 8004846:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800484a:	4618      	mov	r0, r3
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	2400086c 	.word	0x2400086c

0800485c <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
 8004868:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800486a:	e002      	b.n	8004872 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 800486c:	2001      	movs	r0, #1
 800486e:	f000 fa77 	bl	8004d60 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004872:	4b39      	ldr	r3, [pc, #228]	; (8004958 <W25qxx_WritePage+0xfc>)
 8004874:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004878:	2b01      	cmp	r3, #1
 800487a:	d0f7      	beq.n	800486c <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 800487c:	4b36      	ldr	r3, [pc, #216]	; (8004958 <W25qxx_WritePage+0xfc>)
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4413      	add	r3, r2
 800488a:	4a33      	ldr	r2, [pc, #204]	; (8004958 <W25qxx_WritePage+0xfc>)
 800488c:	8952      	ldrh	r2, [r2, #10]
 800488e:	4293      	cmp	r3, r2
 8004890:	d802      	bhi.n	8004898 <W25qxx_WritePage+0x3c>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d105      	bne.n	80048a4 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004898:	4b2f      	ldr	r3, [pc, #188]	; (8004958 <W25qxx_WritePage+0xfc>)
 800489a:	895b      	ldrh	r3, [r3, #10]
 800489c:	461a      	mov	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	4413      	add	r3, r2
 80048aa:	4a2b      	ldr	r2, [pc, #172]	; (8004958 <W25qxx_WritePage+0xfc>)
 80048ac:	8952      	ldrh	r2, [r2, #10]
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d905      	bls.n	80048be <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80048b2:	4b29      	ldr	r3, [pc, #164]	; (8004958 <W25qxx_WritePage+0xfc>)
 80048b4:	895b      	ldrh	r3, [r3, #10]
 80048b6:	461a      	mov	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 80048be:	f7ff fe63 	bl	8004588 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 80048c2:	f7ff fe05 	bl	80044d0 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80048c6:	2200      	movs	r2, #0
 80048c8:	2140      	movs	r1, #64	; 0x40
 80048ca:	4824      	ldr	r0, [pc, #144]	; (800495c <W25qxx_WritePage+0x100>)
 80048cc:	f003 fb8c 	bl	8007fe8 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 80048d0:	4b21      	ldr	r3, [pc, #132]	; (8004958 <W25qxx_WritePage+0xfc>)
 80048d2:	895b      	ldrh	r3, [r3, #10]
 80048d4:	461a      	mov	r2, r3
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	fb03 f302 	mul.w	r3, r3, r2
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	4413      	add	r3, r2
 80048e0:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 80048e2:	4b1d      	ldr	r3, [pc, #116]	; (8004958 <W25qxx_WritePage+0xfc>)
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	2b08      	cmp	r3, #8
 80048e8:	d909      	bls.n	80048fe <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 80048ea:	2012      	movs	r0, #18
 80048ec:	f7ff fd6e 	bl	80043cc <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	0e1b      	lsrs	r3, r3, #24
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff fd68 	bl	80043cc <W25qxx_Spi>
 80048fc:	e002      	b.n	8004904 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 80048fe:	2002      	movs	r0, #2
 8004900:	f7ff fd64 	bl	80043cc <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	0c1b      	lsrs	r3, r3, #16
 8004908:	b2db      	uxtb	r3, r3
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff fd5e 	bl	80043cc <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	0a1b      	lsrs	r3, r3, #8
 8004914:	b2db      	uxtb	r3, r3
 8004916:	4618      	mov	r0, r3
 8004918:	f7ff fd58 	bl	80043cc <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	b2db      	uxtb	r3, r3
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff fd53 	bl	80043cc <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	b29a      	uxth	r2, r3
 800492a:	2364      	movs	r3, #100	; 0x64
 800492c:	68f9      	ldr	r1, [r7, #12]
 800492e:	480c      	ldr	r0, [pc, #48]	; (8004960 <W25qxx_WritePage+0x104>)
 8004930:	f008 fa1c 	bl	800cd6c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004934:	2201      	movs	r2, #1
 8004936:	2140      	movs	r1, #64	; 0x40
 8004938:	4808      	ldr	r0, [pc, #32]	; (800495c <W25qxx_WritePage+0x100>)
 800493a:	f003 fb55 	bl	8007fe8 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800493e:	f7ff fe23 	bl	8004588 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8004942:	2001      	movs	r0, #1
 8004944:	f000 fa0c 	bl	8004d60 <HAL_Delay>
	w25qxx.Lock = 0;
 8004948:	4b03      	ldr	r3, [pc, #12]	; (8004958 <W25qxx_WritePage+0xfc>)
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004950:	bf00      	nop
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	2400086c 	.word	0x2400086c
 800495c:	58020400 	.word	0x58020400
 8004960:	240006d8 	.word	0x240006d8

08004964 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
 8004970:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8004972:	4b2c      	ldr	r3, [pc, #176]	; (8004a24 <W25qxx_WriteSector+0xc0>)
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	429a      	cmp	r2, r3
 800497a:	d802      	bhi.n	8004982 <W25qxx_WriteSector+0x1e>
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d102      	bne.n	8004988 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8004982:	4b28      	ldr	r3, [pc, #160]	; (8004a24 <W25qxx_WriteSector+0xc0>)
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004988:	4b26      	ldr	r3, [pc, #152]	; (8004a24 <W25qxx_WriteSector+0xc0>)
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	429a      	cmp	r2, r3
 8004990:	d243      	bcs.n	8004a1a <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	441a      	add	r2, r3
 8004998:	4b22      	ldr	r3, [pc, #136]	; (8004a24 <W25qxx_WriteSector+0xc0>)
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	429a      	cmp	r2, r3
 800499e:	d905      	bls.n	80049ac <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 80049a0:	4b20      	ldr	r3, [pc, #128]	; (8004a24 <W25qxx_WriteSector+0xc0>)
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	61bb      	str	r3, [r7, #24]
 80049aa:	e001      	b.n	80049b0 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80049b0:	68b8      	ldr	r0, [r7, #8]
 80049b2:	f7ff ff3d 	bl	8004830 <W25qxx_SectorToPage>
 80049b6:	4602      	mov	r2, r0
 80049b8:	4b1a      	ldr	r3, [pc, #104]	; (8004a24 <W25qxx_WriteSector+0xc0>)
 80049ba:	895b      	ldrh	r3, [r3, #10]
 80049bc:	4619      	mov	r1, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80049c4:	4413      	add	r3, r2
 80049c6:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80049c8:	4b16      	ldr	r3, [pc, #88]	; (8004a24 <W25qxx_WriteSector+0xc0>)
 80049ca:	895b      	ldrh	r3, [r3, #10]
 80049cc:	461a      	mov	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80049d4:	fb02 f201 	mul.w	r2, r2, r1
 80049d8:	1a9b      	subs	r3, r3, r2
 80049da:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	69f9      	ldr	r1, [r7, #28]
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f7ff ff3a 	bl	800485c <W25qxx_WritePage>
		StartPage++;
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	3301      	adds	r3, #1
 80049ec:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80049ee:	4b0d      	ldr	r3, [pc, #52]	; (8004a24 <W25qxx_WriteSector+0xc0>)
 80049f0:	895b      	ldrh	r3, [r3, #10]
 80049f2:	461a      	mov	r2, r3
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	1a9a      	subs	r2, r3, r2
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	4413      	add	r3, r2
 80049fc:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80049fe:	4b09      	ldr	r3, [pc, #36]	; (8004a24 <W25qxx_WriteSector+0xc0>)
 8004a00:	895b      	ldrh	r3, [r3, #10]
 8004a02:	461a      	mov	r2, r3
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	dce1      	bgt.n	80049dc <W25qxx_WriteSector+0x78>
 8004a18:	e000      	b.n	8004a1c <W25qxx_WriteSector+0xb8>
		return;
 8004a1a:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8004a1c:	3720      	adds	r7, #32
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	2400086c 	.word	0x2400086c

08004a28 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004a36:	e002      	b.n	8004a3e <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8004a38:	2001      	movs	r0, #1
 8004a3a:	f000 f991 	bl	8004d60 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004a3e:	4b36      	ldr	r3, [pc, #216]	; (8004b18 <W25qxx_ReadPage+0xf0>)
 8004a40:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d0f7      	beq.n	8004a38 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8004a48:	4b33      	ldr	r3, [pc, #204]	; (8004b18 <W25qxx_ReadPage+0xf0>)
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8004a50:	4b31      	ldr	r3, [pc, #196]	; (8004b18 <W25qxx_ReadPage+0xf0>)
 8004a52:	895b      	ldrh	r3, [r3, #10]
 8004a54:	461a      	mov	r2, r3
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d802      	bhi.n	8004a62 <W25qxx_ReadPage+0x3a>
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d102      	bne.n	8004a68 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8004a62:	4b2d      	ldr	r3, [pc, #180]	; (8004b18 <W25qxx_ReadPage+0xf0>)
 8004a64:	895b      	ldrh	r3, [r3, #10]
 8004a66:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	4a2a      	ldr	r2, [pc, #168]	; (8004b18 <W25qxx_ReadPage+0xf0>)
 8004a70:	8952      	ldrh	r2, [r2, #10]
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d905      	bls.n	8004a82 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004a76:	4b28      	ldr	r3, [pc, #160]	; (8004b18 <W25qxx_ReadPage+0xf0>)
 8004a78:	895b      	ldrh	r3, [r3, #10]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8004a82:	4b25      	ldr	r3, [pc, #148]	; (8004b18 <W25qxx_ReadPage+0xf0>)
 8004a84:	895b      	ldrh	r3, [r3, #10]
 8004a86:	461a      	mov	r2, r3
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	fb03 f302 	mul.w	r3, r3, r2
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	4413      	add	r3, r2
 8004a92:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004a94:	2200      	movs	r2, #0
 8004a96:	2140      	movs	r1, #64	; 0x40
 8004a98:	4820      	ldr	r0, [pc, #128]	; (8004b1c <W25qxx_ReadPage+0xf4>)
 8004a9a:	f003 faa5 	bl	8007fe8 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004a9e:	4b1e      	ldr	r3, [pc, #120]	; (8004b18 <W25qxx_ReadPage+0xf0>)
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	2b08      	cmp	r3, #8
 8004aa4:	d909      	bls.n	8004aba <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 8004aa6:	200c      	movs	r0, #12
 8004aa8:	f7ff fc90 	bl	80043cc <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	0e1b      	lsrs	r3, r3, #24
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff fc8a 	bl	80043cc <W25qxx_Spi>
 8004ab8:	e002      	b.n	8004ac0 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8004aba:	200b      	movs	r0, #11
 8004abc:	f7ff fc86 	bl	80043cc <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	0c1b      	lsrs	r3, r3, #16
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff fc80 	bl	80043cc <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	0a1b      	lsrs	r3, r3, #8
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff fc7a 	bl	80043cc <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7ff fc75 	bl	80043cc <W25qxx_Spi>
	W25qxx_Spi(0);
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	f7ff fc72 	bl	80043cc <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	2364      	movs	r3, #100	; 0x64
 8004aee:	68f9      	ldr	r1, [r7, #12]
 8004af0:	480b      	ldr	r0, [pc, #44]	; (8004b20 <W25qxx_ReadPage+0xf8>)
 8004af2:	f008 fb2d 	bl	800d150 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004af6:	2201      	movs	r2, #1
 8004af8:	2140      	movs	r1, #64	; 0x40
 8004afa:	4808      	ldr	r0, [pc, #32]	; (8004b1c <W25qxx_ReadPage+0xf4>)
 8004afc:	f003 fa74 	bl	8007fe8 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8004b00:	2001      	movs	r0, #1
 8004b02:	f000 f92d 	bl	8004d60 <HAL_Delay>
	w25qxx.Lock = 0;
 8004b06:	4b04      	ldr	r3, [pc, #16]	; (8004b18 <W25qxx_ReadPage+0xf0>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004b0e:	bf00      	nop
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	2400086c 	.word	0x2400086c
 8004b1c:	58020400 	.word	0x58020400
 8004b20:	240006d8 	.word	0x240006d8

08004b24 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8004b32:	4b2c      	ldr	r3, [pc, #176]	; (8004be4 <W25qxx_ReadSector+0xc0>)
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d802      	bhi.n	8004b42 <W25qxx_ReadSector+0x1e>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d102      	bne.n	8004b48 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8004b42:	4b28      	ldr	r3, [pc, #160]	; (8004be4 <W25qxx_ReadSector+0xc0>)
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004b48:	4b26      	ldr	r3, [pc, #152]	; (8004be4 <W25qxx_ReadSector+0xc0>)
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d243      	bcs.n	8004bda <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	441a      	add	r2, r3
 8004b58:	4b22      	ldr	r3, [pc, #136]	; (8004be4 <W25qxx_ReadSector+0xc0>)
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d905      	bls.n	8004b6c <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8004b60:	4b20      	ldr	r3, [pc, #128]	; (8004be4 <W25qxx_ReadSector+0xc0>)
 8004b62:	691a      	ldr	r2, [r3, #16]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	61bb      	str	r3, [r7, #24]
 8004b6a:	e001      	b.n	8004b70 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004b70:	68b8      	ldr	r0, [r7, #8]
 8004b72:	f7ff fe5d 	bl	8004830 <W25qxx_SectorToPage>
 8004b76:	4602      	mov	r2, r0
 8004b78:	4b1a      	ldr	r3, [pc, #104]	; (8004be4 <W25qxx_ReadSector+0xc0>)
 8004b7a:	895b      	ldrh	r3, [r3, #10]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b84:	4413      	add	r3, r2
 8004b86:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004b88:	4b16      	ldr	r3, [pc, #88]	; (8004be4 <W25qxx_ReadSector+0xc0>)
 8004b8a:	895b      	ldrh	r3, [r3, #10]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b94:	fb02 f201 	mul.w	r2, r2, r1
 8004b98:	1a9b      	subs	r3, r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	69f9      	ldr	r1, [r7, #28]
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f7ff ff40 	bl	8004a28 <W25qxx_ReadPage>
		StartPage++;
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	3301      	adds	r3, #1
 8004bac:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8004bae:	4b0d      	ldr	r3, [pc, #52]	; (8004be4 <W25qxx_ReadSector+0xc0>)
 8004bb0:	895b      	ldrh	r3, [r3, #10]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	1a9a      	subs	r2, r3, r2
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	4413      	add	r3, r2
 8004bbc:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004bbe:	4b09      	ldr	r3, [pc, #36]	; (8004be4 <W25qxx_ReadSector+0xc0>)
 8004bc0:	895b      	ldrh	r3, [r3, #10]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	4413      	add	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	dce1      	bgt.n	8004b9c <W25qxx_ReadSector+0x78>
 8004bd8:	e000      	b.n	8004bdc <W25qxx_ReadSector+0xb8>
		return;
 8004bda:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8004bdc:	3720      	adds	r7, #32
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	2400086c 	.word	0x2400086c

08004be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004bec:	f7ff fb62 	bl	80042b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004bf0:	480c      	ldr	r0, [pc, #48]	; (8004c24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004bf2:	490d      	ldr	r1, [pc, #52]	; (8004c28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004bf4:	4a0d      	ldr	r2, [pc, #52]	; (8004c2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004bf8:	e002      	b.n	8004c00 <LoopCopyDataInit>

08004bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bfe:	3304      	adds	r3, #4

08004c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c04:	d3f9      	bcc.n	8004bfa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c06:	4a0a      	ldr	r2, [pc, #40]	; (8004c30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004c08:	4c0a      	ldr	r4, [pc, #40]	; (8004c34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c0c:	e001      	b.n	8004c12 <LoopFillZerobss>

08004c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c10:	3204      	adds	r2, #4

08004c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c14:	d3fb      	bcc.n	8004c0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004c16:	f00b fd57 	bl	80106c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c1a:	f7fd ffeb 	bl	8002bf4 <main>
  bx  lr
 8004c1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004c20:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004c24:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004c28:	240001f8 	.word	0x240001f8
  ldr r2, =_sidata
 8004c2c:	08013f70 	.word	0x08013f70
  ldr r2, =_sbss
 8004c30:	240001f8 	.word	0x240001f8
  ldr r4, =_ebss
 8004c34:	240008a8 	.word	0x240008a8

08004c38 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c38:	e7fe      	b.n	8004c38 <ADC3_IRQHandler>
	...

08004c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c42:	2003      	movs	r0, #3
 8004c44:	f000 f98c 	bl	8004f60 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004c48:	f006 fa56 	bl	800b0f8 <HAL_RCC_GetSysClockFreq>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	4b15      	ldr	r3, [pc, #84]	; (8004ca4 <HAL_Init+0x68>)
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	0a1b      	lsrs	r3, r3, #8
 8004c54:	f003 030f 	and.w	r3, r3, #15
 8004c58:	4913      	ldr	r1, [pc, #76]	; (8004ca8 <HAL_Init+0x6c>)
 8004c5a:	5ccb      	ldrb	r3, [r1, r3]
 8004c5c:	f003 031f 	and.w	r3, r3, #31
 8004c60:	fa22 f303 	lsr.w	r3, r2, r3
 8004c64:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c66:	4b0f      	ldr	r3, [pc, #60]	; (8004ca4 <HAL_Init+0x68>)
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	f003 030f 	and.w	r3, r3, #15
 8004c6e:	4a0e      	ldr	r2, [pc, #56]	; (8004ca8 <HAL_Init+0x6c>)
 8004c70:	5cd3      	ldrb	r3, [r2, r3]
 8004c72:	f003 031f 	and.w	r3, r3, #31
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	fa22 f303 	lsr.w	r3, r2, r3
 8004c7c:	4a0b      	ldr	r2, [pc, #44]	; (8004cac <HAL_Init+0x70>)
 8004c7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c80:	4a0b      	ldr	r2, [pc, #44]	; (8004cb0 <HAL_Init+0x74>)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004c86:	200f      	movs	r0, #15
 8004c88:	f000 f814 	bl	8004cb4 <HAL_InitTick>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e002      	b.n	8004c9c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004c96:	f7fe fd97 	bl	80037c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	58024400 	.word	0x58024400
 8004ca8:	08013a94 	.word	0x08013a94
 8004cac:	24000018 	.word	0x24000018
 8004cb0:	24000014 	.word	0x24000014

08004cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004cbc:	4b15      	ldr	r3, [pc, #84]	; (8004d14 <HAL_InitTick+0x60>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e021      	b.n	8004d0c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004cc8:	4b13      	ldr	r3, [pc, #76]	; (8004d18 <HAL_InitTick+0x64>)
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	4b11      	ldr	r3, [pc, #68]	; (8004d14 <HAL_InitTick+0x60>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 f971 	bl	8004fc6 <HAL_SYSTICK_Config>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e00e      	b.n	8004d0c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b0f      	cmp	r3, #15
 8004cf2:	d80a      	bhi.n	8004d0a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	6879      	ldr	r1, [r7, #4]
 8004cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cfc:	f000 f93b 	bl	8004f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d00:	4a06      	ldr	r2, [pc, #24]	; (8004d1c <HAL_InitTick+0x68>)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	e000      	b.n	8004d0c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	24000020 	.word	0x24000020
 8004d18:	24000014 	.word	0x24000014
 8004d1c:	2400001c 	.word	0x2400001c

08004d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004d24:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <HAL_IncTick+0x20>)
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <HAL_IncTick+0x24>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4413      	add	r3, r2
 8004d30:	4a04      	ldr	r2, [pc, #16]	; (8004d44 <HAL_IncTick+0x24>)
 8004d32:	6013      	str	r3, [r2, #0]
}
 8004d34:	bf00      	nop
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	24000020 	.word	0x24000020
 8004d44:	24000894 	.word	0x24000894

08004d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8004d4c:	4b03      	ldr	r3, [pc, #12]	; (8004d5c <HAL_GetTick+0x14>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	24000894 	.word	0x24000894

08004d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d68:	f7ff ffee 	bl	8004d48 <HAL_GetTick>
 8004d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d78:	d005      	beq.n	8004d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d7a:	4b0a      	ldr	r3, [pc, #40]	; (8004da4 <HAL_Delay+0x44>)
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4413      	add	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d86:	bf00      	nop
 8004d88:	f7ff ffde 	bl	8004d48 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d8f7      	bhi.n	8004d88 <HAL_Delay+0x28>
  {
  }
}
 8004d98:	bf00      	nop
 8004d9a:	bf00      	nop
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	24000020 	.word	0x24000020

08004da8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004dac:	4b03      	ldr	r3, [pc, #12]	; (8004dbc <HAL_GetREVID+0x14>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	0c1b      	lsrs	r3, r3, #16
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	5c001000 	.word	0x5c001000

08004dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <__NVIC_SetPriorityGrouping+0x40>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ddc:	4013      	ands	r3, r2
 8004dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004de8:	4b06      	ldr	r3, [pc, #24]	; (8004e04 <__NVIC_SetPriorityGrouping+0x44>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dee:	4a04      	ldr	r2, [pc, #16]	; (8004e00 <__NVIC_SetPriorityGrouping+0x40>)
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	60d3      	str	r3, [r2, #12]
}
 8004df4:	bf00      	nop
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	e000ed00 	.word	0xe000ed00
 8004e04:	05fa0000 	.word	0x05fa0000

08004e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e0c:	4b04      	ldr	r3, [pc, #16]	; (8004e20 <__NVIC_GetPriorityGrouping+0x18>)
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	0a1b      	lsrs	r3, r3, #8
 8004e12:	f003 0307 	and.w	r3, r3, #7
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	e000ed00 	.word	0xe000ed00

08004e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	db0b      	blt.n	8004e4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e36:	88fb      	ldrh	r3, [r7, #6]
 8004e38:	f003 021f 	and.w	r2, r3, #31
 8004e3c:	4907      	ldr	r1, [pc, #28]	; (8004e5c <__NVIC_EnableIRQ+0x38>)
 8004e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e42:	095b      	lsrs	r3, r3, #5
 8004e44:	2001      	movs	r0, #1
 8004e46:	fa00 f202 	lsl.w	r2, r0, r2
 8004e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	e000e100 	.word	0xe000e100

08004e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	4603      	mov	r3, r0
 8004e68:	6039      	str	r1, [r7, #0]
 8004e6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	db0a      	blt.n	8004e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	490c      	ldr	r1, [pc, #48]	; (8004eac <__NVIC_SetPriority+0x4c>)
 8004e7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e7e:	0112      	lsls	r2, r2, #4
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	440b      	add	r3, r1
 8004e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e88:	e00a      	b.n	8004ea0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	4908      	ldr	r1, [pc, #32]	; (8004eb0 <__NVIC_SetPriority+0x50>)
 8004e90:	88fb      	ldrh	r3, [r7, #6]
 8004e92:	f003 030f 	and.w	r3, r3, #15
 8004e96:	3b04      	subs	r3, #4
 8004e98:	0112      	lsls	r2, r2, #4
 8004e9a:	b2d2      	uxtb	r2, r2
 8004e9c:	440b      	add	r3, r1
 8004e9e:	761a      	strb	r2, [r3, #24]
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	e000e100 	.word	0xe000e100
 8004eb0:	e000ed00 	.word	0xe000ed00

08004eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b089      	sub	sp, #36	; 0x24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f003 0307 	and.w	r3, r3, #7
 8004ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	f1c3 0307 	rsb	r3, r3, #7
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	bf28      	it	cs
 8004ed2:	2304      	movcs	r3, #4
 8004ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	2b06      	cmp	r3, #6
 8004edc:	d902      	bls.n	8004ee4 <NVIC_EncodePriority+0x30>
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	3b03      	subs	r3, #3
 8004ee2:	e000      	b.n	8004ee6 <NVIC_EncodePriority+0x32>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef2:	43da      	mvns	r2, r3
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	401a      	ands	r2, r3
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004efc:	f04f 31ff 	mov.w	r1, #4294967295
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	fa01 f303 	lsl.w	r3, r1, r3
 8004f06:	43d9      	mvns	r1, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f0c:	4313      	orrs	r3, r2
         );
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3724      	adds	r7, #36	; 0x24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
	...

08004f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f2c:	d301      	bcc.n	8004f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e00f      	b.n	8004f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f32:	4a0a      	ldr	r2, [pc, #40]	; (8004f5c <SysTick_Config+0x40>)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3b01      	subs	r3, #1
 8004f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f3a:	210f      	movs	r1, #15
 8004f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f40:	f7ff ff8e 	bl	8004e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f44:	4b05      	ldr	r3, [pc, #20]	; (8004f5c <SysTick_Config+0x40>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f4a:	4b04      	ldr	r3, [pc, #16]	; (8004f5c <SysTick_Config+0x40>)
 8004f4c:	2207      	movs	r2, #7
 8004f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	e000e010 	.word	0xe000e010

08004f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7ff ff29 	bl	8004dc0 <__NVIC_SetPriorityGrouping>
}
 8004f6e:	bf00      	nop
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b086      	sub	sp, #24
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	60b9      	str	r1, [r7, #8]
 8004f80:	607a      	str	r2, [r7, #4]
 8004f82:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f84:	f7ff ff40 	bl	8004e08 <__NVIC_GetPriorityGrouping>
 8004f88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	68b9      	ldr	r1, [r7, #8]
 8004f8e:	6978      	ldr	r0, [r7, #20]
 8004f90:	f7ff ff90 	bl	8004eb4 <NVIC_EncodePriority>
 8004f94:	4602      	mov	r2, r0
 8004f96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f9a:	4611      	mov	r1, r2
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff ff5f 	bl	8004e60 <__NVIC_SetPriority>
}
 8004fa2:	bf00      	nop
 8004fa4:	3718      	adds	r7, #24
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b082      	sub	sp, #8
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff ff33 	bl	8004e24 <__NVIC_EnableIRQ>
}
 8004fbe:	bf00      	nop
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b082      	sub	sp, #8
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7ff ffa4 	bl	8004f1c <SysTick_Config>
 8004fd4:	4603      	mov	r3, r0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004fe8:	f7ff feae 	bl	8004d48 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e316      	b.n	8005626 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a66      	ldr	r2, [pc, #408]	; (8005198 <HAL_DMA_Init+0x1b8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d04a      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a65      	ldr	r2, [pc, #404]	; (800519c <HAL_DMA_Init+0x1bc>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d045      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a63      	ldr	r2, [pc, #396]	; (80051a0 <HAL_DMA_Init+0x1c0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d040      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a62      	ldr	r2, [pc, #392]	; (80051a4 <HAL_DMA_Init+0x1c4>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d03b      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a60      	ldr	r2, [pc, #384]	; (80051a8 <HAL_DMA_Init+0x1c8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d036      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a5f      	ldr	r2, [pc, #380]	; (80051ac <HAL_DMA_Init+0x1cc>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d031      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a5d      	ldr	r2, [pc, #372]	; (80051b0 <HAL_DMA_Init+0x1d0>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d02c      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a5c      	ldr	r2, [pc, #368]	; (80051b4 <HAL_DMA_Init+0x1d4>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d027      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a5a      	ldr	r2, [pc, #360]	; (80051b8 <HAL_DMA_Init+0x1d8>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d022      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a59      	ldr	r2, [pc, #356]	; (80051bc <HAL_DMA_Init+0x1dc>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d01d      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a57      	ldr	r2, [pc, #348]	; (80051c0 <HAL_DMA_Init+0x1e0>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d018      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a56      	ldr	r2, [pc, #344]	; (80051c4 <HAL_DMA_Init+0x1e4>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d013      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a54      	ldr	r2, [pc, #336]	; (80051c8 <HAL_DMA_Init+0x1e8>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d00e      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a53      	ldr	r2, [pc, #332]	; (80051cc <HAL_DMA_Init+0x1ec>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d009      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a51      	ldr	r2, [pc, #324]	; (80051d0 <HAL_DMA_Init+0x1f0>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d004      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a50      	ldr	r2, [pc, #320]	; (80051d4 <HAL_DMA_Init+0x1f4>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d101      	bne.n	800509c <HAL_DMA_Init+0xbc>
 8005098:	2301      	movs	r3, #1
 800509a:	e000      	b.n	800509e <HAL_DMA_Init+0xbe>
 800509c:	2300      	movs	r3, #0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 813b 	beq.w	800531a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a37      	ldr	r2, [pc, #220]	; (8005198 <HAL_DMA_Init+0x1b8>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d04a      	beq.n	8005154 <HAL_DMA_Init+0x174>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a36      	ldr	r2, [pc, #216]	; (800519c <HAL_DMA_Init+0x1bc>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d045      	beq.n	8005154 <HAL_DMA_Init+0x174>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a34      	ldr	r2, [pc, #208]	; (80051a0 <HAL_DMA_Init+0x1c0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d040      	beq.n	8005154 <HAL_DMA_Init+0x174>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a33      	ldr	r2, [pc, #204]	; (80051a4 <HAL_DMA_Init+0x1c4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d03b      	beq.n	8005154 <HAL_DMA_Init+0x174>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a31      	ldr	r2, [pc, #196]	; (80051a8 <HAL_DMA_Init+0x1c8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d036      	beq.n	8005154 <HAL_DMA_Init+0x174>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a30      	ldr	r2, [pc, #192]	; (80051ac <HAL_DMA_Init+0x1cc>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d031      	beq.n	8005154 <HAL_DMA_Init+0x174>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a2e      	ldr	r2, [pc, #184]	; (80051b0 <HAL_DMA_Init+0x1d0>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d02c      	beq.n	8005154 <HAL_DMA_Init+0x174>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a2d      	ldr	r2, [pc, #180]	; (80051b4 <HAL_DMA_Init+0x1d4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d027      	beq.n	8005154 <HAL_DMA_Init+0x174>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a2b      	ldr	r2, [pc, #172]	; (80051b8 <HAL_DMA_Init+0x1d8>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d022      	beq.n	8005154 <HAL_DMA_Init+0x174>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a2a      	ldr	r2, [pc, #168]	; (80051bc <HAL_DMA_Init+0x1dc>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d01d      	beq.n	8005154 <HAL_DMA_Init+0x174>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a28      	ldr	r2, [pc, #160]	; (80051c0 <HAL_DMA_Init+0x1e0>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d018      	beq.n	8005154 <HAL_DMA_Init+0x174>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a27      	ldr	r2, [pc, #156]	; (80051c4 <HAL_DMA_Init+0x1e4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d013      	beq.n	8005154 <HAL_DMA_Init+0x174>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a25      	ldr	r2, [pc, #148]	; (80051c8 <HAL_DMA_Init+0x1e8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00e      	beq.n	8005154 <HAL_DMA_Init+0x174>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a24      	ldr	r2, [pc, #144]	; (80051cc <HAL_DMA_Init+0x1ec>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d009      	beq.n	8005154 <HAL_DMA_Init+0x174>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a22      	ldr	r2, [pc, #136]	; (80051d0 <HAL_DMA_Init+0x1f0>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d004      	beq.n	8005154 <HAL_DMA_Init+0x174>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a21      	ldr	r2, [pc, #132]	; (80051d4 <HAL_DMA_Init+0x1f4>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d108      	bne.n	8005166 <HAL_DMA_Init+0x186>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0201 	bic.w	r2, r2, #1
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	e007      	b.n	8005176 <HAL_DMA_Init+0x196>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0201 	bic.w	r2, r2, #1
 8005174:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005176:	e02f      	b.n	80051d8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005178:	f7ff fde6 	bl	8004d48 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b05      	cmp	r3, #5
 8005184:	d928      	bls.n	80051d8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2220      	movs	r2, #32
 800518a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2203      	movs	r2, #3
 8005190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e246      	b.n	8005626 <HAL_DMA_Init+0x646>
 8005198:	40020010 	.word	0x40020010
 800519c:	40020028 	.word	0x40020028
 80051a0:	40020040 	.word	0x40020040
 80051a4:	40020058 	.word	0x40020058
 80051a8:	40020070 	.word	0x40020070
 80051ac:	40020088 	.word	0x40020088
 80051b0:	400200a0 	.word	0x400200a0
 80051b4:	400200b8 	.word	0x400200b8
 80051b8:	40020410 	.word	0x40020410
 80051bc:	40020428 	.word	0x40020428
 80051c0:	40020440 	.word	0x40020440
 80051c4:	40020458 	.word	0x40020458
 80051c8:	40020470 	.word	0x40020470
 80051cc:	40020488 	.word	0x40020488
 80051d0:	400204a0 	.word	0x400204a0
 80051d4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1c8      	bne.n	8005178 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	4b83      	ldr	r3, [pc, #524]	; (8005400 <HAL_DMA_Init+0x420>)
 80051f2:	4013      	ands	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80051fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800520a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005216:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4313      	orrs	r3, r2
 8005222:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	2b04      	cmp	r3, #4
 800522a:	d107      	bne.n	800523c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005234:	4313      	orrs	r3, r2
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	4313      	orrs	r3, r2
 800523a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800523c:	4b71      	ldr	r3, [pc, #452]	; (8005404 <HAL_DMA_Init+0x424>)
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	4b71      	ldr	r3, [pc, #452]	; (8005408 <HAL_DMA_Init+0x428>)
 8005242:	4013      	ands	r3, r2
 8005244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005248:	d328      	bcc.n	800529c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b28      	cmp	r3, #40	; 0x28
 8005250:	d903      	bls.n	800525a <HAL_DMA_Init+0x27a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2b2e      	cmp	r3, #46	; 0x2e
 8005258:	d917      	bls.n	800528a <HAL_DMA_Init+0x2aa>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2b3e      	cmp	r3, #62	; 0x3e
 8005260:	d903      	bls.n	800526a <HAL_DMA_Init+0x28a>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	2b42      	cmp	r3, #66	; 0x42
 8005268:	d90f      	bls.n	800528a <HAL_DMA_Init+0x2aa>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	2b46      	cmp	r3, #70	; 0x46
 8005270:	d903      	bls.n	800527a <HAL_DMA_Init+0x29a>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2b48      	cmp	r3, #72	; 0x48
 8005278:	d907      	bls.n	800528a <HAL_DMA_Init+0x2aa>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2b4e      	cmp	r3, #78	; 0x4e
 8005280:	d905      	bls.n	800528e <HAL_DMA_Init+0x2ae>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	2b52      	cmp	r3, #82	; 0x52
 8005288:	d801      	bhi.n	800528e <HAL_DMA_Init+0x2ae>
 800528a:	2301      	movs	r3, #1
 800528c:	e000      	b.n	8005290 <HAL_DMA_Init+0x2b0>
 800528e:	2300      	movs	r3, #0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800529a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f023 0307 	bic.w	r3, r3, #7
 80052b2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d117      	bne.n	80052f6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00e      	beq.n	80052f6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f002 fb4b 	bl	8007974 <DMA_CheckFifoParam>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d008      	beq.n	80052f6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2240      	movs	r2, #64	; 0x40
 80052e8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e197      	b.n	8005626 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f002 fa86 	bl	8007810 <DMA_CalcBaseAndBitshift>
 8005304:	4603      	mov	r3, r0
 8005306:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800530c:	f003 031f 	and.w	r3, r3, #31
 8005310:	223f      	movs	r2, #63	; 0x3f
 8005312:	409a      	lsls	r2, r3
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	609a      	str	r2, [r3, #8]
 8005318:	e0cd      	b.n	80054b6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a3b      	ldr	r2, [pc, #236]	; (800540c <HAL_DMA_Init+0x42c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d022      	beq.n	800536a <HAL_DMA_Init+0x38a>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a39      	ldr	r2, [pc, #228]	; (8005410 <HAL_DMA_Init+0x430>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d01d      	beq.n	800536a <HAL_DMA_Init+0x38a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a38      	ldr	r2, [pc, #224]	; (8005414 <HAL_DMA_Init+0x434>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d018      	beq.n	800536a <HAL_DMA_Init+0x38a>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a36      	ldr	r2, [pc, #216]	; (8005418 <HAL_DMA_Init+0x438>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d013      	beq.n	800536a <HAL_DMA_Init+0x38a>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a35      	ldr	r2, [pc, #212]	; (800541c <HAL_DMA_Init+0x43c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d00e      	beq.n	800536a <HAL_DMA_Init+0x38a>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a33      	ldr	r2, [pc, #204]	; (8005420 <HAL_DMA_Init+0x440>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d009      	beq.n	800536a <HAL_DMA_Init+0x38a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a32      	ldr	r2, [pc, #200]	; (8005424 <HAL_DMA_Init+0x444>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d004      	beq.n	800536a <HAL_DMA_Init+0x38a>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a30      	ldr	r2, [pc, #192]	; (8005428 <HAL_DMA_Init+0x448>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d101      	bne.n	800536e <HAL_DMA_Init+0x38e>
 800536a:	2301      	movs	r3, #1
 800536c:	e000      	b.n	8005370 <HAL_DMA_Init+0x390>
 800536e:	2300      	movs	r3, #0
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 8097 	beq.w	80054a4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a24      	ldr	r2, [pc, #144]	; (800540c <HAL_DMA_Init+0x42c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d021      	beq.n	80053c4 <HAL_DMA_Init+0x3e4>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a22      	ldr	r2, [pc, #136]	; (8005410 <HAL_DMA_Init+0x430>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d01c      	beq.n	80053c4 <HAL_DMA_Init+0x3e4>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a21      	ldr	r2, [pc, #132]	; (8005414 <HAL_DMA_Init+0x434>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d017      	beq.n	80053c4 <HAL_DMA_Init+0x3e4>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a1f      	ldr	r2, [pc, #124]	; (8005418 <HAL_DMA_Init+0x438>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d012      	beq.n	80053c4 <HAL_DMA_Init+0x3e4>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a1e      	ldr	r2, [pc, #120]	; (800541c <HAL_DMA_Init+0x43c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d00d      	beq.n	80053c4 <HAL_DMA_Init+0x3e4>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a1c      	ldr	r2, [pc, #112]	; (8005420 <HAL_DMA_Init+0x440>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d008      	beq.n	80053c4 <HAL_DMA_Init+0x3e4>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a1b      	ldr	r2, [pc, #108]	; (8005424 <HAL_DMA_Init+0x444>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d003      	beq.n	80053c4 <HAL_DMA_Init+0x3e4>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a19      	ldr	r2, [pc, #100]	; (8005428 <HAL_DMA_Init+0x448>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2202      	movs	r2, #2
 80053d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4b12      	ldr	r3, [pc, #72]	; (800542c <HAL_DMA_Init+0x44c>)
 80053e2:	4013      	ands	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	2b40      	cmp	r3, #64	; 0x40
 80053ec:	d020      	beq.n	8005430 <HAL_DMA_Init+0x450>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	2b80      	cmp	r3, #128	; 0x80
 80053f4:	d102      	bne.n	80053fc <HAL_DMA_Init+0x41c>
 80053f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80053fa:	e01a      	b.n	8005432 <HAL_DMA_Init+0x452>
 80053fc:	2300      	movs	r3, #0
 80053fe:	e018      	b.n	8005432 <HAL_DMA_Init+0x452>
 8005400:	fe10803f 	.word	0xfe10803f
 8005404:	5c001000 	.word	0x5c001000
 8005408:	ffff0000 	.word	0xffff0000
 800540c:	58025408 	.word	0x58025408
 8005410:	5802541c 	.word	0x5802541c
 8005414:	58025430 	.word	0x58025430
 8005418:	58025444 	.word	0x58025444
 800541c:	58025458 	.word	0x58025458
 8005420:	5802546c 	.word	0x5802546c
 8005424:	58025480 	.word	0x58025480
 8005428:	58025494 	.word	0x58025494
 800542c:	fffe000f 	.word	0xfffe000f
 8005430:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	68d2      	ldr	r2, [r2, #12]
 8005436:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005438:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005440:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005448:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005450:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005458:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005460:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	4313      	orrs	r3, r2
 8005466:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	461a      	mov	r2, r3
 8005476:	4b6e      	ldr	r3, [pc, #440]	; (8005630 <HAL_DMA_Init+0x650>)
 8005478:	4413      	add	r3, r2
 800547a:	4a6e      	ldr	r2, [pc, #440]	; (8005634 <HAL_DMA_Init+0x654>)
 800547c:	fba2 2303 	umull	r2, r3, r2, r3
 8005480:	091b      	lsrs	r3, r3, #4
 8005482:	009a      	lsls	r2, r3, #2
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f002 f9c1 	bl	8007810 <DMA_CalcBaseAndBitshift>
 800548e:	4603      	mov	r3, r0
 8005490:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005496:	f003 031f 	and.w	r3, r3, #31
 800549a:	2201      	movs	r2, #1
 800549c:	409a      	lsls	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	605a      	str	r2, [r3, #4]
 80054a2:	e008      	b.n	80054b6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2240      	movs	r2, #64	; 0x40
 80054a8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2203      	movs	r2, #3
 80054ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e0b7      	b.n	8005626 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a5f      	ldr	r2, [pc, #380]	; (8005638 <HAL_DMA_Init+0x658>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d072      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a5d      	ldr	r2, [pc, #372]	; (800563c <HAL_DMA_Init+0x65c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d06d      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a5c      	ldr	r2, [pc, #368]	; (8005640 <HAL_DMA_Init+0x660>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d068      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a5a      	ldr	r2, [pc, #360]	; (8005644 <HAL_DMA_Init+0x664>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d063      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a59      	ldr	r2, [pc, #356]	; (8005648 <HAL_DMA_Init+0x668>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d05e      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a57      	ldr	r2, [pc, #348]	; (800564c <HAL_DMA_Init+0x66c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d059      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a56      	ldr	r2, [pc, #344]	; (8005650 <HAL_DMA_Init+0x670>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d054      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a54      	ldr	r2, [pc, #336]	; (8005654 <HAL_DMA_Init+0x674>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d04f      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a53      	ldr	r2, [pc, #332]	; (8005658 <HAL_DMA_Init+0x678>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d04a      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a51      	ldr	r2, [pc, #324]	; (800565c <HAL_DMA_Init+0x67c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d045      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a50      	ldr	r2, [pc, #320]	; (8005660 <HAL_DMA_Init+0x680>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d040      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a4e      	ldr	r2, [pc, #312]	; (8005664 <HAL_DMA_Init+0x684>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d03b      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a4d      	ldr	r2, [pc, #308]	; (8005668 <HAL_DMA_Init+0x688>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d036      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a4b      	ldr	r2, [pc, #300]	; (800566c <HAL_DMA_Init+0x68c>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d031      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a4a      	ldr	r2, [pc, #296]	; (8005670 <HAL_DMA_Init+0x690>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d02c      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a48      	ldr	r2, [pc, #288]	; (8005674 <HAL_DMA_Init+0x694>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d027      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a47      	ldr	r2, [pc, #284]	; (8005678 <HAL_DMA_Init+0x698>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d022      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a45      	ldr	r2, [pc, #276]	; (800567c <HAL_DMA_Init+0x69c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d01d      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a44      	ldr	r2, [pc, #272]	; (8005680 <HAL_DMA_Init+0x6a0>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d018      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a42      	ldr	r2, [pc, #264]	; (8005684 <HAL_DMA_Init+0x6a4>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d013      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a41      	ldr	r2, [pc, #260]	; (8005688 <HAL_DMA_Init+0x6a8>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d00e      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a3f      	ldr	r2, [pc, #252]	; (800568c <HAL_DMA_Init+0x6ac>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d009      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a3e      	ldr	r2, [pc, #248]	; (8005690 <HAL_DMA_Init+0x6b0>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d004      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a3c      	ldr	r2, [pc, #240]	; (8005694 <HAL_DMA_Init+0x6b4>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d101      	bne.n	80055aa <HAL_DMA_Init+0x5ca>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e000      	b.n	80055ac <HAL_DMA_Init+0x5cc>
 80055aa:	2300      	movs	r3, #0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d032      	beq.n	8005616 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f002 fa5b 	bl	8007a6c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	2b80      	cmp	r3, #128	; 0x80
 80055bc:	d102      	bne.n	80055c4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055cc:	b2d2      	uxtb	r2, r2
 80055ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80055d8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d010      	beq.n	8005604 <HAL_DMA_Init+0x624>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	2b08      	cmp	r3, #8
 80055e8:	d80c      	bhi.n	8005604 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f002 fad8 	bl	8007ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055f4:	2200      	movs	r2, #0
 80055f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005600:	605a      	str	r2, [r3, #4]
 8005602:	e008      	b.n	8005616 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3718      	adds	r7, #24
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	a7fdabf8 	.word	0xa7fdabf8
 8005634:	cccccccd 	.word	0xcccccccd
 8005638:	40020010 	.word	0x40020010
 800563c:	40020028 	.word	0x40020028
 8005640:	40020040 	.word	0x40020040
 8005644:	40020058 	.word	0x40020058
 8005648:	40020070 	.word	0x40020070
 800564c:	40020088 	.word	0x40020088
 8005650:	400200a0 	.word	0x400200a0
 8005654:	400200b8 	.word	0x400200b8
 8005658:	40020410 	.word	0x40020410
 800565c:	40020428 	.word	0x40020428
 8005660:	40020440 	.word	0x40020440
 8005664:	40020458 	.word	0x40020458
 8005668:	40020470 	.word	0x40020470
 800566c:	40020488 	.word	0x40020488
 8005670:	400204a0 	.word	0x400204a0
 8005674:	400204b8 	.word	0x400204b8
 8005678:	58025408 	.word	0x58025408
 800567c:	5802541c 	.word	0x5802541c
 8005680:	58025430 	.word	0x58025430
 8005684:	58025444 	.word	0x58025444
 8005688:	58025458 	.word	0x58025458
 800568c:	5802546c 	.word	0x5802546c
 8005690:	58025480 	.word	0x58025480
 8005694:	58025494 	.word	0x58025494

08005698 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e226      	b.n	8005b02 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d101      	bne.n	80056c2 <HAL_DMA_Start_IT+0x2a>
 80056be:	2302      	movs	r3, #2
 80056c0:	e21f      	b.n	8005b02 <HAL_DMA_Start_IT+0x46a>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	f040 820a 	bne.w	8005aec <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a68      	ldr	r2, [pc, #416]	; (800588c <HAL_DMA_Start_IT+0x1f4>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d04a      	beq.n	8005786 <HAL_DMA_Start_IT+0xee>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a66      	ldr	r2, [pc, #408]	; (8005890 <HAL_DMA_Start_IT+0x1f8>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d045      	beq.n	8005786 <HAL_DMA_Start_IT+0xee>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a65      	ldr	r2, [pc, #404]	; (8005894 <HAL_DMA_Start_IT+0x1fc>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d040      	beq.n	8005786 <HAL_DMA_Start_IT+0xee>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a63      	ldr	r2, [pc, #396]	; (8005898 <HAL_DMA_Start_IT+0x200>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d03b      	beq.n	8005786 <HAL_DMA_Start_IT+0xee>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a62      	ldr	r2, [pc, #392]	; (800589c <HAL_DMA_Start_IT+0x204>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d036      	beq.n	8005786 <HAL_DMA_Start_IT+0xee>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a60      	ldr	r2, [pc, #384]	; (80058a0 <HAL_DMA_Start_IT+0x208>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d031      	beq.n	8005786 <HAL_DMA_Start_IT+0xee>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a5f      	ldr	r2, [pc, #380]	; (80058a4 <HAL_DMA_Start_IT+0x20c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d02c      	beq.n	8005786 <HAL_DMA_Start_IT+0xee>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a5d      	ldr	r2, [pc, #372]	; (80058a8 <HAL_DMA_Start_IT+0x210>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d027      	beq.n	8005786 <HAL_DMA_Start_IT+0xee>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a5c      	ldr	r2, [pc, #368]	; (80058ac <HAL_DMA_Start_IT+0x214>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d022      	beq.n	8005786 <HAL_DMA_Start_IT+0xee>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a5a      	ldr	r2, [pc, #360]	; (80058b0 <HAL_DMA_Start_IT+0x218>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d01d      	beq.n	8005786 <HAL_DMA_Start_IT+0xee>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a59      	ldr	r2, [pc, #356]	; (80058b4 <HAL_DMA_Start_IT+0x21c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d018      	beq.n	8005786 <HAL_DMA_Start_IT+0xee>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a57      	ldr	r2, [pc, #348]	; (80058b8 <HAL_DMA_Start_IT+0x220>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d013      	beq.n	8005786 <HAL_DMA_Start_IT+0xee>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a56      	ldr	r2, [pc, #344]	; (80058bc <HAL_DMA_Start_IT+0x224>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d00e      	beq.n	8005786 <HAL_DMA_Start_IT+0xee>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a54      	ldr	r2, [pc, #336]	; (80058c0 <HAL_DMA_Start_IT+0x228>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d009      	beq.n	8005786 <HAL_DMA_Start_IT+0xee>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a53      	ldr	r2, [pc, #332]	; (80058c4 <HAL_DMA_Start_IT+0x22c>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d004      	beq.n	8005786 <HAL_DMA_Start_IT+0xee>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a51      	ldr	r2, [pc, #324]	; (80058c8 <HAL_DMA_Start_IT+0x230>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d108      	bne.n	8005798 <HAL_DMA_Start_IT+0x100>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f022 0201 	bic.w	r2, r2, #1
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	e007      	b.n	80057a8 <HAL_DMA_Start_IT+0x110>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f022 0201 	bic.w	r2, r2, #1
 80057a6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	68b9      	ldr	r1, [r7, #8]
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f001 fe82 	bl	80074b8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a34      	ldr	r2, [pc, #208]	; (800588c <HAL_DMA_Start_IT+0x1f4>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d04a      	beq.n	8005854 <HAL_DMA_Start_IT+0x1bc>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a33      	ldr	r2, [pc, #204]	; (8005890 <HAL_DMA_Start_IT+0x1f8>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d045      	beq.n	8005854 <HAL_DMA_Start_IT+0x1bc>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a31      	ldr	r2, [pc, #196]	; (8005894 <HAL_DMA_Start_IT+0x1fc>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d040      	beq.n	8005854 <HAL_DMA_Start_IT+0x1bc>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a30      	ldr	r2, [pc, #192]	; (8005898 <HAL_DMA_Start_IT+0x200>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d03b      	beq.n	8005854 <HAL_DMA_Start_IT+0x1bc>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a2e      	ldr	r2, [pc, #184]	; (800589c <HAL_DMA_Start_IT+0x204>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d036      	beq.n	8005854 <HAL_DMA_Start_IT+0x1bc>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a2d      	ldr	r2, [pc, #180]	; (80058a0 <HAL_DMA_Start_IT+0x208>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d031      	beq.n	8005854 <HAL_DMA_Start_IT+0x1bc>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a2b      	ldr	r2, [pc, #172]	; (80058a4 <HAL_DMA_Start_IT+0x20c>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d02c      	beq.n	8005854 <HAL_DMA_Start_IT+0x1bc>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a2a      	ldr	r2, [pc, #168]	; (80058a8 <HAL_DMA_Start_IT+0x210>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d027      	beq.n	8005854 <HAL_DMA_Start_IT+0x1bc>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a28      	ldr	r2, [pc, #160]	; (80058ac <HAL_DMA_Start_IT+0x214>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d022      	beq.n	8005854 <HAL_DMA_Start_IT+0x1bc>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a27      	ldr	r2, [pc, #156]	; (80058b0 <HAL_DMA_Start_IT+0x218>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d01d      	beq.n	8005854 <HAL_DMA_Start_IT+0x1bc>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a25      	ldr	r2, [pc, #148]	; (80058b4 <HAL_DMA_Start_IT+0x21c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d018      	beq.n	8005854 <HAL_DMA_Start_IT+0x1bc>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a24      	ldr	r2, [pc, #144]	; (80058b8 <HAL_DMA_Start_IT+0x220>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d013      	beq.n	8005854 <HAL_DMA_Start_IT+0x1bc>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a22      	ldr	r2, [pc, #136]	; (80058bc <HAL_DMA_Start_IT+0x224>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d00e      	beq.n	8005854 <HAL_DMA_Start_IT+0x1bc>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a21      	ldr	r2, [pc, #132]	; (80058c0 <HAL_DMA_Start_IT+0x228>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d009      	beq.n	8005854 <HAL_DMA_Start_IT+0x1bc>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a1f      	ldr	r2, [pc, #124]	; (80058c4 <HAL_DMA_Start_IT+0x22c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d004      	beq.n	8005854 <HAL_DMA_Start_IT+0x1bc>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a1e      	ldr	r2, [pc, #120]	; (80058c8 <HAL_DMA_Start_IT+0x230>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d101      	bne.n	8005858 <HAL_DMA_Start_IT+0x1c0>
 8005854:	2301      	movs	r3, #1
 8005856:	e000      	b.n	800585a <HAL_DMA_Start_IT+0x1c2>
 8005858:	2300      	movs	r3, #0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d036      	beq.n	80058cc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f023 021e 	bic.w	r2, r3, #30
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f042 0216 	orr.w	r2, r2, #22
 8005870:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	2b00      	cmp	r3, #0
 8005878:	d03e      	beq.n	80058f8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0208 	orr.w	r2, r2, #8
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	e035      	b.n	80058f8 <HAL_DMA_Start_IT+0x260>
 800588c:	40020010 	.word	0x40020010
 8005890:	40020028 	.word	0x40020028
 8005894:	40020040 	.word	0x40020040
 8005898:	40020058 	.word	0x40020058
 800589c:	40020070 	.word	0x40020070
 80058a0:	40020088 	.word	0x40020088
 80058a4:	400200a0 	.word	0x400200a0
 80058a8:	400200b8 	.word	0x400200b8
 80058ac:	40020410 	.word	0x40020410
 80058b0:	40020428 	.word	0x40020428
 80058b4:	40020440 	.word	0x40020440
 80058b8:	40020458 	.word	0x40020458
 80058bc:	40020470 	.word	0x40020470
 80058c0:	40020488 	.word	0x40020488
 80058c4:	400204a0 	.word	0x400204a0
 80058c8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f023 020e 	bic.w	r2, r3, #14
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 020a 	orr.w	r2, r2, #10
 80058de:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d007      	beq.n	80058f8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f042 0204 	orr.w	r2, r2, #4
 80058f6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a83      	ldr	r2, [pc, #524]	; (8005b0c <HAL_DMA_Start_IT+0x474>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d072      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a82      	ldr	r2, [pc, #520]	; (8005b10 <HAL_DMA_Start_IT+0x478>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d06d      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a80      	ldr	r2, [pc, #512]	; (8005b14 <HAL_DMA_Start_IT+0x47c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d068      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a7f      	ldr	r2, [pc, #508]	; (8005b18 <HAL_DMA_Start_IT+0x480>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d063      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a7d      	ldr	r2, [pc, #500]	; (8005b1c <HAL_DMA_Start_IT+0x484>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d05e      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a7c      	ldr	r2, [pc, #496]	; (8005b20 <HAL_DMA_Start_IT+0x488>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d059      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a7a      	ldr	r2, [pc, #488]	; (8005b24 <HAL_DMA_Start_IT+0x48c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d054      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a79      	ldr	r2, [pc, #484]	; (8005b28 <HAL_DMA_Start_IT+0x490>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d04f      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a77      	ldr	r2, [pc, #476]	; (8005b2c <HAL_DMA_Start_IT+0x494>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d04a      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a76      	ldr	r2, [pc, #472]	; (8005b30 <HAL_DMA_Start_IT+0x498>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d045      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a74      	ldr	r2, [pc, #464]	; (8005b34 <HAL_DMA_Start_IT+0x49c>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d040      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a73      	ldr	r2, [pc, #460]	; (8005b38 <HAL_DMA_Start_IT+0x4a0>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d03b      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a71      	ldr	r2, [pc, #452]	; (8005b3c <HAL_DMA_Start_IT+0x4a4>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d036      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a70      	ldr	r2, [pc, #448]	; (8005b40 <HAL_DMA_Start_IT+0x4a8>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d031      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a6e      	ldr	r2, [pc, #440]	; (8005b44 <HAL_DMA_Start_IT+0x4ac>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d02c      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a6d      	ldr	r2, [pc, #436]	; (8005b48 <HAL_DMA_Start_IT+0x4b0>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d027      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a6b      	ldr	r2, [pc, #428]	; (8005b4c <HAL_DMA_Start_IT+0x4b4>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d022      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a6a      	ldr	r2, [pc, #424]	; (8005b50 <HAL_DMA_Start_IT+0x4b8>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d01d      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a68      	ldr	r2, [pc, #416]	; (8005b54 <HAL_DMA_Start_IT+0x4bc>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d018      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a67      	ldr	r2, [pc, #412]	; (8005b58 <HAL_DMA_Start_IT+0x4c0>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d013      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a65      	ldr	r2, [pc, #404]	; (8005b5c <HAL_DMA_Start_IT+0x4c4>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d00e      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a64      	ldr	r2, [pc, #400]	; (8005b60 <HAL_DMA_Start_IT+0x4c8>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d009      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a62      	ldr	r2, [pc, #392]	; (8005b64 <HAL_DMA_Start_IT+0x4cc>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d004      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a61      	ldr	r2, [pc, #388]	; (8005b68 <HAL_DMA_Start_IT+0x4d0>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d101      	bne.n	80059ec <HAL_DMA_Start_IT+0x354>
 80059e8:	2301      	movs	r3, #1
 80059ea:	e000      	b.n	80059ee <HAL_DMA_Start_IT+0x356>
 80059ec:	2300      	movs	r3, #0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d01a      	beq.n	8005a28 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d007      	beq.n	8005a10 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a0e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d007      	beq.n	8005a28 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a26:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a37      	ldr	r2, [pc, #220]	; (8005b0c <HAL_DMA_Start_IT+0x474>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d04a      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x430>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a36      	ldr	r2, [pc, #216]	; (8005b10 <HAL_DMA_Start_IT+0x478>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d045      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x430>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a34      	ldr	r2, [pc, #208]	; (8005b14 <HAL_DMA_Start_IT+0x47c>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d040      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x430>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a33      	ldr	r2, [pc, #204]	; (8005b18 <HAL_DMA_Start_IT+0x480>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d03b      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x430>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a31      	ldr	r2, [pc, #196]	; (8005b1c <HAL_DMA_Start_IT+0x484>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d036      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x430>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a30      	ldr	r2, [pc, #192]	; (8005b20 <HAL_DMA_Start_IT+0x488>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d031      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x430>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a2e      	ldr	r2, [pc, #184]	; (8005b24 <HAL_DMA_Start_IT+0x48c>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d02c      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x430>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a2d      	ldr	r2, [pc, #180]	; (8005b28 <HAL_DMA_Start_IT+0x490>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d027      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x430>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a2b      	ldr	r2, [pc, #172]	; (8005b2c <HAL_DMA_Start_IT+0x494>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d022      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x430>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a2a      	ldr	r2, [pc, #168]	; (8005b30 <HAL_DMA_Start_IT+0x498>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d01d      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x430>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a28      	ldr	r2, [pc, #160]	; (8005b34 <HAL_DMA_Start_IT+0x49c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d018      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x430>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a27      	ldr	r2, [pc, #156]	; (8005b38 <HAL_DMA_Start_IT+0x4a0>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d013      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x430>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a25      	ldr	r2, [pc, #148]	; (8005b3c <HAL_DMA_Start_IT+0x4a4>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d00e      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x430>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a24      	ldr	r2, [pc, #144]	; (8005b40 <HAL_DMA_Start_IT+0x4a8>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d009      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x430>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a22      	ldr	r2, [pc, #136]	; (8005b44 <HAL_DMA_Start_IT+0x4ac>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d004      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x430>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a21      	ldr	r2, [pc, #132]	; (8005b48 <HAL_DMA_Start_IT+0x4b0>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d108      	bne.n	8005ada <HAL_DMA_Start_IT+0x442>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f042 0201 	orr.w	r2, r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	e012      	b.n	8005b00 <HAL_DMA_Start_IT+0x468>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f042 0201 	orr.w	r2, r2, #1
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	e009      	b.n	8005b00 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005afa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	40020010 	.word	0x40020010
 8005b10:	40020028 	.word	0x40020028
 8005b14:	40020040 	.word	0x40020040
 8005b18:	40020058 	.word	0x40020058
 8005b1c:	40020070 	.word	0x40020070
 8005b20:	40020088 	.word	0x40020088
 8005b24:	400200a0 	.word	0x400200a0
 8005b28:	400200b8 	.word	0x400200b8
 8005b2c:	40020410 	.word	0x40020410
 8005b30:	40020428 	.word	0x40020428
 8005b34:	40020440 	.word	0x40020440
 8005b38:	40020458 	.word	0x40020458
 8005b3c:	40020470 	.word	0x40020470
 8005b40:	40020488 	.word	0x40020488
 8005b44:	400204a0 	.word	0x400204a0
 8005b48:	400204b8 	.word	0x400204b8
 8005b4c:	58025408 	.word	0x58025408
 8005b50:	5802541c 	.word	0x5802541c
 8005b54:	58025430 	.word	0x58025430
 8005b58:	58025444 	.word	0x58025444
 8005b5c:	58025458 	.word	0x58025458
 8005b60:	5802546c 	.word	0x5802546c
 8005b64:	58025480 	.word	0x58025480
 8005b68:	58025494 	.word	0x58025494

08005b6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005b74:	f7ff f8e8 	bl	8004d48 <HAL_GetTick>
 8005b78:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e2dc      	b.n	800613e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d008      	beq.n	8005ba2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2280      	movs	r2, #128	; 0x80
 8005b94:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e2cd      	b.n	800613e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a76      	ldr	r2, [pc, #472]	; (8005d80 <HAL_DMA_Abort+0x214>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d04a      	beq.n	8005c42 <HAL_DMA_Abort+0xd6>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a74      	ldr	r2, [pc, #464]	; (8005d84 <HAL_DMA_Abort+0x218>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d045      	beq.n	8005c42 <HAL_DMA_Abort+0xd6>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a73      	ldr	r2, [pc, #460]	; (8005d88 <HAL_DMA_Abort+0x21c>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d040      	beq.n	8005c42 <HAL_DMA_Abort+0xd6>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a71      	ldr	r2, [pc, #452]	; (8005d8c <HAL_DMA_Abort+0x220>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d03b      	beq.n	8005c42 <HAL_DMA_Abort+0xd6>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a70      	ldr	r2, [pc, #448]	; (8005d90 <HAL_DMA_Abort+0x224>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d036      	beq.n	8005c42 <HAL_DMA_Abort+0xd6>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a6e      	ldr	r2, [pc, #440]	; (8005d94 <HAL_DMA_Abort+0x228>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d031      	beq.n	8005c42 <HAL_DMA_Abort+0xd6>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a6d      	ldr	r2, [pc, #436]	; (8005d98 <HAL_DMA_Abort+0x22c>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d02c      	beq.n	8005c42 <HAL_DMA_Abort+0xd6>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a6b      	ldr	r2, [pc, #428]	; (8005d9c <HAL_DMA_Abort+0x230>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d027      	beq.n	8005c42 <HAL_DMA_Abort+0xd6>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a6a      	ldr	r2, [pc, #424]	; (8005da0 <HAL_DMA_Abort+0x234>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d022      	beq.n	8005c42 <HAL_DMA_Abort+0xd6>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a68      	ldr	r2, [pc, #416]	; (8005da4 <HAL_DMA_Abort+0x238>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d01d      	beq.n	8005c42 <HAL_DMA_Abort+0xd6>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a67      	ldr	r2, [pc, #412]	; (8005da8 <HAL_DMA_Abort+0x23c>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d018      	beq.n	8005c42 <HAL_DMA_Abort+0xd6>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a65      	ldr	r2, [pc, #404]	; (8005dac <HAL_DMA_Abort+0x240>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d013      	beq.n	8005c42 <HAL_DMA_Abort+0xd6>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a64      	ldr	r2, [pc, #400]	; (8005db0 <HAL_DMA_Abort+0x244>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d00e      	beq.n	8005c42 <HAL_DMA_Abort+0xd6>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a62      	ldr	r2, [pc, #392]	; (8005db4 <HAL_DMA_Abort+0x248>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d009      	beq.n	8005c42 <HAL_DMA_Abort+0xd6>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a61      	ldr	r2, [pc, #388]	; (8005db8 <HAL_DMA_Abort+0x24c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d004      	beq.n	8005c42 <HAL_DMA_Abort+0xd6>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a5f      	ldr	r2, [pc, #380]	; (8005dbc <HAL_DMA_Abort+0x250>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d101      	bne.n	8005c46 <HAL_DMA_Abort+0xda>
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <HAL_DMA_Abort+0xdc>
 8005c46:	2300      	movs	r3, #0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d013      	beq.n	8005c74 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 021e 	bic.w	r2, r2, #30
 8005c5a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	695a      	ldr	r2, [r3, #20]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c6a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	617b      	str	r3, [r7, #20]
 8005c72:	e00a      	b.n	8005c8a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 020e 	bic.w	r2, r2, #14
 8005c82:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a3c      	ldr	r2, [pc, #240]	; (8005d80 <HAL_DMA_Abort+0x214>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d072      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a3a      	ldr	r2, [pc, #232]	; (8005d84 <HAL_DMA_Abort+0x218>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d06d      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a39      	ldr	r2, [pc, #228]	; (8005d88 <HAL_DMA_Abort+0x21c>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d068      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a37      	ldr	r2, [pc, #220]	; (8005d8c <HAL_DMA_Abort+0x220>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d063      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a36      	ldr	r2, [pc, #216]	; (8005d90 <HAL_DMA_Abort+0x224>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d05e      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a34      	ldr	r2, [pc, #208]	; (8005d94 <HAL_DMA_Abort+0x228>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d059      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a33      	ldr	r2, [pc, #204]	; (8005d98 <HAL_DMA_Abort+0x22c>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d054      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a31      	ldr	r2, [pc, #196]	; (8005d9c <HAL_DMA_Abort+0x230>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d04f      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a30      	ldr	r2, [pc, #192]	; (8005da0 <HAL_DMA_Abort+0x234>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d04a      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a2e      	ldr	r2, [pc, #184]	; (8005da4 <HAL_DMA_Abort+0x238>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d045      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a2d      	ldr	r2, [pc, #180]	; (8005da8 <HAL_DMA_Abort+0x23c>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d040      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a2b      	ldr	r2, [pc, #172]	; (8005dac <HAL_DMA_Abort+0x240>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d03b      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a2a      	ldr	r2, [pc, #168]	; (8005db0 <HAL_DMA_Abort+0x244>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d036      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a28      	ldr	r2, [pc, #160]	; (8005db4 <HAL_DMA_Abort+0x248>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d031      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a27      	ldr	r2, [pc, #156]	; (8005db8 <HAL_DMA_Abort+0x24c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d02c      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a25      	ldr	r2, [pc, #148]	; (8005dbc <HAL_DMA_Abort+0x250>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d027      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a24      	ldr	r2, [pc, #144]	; (8005dc0 <HAL_DMA_Abort+0x254>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d022      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a22      	ldr	r2, [pc, #136]	; (8005dc4 <HAL_DMA_Abort+0x258>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d01d      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a21      	ldr	r2, [pc, #132]	; (8005dc8 <HAL_DMA_Abort+0x25c>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d018      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a1f      	ldr	r2, [pc, #124]	; (8005dcc <HAL_DMA_Abort+0x260>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d013      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a1e      	ldr	r2, [pc, #120]	; (8005dd0 <HAL_DMA_Abort+0x264>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d00e      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a1c      	ldr	r2, [pc, #112]	; (8005dd4 <HAL_DMA_Abort+0x268>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d009      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a1b      	ldr	r2, [pc, #108]	; (8005dd8 <HAL_DMA_Abort+0x26c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d004      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a19      	ldr	r2, [pc, #100]	; (8005ddc <HAL_DMA_Abort+0x270>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d132      	bne.n	8005de0 <HAL_DMA_Abort+0x274>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e031      	b.n	8005de2 <HAL_DMA_Abort+0x276>
 8005d7e:	bf00      	nop
 8005d80:	40020010 	.word	0x40020010
 8005d84:	40020028 	.word	0x40020028
 8005d88:	40020040 	.word	0x40020040
 8005d8c:	40020058 	.word	0x40020058
 8005d90:	40020070 	.word	0x40020070
 8005d94:	40020088 	.word	0x40020088
 8005d98:	400200a0 	.word	0x400200a0
 8005d9c:	400200b8 	.word	0x400200b8
 8005da0:	40020410 	.word	0x40020410
 8005da4:	40020428 	.word	0x40020428
 8005da8:	40020440 	.word	0x40020440
 8005dac:	40020458 	.word	0x40020458
 8005db0:	40020470 	.word	0x40020470
 8005db4:	40020488 	.word	0x40020488
 8005db8:	400204a0 	.word	0x400204a0
 8005dbc:	400204b8 	.word	0x400204b8
 8005dc0:	58025408 	.word	0x58025408
 8005dc4:	5802541c 	.word	0x5802541c
 8005dc8:	58025430 	.word	0x58025430
 8005dcc:	58025444 	.word	0x58025444
 8005dd0:	58025458 	.word	0x58025458
 8005dd4:	5802546c 	.word	0x5802546c
 8005dd8:	58025480 	.word	0x58025480
 8005ddc:	58025494 	.word	0x58025494
 8005de0:	2300      	movs	r3, #0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d007      	beq.n	8005df6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005df0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005df4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a6d      	ldr	r2, [pc, #436]	; (8005fb0 <HAL_DMA_Abort+0x444>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d04a      	beq.n	8005e96 <HAL_DMA_Abort+0x32a>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a6b      	ldr	r2, [pc, #428]	; (8005fb4 <HAL_DMA_Abort+0x448>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d045      	beq.n	8005e96 <HAL_DMA_Abort+0x32a>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a6a      	ldr	r2, [pc, #424]	; (8005fb8 <HAL_DMA_Abort+0x44c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d040      	beq.n	8005e96 <HAL_DMA_Abort+0x32a>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a68      	ldr	r2, [pc, #416]	; (8005fbc <HAL_DMA_Abort+0x450>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d03b      	beq.n	8005e96 <HAL_DMA_Abort+0x32a>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a67      	ldr	r2, [pc, #412]	; (8005fc0 <HAL_DMA_Abort+0x454>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d036      	beq.n	8005e96 <HAL_DMA_Abort+0x32a>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a65      	ldr	r2, [pc, #404]	; (8005fc4 <HAL_DMA_Abort+0x458>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d031      	beq.n	8005e96 <HAL_DMA_Abort+0x32a>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a64      	ldr	r2, [pc, #400]	; (8005fc8 <HAL_DMA_Abort+0x45c>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d02c      	beq.n	8005e96 <HAL_DMA_Abort+0x32a>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a62      	ldr	r2, [pc, #392]	; (8005fcc <HAL_DMA_Abort+0x460>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d027      	beq.n	8005e96 <HAL_DMA_Abort+0x32a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a61      	ldr	r2, [pc, #388]	; (8005fd0 <HAL_DMA_Abort+0x464>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d022      	beq.n	8005e96 <HAL_DMA_Abort+0x32a>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a5f      	ldr	r2, [pc, #380]	; (8005fd4 <HAL_DMA_Abort+0x468>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d01d      	beq.n	8005e96 <HAL_DMA_Abort+0x32a>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a5e      	ldr	r2, [pc, #376]	; (8005fd8 <HAL_DMA_Abort+0x46c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d018      	beq.n	8005e96 <HAL_DMA_Abort+0x32a>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a5c      	ldr	r2, [pc, #368]	; (8005fdc <HAL_DMA_Abort+0x470>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d013      	beq.n	8005e96 <HAL_DMA_Abort+0x32a>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a5b      	ldr	r2, [pc, #364]	; (8005fe0 <HAL_DMA_Abort+0x474>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00e      	beq.n	8005e96 <HAL_DMA_Abort+0x32a>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a59      	ldr	r2, [pc, #356]	; (8005fe4 <HAL_DMA_Abort+0x478>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d009      	beq.n	8005e96 <HAL_DMA_Abort+0x32a>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a58      	ldr	r2, [pc, #352]	; (8005fe8 <HAL_DMA_Abort+0x47c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d004      	beq.n	8005e96 <HAL_DMA_Abort+0x32a>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a56      	ldr	r2, [pc, #344]	; (8005fec <HAL_DMA_Abort+0x480>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d108      	bne.n	8005ea8 <HAL_DMA_Abort+0x33c>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 0201 	bic.w	r2, r2, #1
 8005ea4:	601a      	str	r2, [r3, #0]
 8005ea6:	e007      	b.n	8005eb8 <HAL_DMA_Abort+0x34c>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0201 	bic.w	r2, r2, #1
 8005eb6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005eb8:	e013      	b.n	8005ee2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005eba:	f7fe ff45 	bl	8004d48 <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	2b05      	cmp	r3, #5
 8005ec6:	d90c      	bls.n	8005ee2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2203      	movs	r2, #3
 8005eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e12d      	b.n	800613e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1e5      	bne.n	8005eba <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a2f      	ldr	r2, [pc, #188]	; (8005fb0 <HAL_DMA_Abort+0x444>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d04a      	beq.n	8005f8e <HAL_DMA_Abort+0x422>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a2d      	ldr	r2, [pc, #180]	; (8005fb4 <HAL_DMA_Abort+0x448>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d045      	beq.n	8005f8e <HAL_DMA_Abort+0x422>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a2c      	ldr	r2, [pc, #176]	; (8005fb8 <HAL_DMA_Abort+0x44c>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d040      	beq.n	8005f8e <HAL_DMA_Abort+0x422>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a2a      	ldr	r2, [pc, #168]	; (8005fbc <HAL_DMA_Abort+0x450>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d03b      	beq.n	8005f8e <HAL_DMA_Abort+0x422>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a29      	ldr	r2, [pc, #164]	; (8005fc0 <HAL_DMA_Abort+0x454>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d036      	beq.n	8005f8e <HAL_DMA_Abort+0x422>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a27      	ldr	r2, [pc, #156]	; (8005fc4 <HAL_DMA_Abort+0x458>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d031      	beq.n	8005f8e <HAL_DMA_Abort+0x422>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a26      	ldr	r2, [pc, #152]	; (8005fc8 <HAL_DMA_Abort+0x45c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d02c      	beq.n	8005f8e <HAL_DMA_Abort+0x422>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a24      	ldr	r2, [pc, #144]	; (8005fcc <HAL_DMA_Abort+0x460>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d027      	beq.n	8005f8e <HAL_DMA_Abort+0x422>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a23      	ldr	r2, [pc, #140]	; (8005fd0 <HAL_DMA_Abort+0x464>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d022      	beq.n	8005f8e <HAL_DMA_Abort+0x422>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a21      	ldr	r2, [pc, #132]	; (8005fd4 <HAL_DMA_Abort+0x468>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d01d      	beq.n	8005f8e <HAL_DMA_Abort+0x422>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a20      	ldr	r2, [pc, #128]	; (8005fd8 <HAL_DMA_Abort+0x46c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d018      	beq.n	8005f8e <HAL_DMA_Abort+0x422>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a1e      	ldr	r2, [pc, #120]	; (8005fdc <HAL_DMA_Abort+0x470>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d013      	beq.n	8005f8e <HAL_DMA_Abort+0x422>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a1d      	ldr	r2, [pc, #116]	; (8005fe0 <HAL_DMA_Abort+0x474>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d00e      	beq.n	8005f8e <HAL_DMA_Abort+0x422>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a1b      	ldr	r2, [pc, #108]	; (8005fe4 <HAL_DMA_Abort+0x478>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d009      	beq.n	8005f8e <HAL_DMA_Abort+0x422>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a1a      	ldr	r2, [pc, #104]	; (8005fe8 <HAL_DMA_Abort+0x47c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d004      	beq.n	8005f8e <HAL_DMA_Abort+0x422>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a18      	ldr	r2, [pc, #96]	; (8005fec <HAL_DMA_Abort+0x480>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d101      	bne.n	8005f92 <HAL_DMA_Abort+0x426>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e000      	b.n	8005f94 <HAL_DMA_Abort+0x428>
 8005f92:	2300      	movs	r3, #0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d02b      	beq.n	8005ff0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f9c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fa2:	f003 031f 	and.w	r3, r3, #31
 8005fa6:	223f      	movs	r2, #63	; 0x3f
 8005fa8:	409a      	lsls	r2, r3
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	609a      	str	r2, [r3, #8]
 8005fae:	e02a      	b.n	8006006 <HAL_DMA_Abort+0x49a>
 8005fb0:	40020010 	.word	0x40020010
 8005fb4:	40020028 	.word	0x40020028
 8005fb8:	40020040 	.word	0x40020040
 8005fbc:	40020058 	.word	0x40020058
 8005fc0:	40020070 	.word	0x40020070
 8005fc4:	40020088 	.word	0x40020088
 8005fc8:	400200a0 	.word	0x400200a0
 8005fcc:	400200b8 	.word	0x400200b8
 8005fd0:	40020410 	.word	0x40020410
 8005fd4:	40020428 	.word	0x40020428
 8005fd8:	40020440 	.word	0x40020440
 8005fdc:	40020458 	.word	0x40020458
 8005fe0:	40020470 	.word	0x40020470
 8005fe4:	40020488 	.word	0x40020488
 8005fe8:	400204a0 	.word	0x400204a0
 8005fec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ffa:	f003 031f 	and.w	r3, r3, #31
 8005ffe:	2201      	movs	r2, #1
 8006000:	409a      	lsls	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a4f      	ldr	r2, [pc, #316]	; (8006148 <HAL_DMA_Abort+0x5dc>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d072      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a4d      	ldr	r2, [pc, #308]	; (800614c <HAL_DMA_Abort+0x5e0>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d06d      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a4c      	ldr	r2, [pc, #304]	; (8006150 <HAL_DMA_Abort+0x5e4>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d068      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a4a      	ldr	r2, [pc, #296]	; (8006154 <HAL_DMA_Abort+0x5e8>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d063      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a49      	ldr	r2, [pc, #292]	; (8006158 <HAL_DMA_Abort+0x5ec>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d05e      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a47      	ldr	r2, [pc, #284]	; (800615c <HAL_DMA_Abort+0x5f0>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d059      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a46      	ldr	r2, [pc, #280]	; (8006160 <HAL_DMA_Abort+0x5f4>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d054      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a44      	ldr	r2, [pc, #272]	; (8006164 <HAL_DMA_Abort+0x5f8>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d04f      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a43      	ldr	r2, [pc, #268]	; (8006168 <HAL_DMA_Abort+0x5fc>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d04a      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a41      	ldr	r2, [pc, #260]	; (800616c <HAL_DMA_Abort+0x600>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d045      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a40      	ldr	r2, [pc, #256]	; (8006170 <HAL_DMA_Abort+0x604>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d040      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a3e      	ldr	r2, [pc, #248]	; (8006174 <HAL_DMA_Abort+0x608>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d03b      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a3d      	ldr	r2, [pc, #244]	; (8006178 <HAL_DMA_Abort+0x60c>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d036      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a3b      	ldr	r2, [pc, #236]	; (800617c <HAL_DMA_Abort+0x610>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d031      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a3a      	ldr	r2, [pc, #232]	; (8006180 <HAL_DMA_Abort+0x614>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d02c      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a38      	ldr	r2, [pc, #224]	; (8006184 <HAL_DMA_Abort+0x618>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d027      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a37      	ldr	r2, [pc, #220]	; (8006188 <HAL_DMA_Abort+0x61c>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d022      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a35      	ldr	r2, [pc, #212]	; (800618c <HAL_DMA_Abort+0x620>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d01d      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a34      	ldr	r2, [pc, #208]	; (8006190 <HAL_DMA_Abort+0x624>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d018      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a32      	ldr	r2, [pc, #200]	; (8006194 <HAL_DMA_Abort+0x628>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d013      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a31      	ldr	r2, [pc, #196]	; (8006198 <HAL_DMA_Abort+0x62c>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d00e      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a2f      	ldr	r2, [pc, #188]	; (800619c <HAL_DMA_Abort+0x630>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d009      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a2e      	ldr	r2, [pc, #184]	; (80061a0 <HAL_DMA_Abort+0x634>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d004      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a2c      	ldr	r2, [pc, #176]	; (80061a4 <HAL_DMA_Abort+0x638>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d101      	bne.n	80060fa <HAL_DMA_Abort+0x58e>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e000      	b.n	80060fc <HAL_DMA_Abort+0x590>
 80060fa:	2300      	movs	r3, #0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d015      	beq.n	800612c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006108:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00c      	beq.n	800612c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800611c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006120:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800612a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3718      	adds	r7, #24
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	40020010 	.word	0x40020010
 800614c:	40020028 	.word	0x40020028
 8006150:	40020040 	.word	0x40020040
 8006154:	40020058 	.word	0x40020058
 8006158:	40020070 	.word	0x40020070
 800615c:	40020088 	.word	0x40020088
 8006160:	400200a0 	.word	0x400200a0
 8006164:	400200b8 	.word	0x400200b8
 8006168:	40020410 	.word	0x40020410
 800616c:	40020428 	.word	0x40020428
 8006170:	40020440 	.word	0x40020440
 8006174:	40020458 	.word	0x40020458
 8006178:	40020470 	.word	0x40020470
 800617c:	40020488 	.word	0x40020488
 8006180:	400204a0 	.word	0x400204a0
 8006184:	400204b8 	.word	0x400204b8
 8006188:	58025408 	.word	0x58025408
 800618c:	5802541c 	.word	0x5802541c
 8006190:	58025430 	.word	0x58025430
 8006194:	58025444 	.word	0x58025444
 8006198:	58025458 	.word	0x58025458
 800619c:	5802546c 	.word	0x5802546c
 80061a0:	58025480 	.word	0x58025480
 80061a4:	58025494 	.word	0x58025494

080061a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e205      	b.n	80065c6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d004      	beq.n	80061d0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2280      	movs	r2, #128	; 0x80
 80061ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e1fa      	b.n	80065c6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a8c      	ldr	r2, [pc, #560]	; (8006408 <HAL_DMA_Abort_IT+0x260>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d04a      	beq.n	8006270 <HAL_DMA_Abort_IT+0xc8>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a8b      	ldr	r2, [pc, #556]	; (800640c <HAL_DMA_Abort_IT+0x264>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d045      	beq.n	8006270 <HAL_DMA_Abort_IT+0xc8>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a89      	ldr	r2, [pc, #548]	; (8006410 <HAL_DMA_Abort_IT+0x268>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d040      	beq.n	8006270 <HAL_DMA_Abort_IT+0xc8>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a88      	ldr	r2, [pc, #544]	; (8006414 <HAL_DMA_Abort_IT+0x26c>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d03b      	beq.n	8006270 <HAL_DMA_Abort_IT+0xc8>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a86      	ldr	r2, [pc, #536]	; (8006418 <HAL_DMA_Abort_IT+0x270>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d036      	beq.n	8006270 <HAL_DMA_Abort_IT+0xc8>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a85      	ldr	r2, [pc, #532]	; (800641c <HAL_DMA_Abort_IT+0x274>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d031      	beq.n	8006270 <HAL_DMA_Abort_IT+0xc8>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a83      	ldr	r2, [pc, #524]	; (8006420 <HAL_DMA_Abort_IT+0x278>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d02c      	beq.n	8006270 <HAL_DMA_Abort_IT+0xc8>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a82      	ldr	r2, [pc, #520]	; (8006424 <HAL_DMA_Abort_IT+0x27c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d027      	beq.n	8006270 <HAL_DMA_Abort_IT+0xc8>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a80      	ldr	r2, [pc, #512]	; (8006428 <HAL_DMA_Abort_IT+0x280>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d022      	beq.n	8006270 <HAL_DMA_Abort_IT+0xc8>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a7f      	ldr	r2, [pc, #508]	; (800642c <HAL_DMA_Abort_IT+0x284>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d01d      	beq.n	8006270 <HAL_DMA_Abort_IT+0xc8>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a7d      	ldr	r2, [pc, #500]	; (8006430 <HAL_DMA_Abort_IT+0x288>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d018      	beq.n	8006270 <HAL_DMA_Abort_IT+0xc8>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a7c      	ldr	r2, [pc, #496]	; (8006434 <HAL_DMA_Abort_IT+0x28c>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d013      	beq.n	8006270 <HAL_DMA_Abort_IT+0xc8>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a7a      	ldr	r2, [pc, #488]	; (8006438 <HAL_DMA_Abort_IT+0x290>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d00e      	beq.n	8006270 <HAL_DMA_Abort_IT+0xc8>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a79      	ldr	r2, [pc, #484]	; (800643c <HAL_DMA_Abort_IT+0x294>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d009      	beq.n	8006270 <HAL_DMA_Abort_IT+0xc8>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a77      	ldr	r2, [pc, #476]	; (8006440 <HAL_DMA_Abort_IT+0x298>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d004      	beq.n	8006270 <HAL_DMA_Abort_IT+0xc8>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a76      	ldr	r2, [pc, #472]	; (8006444 <HAL_DMA_Abort_IT+0x29c>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d101      	bne.n	8006274 <HAL_DMA_Abort_IT+0xcc>
 8006270:	2301      	movs	r3, #1
 8006272:	e000      	b.n	8006276 <HAL_DMA_Abort_IT+0xce>
 8006274:	2300      	movs	r3, #0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d065      	beq.n	8006346 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2204      	movs	r2, #4
 800627e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a60      	ldr	r2, [pc, #384]	; (8006408 <HAL_DMA_Abort_IT+0x260>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d04a      	beq.n	8006322 <HAL_DMA_Abort_IT+0x17a>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a5e      	ldr	r2, [pc, #376]	; (800640c <HAL_DMA_Abort_IT+0x264>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d045      	beq.n	8006322 <HAL_DMA_Abort_IT+0x17a>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a5d      	ldr	r2, [pc, #372]	; (8006410 <HAL_DMA_Abort_IT+0x268>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d040      	beq.n	8006322 <HAL_DMA_Abort_IT+0x17a>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a5b      	ldr	r2, [pc, #364]	; (8006414 <HAL_DMA_Abort_IT+0x26c>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d03b      	beq.n	8006322 <HAL_DMA_Abort_IT+0x17a>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a5a      	ldr	r2, [pc, #360]	; (8006418 <HAL_DMA_Abort_IT+0x270>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d036      	beq.n	8006322 <HAL_DMA_Abort_IT+0x17a>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a58      	ldr	r2, [pc, #352]	; (800641c <HAL_DMA_Abort_IT+0x274>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d031      	beq.n	8006322 <HAL_DMA_Abort_IT+0x17a>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a57      	ldr	r2, [pc, #348]	; (8006420 <HAL_DMA_Abort_IT+0x278>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d02c      	beq.n	8006322 <HAL_DMA_Abort_IT+0x17a>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a55      	ldr	r2, [pc, #340]	; (8006424 <HAL_DMA_Abort_IT+0x27c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d027      	beq.n	8006322 <HAL_DMA_Abort_IT+0x17a>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a54      	ldr	r2, [pc, #336]	; (8006428 <HAL_DMA_Abort_IT+0x280>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d022      	beq.n	8006322 <HAL_DMA_Abort_IT+0x17a>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a52      	ldr	r2, [pc, #328]	; (800642c <HAL_DMA_Abort_IT+0x284>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d01d      	beq.n	8006322 <HAL_DMA_Abort_IT+0x17a>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a51      	ldr	r2, [pc, #324]	; (8006430 <HAL_DMA_Abort_IT+0x288>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d018      	beq.n	8006322 <HAL_DMA_Abort_IT+0x17a>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a4f      	ldr	r2, [pc, #316]	; (8006434 <HAL_DMA_Abort_IT+0x28c>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d013      	beq.n	8006322 <HAL_DMA_Abort_IT+0x17a>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a4e      	ldr	r2, [pc, #312]	; (8006438 <HAL_DMA_Abort_IT+0x290>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d00e      	beq.n	8006322 <HAL_DMA_Abort_IT+0x17a>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a4c      	ldr	r2, [pc, #304]	; (800643c <HAL_DMA_Abort_IT+0x294>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d009      	beq.n	8006322 <HAL_DMA_Abort_IT+0x17a>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a4b      	ldr	r2, [pc, #300]	; (8006440 <HAL_DMA_Abort_IT+0x298>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d004      	beq.n	8006322 <HAL_DMA_Abort_IT+0x17a>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a49      	ldr	r2, [pc, #292]	; (8006444 <HAL_DMA_Abort_IT+0x29c>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d108      	bne.n	8006334 <HAL_DMA_Abort_IT+0x18c>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0201 	bic.w	r2, r2, #1
 8006330:	601a      	str	r2, [r3, #0]
 8006332:	e147      	b.n	80065c4 <HAL_DMA_Abort_IT+0x41c>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 0201 	bic.w	r2, r2, #1
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	e13e      	b.n	80065c4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f022 020e 	bic.w	r2, r2, #14
 8006354:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a2b      	ldr	r2, [pc, #172]	; (8006408 <HAL_DMA_Abort_IT+0x260>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d04a      	beq.n	80063f6 <HAL_DMA_Abort_IT+0x24e>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a29      	ldr	r2, [pc, #164]	; (800640c <HAL_DMA_Abort_IT+0x264>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d045      	beq.n	80063f6 <HAL_DMA_Abort_IT+0x24e>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a28      	ldr	r2, [pc, #160]	; (8006410 <HAL_DMA_Abort_IT+0x268>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d040      	beq.n	80063f6 <HAL_DMA_Abort_IT+0x24e>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a26      	ldr	r2, [pc, #152]	; (8006414 <HAL_DMA_Abort_IT+0x26c>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d03b      	beq.n	80063f6 <HAL_DMA_Abort_IT+0x24e>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a25      	ldr	r2, [pc, #148]	; (8006418 <HAL_DMA_Abort_IT+0x270>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d036      	beq.n	80063f6 <HAL_DMA_Abort_IT+0x24e>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a23      	ldr	r2, [pc, #140]	; (800641c <HAL_DMA_Abort_IT+0x274>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d031      	beq.n	80063f6 <HAL_DMA_Abort_IT+0x24e>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a22      	ldr	r2, [pc, #136]	; (8006420 <HAL_DMA_Abort_IT+0x278>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d02c      	beq.n	80063f6 <HAL_DMA_Abort_IT+0x24e>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a20      	ldr	r2, [pc, #128]	; (8006424 <HAL_DMA_Abort_IT+0x27c>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d027      	beq.n	80063f6 <HAL_DMA_Abort_IT+0x24e>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a1f      	ldr	r2, [pc, #124]	; (8006428 <HAL_DMA_Abort_IT+0x280>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d022      	beq.n	80063f6 <HAL_DMA_Abort_IT+0x24e>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a1d      	ldr	r2, [pc, #116]	; (800642c <HAL_DMA_Abort_IT+0x284>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d01d      	beq.n	80063f6 <HAL_DMA_Abort_IT+0x24e>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a1c      	ldr	r2, [pc, #112]	; (8006430 <HAL_DMA_Abort_IT+0x288>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d018      	beq.n	80063f6 <HAL_DMA_Abort_IT+0x24e>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a1a      	ldr	r2, [pc, #104]	; (8006434 <HAL_DMA_Abort_IT+0x28c>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d013      	beq.n	80063f6 <HAL_DMA_Abort_IT+0x24e>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a19      	ldr	r2, [pc, #100]	; (8006438 <HAL_DMA_Abort_IT+0x290>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d00e      	beq.n	80063f6 <HAL_DMA_Abort_IT+0x24e>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a17      	ldr	r2, [pc, #92]	; (800643c <HAL_DMA_Abort_IT+0x294>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d009      	beq.n	80063f6 <HAL_DMA_Abort_IT+0x24e>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a16      	ldr	r2, [pc, #88]	; (8006440 <HAL_DMA_Abort_IT+0x298>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d004      	beq.n	80063f6 <HAL_DMA_Abort_IT+0x24e>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a14      	ldr	r2, [pc, #80]	; (8006444 <HAL_DMA_Abort_IT+0x29c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d128      	bne.n	8006448 <HAL_DMA_Abort_IT+0x2a0>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0201 	bic.w	r2, r2, #1
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	e027      	b.n	8006458 <HAL_DMA_Abort_IT+0x2b0>
 8006408:	40020010 	.word	0x40020010
 800640c:	40020028 	.word	0x40020028
 8006410:	40020040 	.word	0x40020040
 8006414:	40020058 	.word	0x40020058
 8006418:	40020070 	.word	0x40020070
 800641c:	40020088 	.word	0x40020088
 8006420:	400200a0 	.word	0x400200a0
 8006424:	400200b8 	.word	0x400200b8
 8006428:	40020410 	.word	0x40020410
 800642c:	40020428 	.word	0x40020428
 8006430:	40020440 	.word	0x40020440
 8006434:	40020458 	.word	0x40020458
 8006438:	40020470 	.word	0x40020470
 800643c:	40020488 	.word	0x40020488
 8006440:	400204a0 	.word	0x400204a0
 8006444:	400204b8 	.word	0x400204b8
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f022 0201 	bic.w	r2, r2, #1
 8006456:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a5c      	ldr	r2, [pc, #368]	; (80065d0 <HAL_DMA_Abort_IT+0x428>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d072      	beq.n	8006548 <HAL_DMA_Abort_IT+0x3a0>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a5b      	ldr	r2, [pc, #364]	; (80065d4 <HAL_DMA_Abort_IT+0x42c>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d06d      	beq.n	8006548 <HAL_DMA_Abort_IT+0x3a0>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a59      	ldr	r2, [pc, #356]	; (80065d8 <HAL_DMA_Abort_IT+0x430>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d068      	beq.n	8006548 <HAL_DMA_Abort_IT+0x3a0>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a58      	ldr	r2, [pc, #352]	; (80065dc <HAL_DMA_Abort_IT+0x434>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d063      	beq.n	8006548 <HAL_DMA_Abort_IT+0x3a0>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a56      	ldr	r2, [pc, #344]	; (80065e0 <HAL_DMA_Abort_IT+0x438>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d05e      	beq.n	8006548 <HAL_DMA_Abort_IT+0x3a0>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a55      	ldr	r2, [pc, #340]	; (80065e4 <HAL_DMA_Abort_IT+0x43c>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d059      	beq.n	8006548 <HAL_DMA_Abort_IT+0x3a0>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a53      	ldr	r2, [pc, #332]	; (80065e8 <HAL_DMA_Abort_IT+0x440>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d054      	beq.n	8006548 <HAL_DMA_Abort_IT+0x3a0>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a52      	ldr	r2, [pc, #328]	; (80065ec <HAL_DMA_Abort_IT+0x444>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d04f      	beq.n	8006548 <HAL_DMA_Abort_IT+0x3a0>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a50      	ldr	r2, [pc, #320]	; (80065f0 <HAL_DMA_Abort_IT+0x448>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d04a      	beq.n	8006548 <HAL_DMA_Abort_IT+0x3a0>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a4f      	ldr	r2, [pc, #316]	; (80065f4 <HAL_DMA_Abort_IT+0x44c>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d045      	beq.n	8006548 <HAL_DMA_Abort_IT+0x3a0>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a4d      	ldr	r2, [pc, #308]	; (80065f8 <HAL_DMA_Abort_IT+0x450>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d040      	beq.n	8006548 <HAL_DMA_Abort_IT+0x3a0>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a4c      	ldr	r2, [pc, #304]	; (80065fc <HAL_DMA_Abort_IT+0x454>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d03b      	beq.n	8006548 <HAL_DMA_Abort_IT+0x3a0>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a4a      	ldr	r2, [pc, #296]	; (8006600 <HAL_DMA_Abort_IT+0x458>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d036      	beq.n	8006548 <HAL_DMA_Abort_IT+0x3a0>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a49      	ldr	r2, [pc, #292]	; (8006604 <HAL_DMA_Abort_IT+0x45c>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d031      	beq.n	8006548 <HAL_DMA_Abort_IT+0x3a0>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a47      	ldr	r2, [pc, #284]	; (8006608 <HAL_DMA_Abort_IT+0x460>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d02c      	beq.n	8006548 <HAL_DMA_Abort_IT+0x3a0>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a46      	ldr	r2, [pc, #280]	; (800660c <HAL_DMA_Abort_IT+0x464>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d027      	beq.n	8006548 <HAL_DMA_Abort_IT+0x3a0>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a44      	ldr	r2, [pc, #272]	; (8006610 <HAL_DMA_Abort_IT+0x468>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d022      	beq.n	8006548 <HAL_DMA_Abort_IT+0x3a0>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a43      	ldr	r2, [pc, #268]	; (8006614 <HAL_DMA_Abort_IT+0x46c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d01d      	beq.n	8006548 <HAL_DMA_Abort_IT+0x3a0>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a41      	ldr	r2, [pc, #260]	; (8006618 <HAL_DMA_Abort_IT+0x470>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d018      	beq.n	8006548 <HAL_DMA_Abort_IT+0x3a0>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a40      	ldr	r2, [pc, #256]	; (800661c <HAL_DMA_Abort_IT+0x474>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d013      	beq.n	8006548 <HAL_DMA_Abort_IT+0x3a0>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a3e      	ldr	r2, [pc, #248]	; (8006620 <HAL_DMA_Abort_IT+0x478>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d00e      	beq.n	8006548 <HAL_DMA_Abort_IT+0x3a0>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a3d      	ldr	r2, [pc, #244]	; (8006624 <HAL_DMA_Abort_IT+0x47c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d009      	beq.n	8006548 <HAL_DMA_Abort_IT+0x3a0>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a3b      	ldr	r2, [pc, #236]	; (8006628 <HAL_DMA_Abort_IT+0x480>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d004      	beq.n	8006548 <HAL_DMA_Abort_IT+0x3a0>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a3a      	ldr	r2, [pc, #232]	; (800662c <HAL_DMA_Abort_IT+0x484>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d101      	bne.n	800654c <HAL_DMA_Abort_IT+0x3a4>
 8006548:	2301      	movs	r3, #1
 800654a:	e000      	b.n	800654e <HAL_DMA_Abort_IT+0x3a6>
 800654c:	2300      	movs	r3, #0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d028      	beq.n	80065a4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800655c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006560:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006566:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800656c:	f003 031f 	and.w	r3, r3, #31
 8006570:	2201      	movs	r2, #1
 8006572:	409a      	lsls	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006580:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00c      	beq.n	80065a4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006594:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006598:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80065a2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d003      	beq.n	80065c4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	40020010 	.word	0x40020010
 80065d4:	40020028 	.word	0x40020028
 80065d8:	40020040 	.word	0x40020040
 80065dc:	40020058 	.word	0x40020058
 80065e0:	40020070 	.word	0x40020070
 80065e4:	40020088 	.word	0x40020088
 80065e8:	400200a0 	.word	0x400200a0
 80065ec:	400200b8 	.word	0x400200b8
 80065f0:	40020410 	.word	0x40020410
 80065f4:	40020428 	.word	0x40020428
 80065f8:	40020440 	.word	0x40020440
 80065fc:	40020458 	.word	0x40020458
 8006600:	40020470 	.word	0x40020470
 8006604:	40020488 	.word	0x40020488
 8006608:	400204a0 	.word	0x400204a0
 800660c:	400204b8 	.word	0x400204b8
 8006610:	58025408 	.word	0x58025408
 8006614:	5802541c 	.word	0x5802541c
 8006618:	58025430 	.word	0x58025430
 800661c:	58025444 	.word	0x58025444
 8006620:	58025458 	.word	0x58025458
 8006624:	5802546c 	.word	0x5802546c
 8006628:	58025480 	.word	0x58025480
 800662c:	58025494 	.word	0x58025494

08006630 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b08a      	sub	sp, #40	; 0x28
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006638:	2300      	movs	r3, #0
 800663a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800663c:	4b67      	ldr	r3, [pc, #412]	; (80067dc <HAL_DMA_IRQHandler+0x1ac>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a67      	ldr	r2, [pc, #412]	; (80067e0 <HAL_DMA_IRQHandler+0x1b0>)
 8006642:	fba2 2303 	umull	r2, r3, r2, r3
 8006646:	0a9b      	lsrs	r3, r3, #10
 8006648:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800664e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006654:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a5f      	ldr	r2, [pc, #380]	; (80067e4 <HAL_DMA_IRQHandler+0x1b4>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d04a      	beq.n	8006702 <HAL_DMA_IRQHandler+0xd2>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a5d      	ldr	r2, [pc, #372]	; (80067e8 <HAL_DMA_IRQHandler+0x1b8>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d045      	beq.n	8006702 <HAL_DMA_IRQHandler+0xd2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a5c      	ldr	r2, [pc, #368]	; (80067ec <HAL_DMA_IRQHandler+0x1bc>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d040      	beq.n	8006702 <HAL_DMA_IRQHandler+0xd2>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a5a      	ldr	r2, [pc, #360]	; (80067f0 <HAL_DMA_IRQHandler+0x1c0>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d03b      	beq.n	8006702 <HAL_DMA_IRQHandler+0xd2>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a59      	ldr	r2, [pc, #356]	; (80067f4 <HAL_DMA_IRQHandler+0x1c4>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d036      	beq.n	8006702 <HAL_DMA_IRQHandler+0xd2>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a57      	ldr	r2, [pc, #348]	; (80067f8 <HAL_DMA_IRQHandler+0x1c8>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d031      	beq.n	8006702 <HAL_DMA_IRQHandler+0xd2>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a56      	ldr	r2, [pc, #344]	; (80067fc <HAL_DMA_IRQHandler+0x1cc>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d02c      	beq.n	8006702 <HAL_DMA_IRQHandler+0xd2>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a54      	ldr	r2, [pc, #336]	; (8006800 <HAL_DMA_IRQHandler+0x1d0>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d027      	beq.n	8006702 <HAL_DMA_IRQHandler+0xd2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a53      	ldr	r2, [pc, #332]	; (8006804 <HAL_DMA_IRQHandler+0x1d4>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d022      	beq.n	8006702 <HAL_DMA_IRQHandler+0xd2>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a51      	ldr	r2, [pc, #324]	; (8006808 <HAL_DMA_IRQHandler+0x1d8>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d01d      	beq.n	8006702 <HAL_DMA_IRQHandler+0xd2>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a50      	ldr	r2, [pc, #320]	; (800680c <HAL_DMA_IRQHandler+0x1dc>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d018      	beq.n	8006702 <HAL_DMA_IRQHandler+0xd2>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a4e      	ldr	r2, [pc, #312]	; (8006810 <HAL_DMA_IRQHandler+0x1e0>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d013      	beq.n	8006702 <HAL_DMA_IRQHandler+0xd2>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a4d      	ldr	r2, [pc, #308]	; (8006814 <HAL_DMA_IRQHandler+0x1e4>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d00e      	beq.n	8006702 <HAL_DMA_IRQHandler+0xd2>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a4b      	ldr	r2, [pc, #300]	; (8006818 <HAL_DMA_IRQHandler+0x1e8>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d009      	beq.n	8006702 <HAL_DMA_IRQHandler+0xd2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a4a      	ldr	r2, [pc, #296]	; (800681c <HAL_DMA_IRQHandler+0x1ec>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d004      	beq.n	8006702 <HAL_DMA_IRQHandler+0xd2>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a48      	ldr	r2, [pc, #288]	; (8006820 <HAL_DMA_IRQHandler+0x1f0>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d101      	bne.n	8006706 <HAL_DMA_IRQHandler+0xd6>
 8006702:	2301      	movs	r3, #1
 8006704:	e000      	b.n	8006708 <HAL_DMA_IRQHandler+0xd8>
 8006706:	2300      	movs	r3, #0
 8006708:	2b00      	cmp	r3, #0
 800670a:	f000 842b 	beq.w	8006f64 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006712:	f003 031f 	and.w	r3, r3, #31
 8006716:	2208      	movs	r2, #8
 8006718:	409a      	lsls	r2, r3
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	4013      	ands	r3, r2
 800671e:	2b00      	cmp	r3, #0
 8006720:	f000 80a2 	beq.w	8006868 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a2e      	ldr	r2, [pc, #184]	; (80067e4 <HAL_DMA_IRQHandler+0x1b4>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d04a      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x194>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a2d      	ldr	r2, [pc, #180]	; (80067e8 <HAL_DMA_IRQHandler+0x1b8>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d045      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x194>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a2b      	ldr	r2, [pc, #172]	; (80067ec <HAL_DMA_IRQHandler+0x1bc>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d040      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x194>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a2a      	ldr	r2, [pc, #168]	; (80067f0 <HAL_DMA_IRQHandler+0x1c0>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d03b      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x194>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a28      	ldr	r2, [pc, #160]	; (80067f4 <HAL_DMA_IRQHandler+0x1c4>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d036      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x194>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a27      	ldr	r2, [pc, #156]	; (80067f8 <HAL_DMA_IRQHandler+0x1c8>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d031      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x194>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a25      	ldr	r2, [pc, #148]	; (80067fc <HAL_DMA_IRQHandler+0x1cc>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d02c      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x194>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a24      	ldr	r2, [pc, #144]	; (8006800 <HAL_DMA_IRQHandler+0x1d0>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d027      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x194>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a22      	ldr	r2, [pc, #136]	; (8006804 <HAL_DMA_IRQHandler+0x1d4>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d022      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x194>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a21      	ldr	r2, [pc, #132]	; (8006808 <HAL_DMA_IRQHandler+0x1d8>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d01d      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x194>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a1f      	ldr	r2, [pc, #124]	; (800680c <HAL_DMA_IRQHandler+0x1dc>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d018      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x194>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a1e      	ldr	r2, [pc, #120]	; (8006810 <HAL_DMA_IRQHandler+0x1e0>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d013      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x194>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a1c      	ldr	r2, [pc, #112]	; (8006814 <HAL_DMA_IRQHandler+0x1e4>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d00e      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x194>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a1b      	ldr	r2, [pc, #108]	; (8006818 <HAL_DMA_IRQHandler+0x1e8>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d009      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x194>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a19      	ldr	r2, [pc, #100]	; (800681c <HAL_DMA_IRQHandler+0x1ec>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d004      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x194>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a18      	ldr	r2, [pc, #96]	; (8006820 <HAL_DMA_IRQHandler+0x1f0>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d12f      	bne.n	8006824 <HAL_DMA_IRQHandler+0x1f4>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0304 	and.w	r3, r3, #4
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	bf14      	ite	ne
 80067d2:	2301      	movne	r3, #1
 80067d4:	2300      	moveq	r3, #0
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	e02e      	b.n	8006838 <HAL_DMA_IRQHandler+0x208>
 80067da:	bf00      	nop
 80067dc:	24000014 	.word	0x24000014
 80067e0:	1b4e81b5 	.word	0x1b4e81b5
 80067e4:	40020010 	.word	0x40020010
 80067e8:	40020028 	.word	0x40020028
 80067ec:	40020040 	.word	0x40020040
 80067f0:	40020058 	.word	0x40020058
 80067f4:	40020070 	.word	0x40020070
 80067f8:	40020088 	.word	0x40020088
 80067fc:	400200a0 	.word	0x400200a0
 8006800:	400200b8 	.word	0x400200b8
 8006804:	40020410 	.word	0x40020410
 8006808:	40020428 	.word	0x40020428
 800680c:	40020440 	.word	0x40020440
 8006810:	40020458 	.word	0x40020458
 8006814:	40020470 	.word	0x40020470
 8006818:	40020488 	.word	0x40020488
 800681c:	400204a0 	.word	0x400204a0
 8006820:	400204b8 	.word	0x400204b8
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0308 	and.w	r3, r3, #8
 800682e:	2b00      	cmp	r3, #0
 8006830:	bf14      	ite	ne
 8006832:	2301      	movne	r3, #1
 8006834:	2300      	moveq	r3, #0
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b00      	cmp	r3, #0
 800683a:	d015      	beq.n	8006868 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f022 0204 	bic.w	r2, r2, #4
 800684a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006850:	f003 031f 	and.w	r3, r3, #31
 8006854:	2208      	movs	r2, #8
 8006856:	409a      	lsls	r2, r3
 8006858:	6a3b      	ldr	r3, [r7, #32]
 800685a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006860:	f043 0201 	orr.w	r2, r3, #1
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800686c:	f003 031f 	and.w	r3, r3, #31
 8006870:	69ba      	ldr	r2, [r7, #24]
 8006872:	fa22 f303 	lsr.w	r3, r2, r3
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b00      	cmp	r3, #0
 800687c:	d06e      	beq.n	800695c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a69      	ldr	r2, [pc, #420]	; (8006a28 <HAL_DMA_IRQHandler+0x3f8>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d04a      	beq.n	800691e <HAL_DMA_IRQHandler+0x2ee>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a67      	ldr	r2, [pc, #412]	; (8006a2c <HAL_DMA_IRQHandler+0x3fc>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d045      	beq.n	800691e <HAL_DMA_IRQHandler+0x2ee>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a66      	ldr	r2, [pc, #408]	; (8006a30 <HAL_DMA_IRQHandler+0x400>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d040      	beq.n	800691e <HAL_DMA_IRQHandler+0x2ee>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a64      	ldr	r2, [pc, #400]	; (8006a34 <HAL_DMA_IRQHandler+0x404>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d03b      	beq.n	800691e <HAL_DMA_IRQHandler+0x2ee>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a63      	ldr	r2, [pc, #396]	; (8006a38 <HAL_DMA_IRQHandler+0x408>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d036      	beq.n	800691e <HAL_DMA_IRQHandler+0x2ee>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a61      	ldr	r2, [pc, #388]	; (8006a3c <HAL_DMA_IRQHandler+0x40c>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d031      	beq.n	800691e <HAL_DMA_IRQHandler+0x2ee>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a60      	ldr	r2, [pc, #384]	; (8006a40 <HAL_DMA_IRQHandler+0x410>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d02c      	beq.n	800691e <HAL_DMA_IRQHandler+0x2ee>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a5e      	ldr	r2, [pc, #376]	; (8006a44 <HAL_DMA_IRQHandler+0x414>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d027      	beq.n	800691e <HAL_DMA_IRQHandler+0x2ee>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a5d      	ldr	r2, [pc, #372]	; (8006a48 <HAL_DMA_IRQHandler+0x418>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d022      	beq.n	800691e <HAL_DMA_IRQHandler+0x2ee>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a5b      	ldr	r2, [pc, #364]	; (8006a4c <HAL_DMA_IRQHandler+0x41c>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d01d      	beq.n	800691e <HAL_DMA_IRQHandler+0x2ee>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a5a      	ldr	r2, [pc, #360]	; (8006a50 <HAL_DMA_IRQHandler+0x420>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d018      	beq.n	800691e <HAL_DMA_IRQHandler+0x2ee>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a58      	ldr	r2, [pc, #352]	; (8006a54 <HAL_DMA_IRQHandler+0x424>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d013      	beq.n	800691e <HAL_DMA_IRQHandler+0x2ee>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a57      	ldr	r2, [pc, #348]	; (8006a58 <HAL_DMA_IRQHandler+0x428>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d00e      	beq.n	800691e <HAL_DMA_IRQHandler+0x2ee>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a55      	ldr	r2, [pc, #340]	; (8006a5c <HAL_DMA_IRQHandler+0x42c>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d009      	beq.n	800691e <HAL_DMA_IRQHandler+0x2ee>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a54      	ldr	r2, [pc, #336]	; (8006a60 <HAL_DMA_IRQHandler+0x430>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d004      	beq.n	800691e <HAL_DMA_IRQHandler+0x2ee>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a52      	ldr	r2, [pc, #328]	; (8006a64 <HAL_DMA_IRQHandler+0x434>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d10a      	bne.n	8006934 <HAL_DMA_IRQHandler+0x304>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	695b      	ldr	r3, [r3, #20]
 8006924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006928:	2b00      	cmp	r3, #0
 800692a:	bf14      	ite	ne
 800692c:	2301      	movne	r3, #1
 800692e:	2300      	moveq	r3, #0
 8006930:	b2db      	uxtb	r3, r3
 8006932:	e003      	b.n	800693c <HAL_DMA_IRQHandler+0x30c>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2300      	movs	r3, #0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00d      	beq.n	800695c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006944:	f003 031f 	and.w	r3, r3, #31
 8006948:	2201      	movs	r2, #1
 800694a:	409a      	lsls	r2, r3
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006954:	f043 0202 	orr.w	r2, r3, #2
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006960:	f003 031f 	and.w	r3, r3, #31
 8006964:	2204      	movs	r2, #4
 8006966:	409a      	lsls	r2, r3
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	4013      	ands	r3, r2
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 808f 	beq.w	8006a90 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a2c      	ldr	r2, [pc, #176]	; (8006a28 <HAL_DMA_IRQHandler+0x3f8>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d04a      	beq.n	8006a12 <HAL_DMA_IRQHandler+0x3e2>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a2a      	ldr	r2, [pc, #168]	; (8006a2c <HAL_DMA_IRQHandler+0x3fc>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d045      	beq.n	8006a12 <HAL_DMA_IRQHandler+0x3e2>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a29      	ldr	r2, [pc, #164]	; (8006a30 <HAL_DMA_IRQHandler+0x400>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d040      	beq.n	8006a12 <HAL_DMA_IRQHandler+0x3e2>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a27      	ldr	r2, [pc, #156]	; (8006a34 <HAL_DMA_IRQHandler+0x404>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d03b      	beq.n	8006a12 <HAL_DMA_IRQHandler+0x3e2>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a26      	ldr	r2, [pc, #152]	; (8006a38 <HAL_DMA_IRQHandler+0x408>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d036      	beq.n	8006a12 <HAL_DMA_IRQHandler+0x3e2>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a24      	ldr	r2, [pc, #144]	; (8006a3c <HAL_DMA_IRQHandler+0x40c>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d031      	beq.n	8006a12 <HAL_DMA_IRQHandler+0x3e2>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a23      	ldr	r2, [pc, #140]	; (8006a40 <HAL_DMA_IRQHandler+0x410>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d02c      	beq.n	8006a12 <HAL_DMA_IRQHandler+0x3e2>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a21      	ldr	r2, [pc, #132]	; (8006a44 <HAL_DMA_IRQHandler+0x414>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d027      	beq.n	8006a12 <HAL_DMA_IRQHandler+0x3e2>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a20      	ldr	r2, [pc, #128]	; (8006a48 <HAL_DMA_IRQHandler+0x418>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d022      	beq.n	8006a12 <HAL_DMA_IRQHandler+0x3e2>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a1e      	ldr	r2, [pc, #120]	; (8006a4c <HAL_DMA_IRQHandler+0x41c>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d01d      	beq.n	8006a12 <HAL_DMA_IRQHandler+0x3e2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a1d      	ldr	r2, [pc, #116]	; (8006a50 <HAL_DMA_IRQHandler+0x420>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d018      	beq.n	8006a12 <HAL_DMA_IRQHandler+0x3e2>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a1b      	ldr	r2, [pc, #108]	; (8006a54 <HAL_DMA_IRQHandler+0x424>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d013      	beq.n	8006a12 <HAL_DMA_IRQHandler+0x3e2>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a1a      	ldr	r2, [pc, #104]	; (8006a58 <HAL_DMA_IRQHandler+0x428>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d00e      	beq.n	8006a12 <HAL_DMA_IRQHandler+0x3e2>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a18      	ldr	r2, [pc, #96]	; (8006a5c <HAL_DMA_IRQHandler+0x42c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d009      	beq.n	8006a12 <HAL_DMA_IRQHandler+0x3e2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a17      	ldr	r2, [pc, #92]	; (8006a60 <HAL_DMA_IRQHandler+0x430>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d004      	beq.n	8006a12 <HAL_DMA_IRQHandler+0x3e2>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a15      	ldr	r2, [pc, #84]	; (8006a64 <HAL_DMA_IRQHandler+0x434>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d12a      	bne.n	8006a68 <HAL_DMA_IRQHandler+0x438>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0302 	and.w	r3, r3, #2
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	bf14      	ite	ne
 8006a20:	2301      	movne	r3, #1
 8006a22:	2300      	moveq	r3, #0
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	e023      	b.n	8006a70 <HAL_DMA_IRQHandler+0x440>
 8006a28:	40020010 	.word	0x40020010
 8006a2c:	40020028 	.word	0x40020028
 8006a30:	40020040 	.word	0x40020040
 8006a34:	40020058 	.word	0x40020058
 8006a38:	40020070 	.word	0x40020070
 8006a3c:	40020088 	.word	0x40020088
 8006a40:	400200a0 	.word	0x400200a0
 8006a44:	400200b8 	.word	0x400200b8
 8006a48:	40020410 	.word	0x40020410
 8006a4c:	40020428 	.word	0x40020428
 8006a50:	40020440 	.word	0x40020440
 8006a54:	40020458 	.word	0x40020458
 8006a58:	40020470 	.word	0x40020470
 8006a5c:	40020488 	.word	0x40020488
 8006a60:	400204a0 	.word	0x400204a0
 8006a64:	400204b8 	.word	0x400204b8
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2300      	movs	r3, #0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00d      	beq.n	8006a90 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a78:	f003 031f 	and.w	r3, r3, #31
 8006a7c:	2204      	movs	r2, #4
 8006a7e:	409a      	lsls	r2, r3
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a88:	f043 0204 	orr.w	r2, r3, #4
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a94:	f003 031f 	and.w	r3, r3, #31
 8006a98:	2210      	movs	r2, #16
 8006a9a:	409a      	lsls	r2, r3
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 80a6 	beq.w	8006bf2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a85      	ldr	r2, [pc, #532]	; (8006cc0 <HAL_DMA_IRQHandler+0x690>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d04a      	beq.n	8006b46 <HAL_DMA_IRQHandler+0x516>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a83      	ldr	r2, [pc, #524]	; (8006cc4 <HAL_DMA_IRQHandler+0x694>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d045      	beq.n	8006b46 <HAL_DMA_IRQHandler+0x516>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a82      	ldr	r2, [pc, #520]	; (8006cc8 <HAL_DMA_IRQHandler+0x698>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d040      	beq.n	8006b46 <HAL_DMA_IRQHandler+0x516>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a80      	ldr	r2, [pc, #512]	; (8006ccc <HAL_DMA_IRQHandler+0x69c>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d03b      	beq.n	8006b46 <HAL_DMA_IRQHandler+0x516>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a7f      	ldr	r2, [pc, #508]	; (8006cd0 <HAL_DMA_IRQHandler+0x6a0>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d036      	beq.n	8006b46 <HAL_DMA_IRQHandler+0x516>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a7d      	ldr	r2, [pc, #500]	; (8006cd4 <HAL_DMA_IRQHandler+0x6a4>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d031      	beq.n	8006b46 <HAL_DMA_IRQHandler+0x516>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a7c      	ldr	r2, [pc, #496]	; (8006cd8 <HAL_DMA_IRQHandler+0x6a8>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d02c      	beq.n	8006b46 <HAL_DMA_IRQHandler+0x516>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a7a      	ldr	r2, [pc, #488]	; (8006cdc <HAL_DMA_IRQHandler+0x6ac>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d027      	beq.n	8006b46 <HAL_DMA_IRQHandler+0x516>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a79      	ldr	r2, [pc, #484]	; (8006ce0 <HAL_DMA_IRQHandler+0x6b0>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d022      	beq.n	8006b46 <HAL_DMA_IRQHandler+0x516>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a77      	ldr	r2, [pc, #476]	; (8006ce4 <HAL_DMA_IRQHandler+0x6b4>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d01d      	beq.n	8006b46 <HAL_DMA_IRQHandler+0x516>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a76      	ldr	r2, [pc, #472]	; (8006ce8 <HAL_DMA_IRQHandler+0x6b8>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d018      	beq.n	8006b46 <HAL_DMA_IRQHandler+0x516>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a74      	ldr	r2, [pc, #464]	; (8006cec <HAL_DMA_IRQHandler+0x6bc>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d013      	beq.n	8006b46 <HAL_DMA_IRQHandler+0x516>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a73      	ldr	r2, [pc, #460]	; (8006cf0 <HAL_DMA_IRQHandler+0x6c0>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d00e      	beq.n	8006b46 <HAL_DMA_IRQHandler+0x516>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a71      	ldr	r2, [pc, #452]	; (8006cf4 <HAL_DMA_IRQHandler+0x6c4>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d009      	beq.n	8006b46 <HAL_DMA_IRQHandler+0x516>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a70      	ldr	r2, [pc, #448]	; (8006cf8 <HAL_DMA_IRQHandler+0x6c8>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d004      	beq.n	8006b46 <HAL_DMA_IRQHandler+0x516>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a6e      	ldr	r2, [pc, #440]	; (8006cfc <HAL_DMA_IRQHandler+0x6cc>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d10a      	bne.n	8006b5c <HAL_DMA_IRQHandler+0x52c>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0308 	and.w	r3, r3, #8
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	bf14      	ite	ne
 8006b54:	2301      	movne	r3, #1
 8006b56:	2300      	moveq	r3, #0
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	e009      	b.n	8006b70 <HAL_DMA_IRQHandler+0x540>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0304 	and.w	r3, r3, #4
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	bf14      	ite	ne
 8006b6a:	2301      	movne	r3, #1
 8006b6c:	2300      	moveq	r3, #0
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d03e      	beq.n	8006bf2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b78:	f003 031f 	and.w	r3, r3, #31
 8006b7c:	2210      	movs	r2, #16
 8006b7e:	409a      	lsls	r2, r3
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d018      	beq.n	8006bc4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d108      	bne.n	8006bb2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d024      	beq.n	8006bf2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	4798      	blx	r3
 8006bb0:	e01f      	b.n	8006bf2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d01b      	beq.n	8006bf2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	4798      	blx	r3
 8006bc2:	e016      	b.n	8006bf2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d107      	bne.n	8006be2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f022 0208 	bic.w	r2, r2, #8
 8006be0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d003      	beq.n	8006bf2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bf6:	f003 031f 	and.w	r3, r3, #31
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	409a      	lsls	r2, r3
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	4013      	ands	r3, r2
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 8110 	beq.w	8006e28 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a2c      	ldr	r2, [pc, #176]	; (8006cc0 <HAL_DMA_IRQHandler+0x690>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d04a      	beq.n	8006ca8 <HAL_DMA_IRQHandler+0x678>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a2b      	ldr	r2, [pc, #172]	; (8006cc4 <HAL_DMA_IRQHandler+0x694>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d045      	beq.n	8006ca8 <HAL_DMA_IRQHandler+0x678>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a29      	ldr	r2, [pc, #164]	; (8006cc8 <HAL_DMA_IRQHandler+0x698>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d040      	beq.n	8006ca8 <HAL_DMA_IRQHandler+0x678>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a28      	ldr	r2, [pc, #160]	; (8006ccc <HAL_DMA_IRQHandler+0x69c>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d03b      	beq.n	8006ca8 <HAL_DMA_IRQHandler+0x678>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a26      	ldr	r2, [pc, #152]	; (8006cd0 <HAL_DMA_IRQHandler+0x6a0>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d036      	beq.n	8006ca8 <HAL_DMA_IRQHandler+0x678>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a25      	ldr	r2, [pc, #148]	; (8006cd4 <HAL_DMA_IRQHandler+0x6a4>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d031      	beq.n	8006ca8 <HAL_DMA_IRQHandler+0x678>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a23      	ldr	r2, [pc, #140]	; (8006cd8 <HAL_DMA_IRQHandler+0x6a8>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d02c      	beq.n	8006ca8 <HAL_DMA_IRQHandler+0x678>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a22      	ldr	r2, [pc, #136]	; (8006cdc <HAL_DMA_IRQHandler+0x6ac>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d027      	beq.n	8006ca8 <HAL_DMA_IRQHandler+0x678>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a20      	ldr	r2, [pc, #128]	; (8006ce0 <HAL_DMA_IRQHandler+0x6b0>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d022      	beq.n	8006ca8 <HAL_DMA_IRQHandler+0x678>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a1f      	ldr	r2, [pc, #124]	; (8006ce4 <HAL_DMA_IRQHandler+0x6b4>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d01d      	beq.n	8006ca8 <HAL_DMA_IRQHandler+0x678>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a1d      	ldr	r2, [pc, #116]	; (8006ce8 <HAL_DMA_IRQHandler+0x6b8>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d018      	beq.n	8006ca8 <HAL_DMA_IRQHandler+0x678>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a1c      	ldr	r2, [pc, #112]	; (8006cec <HAL_DMA_IRQHandler+0x6bc>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d013      	beq.n	8006ca8 <HAL_DMA_IRQHandler+0x678>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a1a      	ldr	r2, [pc, #104]	; (8006cf0 <HAL_DMA_IRQHandler+0x6c0>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d00e      	beq.n	8006ca8 <HAL_DMA_IRQHandler+0x678>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a19      	ldr	r2, [pc, #100]	; (8006cf4 <HAL_DMA_IRQHandler+0x6c4>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d009      	beq.n	8006ca8 <HAL_DMA_IRQHandler+0x678>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a17      	ldr	r2, [pc, #92]	; (8006cf8 <HAL_DMA_IRQHandler+0x6c8>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d004      	beq.n	8006ca8 <HAL_DMA_IRQHandler+0x678>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a16      	ldr	r2, [pc, #88]	; (8006cfc <HAL_DMA_IRQHandler+0x6cc>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d12b      	bne.n	8006d00 <HAL_DMA_IRQHandler+0x6d0>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0310 	and.w	r3, r3, #16
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	bf14      	ite	ne
 8006cb6:	2301      	movne	r3, #1
 8006cb8:	2300      	moveq	r3, #0
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	e02a      	b.n	8006d14 <HAL_DMA_IRQHandler+0x6e4>
 8006cbe:	bf00      	nop
 8006cc0:	40020010 	.word	0x40020010
 8006cc4:	40020028 	.word	0x40020028
 8006cc8:	40020040 	.word	0x40020040
 8006ccc:	40020058 	.word	0x40020058
 8006cd0:	40020070 	.word	0x40020070
 8006cd4:	40020088 	.word	0x40020088
 8006cd8:	400200a0 	.word	0x400200a0
 8006cdc:	400200b8 	.word	0x400200b8
 8006ce0:	40020410 	.word	0x40020410
 8006ce4:	40020428 	.word	0x40020428
 8006ce8:	40020440 	.word	0x40020440
 8006cec:	40020458 	.word	0x40020458
 8006cf0:	40020470 	.word	0x40020470
 8006cf4:	40020488 	.word	0x40020488
 8006cf8:	400204a0 	.word	0x400204a0
 8006cfc:	400204b8 	.word	0x400204b8
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0302 	and.w	r3, r3, #2
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	bf14      	ite	ne
 8006d0e:	2301      	movne	r3, #1
 8006d10:	2300      	moveq	r3, #0
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 8087 	beq.w	8006e28 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d1e:	f003 031f 	and.w	r3, r3, #31
 8006d22:	2220      	movs	r2, #32
 8006d24:	409a      	lsls	r2, r3
 8006d26:	6a3b      	ldr	r3, [r7, #32]
 8006d28:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b04      	cmp	r3, #4
 8006d34:	d139      	bne.n	8006daa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f022 0216 	bic.w	r2, r2, #22
 8006d44:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	695a      	ldr	r2, [r3, #20]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d54:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d103      	bne.n	8006d66 <HAL_DMA_IRQHandler+0x736>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d007      	beq.n	8006d76 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f022 0208 	bic.w	r2, r2, #8
 8006d74:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d7a:	f003 031f 	and.w	r3, r3, #31
 8006d7e:	223f      	movs	r2, #63	; 0x3f
 8006d80:	409a      	lsls	r2, r3
 8006d82:	6a3b      	ldr	r3, [r7, #32]
 8006d84:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 834a 	beq.w	8007434 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	4798      	blx	r3
          }
          return;
 8006da8:	e344      	b.n	8007434 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d018      	beq.n	8006dea <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d108      	bne.n	8006dd8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d02c      	beq.n	8006e28 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	4798      	blx	r3
 8006dd6:	e027      	b.n	8006e28 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d023      	beq.n	8006e28 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	4798      	blx	r3
 8006de8:	e01e      	b.n	8006e28 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10f      	bne.n	8006e18 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f022 0210 	bic.w	r2, r2, #16
 8006e06:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d003      	beq.n	8006e28 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 8306 	beq.w	800743e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f000 8088 	beq.w	8006f50 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2204      	movs	r2, #4
 8006e44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a7a      	ldr	r2, [pc, #488]	; (8007038 <HAL_DMA_IRQHandler+0xa08>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d04a      	beq.n	8006ee8 <HAL_DMA_IRQHandler+0x8b8>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a79      	ldr	r2, [pc, #484]	; (800703c <HAL_DMA_IRQHandler+0xa0c>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d045      	beq.n	8006ee8 <HAL_DMA_IRQHandler+0x8b8>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a77      	ldr	r2, [pc, #476]	; (8007040 <HAL_DMA_IRQHandler+0xa10>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d040      	beq.n	8006ee8 <HAL_DMA_IRQHandler+0x8b8>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a76      	ldr	r2, [pc, #472]	; (8007044 <HAL_DMA_IRQHandler+0xa14>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d03b      	beq.n	8006ee8 <HAL_DMA_IRQHandler+0x8b8>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a74      	ldr	r2, [pc, #464]	; (8007048 <HAL_DMA_IRQHandler+0xa18>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d036      	beq.n	8006ee8 <HAL_DMA_IRQHandler+0x8b8>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a73      	ldr	r2, [pc, #460]	; (800704c <HAL_DMA_IRQHandler+0xa1c>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d031      	beq.n	8006ee8 <HAL_DMA_IRQHandler+0x8b8>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a71      	ldr	r2, [pc, #452]	; (8007050 <HAL_DMA_IRQHandler+0xa20>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d02c      	beq.n	8006ee8 <HAL_DMA_IRQHandler+0x8b8>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a70      	ldr	r2, [pc, #448]	; (8007054 <HAL_DMA_IRQHandler+0xa24>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d027      	beq.n	8006ee8 <HAL_DMA_IRQHandler+0x8b8>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a6e      	ldr	r2, [pc, #440]	; (8007058 <HAL_DMA_IRQHandler+0xa28>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d022      	beq.n	8006ee8 <HAL_DMA_IRQHandler+0x8b8>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a6d      	ldr	r2, [pc, #436]	; (800705c <HAL_DMA_IRQHandler+0xa2c>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d01d      	beq.n	8006ee8 <HAL_DMA_IRQHandler+0x8b8>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a6b      	ldr	r2, [pc, #428]	; (8007060 <HAL_DMA_IRQHandler+0xa30>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d018      	beq.n	8006ee8 <HAL_DMA_IRQHandler+0x8b8>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a6a      	ldr	r2, [pc, #424]	; (8007064 <HAL_DMA_IRQHandler+0xa34>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d013      	beq.n	8006ee8 <HAL_DMA_IRQHandler+0x8b8>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a68      	ldr	r2, [pc, #416]	; (8007068 <HAL_DMA_IRQHandler+0xa38>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d00e      	beq.n	8006ee8 <HAL_DMA_IRQHandler+0x8b8>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a67      	ldr	r2, [pc, #412]	; (800706c <HAL_DMA_IRQHandler+0xa3c>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d009      	beq.n	8006ee8 <HAL_DMA_IRQHandler+0x8b8>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a65      	ldr	r2, [pc, #404]	; (8007070 <HAL_DMA_IRQHandler+0xa40>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d004      	beq.n	8006ee8 <HAL_DMA_IRQHandler+0x8b8>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a64      	ldr	r2, [pc, #400]	; (8007074 <HAL_DMA_IRQHandler+0xa44>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d108      	bne.n	8006efa <HAL_DMA_IRQHandler+0x8ca>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f022 0201 	bic.w	r2, r2, #1
 8006ef6:	601a      	str	r2, [r3, #0]
 8006ef8:	e007      	b.n	8006f0a <HAL_DMA_IRQHandler+0x8da>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 0201 	bic.w	r2, r2, #1
 8006f08:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	60fb      	str	r3, [r7, #12]
 8006f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d307      	bcc.n	8006f26 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0301 	and.w	r3, r3, #1
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1f2      	bne.n	8006f0a <HAL_DMA_IRQHandler+0x8da>
 8006f24:	e000      	b.n	8006f28 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006f26:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0301 	and.w	r3, r3, #1
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d004      	beq.n	8006f48 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2203      	movs	r2, #3
 8006f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006f46:	e003      	b.n	8006f50 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 8272 	beq.w	800743e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	4798      	blx	r3
 8006f62:	e26c      	b.n	800743e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a43      	ldr	r2, [pc, #268]	; (8007078 <HAL_DMA_IRQHandler+0xa48>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d022      	beq.n	8006fb4 <HAL_DMA_IRQHandler+0x984>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a42      	ldr	r2, [pc, #264]	; (800707c <HAL_DMA_IRQHandler+0xa4c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d01d      	beq.n	8006fb4 <HAL_DMA_IRQHandler+0x984>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a40      	ldr	r2, [pc, #256]	; (8007080 <HAL_DMA_IRQHandler+0xa50>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d018      	beq.n	8006fb4 <HAL_DMA_IRQHandler+0x984>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a3f      	ldr	r2, [pc, #252]	; (8007084 <HAL_DMA_IRQHandler+0xa54>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d013      	beq.n	8006fb4 <HAL_DMA_IRQHandler+0x984>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a3d      	ldr	r2, [pc, #244]	; (8007088 <HAL_DMA_IRQHandler+0xa58>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d00e      	beq.n	8006fb4 <HAL_DMA_IRQHandler+0x984>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a3c      	ldr	r2, [pc, #240]	; (800708c <HAL_DMA_IRQHandler+0xa5c>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d009      	beq.n	8006fb4 <HAL_DMA_IRQHandler+0x984>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a3a      	ldr	r2, [pc, #232]	; (8007090 <HAL_DMA_IRQHandler+0xa60>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d004      	beq.n	8006fb4 <HAL_DMA_IRQHandler+0x984>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a39      	ldr	r2, [pc, #228]	; (8007094 <HAL_DMA_IRQHandler+0xa64>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d101      	bne.n	8006fb8 <HAL_DMA_IRQHandler+0x988>
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e000      	b.n	8006fba <HAL_DMA_IRQHandler+0x98a>
 8006fb8:	2300      	movs	r3, #0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f000 823f 	beq.w	800743e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fcc:	f003 031f 	and.w	r3, r3, #31
 8006fd0:	2204      	movs	r2, #4
 8006fd2:	409a      	lsls	r2, r3
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f000 80cd 	beq.w	8007178 <HAL_DMA_IRQHandler+0xb48>
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	f003 0304 	and.w	r3, r3, #4
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f000 80c7 	beq.w	8007178 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fee:	f003 031f 	and.w	r3, r3, #31
 8006ff2:	2204      	movs	r2, #4
 8006ff4:	409a      	lsls	r2, r3
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d049      	beq.n	8007098 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d109      	bne.n	8007022 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 8210 	beq.w	8007438 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007020:	e20a      	b.n	8007438 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007026:	2b00      	cmp	r3, #0
 8007028:	f000 8206 	beq.w	8007438 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007034:	e200      	b.n	8007438 <HAL_DMA_IRQHandler+0xe08>
 8007036:	bf00      	nop
 8007038:	40020010 	.word	0x40020010
 800703c:	40020028 	.word	0x40020028
 8007040:	40020040 	.word	0x40020040
 8007044:	40020058 	.word	0x40020058
 8007048:	40020070 	.word	0x40020070
 800704c:	40020088 	.word	0x40020088
 8007050:	400200a0 	.word	0x400200a0
 8007054:	400200b8 	.word	0x400200b8
 8007058:	40020410 	.word	0x40020410
 800705c:	40020428 	.word	0x40020428
 8007060:	40020440 	.word	0x40020440
 8007064:	40020458 	.word	0x40020458
 8007068:	40020470 	.word	0x40020470
 800706c:	40020488 	.word	0x40020488
 8007070:	400204a0 	.word	0x400204a0
 8007074:	400204b8 	.word	0x400204b8
 8007078:	58025408 	.word	0x58025408
 800707c:	5802541c 	.word	0x5802541c
 8007080:	58025430 	.word	0x58025430
 8007084:	58025444 	.word	0x58025444
 8007088:	58025458 	.word	0x58025458
 800708c:	5802546c 	.word	0x5802546c
 8007090:	58025480 	.word	0x58025480
 8007094:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	f003 0320 	and.w	r3, r3, #32
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d160      	bne.n	8007164 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a8c      	ldr	r2, [pc, #560]	; (80072d8 <HAL_DMA_IRQHandler+0xca8>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d04a      	beq.n	8007142 <HAL_DMA_IRQHandler+0xb12>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a8a      	ldr	r2, [pc, #552]	; (80072dc <HAL_DMA_IRQHandler+0xcac>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d045      	beq.n	8007142 <HAL_DMA_IRQHandler+0xb12>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a89      	ldr	r2, [pc, #548]	; (80072e0 <HAL_DMA_IRQHandler+0xcb0>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d040      	beq.n	8007142 <HAL_DMA_IRQHandler+0xb12>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a87      	ldr	r2, [pc, #540]	; (80072e4 <HAL_DMA_IRQHandler+0xcb4>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d03b      	beq.n	8007142 <HAL_DMA_IRQHandler+0xb12>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a86      	ldr	r2, [pc, #536]	; (80072e8 <HAL_DMA_IRQHandler+0xcb8>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d036      	beq.n	8007142 <HAL_DMA_IRQHandler+0xb12>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a84      	ldr	r2, [pc, #528]	; (80072ec <HAL_DMA_IRQHandler+0xcbc>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d031      	beq.n	8007142 <HAL_DMA_IRQHandler+0xb12>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a83      	ldr	r2, [pc, #524]	; (80072f0 <HAL_DMA_IRQHandler+0xcc0>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d02c      	beq.n	8007142 <HAL_DMA_IRQHandler+0xb12>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a81      	ldr	r2, [pc, #516]	; (80072f4 <HAL_DMA_IRQHandler+0xcc4>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d027      	beq.n	8007142 <HAL_DMA_IRQHandler+0xb12>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a80      	ldr	r2, [pc, #512]	; (80072f8 <HAL_DMA_IRQHandler+0xcc8>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d022      	beq.n	8007142 <HAL_DMA_IRQHandler+0xb12>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a7e      	ldr	r2, [pc, #504]	; (80072fc <HAL_DMA_IRQHandler+0xccc>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d01d      	beq.n	8007142 <HAL_DMA_IRQHandler+0xb12>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a7d      	ldr	r2, [pc, #500]	; (8007300 <HAL_DMA_IRQHandler+0xcd0>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d018      	beq.n	8007142 <HAL_DMA_IRQHandler+0xb12>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a7b      	ldr	r2, [pc, #492]	; (8007304 <HAL_DMA_IRQHandler+0xcd4>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d013      	beq.n	8007142 <HAL_DMA_IRQHandler+0xb12>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a7a      	ldr	r2, [pc, #488]	; (8007308 <HAL_DMA_IRQHandler+0xcd8>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d00e      	beq.n	8007142 <HAL_DMA_IRQHandler+0xb12>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a78      	ldr	r2, [pc, #480]	; (800730c <HAL_DMA_IRQHandler+0xcdc>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d009      	beq.n	8007142 <HAL_DMA_IRQHandler+0xb12>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a77      	ldr	r2, [pc, #476]	; (8007310 <HAL_DMA_IRQHandler+0xce0>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d004      	beq.n	8007142 <HAL_DMA_IRQHandler+0xb12>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a75      	ldr	r2, [pc, #468]	; (8007314 <HAL_DMA_IRQHandler+0xce4>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d108      	bne.n	8007154 <HAL_DMA_IRQHandler+0xb24>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f022 0208 	bic.w	r2, r2, #8
 8007150:	601a      	str	r2, [r3, #0]
 8007152:	e007      	b.n	8007164 <HAL_DMA_IRQHandler+0xb34>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 0204 	bic.w	r2, r2, #4
 8007162:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007168:	2b00      	cmp	r3, #0
 800716a:	f000 8165 	beq.w	8007438 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007176:	e15f      	b.n	8007438 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800717c:	f003 031f 	and.w	r3, r3, #31
 8007180:	2202      	movs	r2, #2
 8007182:	409a      	lsls	r2, r3
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	4013      	ands	r3, r2
 8007188:	2b00      	cmp	r3, #0
 800718a:	f000 80c5 	beq.w	8007318 <HAL_DMA_IRQHandler+0xce8>
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	f003 0302 	and.w	r3, r3, #2
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 80bf 	beq.w	8007318 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800719e:	f003 031f 	and.w	r3, r3, #31
 80071a2:	2202      	movs	r2, #2
 80071a4:	409a      	lsls	r2, r3
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d018      	beq.n	80071e6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d109      	bne.n	80071d2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f000 813a 	beq.w	800743c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071d0:	e134      	b.n	800743c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f000 8130 	beq.w	800743c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071e4:	e12a      	b.n	800743c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	f003 0320 	and.w	r3, r3, #32
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d168      	bne.n	80072c2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a38      	ldr	r2, [pc, #224]	; (80072d8 <HAL_DMA_IRQHandler+0xca8>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d04a      	beq.n	8007290 <HAL_DMA_IRQHandler+0xc60>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a37      	ldr	r2, [pc, #220]	; (80072dc <HAL_DMA_IRQHandler+0xcac>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d045      	beq.n	8007290 <HAL_DMA_IRQHandler+0xc60>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a35      	ldr	r2, [pc, #212]	; (80072e0 <HAL_DMA_IRQHandler+0xcb0>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d040      	beq.n	8007290 <HAL_DMA_IRQHandler+0xc60>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a34      	ldr	r2, [pc, #208]	; (80072e4 <HAL_DMA_IRQHandler+0xcb4>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d03b      	beq.n	8007290 <HAL_DMA_IRQHandler+0xc60>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a32      	ldr	r2, [pc, #200]	; (80072e8 <HAL_DMA_IRQHandler+0xcb8>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d036      	beq.n	8007290 <HAL_DMA_IRQHandler+0xc60>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a31      	ldr	r2, [pc, #196]	; (80072ec <HAL_DMA_IRQHandler+0xcbc>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d031      	beq.n	8007290 <HAL_DMA_IRQHandler+0xc60>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a2f      	ldr	r2, [pc, #188]	; (80072f0 <HAL_DMA_IRQHandler+0xcc0>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d02c      	beq.n	8007290 <HAL_DMA_IRQHandler+0xc60>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a2e      	ldr	r2, [pc, #184]	; (80072f4 <HAL_DMA_IRQHandler+0xcc4>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d027      	beq.n	8007290 <HAL_DMA_IRQHandler+0xc60>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a2c      	ldr	r2, [pc, #176]	; (80072f8 <HAL_DMA_IRQHandler+0xcc8>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d022      	beq.n	8007290 <HAL_DMA_IRQHandler+0xc60>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a2b      	ldr	r2, [pc, #172]	; (80072fc <HAL_DMA_IRQHandler+0xccc>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d01d      	beq.n	8007290 <HAL_DMA_IRQHandler+0xc60>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a29      	ldr	r2, [pc, #164]	; (8007300 <HAL_DMA_IRQHandler+0xcd0>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d018      	beq.n	8007290 <HAL_DMA_IRQHandler+0xc60>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a28      	ldr	r2, [pc, #160]	; (8007304 <HAL_DMA_IRQHandler+0xcd4>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d013      	beq.n	8007290 <HAL_DMA_IRQHandler+0xc60>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a26      	ldr	r2, [pc, #152]	; (8007308 <HAL_DMA_IRQHandler+0xcd8>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d00e      	beq.n	8007290 <HAL_DMA_IRQHandler+0xc60>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a25      	ldr	r2, [pc, #148]	; (800730c <HAL_DMA_IRQHandler+0xcdc>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d009      	beq.n	8007290 <HAL_DMA_IRQHandler+0xc60>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a23      	ldr	r2, [pc, #140]	; (8007310 <HAL_DMA_IRQHandler+0xce0>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d004      	beq.n	8007290 <HAL_DMA_IRQHandler+0xc60>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a22      	ldr	r2, [pc, #136]	; (8007314 <HAL_DMA_IRQHandler+0xce4>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d108      	bne.n	80072a2 <HAL_DMA_IRQHandler+0xc72>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f022 0214 	bic.w	r2, r2, #20
 800729e:	601a      	str	r2, [r3, #0]
 80072a0:	e007      	b.n	80072b2 <HAL_DMA_IRQHandler+0xc82>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f022 020a 	bic.w	r2, r2, #10
 80072b0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f000 80b8 	beq.w	800743c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80072d4:	e0b2      	b.n	800743c <HAL_DMA_IRQHandler+0xe0c>
 80072d6:	bf00      	nop
 80072d8:	40020010 	.word	0x40020010
 80072dc:	40020028 	.word	0x40020028
 80072e0:	40020040 	.word	0x40020040
 80072e4:	40020058 	.word	0x40020058
 80072e8:	40020070 	.word	0x40020070
 80072ec:	40020088 	.word	0x40020088
 80072f0:	400200a0 	.word	0x400200a0
 80072f4:	400200b8 	.word	0x400200b8
 80072f8:	40020410 	.word	0x40020410
 80072fc:	40020428 	.word	0x40020428
 8007300:	40020440 	.word	0x40020440
 8007304:	40020458 	.word	0x40020458
 8007308:	40020470 	.word	0x40020470
 800730c:	40020488 	.word	0x40020488
 8007310:	400204a0 	.word	0x400204a0
 8007314:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800731c:	f003 031f 	and.w	r3, r3, #31
 8007320:	2208      	movs	r2, #8
 8007322:	409a      	lsls	r2, r3
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	4013      	ands	r3, r2
 8007328:	2b00      	cmp	r3, #0
 800732a:	f000 8088 	beq.w	800743e <HAL_DMA_IRQHandler+0xe0e>
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	f003 0308 	and.w	r3, r3, #8
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 8082 	beq.w	800743e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a41      	ldr	r2, [pc, #260]	; (8007444 <HAL_DMA_IRQHandler+0xe14>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d04a      	beq.n	80073da <HAL_DMA_IRQHandler+0xdaa>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a3f      	ldr	r2, [pc, #252]	; (8007448 <HAL_DMA_IRQHandler+0xe18>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d045      	beq.n	80073da <HAL_DMA_IRQHandler+0xdaa>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a3e      	ldr	r2, [pc, #248]	; (800744c <HAL_DMA_IRQHandler+0xe1c>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d040      	beq.n	80073da <HAL_DMA_IRQHandler+0xdaa>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a3c      	ldr	r2, [pc, #240]	; (8007450 <HAL_DMA_IRQHandler+0xe20>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d03b      	beq.n	80073da <HAL_DMA_IRQHandler+0xdaa>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a3b      	ldr	r2, [pc, #236]	; (8007454 <HAL_DMA_IRQHandler+0xe24>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d036      	beq.n	80073da <HAL_DMA_IRQHandler+0xdaa>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a39      	ldr	r2, [pc, #228]	; (8007458 <HAL_DMA_IRQHandler+0xe28>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d031      	beq.n	80073da <HAL_DMA_IRQHandler+0xdaa>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a38      	ldr	r2, [pc, #224]	; (800745c <HAL_DMA_IRQHandler+0xe2c>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d02c      	beq.n	80073da <HAL_DMA_IRQHandler+0xdaa>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a36      	ldr	r2, [pc, #216]	; (8007460 <HAL_DMA_IRQHandler+0xe30>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d027      	beq.n	80073da <HAL_DMA_IRQHandler+0xdaa>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a35      	ldr	r2, [pc, #212]	; (8007464 <HAL_DMA_IRQHandler+0xe34>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d022      	beq.n	80073da <HAL_DMA_IRQHandler+0xdaa>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a33      	ldr	r2, [pc, #204]	; (8007468 <HAL_DMA_IRQHandler+0xe38>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d01d      	beq.n	80073da <HAL_DMA_IRQHandler+0xdaa>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a32      	ldr	r2, [pc, #200]	; (800746c <HAL_DMA_IRQHandler+0xe3c>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d018      	beq.n	80073da <HAL_DMA_IRQHandler+0xdaa>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a30      	ldr	r2, [pc, #192]	; (8007470 <HAL_DMA_IRQHandler+0xe40>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d013      	beq.n	80073da <HAL_DMA_IRQHandler+0xdaa>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a2f      	ldr	r2, [pc, #188]	; (8007474 <HAL_DMA_IRQHandler+0xe44>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d00e      	beq.n	80073da <HAL_DMA_IRQHandler+0xdaa>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a2d      	ldr	r2, [pc, #180]	; (8007478 <HAL_DMA_IRQHandler+0xe48>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d009      	beq.n	80073da <HAL_DMA_IRQHandler+0xdaa>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a2c      	ldr	r2, [pc, #176]	; (800747c <HAL_DMA_IRQHandler+0xe4c>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d004      	beq.n	80073da <HAL_DMA_IRQHandler+0xdaa>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a2a      	ldr	r2, [pc, #168]	; (8007480 <HAL_DMA_IRQHandler+0xe50>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d108      	bne.n	80073ec <HAL_DMA_IRQHandler+0xdbc>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f022 021c 	bic.w	r2, r2, #28
 80073e8:	601a      	str	r2, [r3, #0]
 80073ea:	e007      	b.n	80073fc <HAL_DMA_IRQHandler+0xdcc>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f022 020e 	bic.w	r2, r2, #14
 80073fa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007400:	f003 031f 	and.w	r3, r3, #31
 8007404:	2201      	movs	r2, #1
 8007406:	409a      	lsls	r2, r3
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007426:	2b00      	cmp	r3, #0
 8007428:	d009      	beq.n	800743e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	4798      	blx	r3
 8007432:	e004      	b.n	800743e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007434:	bf00      	nop
 8007436:	e002      	b.n	800743e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007438:	bf00      	nop
 800743a:	e000      	b.n	800743e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800743c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800743e:	3728      	adds	r7, #40	; 0x28
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	40020010 	.word	0x40020010
 8007448:	40020028 	.word	0x40020028
 800744c:	40020040 	.word	0x40020040
 8007450:	40020058 	.word	0x40020058
 8007454:	40020070 	.word	0x40020070
 8007458:	40020088 	.word	0x40020088
 800745c:	400200a0 	.word	0x400200a0
 8007460:	400200b8 	.word	0x400200b8
 8007464:	40020410 	.word	0x40020410
 8007468:	40020428 	.word	0x40020428
 800746c:	40020440 	.word	0x40020440
 8007470:	40020458 	.word	0x40020458
 8007474:	40020470 	.word	0x40020470
 8007478:	40020488 	.word	0x40020488
 800747c:	400204a0 	.word	0x400204a0
 8007480:	400204b8 	.word	0x400204b8

08007484 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007492:	b2db      	uxtb	r3, r3
}
 8007494:	4618      	mov	r0, r3
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b087      	sub	sp, #28
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
 80074c4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074d0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a84      	ldr	r2, [pc, #528]	; (80076e8 <DMA_SetConfig+0x230>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d072      	beq.n	80075c2 <DMA_SetConfig+0x10a>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a82      	ldr	r2, [pc, #520]	; (80076ec <DMA_SetConfig+0x234>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d06d      	beq.n	80075c2 <DMA_SetConfig+0x10a>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a81      	ldr	r2, [pc, #516]	; (80076f0 <DMA_SetConfig+0x238>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d068      	beq.n	80075c2 <DMA_SetConfig+0x10a>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a7f      	ldr	r2, [pc, #508]	; (80076f4 <DMA_SetConfig+0x23c>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d063      	beq.n	80075c2 <DMA_SetConfig+0x10a>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a7e      	ldr	r2, [pc, #504]	; (80076f8 <DMA_SetConfig+0x240>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d05e      	beq.n	80075c2 <DMA_SetConfig+0x10a>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a7c      	ldr	r2, [pc, #496]	; (80076fc <DMA_SetConfig+0x244>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d059      	beq.n	80075c2 <DMA_SetConfig+0x10a>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a7b      	ldr	r2, [pc, #492]	; (8007700 <DMA_SetConfig+0x248>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d054      	beq.n	80075c2 <DMA_SetConfig+0x10a>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a79      	ldr	r2, [pc, #484]	; (8007704 <DMA_SetConfig+0x24c>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d04f      	beq.n	80075c2 <DMA_SetConfig+0x10a>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a78      	ldr	r2, [pc, #480]	; (8007708 <DMA_SetConfig+0x250>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d04a      	beq.n	80075c2 <DMA_SetConfig+0x10a>
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a76      	ldr	r2, [pc, #472]	; (800770c <DMA_SetConfig+0x254>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d045      	beq.n	80075c2 <DMA_SetConfig+0x10a>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a75      	ldr	r2, [pc, #468]	; (8007710 <DMA_SetConfig+0x258>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d040      	beq.n	80075c2 <DMA_SetConfig+0x10a>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a73      	ldr	r2, [pc, #460]	; (8007714 <DMA_SetConfig+0x25c>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d03b      	beq.n	80075c2 <DMA_SetConfig+0x10a>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a72      	ldr	r2, [pc, #456]	; (8007718 <DMA_SetConfig+0x260>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d036      	beq.n	80075c2 <DMA_SetConfig+0x10a>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a70      	ldr	r2, [pc, #448]	; (800771c <DMA_SetConfig+0x264>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d031      	beq.n	80075c2 <DMA_SetConfig+0x10a>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a6f      	ldr	r2, [pc, #444]	; (8007720 <DMA_SetConfig+0x268>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d02c      	beq.n	80075c2 <DMA_SetConfig+0x10a>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a6d      	ldr	r2, [pc, #436]	; (8007724 <DMA_SetConfig+0x26c>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d027      	beq.n	80075c2 <DMA_SetConfig+0x10a>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a6c      	ldr	r2, [pc, #432]	; (8007728 <DMA_SetConfig+0x270>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d022      	beq.n	80075c2 <DMA_SetConfig+0x10a>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a6a      	ldr	r2, [pc, #424]	; (800772c <DMA_SetConfig+0x274>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d01d      	beq.n	80075c2 <DMA_SetConfig+0x10a>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a69      	ldr	r2, [pc, #420]	; (8007730 <DMA_SetConfig+0x278>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d018      	beq.n	80075c2 <DMA_SetConfig+0x10a>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a67      	ldr	r2, [pc, #412]	; (8007734 <DMA_SetConfig+0x27c>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d013      	beq.n	80075c2 <DMA_SetConfig+0x10a>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a66      	ldr	r2, [pc, #408]	; (8007738 <DMA_SetConfig+0x280>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d00e      	beq.n	80075c2 <DMA_SetConfig+0x10a>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a64      	ldr	r2, [pc, #400]	; (800773c <DMA_SetConfig+0x284>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d009      	beq.n	80075c2 <DMA_SetConfig+0x10a>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a63      	ldr	r2, [pc, #396]	; (8007740 <DMA_SetConfig+0x288>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d004      	beq.n	80075c2 <DMA_SetConfig+0x10a>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a61      	ldr	r2, [pc, #388]	; (8007744 <DMA_SetConfig+0x28c>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d101      	bne.n	80075c6 <DMA_SetConfig+0x10e>
 80075c2:	2301      	movs	r3, #1
 80075c4:	e000      	b.n	80075c8 <DMA_SetConfig+0x110>
 80075c6:	2300      	movs	r3, #0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00d      	beq.n	80075e8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80075d4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d004      	beq.n	80075e8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80075e6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a3e      	ldr	r2, [pc, #248]	; (80076e8 <DMA_SetConfig+0x230>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d04a      	beq.n	8007688 <DMA_SetConfig+0x1d0>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a3d      	ldr	r2, [pc, #244]	; (80076ec <DMA_SetConfig+0x234>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d045      	beq.n	8007688 <DMA_SetConfig+0x1d0>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a3b      	ldr	r2, [pc, #236]	; (80076f0 <DMA_SetConfig+0x238>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d040      	beq.n	8007688 <DMA_SetConfig+0x1d0>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a3a      	ldr	r2, [pc, #232]	; (80076f4 <DMA_SetConfig+0x23c>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d03b      	beq.n	8007688 <DMA_SetConfig+0x1d0>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a38      	ldr	r2, [pc, #224]	; (80076f8 <DMA_SetConfig+0x240>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d036      	beq.n	8007688 <DMA_SetConfig+0x1d0>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a37      	ldr	r2, [pc, #220]	; (80076fc <DMA_SetConfig+0x244>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d031      	beq.n	8007688 <DMA_SetConfig+0x1d0>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a35      	ldr	r2, [pc, #212]	; (8007700 <DMA_SetConfig+0x248>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d02c      	beq.n	8007688 <DMA_SetConfig+0x1d0>
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a34      	ldr	r2, [pc, #208]	; (8007704 <DMA_SetConfig+0x24c>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d027      	beq.n	8007688 <DMA_SetConfig+0x1d0>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a32      	ldr	r2, [pc, #200]	; (8007708 <DMA_SetConfig+0x250>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d022      	beq.n	8007688 <DMA_SetConfig+0x1d0>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a31      	ldr	r2, [pc, #196]	; (800770c <DMA_SetConfig+0x254>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d01d      	beq.n	8007688 <DMA_SetConfig+0x1d0>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a2f      	ldr	r2, [pc, #188]	; (8007710 <DMA_SetConfig+0x258>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d018      	beq.n	8007688 <DMA_SetConfig+0x1d0>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a2e      	ldr	r2, [pc, #184]	; (8007714 <DMA_SetConfig+0x25c>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d013      	beq.n	8007688 <DMA_SetConfig+0x1d0>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a2c      	ldr	r2, [pc, #176]	; (8007718 <DMA_SetConfig+0x260>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d00e      	beq.n	8007688 <DMA_SetConfig+0x1d0>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a2b      	ldr	r2, [pc, #172]	; (800771c <DMA_SetConfig+0x264>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d009      	beq.n	8007688 <DMA_SetConfig+0x1d0>
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a29      	ldr	r2, [pc, #164]	; (8007720 <DMA_SetConfig+0x268>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d004      	beq.n	8007688 <DMA_SetConfig+0x1d0>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a28      	ldr	r2, [pc, #160]	; (8007724 <DMA_SetConfig+0x26c>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d101      	bne.n	800768c <DMA_SetConfig+0x1d4>
 8007688:	2301      	movs	r3, #1
 800768a:	e000      	b.n	800768e <DMA_SetConfig+0x1d6>
 800768c:	2300      	movs	r3, #0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d05a      	beq.n	8007748 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007696:	f003 031f 	and.w	r3, r3, #31
 800769a:	223f      	movs	r2, #63	; 0x3f
 800769c:	409a      	lsls	r2, r3
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80076b0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	2b40      	cmp	r3, #64	; 0x40
 80076c0:	d108      	bne.n	80076d4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80076d2:	e087      	b.n	80077e4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	60da      	str	r2, [r3, #12]
}
 80076e4:	e07e      	b.n	80077e4 <DMA_SetConfig+0x32c>
 80076e6:	bf00      	nop
 80076e8:	40020010 	.word	0x40020010
 80076ec:	40020028 	.word	0x40020028
 80076f0:	40020040 	.word	0x40020040
 80076f4:	40020058 	.word	0x40020058
 80076f8:	40020070 	.word	0x40020070
 80076fc:	40020088 	.word	0x40020088
 8007700:	400200a0 	.word	0x400200a0
 8007704:	400200b8 	.word	0x400200b8
 8007708:	40020410 	.word	0x40020410
 800770c:	40020428 	.word	0x40020428
 8007710:	40020440 	.word	0x40020440
 8007714:	40020458 	.word	0x40020458
 8007718:	40020470 	.word	0x40020470
 800771c:	40020488 	.word	0x40020488
 8007720:	400204a0 	.word	0x400204a0
 8007724:	400204b8 	.word	0x400204b8
 8007728:	58025408 	.word	0x58025408
 800772c:	5802541c 	.word	0x5802541c
 8007730:	58025430 	.word	0x58025430
 8007734:	58025444 	.word	0x58025444
 8007738:	58025458 	.word	0x58025458
 800773c:	5802546c 	.word	0x5802546c
 8007740:	58025480 	.word	0x58025480
 8007744:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a28      	ldr	r2, [pc, #160]	; (80077f0 <DMA_SetConfig+0x338>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d022      	beq.n	8007798 <DMA_SetConfig+0x2e0>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a27      	ldr	r2, [pc, #156]	; (80077f4 <DMA_SetConfig+0x33c>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d01d      	beq.n	8007798 <DMA_SetConfig+0x2e0>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a25      	ldr	r2, [pc, #148]	; (80077f8 <DMA_SetConfig+0x340>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d018      	beq.n	8007798 <DMA_SetConfig+0x2e0>
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a24      	ldr	r2, [pc, #144]	; (80077fc <DMA_SetConfig+0x344>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d013      	beq.n	8007798 <DMA_SetConfig+0x2e0>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a22      	ldr	r2, [pc, #136]	; (8007800 <DMA_SetConfig+0x348>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d00e      	beq.n	8007798 <DMA_SetConfig+0x2e0>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a21      	ldr	r2, [pc, #132]	; (8007804 <DMA_SetConfig+0x34c>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d009      	beq.n	8007798 <DMA_SetConfig+0x2e0>
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a1f      	ldr	r2, [pc, #124]	; (8007808 <DMA_SetConfig+0x350>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d004      	beq.n	8007798 <DMA_SetConfig+0x2e0>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a1e      	ldr	r2, [pc, #120]	; (800780c <DMA_SetConfig+0x354>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d101      	bne.n	800779c <DMA_SetConfig+0x2e4>
 8007798:	2301      	movs	r3, #1
 800779a:	e000      	b.n	800779e <DMA_SetConfig+0x2e6>
 800779c:	2300      	movs	r3, #0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d020      	beq.n	80077e4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077a6:	f003 031f 	and.w	r3, r3, #31
 80077aa:	2201      	movs	r2, #1
 80077ac:	409a      	lsls	r2, r3
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	2b40      	cmp	r3, #64	; 0x40
 80077c0:	d108      	bne.n	80077d4 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	60da      	str	r2, [r3, #12]
}
 80077d2:	e007      	b.n	80077e4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	60da      	str	r2, [r3, #12]
}
 80077e4:	bf00      	nop
 80077e6:	371c      	adds	r7, #28
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	58025408 	.word	0x58025408
 80077f4:	5802541c 	.word	0x5802541c
 80077f8:	58025430 	.word	0x58025430
 80077fc:	58025444 	.word	0x58025444
 8007800:	58025458 	.word	0x58025458
 8007804:	5802546c 	.word	0x5802546c
 8007808:	58025480 	.word	0x58025480
 800780c:	58025494 	.word	0x58025494

08007810 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a42      	ldr	r2, [pc, #264]	; (8007928 <DMA_CalcBaseAndBitshift+0x118>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d04a      	beq.n	80078b8 <DMA_CalcBaseAndBitshift+0xa8>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a41      	ldr	r2, [pc, #260]	; (800792c <DMA_CalcBaseAndBitshift+0x11c>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d045      	beq.n	80078b8 <DMA_CalcBaseAndBitshift+0xa8>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a3f      	ldr	r2, [pc, #252]	; (8007930 <DMA_CalcBaseAndBitshift+0x120>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d040      	beq.n	80078b8 <DMA_CalcBaseAndBitshift+0xa8>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a3e      	ldr	r2, [pc, #248]	; (8007934 <DMA_CalcBaseAndBitshift+0x124>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d03b      	beq.n	80078b8 <DMA_CalcBaseAndBitshift+0xa8>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a3c      	ldr	r2, [pc, #240]	; (8007938 <DMA_CalcBaseAndBitshift+0x128>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d036      	beq.n	80078b8 <DMA_CalcBaseAndBitshift+0xa8>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a3b      	ldr	r2, [pc, #236]	; (800793c <DMA_CalcBaseAndBitshift+0x12c>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d031      	beq.n	80078b8 <DMA_CalcBaseAndBitshift+0xa8>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a39      	ldr	r2, [pc, #228]	; (8007940 <DMA_CalcBaseAndBitshift+0x130>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d02c      	beq.n	80078b8 <DMA_CalcBaseAndBitshift+0xa8>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a38      	ldr	r2, [pc, #224]	; (8007944 <DMA_CalcBaseAndBitshift+0x134>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d027      	beq.n	80078b8 <DMA_CalcBaseAndBitshift+0xa8>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a36      	ldr	r2, [pc, #216]	; (8007948 <DMA_CalcBaseAndBitshift+0x138>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d022      	beq.n	80078b8 <DMA_CalcBaseAndBitshift+0xa8>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a35      	ldr	r2, [pc, #212]	; (800794c <DMA_CalcBaseAndBitshift+0x13c>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d01d      	beq.n	80078b8 <DMA_CalcBaseAndBitshift+0xa8>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a33      	ldr	r2, [pc, #204]	; (8007950 <DMA_CalcBaseAndBitshift+0x140>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d018      	beq.n	80078b8 <DMA_CalcBaseAndBitshift+0xa8>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a32      	ldr	r2, [pc, #200]	; (8007954 <DMA_CalcBaseAndBitshift+0x144>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d013      	beq.n	80078b8 <DMA_CalcBaseAndBitshift+0xa8>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a30      	ldr	r2, [pc, #192]	; (8007958 <DMA_CalcBaseAndBitshift+0x148>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d00e      	beq.n	80078b8 <DMA_CalcBaseAndBitshift+0xa8>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a2f      	ldr	r2, [pc, #188]	; (800795c <DMA_CalcBaseAndBitshift+0x14c>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d009      	beq.n	80078b8 <DMA_CalcBaseAndBitshift+0xa8>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a2d      	ldr	r2, [pc, #180]	; (8007960 <DMA_CalcBaseAndBitshift+0x150>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d004      	beq.n	80078b8 <DMA_CalcBaseAndBitshift+0xa8>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a2c      	ldr	r2, [pc, #176]	; (8007964 <DMA_CalcBaseAndBitshift+0x154>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d101      	bne.n	80078bc <DMA_CalcBaseAndBitshift+0xac>
 80078b8:	2301      	movs	r3, #1
 80078ba:	e000      	b.n	80078be <DMA_CalcBaseAndBitshift+0xae>
 80078bc:	2300      	movs	r3, #0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d024      	beq.n	800790c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	3b10      	subs	r3, #16
 80078ca:	4a27      	ldr	r2, [pc, #156]	; (8007968 <DMA_CalcBaseAndBitshift+0x158>)
 80078cc:	fba2 2303 	umull	r2, r3, r2, r3
 80078d0:	091b      	lsrs	r3, r3, #4
 80078d2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f003 0307 	and.w	r3, r3, #7
 80078da:	4a24      	ldr	r2, [pc, #144]	; (800796c <DMA_CalcBaseAndBitshift+0x15c>)
 80078dc:	5cd3      	ldrb	r3, [r2, r3]
 80078de:	461a      	mov	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2b03      	cmp	r3, #3
 80078e8:	d908      	bls.n	80078fc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	461a      	mov	r2, r3
 80078f0:	4b1f      	ldr	r3, [pc, #124]	; (8007970 <DMA_CalcBaseAndBitshift+0x160>)
 80078f2:	4013      	ands	r3, r2
 80078f4:	1d1a      	adds	r2, r3, #4
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	659a      	str	r2, [r3, #88]	; 0x58
 80078fa:	e00d      	b.n	8007918 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	461a      	mov	r2, r3
 8007902:	4b1b      	ldr	r3, [pc, #108]	; (8007970 <DMA_CalcBaseAndBitshift+0x160>)
 8007904:	4013      	ands	r3, r2
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	6593      	str	r3, [r2, #88]	; 0x58
 800790a:	e005      	b.n	8007918 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800791c:	4618      	mov	r0, r3
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr
 8007928:	40020010 	.word	0x40020010
 800792c:	40020028 	.word	0x40020028
 8007930:	40020040 	.word	0x40020040
 8007934:	40020058 	.word	0x40020058
 8007938:	40020070 	.word	0x40020070
 800793c:	40020088 	.word	0x40020088
 8007940:	400200a0 	.word	0x400200a0
 8007944:	400200b8 	.word	0x400200b8
 8007948:	40020410 	.word	0x40020410
 800794c:	40020428 	.word	0x40020428
 8007950:	40020440 	.word	0x40020440
 8007954:	40020458 	.word	0x40020458
 8007958:	40020470 	.word	0x40020470
 800795c:	40020488 	.word	0x40020488
 8007960:	400204a0 	.word	0x400204a0
 8007964:	400204b8 	.word	0x400204b8
 8007968:	aaaaaaab 	.word	0xaaaaaaab
 800796c:	08013aa4 	.word	0x08013aa4
 8007970:	fffffc00 	.word	0xfffffc00

08007974 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800797c:	2300      	movs	r3, #0
 800797e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d120      	bne.n	80079ca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798c:	2b03      	cmp	r3, #3
 800798e:	d858      	bhi.n	8007a42 <DMA_CheckFifoParam+0xce>
 8007990:	a201      	add	r2, pc, #4	; (adr r2, 8007998 <DMA_CheckFifoParam+0x24>)
 8007992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007996:	bf00      	nop
 8007998:	080079a9 	.word	0x080079a9
 800799c:	080079bb 	.word	0x080079bb
 80079a0:	080079a9 	.word	0x080079a9
 80079a4:	08007a43 	.word	0x08007a43
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d048      	beq.n	8007a46 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80079b8:	e045      	b.n	8007a46 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80079c2:	d142      	bne.n	8007a4a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80079c8:	e03f      	b.n	8007a4a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079d2:	d123      	bne.n	8007a1c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d8:	2b03      	cmp	r3, #3
 80079da:	d838      	bhi.n	8007a4e <DMA_CheckFifoParam+0xda>
 80079dc:	a201      	add	r2, pc, #4	; (adr r2, 80079e4 <DMA_CheckFifoParam+0x70>)
 80079de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e2:	bf00      	nop
 80079e4:	080079f5 	.word	0x080079f5
 80079e8:	080079fb 	.word	0x080079fb
 80079ec:	080079f5 	.word	0x080079f5
 80079f0:	08007a0d 	.word	0x08007a0d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	73fb      	strb	r3, [r7, #15]
        break;
 80079f8:	e030      	b.n	8007a5c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d025      	beq.n	8007a52 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a0a:	e022      	b.n	8007a52 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007a14:	d11f      	bne.n	8007a56 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a1a:	e01c      	b.n	8007a56 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d902      	bls.n	8007a2a <DMA_CheckFifoParam+0xb6>
 8007a24:	2b03      	cmp	r3, #3
 8007a26:	d003      	beq.n	8007a30 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007a28:	e018      	b.n	8007a5c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	73fb      	strb	r3, [r7, #15]
        break;
 8007a2e:	e015      	b.n	8007a5c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00e      	beq.n	8007a5a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a40:	e00b      	b.n	8007a5a <DMA_CheckFifoParam+0xe6>
        break;
 8007a42:	bf00      	nop
 8007a44:	e00a      	b.n	8007a5c <DMA_CheckFifoParam+0xe8>
        break;
 8007a46:	bf00      	nop
 8007a48:	e008      	b.n	8007a5c <DMA_CheckFifoParam+0xe8>
        break;
 8007a4a:	bf00      	nop
 8007a4c:	e006      	b.n	8007a5c <DMA_CheckFifoParam+0xe8>
        break;
 8007a4e:	bf00      	nop
 8007a50:	e004      	b.n	8007a5c <DMA_CheckFifoParam+0xe8>
        break;
 8007a52:	bf00      	nop
 8007a54:	e002      	b.n	8007a5c <DMA_CheckFifoParam+0xe8>
        break;
 8007a56:	bf00      	nop
 8007a58:	e000      	b.n	8007a5c <DMA_CheckFifoParam+0xe8>
    break;
 8007a5a:	bf00      	nop
    }
  }

  return status;
 8007a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3714      	adds	r7, #20
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop

08007a6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a38      	ldr	r2, [pc, #224]	; (8007b60 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d022      	beq.n	8007aca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a36      	ldr	r2, [pc, #216]	; (8007b64 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d01d      	beq.n	8007aca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a35      	ldr	r2, [pc, #212]	; (8007b68 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d018      	beq.n	8007aca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a33      	ldr	r2, [pc, #204]	; (8007b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d013      	beq.n	8007aca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a32      	ldr	r2, [pc, #200]	; (8007b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d00e      	beq.n	8007aca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a30      	ldr	r2, [pc, #192]	; (8007b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d009      	beq.n	8007aca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a2f      	ldr	r2, [pc, #188]	; (8007b78 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d004      	beq.n	8007aca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a2d      	ldr	r2, [pc, #180]	; (8007b7c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d101      	bne.n	8007ace <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007aca:	2301      	movs	r3, #1
 8007acc:	e000      	b.n	8007ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d01a      	beq.n	8007b0a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	3b08      	subs	r3, #8
 8007adc:	4a28      	ldr	r2, [pc, #160]	; (8007b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007ade:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae2:	091b      	lsrs	r3, r3, #4
 8007ae4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	4b26      	ldr	r3, [pc, #152]	; (8007b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007aea:	4413      	add	r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	461a      	mov	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a24      	ldr	r2, [pc, #144]	; (8007b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007af8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f003 031f 	and.w	r3, r3, #31
 8007b00:	2201      	movs	r2, #1
 8007b02:	409a      	lsls	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007b08:	e024      	b.n	8007b54 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	3b10      	subs	r3, #16
 8007b12:	4a1e      	ldr	r2, [pc, #120]	; (8007b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007b14:	fba2 2303 	umull	r2, r3, r2, r3
 8007b18:	091b      	lsrs	r3, r3, #4
 8007b1a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	4a1c      	ldr	r2, [pc, #112]	; (8007b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d806      	bhi.n	8007b32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	4a1b      	ldr	r2, [pc, #108]	; (8007b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d902      	bls.n	8007b32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	3308      	adds	r3, #8
 8007b30:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	4b18      	ldr	r3, [pc, #96]	; (8007b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007b36:	4413      	add	r3, r2
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a16      	ldr	r2, [pc, #88]	; (8007b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007b44:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f003 031f 	and.w	r3, r3, #31
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	409a      	lsls	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007b54:	bf00      	nop
 8007b56:	3714      	adds	r7, #20
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr
 8007b60:	58025408 	.word	0x58025408
 8007b64:	5802541c 	.word	0x5802541c
 8007b68:	58025430 	.word	0x58025430
 8007b6c:	58025444 	.word	0x58025444
 8007b70:	58025458 	.word	0x58025458
 8007b74:	5802546c 	.word	0x5802546c
 8007b78:	58025480 	.word	0x58025480
 8007b7c:	58025494 	.word	0x58025494
 8007b80:	cccccccd 	.word	0xcccccccd
 8007b84:	16009600 	.word	0x16009600
 8007b88:	58025880 	.word	0x58025880
 8007b8c:	aaaaaaab 	.word	0xaaaaaaab
 8007b90:	400204b8 	.word	0x400204b8
 8007b94:	4002040f 	.word	0x4002040f
 8007b98:	10008200 	.word	0x10008200
 8007b9c:	40020880 	.word	0x40020880

08007ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d04a      	beq.n	8007c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2b08      	cmp	r3, #8
 8007bba:	d847      	bhi.n	8007c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a25      	ldr	r2, [pc, #148]	; (8007c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d022      	beq.n	8007c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a24      	ldr	r2, [pc, #144]	; (8007c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d01d      	beq.n	8007c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a22      	ldr	r2, [pc, #136]	; (8007c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d018      	beq.n	8007c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a21      	ldr	r2, [pc, #132]	; (8007c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d013      	beq.n	8007c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a1f      	ldr	r2, [pc, #124]	; (8007c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d00e      	beq.n	8007c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a1e      	ldr	r2, [pc, #120]	; (8007c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d009      	beq.n	8007c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a1c      	ldr	r2, [pc, #112]	; (8007c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d004      	beq.n	8007c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a1b      	ldr	r2, [pc, #108]	; (8007c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d101      	bne.n	8007c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e000      	b.n	8007c12 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007c10:	2300      	movs	r3, #0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00a      	beq.n	8007c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	4b17      	ldr	r3, [pc, #92]	; (8007c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007c1a:	4413      	add	r3, r2
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	461a      	mov	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a15      	ldr	r2, [pc, #84]	; (8007c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007c28:	671a      	str	r2, [r3, #112]	; 0x70
 8007c2a:	e009      	b.n	8007c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	4b14      	ldr	r3, [pc, #80]	; (8007c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007c30:	4413      	add	r3, r2
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	461a      	mov	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a11      	ldr	r2, [pc, #68]	; (8007c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007c3e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	3b01      	subs	r3, #1
 8007c44:	2201      	movs	r2, #1
 8007c46:	409a      	lsls	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007c4c:	bf00      	nop
 8007c4e:	3714      	adds	r7, #20
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr
 8007c58:	58025408 	.word	0x58025408
 8007c5c:	5802541c 	.word	0x5802541c
 8007c60:	58025430 	.word	0x58025430
 8007c64:	58025444 	.word	0x58025444
 8007c68:	58025458 	.word	0x58025458
 8007c6c:	5802546c 	.word	0x5802546c
 8007c70:	58025480 	.word	0x58025480
 8007c74:	58025494 	.word	0x58025494
 8007c78:	1600963f 	.word	0x1600963f
 8007c7c:	58025940 	.word	0x58025940
 8007c80:	1000823f 	.word	0x1000823f
 8007c84:	40020940 	.word	0x40020940

08007c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b089      	sub	sp, #36	; 0x24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007c92:	2300      	movs	r3, #0
 8007c94:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007c96:	4b89      	ldr	r3, [pc, #548]	; (8007ebc <HAL_GPIO_Init+0x234>)
 8007c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c9a:	e194      	b.n	8007fc6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	2101      	movs	r1, #1
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ca8:	4013      	ands	r3, r2
 8007caa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f000 8186 	beq.w	8007fc0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d00b      	beq.n	8007cd4 <HAL_GPIO_Init+0x4c>
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d007      	beq.n	8007cd4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007cc8:	2b11      	cmp	r3, #17
 8007cca:	d003      	beq.n	8007cd4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	2b12      	cmp	r3, #18
 8007cd2:	d130      	bne.n	8007d36 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	005b      	lsls	r3, r3, #1
 8007cde:	2203      	movs	r2, #3
 8007ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce4:	43db      	mvns	r3, r3
 8007ce6:	69ba      	ldr	r2, [r7, #24]
 8007ce8:	4013      	ands	r3, r2
 8007cea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	68da      	ldr	r2, [r3, #12]
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	005b      	lsls	r3, r3, #1
 8007cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf8:	69ba      	ldr	r2, [r7, #24]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	69ba      	ldr	r2, [r7, #24]
 8007d02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d12:	43db      	mvns	r3, r3
 8007d14:	69ba      	ldr	r2, [r7, #24]
 8007d16:	4013      	ands	r3, r2
 8007d18:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	091b      	lsrs	r3, r3, #4
 8007d20:	f003 0201 	and.w	r2, r3, #1
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	fa02 f303 	lsl.w	r3, r2, r3
 8007d2a:	69ba      	ldr	r2, [r7, #24]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	69ba      	ldr	r2, [r7, #24]
 8007d34:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	005b      	lsls	r3, r3, #1
 8007d40:	2203      	movs	r2, #3
 8007d42:	fa02 f303 	lsl.w	r3, r2, r3
 8007d46:	43db      	mvns	r3, r3
 8007d48:	69ba      	ldr	r2, [r7, #24]
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	689a      	ldr	r2, [r3, #8]
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	005b      	lsls	r3, r3, #1
 8007d56:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5a:	69ba      	ldr	r2, [r7, #24]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	69ba      	ldr	r2, [r7, #24]
 8007d64:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d003      	beq.n	8007d76 <HAL_GPIO_Init+0xee>
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	2b12      	cmp	r3, #18
 8007d74:	d123      	bne.n	8007dbe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	08da      	lsrs	r2, r3, #3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	3208      	adds	r2, #8
 8007d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	f003 0307 	and.w	r3, r3, #7
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	220f      	movs	r2, #15
 8007d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d92:	43db      	mvns	r3, r3
 8007d94:	69ba      	ldr	r2, [r7, #24]
 8007d96:	4013      	ands	r3, r2
 8007d98:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	691a      	ldr	r2, [r3, #16]
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	f003 0307 	and.w	r3, r3, #7
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	fa02 f303 	lsl.w	r3, r2, r3
 8007daa:	69ba      	ldr	r2, [r7, #24]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	08da      	lsrs	r2, r3, #3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	3208      	adds	r2, #8
 8007db8:	69b9      	ldr	r1, [r7, #24]
 8007dba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	005b      	lsls	r3, r3, #1
 8007dc8:	2203      	movs	r2, #3
 8007dca:	fa02 f303 	lsl.w	r3, r2, r3
 8007dce:	43db      	mvns	r3, r3
 8007dd0:	69ba      	ldr	r2, [r7, #24]
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f003 0203 	and.w	r2, r3, #3
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	005b      	lsls	r3, r3, #1
 8007de2:	fa02 f303 	lsl.w	r3, r2, r3
 8007de6:	69ba      	ldr	r2, [r7, #24]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	69ba      	ldr	r2, [r7, #24]
 8007df0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f000 80e0 	beq.w	8007fc0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e00:	4b2f      	ldr	r3, [pc, #188]	; (8007ec0 <HAL_GPIO_Init+0x238>)
 8007e02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e06:	4a2e      	ldr	r2, [pc, #184]	; (8007ec0 <HAL_GPIO_Init+0x238>)
 8007e08:	f043 0302 	orr.w	r3, r3, #2
 8007e0c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007e10:	4b2b      	ldr	r3, [pc, #172]	; (8007ec0 <HAL_GPIO_Init+0x238>)
 8007e12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e16:	f003 0302 	and.w	r3, r3, #2
 8007e1a:	60fb      	str	r3, [r7, #12]
 8007e1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e1e:	4a29      	ldr	r2, [pc, #164]	; (8007ec4 <HAL_GPIO_Init+0x23c>)
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	089b      	lsrs	r3, r3, #2
 8007e24:	3302      	adds	r3, #2
 8007e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	f003 0303 	and.w	r3, r3, #3
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	220f      	movs	r2, #15
 8007e36:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3a:	43db      	mvns	r3, r3
 8007e3c:	69ba      	ldr	r2, [r7, #24]
 8007e3e:	4013      	ands	r3, r2
 8007e40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a20      	ldr	r2, [pc, #128]	; (8007ec8 <HAL_GPIO_Init+0x240>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d052      	beq.n	8007ef0 <HAL_GPIO_Init+0x268>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a1f      	ldr	r2, [pc, #124]	; (8007ecc <HAL_GPIO_Init+0x244>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d031      	beq.n	8007eb6 <HAL_GPIO_Init+0x22e>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a1e      	ldr	r2, [pc, #120]	; (8007ed0 <HAL_GPIO_Init+0x248>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d02b      	beq.n	8007eb2 <HAL_GPIO_Init+0x22a>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a1d      	ldr	r2, [pc, #116]	; (8007ed4 <HAL_GPIO_Init+0x24c>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d025      	beq.n	8007eae <HAL_GPIO_Init+0x226>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a1c      	ldr	r2, [pc, #112]	; (8007ed8 <HAL_GPIO_Init+0x250>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d01f      	beq.n	8007eaa <HAL_GPIO_Init+0x222>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a1b      	ldr	r2, [pc, #108]	; (8007edc <HAL_GPIO_Init+0x254>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d019      	beq.n	8007ea6 <HAL_GPIO_Init+0x21e>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a1a      	ldr	r2, [pc, #104]	; (8007ee0 <HAL_GPIO_Init+0x258>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d013      	beq.n	8007ea2 <HAL_GPIO_Init+0x21a>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a19      	ldr	r2, [pc, #100]	; (8007ee4 <HAL_GPIO_Init+0x25c>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d00d      	beq.n	8007e9e <HAL_GPIO_Init+0x216>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a18      	ldr	r2, [pc, #96]	; (8007ee8 <HAL_GPIO_Init+0x260>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d007      	beq.n	8007e9a <HAL_GPIO_Init+0x212>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a17      	ldr	r2, [pc, #92]	; (8007eec <HAL_GPIO_Init+0x264>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d101      	bne.n	8007e96 <HAL_GPIO_Init+0x20e>
 8007e92:	2309      	movs	r3, #9
 8007e94:	e02d      	b.n	8007ef2 <HAL_GPIO_Init+0x26a>
 8007e96:	230a      	movs	r3, #10
 8007e98:	e02b      	b.n	8007ef2 <HAL_GPIO_Init+0x26a>
 8007e9a:	2308      	movs	r3, #8
 8007e9c:	e029      	b.n	8007ef2 <HAL_GPIO_Init+0x26a>
 8007e9e:	2307      	movs	r3, #7
 8007ea0:	e027      	b.n	8007ef2 <HAL_GPIO_Init+0x26a>
 8007ea2:	2306      	movs	r3, #6
 8007ea4:	e025      	b.n	8007ef2 <HAL_GPIO_Init+0x26a>
 8007ea6:	2305      	movs	r3, #5
 8007ea8:	e023      	b.n	8007ef2 <HAL_GPIO_Init+0x26a>
 8007eaa:	2304      	movs	r3, #4
 8007eac:	e021      	b.n	8007ef2 <HAL_GPIO_Init+0x26a>
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e01f      	b.n	8007ef2 <HAL_GPIO_Init+0x26a>
 8007eb2:	2302      	movs	r3, #2
 8007eb4:	e01d      	b.n	8007ef2 <HAL_GPIO_Init+0x26a>
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e01b      	b.n	8007ef2 <HAL_GPIO_Init+0x26a>
 8007eba:	bf00      	nop
 8007ebc:	58000080 	.word	0x58000080
 8007ec0:	58024400 	.word	0x58024400
 8007ec4:	58000400 	.word	0x58000400
 8007ec8:	58020000 	.word	0x58020000
 8007ecc:	58020400 	.word	0x58020400
 8007ed0:	58020800 	.word	0x58020800
 8007ed4:	58020c00 	.word	0x58020c00
 8007ed8:	58021000 	.word	0x58021000
 8007edc:	58021400 	.word	0x58021400
 8007ee0:	58021800 	.word	0x58021800
 8007ee4:	58021c00 	.word	0x58021c00
 8007ee8:	58022000 	.word	0x58022000
 8007eec:	58022400 	.word	0x58022400
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	69fa      	ldr	r2, [r7, #28]
 8007ef4:	f002 0203 	and.w	r2, r2, #3
 8007ef8:	0092      	lsls	r2, r2, #2
 8007efa:	4093      	lsls	r3, r2
 8007efc:	69ba      	ldr	r2, [r7, #24]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f02:	4938      	ldr	r1, [pc, #224]	; (8007fe4 <HAL_GPIO_Init+0x35c>)
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	089b      	lsrs	r3, r3, #2
 8007f08:	3302      	adds	r3, #2
 8007f0a:	69ba      	ldr	r2, [r7, #24]
 8007f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	43db      	mvns	r3, r3
 8007f1a:	69ba      	ldr	r2, [r7, #24]
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d003      	beq.n	8007f34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007f2c:	69ba      	ldr	r2, [r7, #24]
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	69ba      	ldr	r2, [r7, #24]
 8007f38:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	43db      	mvns	r3, r3
 8007f44:	69ba      	ldr	r2, [r7, #24]
 8007f46:	4013      	ands	r3, r2
 8007f48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d003      	beq.n	8007f5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007f56:	69ba      	ldr	r2, [r7, #24]
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	69ba      	ldr	r2, [r7, #24]
 8007f62:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	43db      	mvns	r3, r3
 8007f70:	69ba      	ldr	r2, [r7, #24]
 8007f72:	4013      	ands	r3, r2
 8007f74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d003      	beq.n	8007f8a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8007f82:	69ba      	ldr	r2, [r7, #24]
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007f8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	43db      	mvns	r3, r3
 8007f9e:	69ba      	ldr	r2, [r7, #24]
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d003      	beq.n	8007fb8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8007fb0:	69ba      	ldr	r2, [r7, #24]
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007fb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f47f ae63 	bne.w	8007c9c <HAL_GPIO_Init+0x14>
  }
}
 8007fd6:	bf00      	nop
 8007fd8:	bf00      	nop
 8007fda:	3724      	adds	r7, #36	; 0x24
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr
 8007fe4:	58000400 	.word	0x58000400

08007fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	807b      	strh	r3, [r7, #2]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007ff8:	787b      	ldrb	r3, [r7, #1]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d003      	beq.n	8008006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007ffe:	887a      	ldrh	r2, [r7, #2]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008004:	e003      	b.n	800800e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008006:	887b      	ldrh	r3, [r7, #2]
 8008008:	041a      	lsls	r2, r3, #16
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	619a      	str	r2, [r3, #24]
}
 800800e:	bf00      	nop
 8008010:	370c      	adds	r7, #12
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr

0800801a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800801a:	b480      	push	{r7}
 800801c:	b085      	sub	sp, #20
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	460b      	mov	r3, r1
 8008024:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800802c:	887a      	ldrh	r2, [r7, #2]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	4013      	ands	r3, r2
 8008032:	041a      	lsls	r2, r3, #16
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	43d9      	mvns	r1, r3
 8008038:	887b      	ldrh	r3, [r7, #2]
 800803a:	400b      	ands	r3, r1
 800803c:	431a      	orrs	r2, r3
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	619a      	str	r2, [r3, #24]
}
 8008042:	bf00      	nop
 8008044:	3714      	adds	r7, #20
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
	...

08008050 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d101      	bne.n	8008062 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e07f      	b.n	8008162 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b00      	cmp	r3, #0
 800806c:	d106      	bne.n	800807c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f7fb fbc0 	bl	80037fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2224      	movs	r2, #36	; 0x24
 8008080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f022 0201 	bic.w	r2, r2, #1
 8008092:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	685a      	ldr	r2, [r3, #4]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80080a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	689a      	ldr	r2, [r3, #8]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d107      	bne.n	80080ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	689a      	ldr	r2, [r3, #8]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080c6:	609a      	str	r2, [r3, #8]
 80080c8:	e006      	b.n	80080d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	689a      	ldr	r2, [r3, #8]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80080d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d104      	bne.n	80080ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	6859      	ldr	r1, [r3, #4]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	4b1d      	ldr	r3, [pc, #116]	; (800816c <HAL_I2C_Init+0x11c>)
 80080f6:	430b      	orrs	r3, r1
 80080f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68da      	ldr	r2, [r3, #12]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008108:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	691a      	ldr	r2, [r3, #16]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	695b      	ldr	r3, [r3, #20]
 8008112:	ea42 0103 	orr.w	r1, r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	021a      	lsls	r2, r3, #8
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	430a      	orrs	r2, r1
 8008122:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	69d9      	ldr	r1, [r3, #28]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a1a      	ldr	r2, [r3, #32]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	430a      	orrs	r2, r1
 8008132:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f042 0201 	orr.w	r2, r2, #1
 8008142:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2220      	movs	r2, #32
 800814e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	02008000 	.word	0x02008000

08008170 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b088      	sub	sp, #32
 8008174:	af02      	add	r7, sp, #8
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	4608      	mov	r0, r1
 800817a:	4611      	mov	r1, r2
 800817c:	461a      	mov	r2, r3
 800817e:	4603      	mov	r3, r0
 8008180:	817b      	strh	r3, [r7, #10]
 8008182:	460b      	mov	r3, r1
 8008184:	813b      	strh	r3, [r7, #8]
 8008186:	4613      	mov	r3, r2
 8008188:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b20      	cmp	r3, #32
 8008194:	f040 80f9 	bne.w	800838a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008198:	6a3b      	ldr	r3, [r7, #32]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d002      	beq.n	80081a4 <HAL_I2C_Mem_Write+0x34>
 800819e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d105      	bne.n	80081b0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	e0ed      	b.n	800838c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d101      	bne.n	80081be <HAL_I2C_Mem_Write+0x4e>
 80081ba:	2302      	movs	r3, #2
 80081bc:	e0e6      	b.n	800838c <HAL_I2C_Mem_Write+0x21c>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2201      	movs	r2, #1
 80081c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80081c6:	f7fc fdbf 	bl	8004d48 <HAL_GetTick>
 80081ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	9300      	str	r3, [sp, #0]
 80081d0:	2319      	movs	r3, #25
 80081d2:	2201      	movs	r2, #1
 80081d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f001 fee3 	bl	8009fa4 <I2C_WaitOnFlagUntilTimeout>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d001      	beq.n	80081e8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e0d1      	b.n	800838c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2221      	movs	r2, #33	; 0x21
 80081ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2240      	movs	r2, #64	; 0x40
 80081f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6a3a      	ldr	r2, [r7, #32]
 8008202:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008208:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008210:	88f8      	ldrh	r0, [r7, #6]
 8008212:	893a      	ldrh	r2, [r7, #8]
 8008214:	8979      	ldrh	r1, [r7, #10]
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	9301      	str	r3, [sp, #4]
 800821a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821c:	9300      	str	r3, [sp, #0]
 800821e:	4603      	mov	r3, r0
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f000 ff23 	bl	800906c <I2C_RequestMemoryWrite>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d005      	beq.n	8008238 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	e0a9      	b.n	800838c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800823c:	b29b      	uxth	r3, r3
 800823e:	2bff      	cmp	r3, #255	; 0xff
 8008240:	d90e      	bls.n	8008260 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	22ff      	movs	r2, #255	; 0xff
 8008246:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800824c:	b2da      	uxtb	r2, r3
 800824e:	8979      	ldrh	r1, [r7, #10]
 8008250:	2300      	movs	r3, #0
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f001 ffc5 	bl	800a1e8 <I2C_TransferConfig>
 800825e:	e00f      	b.n	8008280 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008264:	b29a      	uxth	r2, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800826e:	b2da      	uxtb	r2, r3
 8008270:	8979      	ldrh	r1, [r7, #10]
 8008272:	2300      	movs	r3, #0
 8008274:	9300      	str	r3, [sp, #0]
 8008276:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f001 ffb4 	bl	800a1e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008280:	697a      	ldr	r2, [r7, #20]
 8008282:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f001 fecd 	bl	800a024 <I2C_WaitOnTXISFlagUntilTimeout>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d001      	beq.n	8008294 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e07b      	b.n	800838c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008298:	781a      	ldrb	r2, [r3, #0]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a4:	1c5a      	adds	r2, r3, #1
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	3b01      	subs	r3, #1
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082bc:	3b01      	subs	r3, #1
 80082be:	b29a      	uxth	r2, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d034      	beq.n	8008338 <HAL_I2C_Mem_Write+0x1c8>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d130      	bne.n	8008338 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082dc:	2200      	movs	r2, #0
 80082de:	2180      	movs	r1, #128	; 0x80
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f001 fe5f 	bl	8009fa4 <I2C_WaitOnFlagUntilTimeout>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e04d      	b.n	800838c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	2bff      	cmp	r3, #255	; 0xff
 80082f8:	d90e      	bls.n	8008318 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	22ff      	movs	r2, #255	; 0xff
 80082fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008304:	b2da      	uxtb	r2, r3
 8008306:	8979      	ldrh	r1, [r7, #10]
 8008308:	2300      	movs	r3, #0
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f001 ff69 	bl	800a1e8 <I2C_TransferConfig>
 8008316:	e00f      	b.n	8008338 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800831c:	b29a      	uxth	r2, r3
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008326:	b2da      	uxtb	r2, r3
 8008328:	8979      	ldrh	r1, [r7, #10]
 800832a:	2300      	movs	r3, #0
 800832c:	9300      	str	r3, [sp, #0]
 800832e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f001 ff58 	bl	800a1e8 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800833c:	b29b      	uxth	r3, r3
 800833e:	2b00      	cmp	r3, #0
 8008340:	d19e      	bne.n	8008280 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f001 feac 	bl	800a0a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d001      	beq.n	8008356 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e01a      	b.n	800838c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2220      	movs	r2, #32
 800835c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	6859      	ldr	r1, [r3, #4]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	4b0a      	ldr	r3, [pc, #40]	; (8008394 <HAL_I2C_Mem_Write+0x224>)
 800836a:	400b      	ands	r3, r1
 800836c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2220      	movs	r2, #32
 8008372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	e000      	b.n	800838c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800838a:	2302      	movs	r3, #2
  }
}
 800838c:	4618      	mov	r0, r3
 800838e:	3718      	adds	r7, #24
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	fe00e800 	.word	0xfe00e800

08008398 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b088      	sub	sp, #32
 800839c:	af02      	add	r7, sp, #8
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	4608      	mov	r0, r1
 80083a2:	4611      	mov	r1, r2
 80083a4:	461a      	mov	r2, r3
 80083a6:	4603      	mov	r3, r0
 80083a8:	817b      	strh	r3, [r7, #10]
 80083aa:	460b      	mov	r3, r1
 80083ac:	813b      	strh	r3, [r7, #8]
 80083ae:	4613      	mov	r3, r2
 80083b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b20      	cmp	r3, #32
 80083bc:	f040 80fd 	bne.w	80085ba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80083c0:	6a3b      	ldr	r3, [r7, #32]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d002      	beq.n	80083cc <HAL_I2C_Mem_Read+0x34>
 80083c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d105      	bne.n	80083d8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	e0f1      	b.n	80085bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d101      	bne.n	80083e6 <HAL_I2C_Mem_Read+0x4e>
 80083e2:	2302      	movs	r3, #2
 80083e4:	e0ea      	b.n	80085bc <HAL_I2C_Mem_Read+0x224>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2201      	movs	r2, #1
 80083ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80083ee:	f7fc fcab 	bl	8004d48 <HAL_GetTick>
 80083f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	2319      	movs	r3, #25
 80083fa:	2201      	movs	r2, #1
 80083fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f001 fdcf 	bl	8009fa4 <I2C_WaitOnFlagUntilTimeout>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d001      	beq.n	8008410 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	e0d5      	b.n	80085bc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2222      	movs	r2, #34	; 0x22
 8008414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2240      	movs	r2, #64	; 0x40
 800841c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2200      	movs	r2, #0
 8008424:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6a3a      	ldr	r2, [r7, #32]
 800842a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008430:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008438:	88f8      	ldrh	r0, [r7, #6]
 800843a:	893a      	ldrh	r2, [r7, #8]
 800843c:	8979      	ldrh	r1, [r7, #10]
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	9301      	str	r3, [sp, #4]
 8008442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	4603      	mov	r3, r0
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	f000 fe63 	bl	8009114 <I2C_RequestMemoryRead>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d005      	beq.n	8008460 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2200      	movs	r2, #0
 8008458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	e0ad      	b.n	80085bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008464:	b29b      	uxth	r3, r3
 8008466:	2bff      	cmp	r3, #255	; 0xff
 8008468:	d90e      	bls.n	8008488 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	22ff      	movs	r2, #255	; 0xff
 800846e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008474:	b2da      	uxtb	r2, r3
 8008476:	8979      	ldrh	r1, [r7, #10]
 8008478:	4b52      	ldr	r3, [pc, #328]	; (80085c4 <HAL_I2C_Mem_Read+0x22c>)
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f001 feb1 	bl	800a1e8 <I2C_TransferConfig>
 8008486:	e00f      	b.n	80084a8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800848c:	b29a      	uxth	r2, r3
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008496:	b2da      	uxtb	r2, r3
 8008498:	8979      	ldrh	r1, [r7, #10]
 800849a:	4b4a      	ldr	r3, [pc, #296]	; (80085c4 <HAL_I2C_Mem_Read+0x22c>)
 800849c:	9300      	str	r3, [sp, #0]
 800849e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f001 fea0 	bl	800a1e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ae:	2200      	movs	r2, #0
 80084b0:	2104      	movs	r1, #4
 80084b2:	68f8      	ldr	r0, [r7, #12]
 80084b4:	f001 fd76 	bl	8009fa4 <I2C_WaitOnFlagUntilTimeout>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d001      	beq.n	80084c2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	e07c      	b.n	80085bc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084cc:	b2d2      	uxtb	r2, r2
 80084ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d4:	1c5a      	adds	r2, r3, #1
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084de:	3b01      	subs	r3, #1
 80084e0:	b29a      	uxth	r2, r3
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	3b01      	subs	r3, #1
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d034      	beq.n	8008568 <HAL_I2C_Mem_Read+0x1d0>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008502:	2b00      	cmp	r3, #0
 8008504:	d130      	bne.n	8008568 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850c:	2200      	movs	r2, #0
 800850e:	2180      	movs	r1, #128	; 0x80
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f001 fd47 	bl	8009fa4 <I2C_WaitOnFlagUntilTimeout>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d001      	beq.n	8008520 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	e04d      	b.n	80085bc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008524:	b29b      	uxth	r3, r3
 8008526:	2bff      	cmp	r3, #255	; 0xff
 8008528:	d90e      	bls.n	8008548 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	22ff      	movs	r2, #255	; 0xff
 800852e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008534:	b2da      	uxtb	r2, r3
 8008536:	8979      	ldrh	r1, [r7, #10]
 8008538:	2300      	movs	r3, #0
 800853a:	9300      	str	r3, [sp, #0]
 800853c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f001 fe51 	bl	800a1e8 <I2C_TransferConfig>
 8008546:	e00f      	b.n	8008568 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800854c:	b29a      	uxth	r2, r3
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008556:	b2da      	uxtb	r2, r3
 8008558:	8979      	ldrh	r1, [r7, #10]
 800855a:	2300      	movs	r3, #0
 800855c:	9300      	str	r3, [sp, #0]
 800855e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f001 fe40 	bl	800a1e8 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800856c:	b29b      	uxth	r3, r3
 800856e:	2b00      	cmp	r3, #0
 8008570:	d19a      	bne.n	80084a8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008572:	697a      	ldr	r2, [r7, #20]
 8008574:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f001 fd94 	bl	800a0a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d001      	beq.n	8008586 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e01a      	b.n	80085bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2220      	movs	r2, #32
 800858c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	6859      	ldr	r1, [r3, #4]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	4b0b      	ldr	r3, [pc, #44]	; (80085c8 <HAL_I2C_Mem_Read+0x230>)
 800859a:	400b      	ands	r3, r1
 800859c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2220      	movs	r2, #32
 80085a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80085b6:	2300      	movs	r3, #0
 80085b8:	e000      	b.n	80085bc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80085ba:	2302      	movs	r3, #2
  }
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3718      	adds	r7, #24
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	80002400 	.word	0x80002400
 80085c8:	fe00e800 	.word	0xfe00e800

080085cc <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b08a      	sub	sp, #40	; 0x28
 80085d0:	af02      	add	r7, sp, #8
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	4608      	mov	r0, r1
 80085d6:	4611      	mov	r1, r2
 80085d8:	461a      	mov	r2, r3
 80085da:	4603      	mov	r3, r0
 80085dc:	817b      	strh	r3, [r7, #10]
 80085de:	460b      	mov	r3, r1
 80085e0:	813b      	strh	r3, [r7, #8]
 80085e2:	4613      	mov	r3, r2
 80085e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	2b20      	cmp	r3, #32
 80085f0:	f040 80d5 	bne.w	800879e <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 80085f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d002      	beq.n	8008600 <HAL_I2C_Mem_Read_DMA+0x34>
 80085fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d105      	bne.n	800860c <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008606:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e0c9      	b.n	80087a0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008616:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800861a:	d101      	bne.n	8008620 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 800861c:	2302      	movs	r3, #2
 800861e:	e0bf      	b.n	80087a0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008626:	2b01      	cmp	r3, #1
 8008628:	d101      	bne.n	800862e <HAL_I2C_Mem_Read_DMA+0x62>
 800862a:	2302      	movs	r3, #2
 800862c:	e0b8      	b.n	80087a0 <HAL_I2C_Mem_Read_DMA+0x1d4>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2201      	movs	r2, #1
 8008632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008636:	f7fc fb87 	bl	8004d48 <HAL_GetTick>
 800863a:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2222      	movs	r2, #34	; 0x22
 8008640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2240      	movs	r2, #64	; 0x40
 8008648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2200      	movs	r2, #0
 8008650:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008656:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800865c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	4a51      	ldr	r2, [pc, #324]	; (80087a8 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 8008662:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	4a51      	ldr	r2, [pc, #324]	; (80087ac <HAL_I2C_Mem_Read_DMA+0x1e0>)
 8008668:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800866e:	b29b      	uxth	r3, r3
 8008670:	2bff      	cmp	r3, #255	; 0xff
 8008672:	d906      	bls.n	8008682 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	22ff      	movs	r2, #255	; 0xff
 8008678:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800867a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800867e:	61fb      	str	r3, [r7, #28]
 8008680:	e007      	b.n	8008692 <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008686:	b29a      	uxth	r2, r3
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800868c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008690:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8008692:	88f8      	ldrh	r0, [r7, #6]
 8008694:	893a      	ldrh	r2, [r7, #8]
 8008696:	8979      	ldrh	r1, [r7, #10]
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	9301      	str	r3, [sp, #4]
 800869c:	2319      	movs	r3, #25
 800869e:	9300      	str	r3, [sp, #0]
 80086a0:	4603      	mov	r3, r0
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	f000 fd36 	bl	8009114 <I2C_RequestMemoryRead>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d005      	beq.n	80086ba <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	e072      	b.n	80087a0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d020      	beq.n	8008704 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086c6:	4a3a      	ldr	r2, [pc, #232]	; (80087b0 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 80086c8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ce:	4a39      	ldr	r2, [pc, #228]	; (80087b4 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 80086d0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086d6:	2200      	movs	r2, #0
 80086d8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086de:	2200      	movs	r2, #0
 80086e0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	3324      	adds	r3, #36	; 0x24
 80086ec:	4619      	mov	r1, r3
 80086ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086f4:	f7fc ffd0 	bl	8005698 <HAL_DMA_Start_IT>
 80086f8:	4603      	mov	r3, r0
 80086fa:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80086fc:	7dfb      	ldrb	r3, [r7, #23]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d139      	bne.n	8008776 <HAL_I2C_Mem_Read_DMA+0x1aa>
 8008702:	e013      	b.n	800872c <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2220      	movs	r2, #32
 8008708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008718:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2200      	movs	r2, #0
 8008724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	e039      	b.n	80087a0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008730:	b2da      	uxtb	r2, r3
 8008732:	8979      	ldrh	r1, [r7, #10]
 8008734:	4b20      	ldr	r3, [pc, #128]	; (80087b8 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f001 fd54 	bl	800a1e8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008744:	b29a      	uxth	r2, r3
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800874a:	1ad3      	subs	r3, r2, r3
 800874c:	b29a      	uxth	r2, r3
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2200      	movs	r2, #0
 8008756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800875a:	2110      	movs	r1, #16
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f001 fd71 	bl	800a244 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008770:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	e014      	b.n	80087a0 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2220      	movs	r2, #32
 800877a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800878a:	f043 0210 	orr.w	r2, r3, #16
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	e000      	b.n	80087a0 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 800879e:	2302      	movs	r3, #2
  }
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3720      	adds	r7, #32
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	ffff0000 	.word	0xffff0000
 80087ac:	08008ac7 	.word	0x08008ac7
 80087b0:	08009c63 	.word	0x08009c63
 80087b4:	08009cf9 	.word	0x08009cf9
 80087b8:	80002400 	.word	0x80002400

080087bc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d005      	beq.n	80087e8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	68f9      	ldr	r1, [r7, #12]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	4798      	blx	r3
  }
}
 80087e8:	bf00      	nop
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80087f8:	bf00      	nop
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800880c:	bf00      	nop
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008834:	bf00      	nop
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	460b      	mov	r3, r1
 800884a:	70fb      	strb	r3, [r7, #3]
 800884c:	4613      	mov	r3, r2
 800884e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008878:	bf00      	nop
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800888c:	bf00      	nop
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80088b4:	bf00      	nop
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d101      	bne.n	80088e4 <I2C_Slave_ISR_IT+0x24>
 80088e0:	2302      	movs	r3, #2
 80088e2:	e0ec      	b.n	8008abe <I2C_Slave_ISR_IT+0x1fe>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	095b      	lsrs	r3, r3, #5
 80088f0:	f003 0301 	and.w	r3, r3, #1
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d009      	beq.n	800890c <I2C_Slave_ISR_IT+0x4c>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	095b      	lsrs	r3, r3, #5
 80088fc:	f003 0301 	and.w	r3, r3, #1
 8008900:	2b00      	cmp	r3, #0
 8008902:	d003      	beq.n	800890c <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008904:	6939      	ldr	r1, [r7, #16]
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f000 fe42 	bl	8009590 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	091b      	lsrs	r3, r3, #4
 8008910:	f003 0301 	and.w	r3, r3, #1
 8008914:	2b00      	cmp	r3, #0
 8008916:	d04d      	beq.n	80089b4 <I2C_Slave_ISR_IT+0xf4>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	091b      	lsrs	r3, r3, #4
 800891c:	f003 0301 	and.w	r3, r3, #1
 8008920:	2b00      	cmp	r3, #0
 8008922:	d047      	beq.n	80089b4 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008928:	b29b      	uxth	r3, r3
 800892a:	2b00      	cmp	r3, #0
 800892c:	d128      	bne.n	8008980 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b28      	cmp	r3, #40	; 0x28
 8008938:	d108      	bne.n	800894c <I2C_Slave_ISR_IT+0x8c>
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008940:	d104      	bne.n	800894c <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008942:	6939      	ldr	r1, [r7, #16]
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	f001 f81b 	bl	8009980 <I2C_ITListenCplt>
 800894a:	e032      	b.n	80089b2 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008952:	b2db      	uxtb	r3, r3
 8008954:	2b29      	cmp	r3, #41	; 0x29
 8008956:	d10e      	bne.n	8008976 <I2C_Slave_ISR_IT+0xb6>
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800895e:	d00a      	beq.n	8008976 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2210      	movs	r2, #16
 8008966:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	f001 f956 	bl	8009c1a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	f000 fce5 	bl	800933e <I2C_ITSlaveSeqCplt>
 8008974:	e01d      	b.n	80089b2 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2210      	movs	r2, #16
 800897c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800897e:	e096      	b.n	8008aae <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2210      	movs	r2, #16
 8008986:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800898c:	f043 0204 	orr.w	r2, r3, #4
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d004      	beq.n	80089a4 <I2C_Slave_ISR_IT+0xe4>
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80089a0:	f040 8085 	bne.w	8008aae <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a8:	4619      	mov	r1, r3
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f001 f83e 	bl	8009a2c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80089b0:	e07d      	b.n	8008aae <I2C_Slave_ISR_IT+0x1ee>
 80089b2:	e07c      	b.n	8008aae <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	089b      	lsrs	r3, r3, #2
 80089b8:	f003 0301 	and.w	r3, r3, #1
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d030      	beq.n	8008a22 <I2C_Slave_ISR_IT+0x162>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	089b      	lsrs	r3, r3, #2
 80089c4:	f003 0301 	and.w	r3, r3, #1
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d02a      	beq.n	8008a22 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d018      	beq.n	8008a08 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e0:	b2d2      	uxtb	r2, r2
 80089e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e8:	1c5a      	adds	r2, r3, #1
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089f2:	3b01      	subs	r3, #1
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	3b01      	subs	r3, #1
 8008a02:	b29a      	uxth	r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d14f      	bne.n	8008ab2 <I2C_Slave_ISR_IT+0x1f2>
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008a18:	d04b      	beq.n	8008ab2 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f000 fc8f 	bl	800933e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008a20:	e047      	b.n	8008ab2 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	08db      	lsrs	r3, r3, #3
 8008a26:	f003 0301 	and.w	r3, r3, #1
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00a      	beq.n	8008a44 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	08db      	lsrs	r3, r3, #3
 8008a32:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d004      	beq.n	8008a44 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008a3a:	6939      	ldr	r1, [r7, #16]
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	f000 fbbd 	bl	80091bc <I2C_ITAddrCplt>
 8008a42:	e037      	b.n	8008ab4 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	085b      	lsrs	r3, r3, #1
 8008a48:	f003 0301 	and.w	r3, r3, #1
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d031      	beq.n	8008ab4 <I2C_Slave_ISR_IT+0x1f4>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	085b      	lsrs	r3, r3, #1
 8008a54:	f003 0301 	and.w	r3, r3, #1
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d02b      	beq.n	8008ab4 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d018      	beq.n	8008a98 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6a:	781a      	ldrb	r2, [r3, #0]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a76:	1c5a      	adds	r2, r3, #1
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	3b01      	subs	r3, #1
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	b29a      	uxth	r2, r3
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	851a      	strh	r2, [r3, #40]	; 0x28
 8008a96:	e00d      	b.n	8008ab4 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a9e:	d002      	beq.n	8008aa6 <I2C_Slave_ISR_IT+0x1e6>
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d106      	bne.n	8008ab4 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	f000 fc49 	bl	800933e <I2C_ITSlaveSeqCplt>
 8008aac:	e002      	b.n	8008ab4 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8008aae:	bf00      	nop
 8008ab0:	e000      	b.n	8008ab4 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8008ab2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3718      	adds	r7, #24
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b088      	sub	sp, #32
 8008aca:	af02      	add	r7, sp, #8
 8008acc:	60f8      	str	r0, [r7, #12]
 8008ace:	60b9      	str	r1, [r7, #8]
 8008ad0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d101      	bne.n	8008ae0 <I2C_Master_ISR_DMA+0x1a>
 8008adc:	2302      	movs	r3, #2
 8008ade:	e0e1      	b.n	8008ca4 <I2C_Master_ISR_DMA+0x1de>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	091b      	lsrs	r3, r3, #4
 8008aec:	f003 0301 	and.w	r3, r3, #1
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d017      	beq.n	8008b24 <I2C_Master_ISR_DMA+0x5e>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	091b      	lsrs	r3, r3, #4
 8008af8:	f003 0301 	and.w	r3, r3, #1
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d011      	beq.n	8008b24 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2210      	movs	r2, #16
 8008b06:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b0c:	f043 0204 	orr.w	r2, r3, #4
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008b14:	2120      	movs	r1, #32
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f001 fb94 	bl	800a244 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f001 f87c 	bl	8009c1a <I2C_Flush_TXDR>
 8008b22:	e0ba      	b.n	8008c9a <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	09db      	lsrs	r3, r3, #7
 8008b28:	f003 0301 	and.w	r3, r3, #1
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d072      	beq.n	8008c16 <I2C_Master_ISR_DMA+0x150>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	099b      	lsrs	r3, r3, #6
 8008b34:	f003 0301 	and.w	r3, r3, #1
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d06c      	beq.n	8008c16 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b4a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d04e      	beq.n	8008bf4 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b62:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	2bff      	cmp	r3, #255	; 0xff
 8008b6c:	d906      	bls.n	8008b7c <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	22ff      	movs	r2, #255	; 0xff
 8008b72:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8008b74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b78:	617b      	str	r3, [r7, #20]
 8008b7a:	e010      	b.n	8008b9e <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b80:	b29a      	uxth	r2, r3
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008b8e:	d003      	beq.n	8008b98 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b94:	617b      	str	r3, [r7, #20]
 8008b96:	e002      	b.n	8008b9e <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8008b98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b9c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ba2:	b2da      	uxtb	r2, r3
 8008ba4:	8a79      	ldrh	r1, [r7, #18]
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	9300      	str	r3, [sp, #0]
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f001 fb1b 	bl	800a1e8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bb6:	b29a      	uxth	r2, r3
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bbc:	1ad3      	subs	r3, r2, r3
 8008bbe:	b29a      	uxth	r2, r3
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	2b22      	cmp	r3, #34	; 0x22
 8008bce:	d108      	bne.n	8008be2 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008bde:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008be0:	e05b      	b.n	8008c9a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008bf0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008bf2:	e052      	b.n	8008c9a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c02:	d003      	beq.n	8008c0c <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008c04:	68f8      	ldr	r0, [r7, #12]
 8008c06:	f000 fb5d 	bl	80092c4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8008c0a:	e046      	b.n	8008c9a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008c0c:	2140      	movs	r1, #64	; 0x40
 8008c0e:	68f8      	ldr	r0, [r7, #12]
 8008c10:	f000 ff0c 	bl	8009a2c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008c14:	e041      	b.n	8008c9a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	099b      	lsrs	r3, r3, #6
 8008c1a:	f003 0301 	and.w	r3, r3, #1
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d029      	beq.n	8008c76 <I2C_Master_ISR_DMA+0x1b0>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	099b      	lsrs	r3, r3, #6
 8008c26:	f003 0301 	and.w	r3, r3, #1
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d023      	beq.n	8008c76 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d119      	bne.n	8008c6c <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c46:	d027      	beq.n	8008c98 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008c50:	d108      	bne.n	8008c64 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	685a      	ldr	r2, [r3, #4]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c60:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8008c62:	e019      	b.n	8008c98 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f000 fb2d 	bl	80092c4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8008c6a:	e015      	b.n	8008c98 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008c6c:	2140      	movs	r1, #64	; 0x40
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f000 fedc 	bl	8009a2c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008c74:	e010      	b.n	8008c98 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	095b      	lsrs	r3, r3, #5
 8008c7a:	f003 0301 	and.w	r3, r3, #1
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00b      	beq.n	8008c9a <I2C_Master_ISR_DMA+0x1d4>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	095b      	lsrs	r3, r3, #5
 8008c86:	f003 0301 	and.w	r3, r3, #1
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d005      	beq.n	8008c9a <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008c8e:	68b9      	ldr	r1, [r7, #8]
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f000 fbb3 	bl	80093fc <I2C_ITMasterCplt>
 8008c96:	e000      	b.n	8008c9a <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8008c98:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3718      	adds	r7, #24
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b088      	sub	sp, #32
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cbc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d101      	bne.n	8008cd0 <I2C_Slave_ISR_DMA+0x24>
 8008ccc:	2302      	movs	r3, #2
 8008cce:	e1c8      	b.n	8009062 <I2C_Slave_ISR_DMA+0x3b6>
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	095b      	lsrs	r3, r3, #5
 8008cdc:	f003 0301 	and.w	r3, r3, #1
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d009      	beq.n	8008cf8 <I2C_Slave_ISR_DMA+0x4c>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	095b      	lsrs	r3, r3, #5
 8008ce8:	f003 0301 	and.w	r3, r3, #1
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d003      	beq.n	8008cf8 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8008cf0:	68b9      	ldr	r1, [r7, #8]
 8008cf2:	68f8      	ldr	r0, [r7, #12]
 8008cf4:	f000 fc4c 	bl	8009590 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	091b      	lsrs	r3, r3, #4
 8008cfc:	f003 0301 	and.w	r3, r3, #1
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	f000 8199 	beq.w	8009038 <I2C_Slave_ISR_DMA+0x38c>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	091b      	lsrs	r3, r3, #4
 8008d0a:	f003 0301 	and.w	r3, r3, #1
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f000 8192 	beq.w	8009038 <I2C_Slave_ISR_DMA+0x38c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	0b9b      	lsrs	r3, r3, #14
 8008d18:	f003 0301 	and.w	r3, r3, #1
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d106      	bne.n	8008d2e <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	0bdb      	lsrs	r3, r3, #15
 8008d24:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f000 817e 	beq.w	800902a <I2C_Slave_ISR_DMA+0x37e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d07c      	beq.n	8008e30 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	0bdb      	lsrs	r3, r3, #15
 8008d3a:	f003 0301 	and.w	r3, r3, #1
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d076      	beq.n	8008e30 <I2C_Slave_ISR_DMA+0x184>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a8d      	ldr	r2, [pc, #564]	; (8008f80 <I2C_Slave_ISR_DMA+0x2d4>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d059      	beq.n	8008e02 <I2C_Slave_ISR_DMA+0x156>
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a8b      	ldr	r2, [pc, #556]	; (8008f84 <I2C_Slave_ISR_DMA+0x2d8>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d053      	beq.n	8008e02 <I2C_Slave_ISR_DMA+0x156>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a89      	ldr	r2, [pc, #548]	; (8008f88 <I2C_Slave_ISR_DMA+0x2dc>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d04d      	beq.n	8008e02 <I2C_Slave_ISR_DMA+0x156>
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a87      	ldr	r2, [pc, #540]	; (8008f8c <I2C_Slave_ISR_DMA+0x2e0>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d047      	beq.n	8008e02 <I2C_Slave_ISR_DMA+0x156>
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a85      	ldr	r2, [pc, #532]	; (8008f90 <I2C_Slave_ISR_DMA+0x2e4>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d041      	beq.n	8008e02 <I2C_Slave_ISR_DMA+0x156>
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a83      	ldr	r2, [pc, #524]	; (8008f94 <I2C_Slave_ISR_DMA+0x2e8>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d03b      	beq.n	8008e02 <I2C_Slave_ISR_DMA+0x156>
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a81      	ldr	r2, [pc, #516]	; (8008f98 <I2C_Slave_ISR_DMA+0x2ec>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d035      	beq.n	8008e02 <I2C_Slave_ISR_DMA+0x156>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a7f      	ldr	r2, [pc, #508]	; (8008f9c <I2C_Slave_ISR_DMA+0x2f0>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d02f      	beq.n	8008e02 <I2C_Slave_ISR_DMA+0x156>
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a7d      	ldr	r2, [pc, #500]	; (8008fa0 <I2C_Slave_ISR_DMA+0x2f4>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d029      	beq.n	8008e02 <I2C_Slave_ISR_DMA+0x156>
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a7b      	ldr	r2, [pc, #492]	; (8008fa4 <I2C_Slave_ISR_DMA+0x2f8>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d023      	beq.n	8008e02 <I2C_Slave_ISR_DMA+0x156>
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a79      	ldr	r2, [pc, #484]	; (8008fa8 <I2C_Slave_ISR_DMA+0x2fc>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d01d      	beq.n	8008e02 <I2C_Slave_ISR_DMA+0x156>
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a77      	ldr	r2, [pc, #476]	; (8008fac <I2C_Slave_ISR_DMA+0x300>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d017      	beq.n	8008e02 <I2C_Slave_ISR_DMA+0x156>
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a75      	ldr	r2, [pc, #468]	; (8008fb0 <I2C_Slave_ISR_DMA+0x304>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d011      	beq.n	8008e02 <I2C_Slave_ISR_DMA+0x156>
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a73      	ldr	r2, [pc, #460]	; (8008fb4 <I2C_Slave_ISR_DMA+0x308>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d00b      	beq.n	8008e02 <I2C_Slave_ISR_DMA+0x156>
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a71      	ldr	r2, [pc, #452]	; (8008fb8 <I2C_Slave_ISR_DMA+0x30c>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d005      	beq.n	8008e02 <I2C_Slave_ISR_DMA+0x156>
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a6f      	ldr	r2, [pc, #444]	; (8008fbc <I2C_Slave_ISR_DMA+0x310>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d109      	bne.n	8008e16 <I2C_Slave_ISR_DMA+0x16a>
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	bf0c      	ite	eq
 8008e0e:	2301      	moveq	r3, #1
 8008e10:	2300      	movne	r3, #0
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	e008      	b.n	8008e28 <I2C_Slave_ISR_DMA+0x17c>
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	bf0c      	ite	eq
 8008e22:	2301      	moveq	r3, #1
 8008e24:	2300      	movne	r3, #0
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d001      	beq.n	8008e30 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d07c      	beq.n	8008f32 <I2C_Slave_ISR_DMA+0x286>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	0b9b      	lsrs	r3, r3, #14
 8008e3c:	f003 0301 	and.w	r3, r3, #1
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d076      	beq.n	8008f32 <I2C_Slave_ISR_DMA+0x286>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a4d      	ldr	r2, [pc, #308]	; (8008f80 <I2C_Slave_ISR_DMA+0x2d4>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d059      	beq.n	8008f04 <I2C_Slave_ISR_DMA+0x258>
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a4b      	ldr	r2, [pc, #300]	; (8008f84 <I2C_Slave_ISR_DMA+0x2d8>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d053      	beq.n	8008f04 <I2C_Slave_ISR_DMA+0x258>
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a49      	ldr	r2, [pc, #292]	; (8008f88 <I2C_Slave_ISR_DMA+0x2dc>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d04d      	beq.n	8008f04 <I2C_Slave_ISR_DMA+0x258>
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a47      	ldr	r2, [pc, #284]	; (8008f8c <I2C_Slave_ISR_DMA+0x2e0>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d047      	beq.n	8008f04 <I2C_Slave_ISR_DMA+0x258>
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a45      	ldr	r2, [pc, #276]	; (8008f90 <I2C_Slave_ISR_DMA+0x2e4>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d041      	beq.n	8008f04 <I2C_Slave_ISR_DMA+0x258>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a43      	ldr	r2, [pc, #268]	; (8008f94 <I2C_Slave_ISR_DMA+0x2e8>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d03b      	beq.n	8008f04 <I2C_Slave_ISR_DMA+0x258>
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a41      	ldr	r2, [pc, #260]	; (8008f98 <I2C_Slave_ISR_DMA+0x2ec>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d035      	beq.n	8008f04 <I2C_Slave_ISR_DMA+0x258>
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a3f      	ldr	r2, [pc, #252]	; (8008f9c <I2C_Slave_ISR_DMA+0x2f0>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d02f      	beq.n	8008f04 <I2C_Slave_ISR_DMA+0x258>
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a3d      	ldr	r2, [pc, #244]	; (8008fa0 <I2C_Slave_ISR_DMA+0x2f4>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d029      	beq.n	8008f04 <I2C_Slave_ISR_DMA+0x258>
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a3b      	ldr	r2, [pc, #236]	; (8008fa4 <I2C_Slave_ISR_DMA+0x2f8>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d023      	beq.n	8008f04 <I2C_Slave_ISR_DMA+0x258>
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a39      	ldr	r2, [pc, #228]	; (8008fa8 <I2C_Slave_ISR_DMA+0x2fc>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d01d      	beq.n	8008f04 <I2C_Slave_ISR_DMA+0x258>
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a37      	ldr	r2, [pc, #220]	; (8008fac <I2C_Slave_ISR_DMA+0x300>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d017      	beq.n	8008f04 <I2C_Slave_ISR_DMA+0x258>
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a35      	ldr	r2, [pc, #212]	; (8008fb0 <I2C_Slave_ISR_DMA+0x304>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d011      	beq.n	8008f04 <I2C_Slave_ISR_DMA+0x258>
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a33      	ldr	r2, [pc, #204]	; (8008fb4 <I2C_Slave_ISR_DMA+0x308>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d00b      	beq.n	8008f04 <I2C_Slave_ISR_DMA+0x258>
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a31      	ldr	r2, [pc, #196]	; (8008fb8 <I2C_Slave_ISR_DMA+0x30c>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d005      	beq.n	8008f04 <I2C_Slave_ISR_DMA+0x258>
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a2f      	ldr	r2, [pc, #188]	; (8008fbc <I2C_Slave_ISR_DMA+0x310>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d109      	bne.n	8008f18 <I2C_Slave_ISR_DMA+0x26c>
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	bf0c      	ite	eq
 8008f10:	2301      	moveq	r3, #1
 8008f12:	2300      	movne	r3, #0
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	e008      	b.n	8008f2a <I2C_Slave_ISR_DMA+0x27e>
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	bf0c      	ite	eq
 8008f24:	2301      	moveq	r3, #1
 8008f26:	2300      	movne	r3, #0
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d001      	beq.n	8008f32 <I2C_Slave_ISR_DMA+0x286>
          {
            treatdmanack = 1U;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d148      	bne.n	8008fca <I2C_Slave_ISR_DMA+0x31e>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	2b28      	cmp	r3, #40	; 0x28
 8008f42:	d108      	bne.n	8008f56 <I2C_Slave_ISR_DMA+0x2aa>
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f4a:	d104      	bne.n	8008f56 <I2C_Slave_ISR_DMA+0x2aa>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8008f4c:	68b9      	ldr	r1, [r7, #8]
 8008f4e:	68f8      	ldr	r0, [r7, #12]
 8008f50:	f000 fd16 	bl	8009980 <I2C_ITListenCplt>
 8008f54:	e068      	b.n	8009028 <I2C_Slave_ISR_DMA+0x37c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	2b29      	cmp	r3, #41	; 0x29
 8008f60:	d12e      	bne.n	8008fc0 <I2C_Slave_ISR_DMA+0x314>
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008f68:	d02a      	beq.n	8008fc0 <I2C_Slave_ISR_DMA+0x314>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2210      	movs	r2, #16
 8008f70:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	f000 fe51 	bl	8009c1a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	f000 f9e0 	bl	800933e <I2C_ITSlaveSeqCplt>
 8008f7e:	e053      	b.n	8009028 <I2C_Slave_ISR_DMA+0x37c>
 8008f80:	40020010 	.word	0x40020010
 8008f84:	40020028 	.word	0x40020028
 8008f88:	40020040 	.word	0x40020040
 8008f8c:	40020058 	.word	0x40020058
 8008f90:	40020070 	.word	0x40020070
 8008f94:	40020088 	.word	0x40020088
 8008f98:	400200a0 	.word	0x400200a0
 8008f9c:	400200b8 	.word	0x400200b8
 8008fa0:	40020410 	.word	0x40020410
 8008fa4:	40020428 	.word	0x40020428
 8008fa8:	40020440 	.word	0x40020440
 8008fac:	40020458 	.word	0x40020458
 8008fb0:	40020470 	.word	0x40020470
 8008fb4:	40020488 	.word	0x40020488
 8008fb8:	400204a0 	.word	0x400204a0
 8008fbc:	400204b8 	.word	0x400204b8
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2210      	movs	r2, #16
 8008fc6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8008fc8:	e034      	b.n	8009034 <I2C_Slave_ISR_DMA+0x388>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2210      	movs	r2, #16
 8008fd0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fd6:	f043 0204 	orr.w	r2, r3, #4
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fe4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d003      	beq.n	8008ff4 <I2C_Slave_ISR_DMA+0x348>
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008ff2:	d11f      	bne.n	8009034 <I2C_Slave_ISR_DMA+0x388>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008ff4:	7dfb      	ldrb	r3, [r7, #23]
 8008ff6:	2b21      	cmp	r3, #33	; 0x21
 8008ff8:	d002      	beq.n	8009000 <I2C_Slave_ISR_DMA+0x354>
 8008ffa:	7dfb      	ldrb	r3, [r7, #23]
 8008ffc:	2b29      	cmp	r3, #41	; 0x29
 8008ffe:	d103      	bne.n	8009008 <I2C_Slave_ISR_DMA+0x35c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2221      	movs	r2, #33	; 0x21
 8009004:	631a      	str	r2, [r3, #48]	; 0x30
 8009006:	e008      	b.n	800901a <I2C_Slave_ISR_DMA+0x36e>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009008:	7dfb      	ldrb	r3, [r7, #23]
 800900a:	2b22      	cmp	r3, #34	; 0x22
 800900c:	d002      	beq.n	8009014 <I2C_Slave_ISR_DMA+0x368>
 800900e:	7dfb      	ldrb	r3, [r7, #23]
 8009010:	2b2a      	cmp	r3, #42	; 0x2a
 8009012:	d102      	bne.n	800901a <I2C_Slave_ISR_DMA+0x36e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2222      	movs	r2, #34	; 0x22
 8009018:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800901e:	4619      	mov	r1, r3
 8009020:	68f8      	ldr	r0, [r7, #12]
 8009022:	f000 fd03 	bl	8009a2c <I2C_ITError>
      if (treatdmanack == 1U)
 8009026:	e005      	b.n	8009034 <I2C_Slave_ISR_DMA+0x388>
 8009028:	e004      	b.n	8009034 <I2C_Slave_ISR_DMA+0x388>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2210      	movs	r2, #16
 8009030:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009032:	e011      	b.n	8009058 <I2C_Slave_ISR_DMA+0x3ac>
      if (treatdmanack == 1U)
 8009034:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009036:	e00f      	b.n	8009058 <I2C_Slave_ISR_DMA+0x3ac>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	08db      	lsrs	r3, r3, #3
 800903c:	f003 0301 	and.w	r3, r3, #1
 8009040:	2b00      	cmp	r3, #0
 8009042:	d009      	beq.n	8009058 <I2C_Slave_ISR_DMA+0x3ac>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	08db      	lsrs	r3, r3, #3
 8009048:	f003 0301 	and.w	r3, r3, #1
 800904c:	2b00      	cmp	r3, #0
 800904e:	d003      	beq.n	8009058 <I2C_Slave_ISR_DMA+0x3ac>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8009050:	68b9      	ldr	r1, [r7, #8]
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	f000 f8b2 	bl	80091bc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009060:	2300      	movs	r3, #0
}
 8009062:	4618      	mov	r0, r3
 8009064:	3720      	adds	r7, #32
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop

0800906c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b086      	sub	sp, #24
 8009070:	af02      	add	r7, sp, #8
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	4608      	mov	r0, r1
 8009076:	4611      	mov	r1, r2
 8009078:	461a      	mov	r2, r3
 800907a:	4603      	mov	r3, r0
 800907c:	817b      	strh	r3, [r7, #10]
 800907e:	460b      	mov	r3, r1
 8009080:	813b      	strh	r3, [r7, #8]
 8009082:	4613      	mov	r3, r2
 8009084:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009086:	88fb      	ldrh	r3, [r7, #6]
 8009088:	b2da      	uxtb	r2, r3
 800908a:	8979      	ldrh	r1, [r7, #10]
 800908c:	4b20      	ldr	r3, [pc, #128]	; (8009110 <I2C_RequestMemoryWrite+0xa4>)
 800908e:	9300      	str	r3, [sp, #0]
 8009090:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009094:	68f8      	ldr	r0, [r7, #12]
 8009096:	f001 f8a7 	bl	800a1e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800909a:	69fa      	ldr	r2, [r7, #28]
 800909c:	69b9      	ldr	r1, [r7, #24]
 800909e:	68f8      	ldr	r0, [r7, #12]
 80090a0:	f000 ffc0 	bl	800a024 <I2C_WaitOnTXISFlagUntilTimeout>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d001      	beq.n	80090ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	e02c      	b.n	8009108 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80090ae:	88fb      	ldrh	r3, [r7, #6]
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d105      	bne.n	80090c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80090b4:	893b      	ldrh	r3, [r7, #8]
 80090b6:	b2da      	uxtb	r2, r3
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	629a      	str	r2, [r3, #40]	; 0x28
 80090be:	e015      	b.n	80090ec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80090c0:	893b      	ldrh	r3, [r7, #8]
 80090c2:	0a1b      	lsrs	r3, r3, #8
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	b2da      	uxtb	r2, r3
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80090ce:	69fa      	ldr	r2, [r7, #28]
 80090d0:	69b9      	ldr	r1, [r7, #24]
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f000 ffa6 	bl	800a024 <I2C_WaitOnTXISFlagUntilTimeout>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d001      	beq.n	80090e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e012      	b.n	8009108 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80090e2:	893b      	ldrh	r3, [r7, #8]
 80090e4:	b2da      	uxtb	r2, r3
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80090ec:	69fb      	ldr	r3, [r7, #28]
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	69bb      	ldr	r3, [r7, #24]
 80090f2:	2200      	movs	r2, #0
 80090f4:	2180      	movs	r1, #128	; 0x80
 80090f6:	68f8      	ldr	r0, [r7, #12]
 80090f8:	f000 ff54 	bl	8009fa4 <I2C_WaitOnFlagUntilTimeout>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d001      	beq.n	8009106 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	e000      	b.n	8009108 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	3710      	adds	r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	80002000 	.word	0x80002000

08009114 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b086      	sub	sp, #24
 8009118:	af02      	add	r7, sp, #8
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	4608      	mov	r0, r1
 800911e:	4611      	mov	r1, r2
 8009120:	461a      	mov	r2, r3
 8009122:	4603      	mov	r3, r0
 8009124:	817b      	strh	r3, [r7, #10]
 8009126:	460b      	mov	r3, r1
 8009128:	813b      	strh	r3, [r7, #8]
 800912a:	4613      	mov	r3, r2
 800912c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800912e:	88fb      	ldrh	r3, [r7, #6]
 8009130:	b2da      	uxtb	r2, r3
 8009132:	8979      	ldrh	r1, [r7, #10]
 8009134:	4b20      	ldr	r3, [pc, #128]	; (80091b8 <I2C_RequestMemoryRead+0xa4>)
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	2300      	movs	r3, #0
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	f001 f854 	bl	800a1e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009140:	69fa      	ldr	r2, [r7, #28]
 8009142:	69b9      	ldr	r1, [r7, #24]
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f000 ff6d 	bl	800a024 <I2C_WaitOnTXISFlagUntilTimeout>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d001      	beq.n	8009154 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	e02c      	b.n	80091ae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009154:	88fb      	ldrh	r3, [r7, #6]
 8009156:	2b01      	cmp	r3, #1
 8009158:	d105      	bne.n	8009166 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800915a:	893b      	ldrh	r3, [r7, #8]
 800915c:	b2da      	uxtb	r2, r3
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	629a      	str	r2, [r3, #40]	; 0x28
 8009164:	e015      	b.n	8009192 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009166:	893b      	ldrh	r3, [r7, #8]
 8009168:	0a1b      	lsrs	r3, r3, #8
 800916a:	b29b      	uxth	r3, r3
 800916c:	b2da      	uxtb	r2, r3
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009174:	69fa      	ldr	r2, [r7, #28]
 8009176:	69b9      	ldr	r1, [r7, #24]
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f000 ff53 	bl	800a024 <I2C_WaitOnTXISFlagUntilTimeout>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d001      	beq.n	8009188 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	e012      	b.n	80091ae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009188:	893b      	ldrh	r3, [r7, #8]
 800918a:	b2da      	uxtb	r2, r3
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	9300      	str	r3, [sp, #0]
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	2200      	movs	r2, #0
 800919a:	2140      	movs	r1, #64	; 0x40
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f000 ff01 	bl	8009fa4 <I2C_WaitOnFlagUntilTimeout>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d001      	beq.n	80091ac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	e000      	b.n	80091ae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3710      	adds	r7, #16
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	80002000 	.word	0x80002000

080091bc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80091d2:	2b28      	cmp	r3, #40	; 0x28
 80091d4:	d16a      	bne.n	80092ac <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	699b      	ldr	r3, [r3, #24]
 80091dc:	0c1b      	lsrs	r3, r3, #16
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	f003 0301 	and.w	r3, r3, #1
 80091e4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	0c1b      	lsrs	r3, r3, #16
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80091f4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009202:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	b29b      	uxth	r3, r3
 800920c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009210:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	2b02      	cmp	r3, #2
 8009218:	d138      	bne.n	800928c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800921a:	897b      	ldrh	r3, [r7, #10]
 800921c:	09db      	lsrs	r3, r3, #7
 800921e:	b29a      	uxth	r2, r3
 8009220:	89bb      	ldrh	r3, [r7, #12]
 8009222:	4053      	eors	r3, r2
 8009224:	b29b      	uxth	r3, r3
 8009226:	f003 0306 	and.w	r3, r3, #6
 800922a:	2b00      	cmp	r3, #0
 800922c:	d11c      	bne.n	8009268 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800922e:	897b      	ldrh	r3, [r7, #10]
 8009230:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009236:	1c5a      	adds	r2, r3, #1
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009240:	2b02      	cmp	r3, #2
 8009242:	d13b      	bne.n	80092bc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2208      	movs	r2, #8
 8009250:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800925a:	89ba      	ldrh	r2, [r7, #12]
 800925c:	7bfb      	ldrb	r3, [r7, #15]
 800925e:	4619      	mov	r1, r3
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f7ff faed 	bl	8008840 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009266:	e029      	b.n	80092bc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8009268:	893b      	ldrh	r3, [r7, #8]
 800926a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800926c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f001 f84b 	bl	800a30c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800927e:	89ba      	ldrh	r2, [r7, #12]
 8009280:	7bfb      	ldrb	r3, [r7, #15]
 8009282:	4619      	mov	r1, r3
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f7ff fadb 	bl	8008840 <HAL_I2C_AddrCallback>
}
 800928a:	e017      	b.n	80092bc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800928c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f001 f83b 	bl	800a30c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800929e:	89ba      	ldrh	r2, [r7, #12]
 80092a0:	7bfb      	ldrb	r3, [r7, #15]
 80092a2:	4619      	mov	r1, r3
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f7ff facb 	bl	8008840 <HAL_I2C_AddrCallback>
}
 80092aa:	e007      	b.n	80092bc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2208      	movs	r2, #8
 80092b2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80092bc:	bf00      	nop
 80092be:	3710      	adds	r7, #16
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	2b21      	cmp	r3, #33	; 0x21
 80092de:	d115      	bne.n	800930c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2220      	movs	r2, #32
 80092e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2211      	movs	r2, #17
 80092ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80092f4:	2101      	movs	r1, #1
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f001 f808 	bl	800a30c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f7ff fa73 	bl	80087f0 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800930a:	e014      	b.n	8009336 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2220      	movs	r2, #32
 8009310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2212      	movs	r2, #18
 8009318:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009320:	2102      	movs	r1, #2
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 fff2 	bl	800a30c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f7ff fa67 	bl	8008804 <HAL_I2C_MasterRxCpltCallback>
}
 8009336:	bf00      	nop
 8009338:	3708      	adds	r7, #8
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b084      	sub	sp, #16
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	0b9b      	lsrs	r3, r3, #14
 800935a:	f003 0301 	and.w	r3, r3, #1
 800935e:	2b00      	cmp	r3, #0
 8009360:	d008      	beq.n	8009374 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009370:	601a      	str	r2, [r3, #0]
 8009372:	e00d      	b.n	8009390 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	0bdb      	lsrs	r3, r3, #15
 8009378:	f003 0301 	and.w	r3, r3, #1
 800937c:	2b00      	cmp	r3, #0
 800937e:	d007      	beq.n	8009390 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800938e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009396:	b2db      	uxtb	r3, r3
 8009398:	2b29      	cmp	r3, #41	; 0x29
 800939a:	d112      	bne.n	80093c2 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2228      	movs	r2, #40	; 0x28
 80093a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2221      	movs	r2, #33	; 0x21
 80093a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80093aa:	2101      	movs	r1, #1
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 ffad 	bl	800a30c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f7ff fa2c 	bl	8008818 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80093c0:	e017      	b.n	80093f2 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	2b2a      	cmp	r3, #42	; 0x2a
 80093cc:	d111      	bne.n	80093f2 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2228      	movs	r2, #40	; 0x28
 80093d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2222      	movs	r2, #34	; 0x22
 80093da:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80093dc:	2102      	movs	r1, #2
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 ff94 	bl	800a30c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f7ff fa1d 	bl	800882c <HAL_I2C_SlaveRxCpltCallback>
}
 80093f2:	bf00      	nop
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
	...

080093fc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b086      	sub	sp, #24
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2220      	movs	r2, #32
 8009410:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009418:	b2db      	uxtb	r3, r3
 800941a:	2b21      	cmp	r3, #33	; 0x21
 800941c:	d107      	bne.n	800942e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800941e:	2101      	movs	r1, #1
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 ff73 	bl	800a30c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2211      	movs	r2, #17
 800942a:	631a      	str	r2, [r3, #48]	; 0x30
 800942c:	e00c      	b.n	8009448 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009434:	b2db      	uxtb	r3, r3
 8009436:	2b22      	cmp	r3, #34	; 0x22
 8009438:	d106      	bne.n	8009448 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800943a:	2102      	movs	r1, #2
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 ff65 	bl	800a30c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2212      	movs	r2, #18
 8009446:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6859      	ldr	r1, [r3, #4]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	4b4d      	ldr	r3, [pc, #308]	; (8009588 <I2C_ITMasterCplt+0x18c>)
 8009454:	400b      	ands	r3, r1
 8009456:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4a4a      	ldr	r2, [pc, #296]	; (800958c <I2C_ITMasterCplt+0x190>)
 8009462:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	091b      	lsrs	r3, r3, #4
 8009468:	f003 0301 	and.w	r3, r3, #1
 800946c:	2b00      	cmp	r3, #0
 800946e:	d009      	beq.n	8009484 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2210      	movs	r2, #16
 8009476:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800947c:	f043 0204 	orr.w	r2, r3, #4
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800948a:	b2db      	uxtb	r3, r3
 800948c:	2b60      	cmp	r3, #96	; 0x60
 800948e:	d10b      	bne.n	80094a8 <I2C_ITMasterCplt+0xac>
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	089b      	lsrs	r3, r3, #2
 8009494:	f003 0301 	and.w	r3, r3, #1
 8009498:	2b00      	cmp	r3, #0
 800949a:	d005      	beq.n	80094a8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80094a6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 fbb6 	bl	8009c1a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094b2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	2b60      	cmp	r3, #96	; 0x60
 80094be:	d002      	beq.n	80094c6 <I2C_ITMasterCplt+0xca>
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d006      	beq.n	80094d4 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ca:	4619      	mov	r1, r3
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 faad 	bl	8009a2c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80094d2:	e054      	b.n	800957e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	2b21      	cmp	r3, #33	; 0x21
 80094de:	d124      	bne.n	800952a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2220      	movs	r2, #32
 80094e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	2b40      	cmp	r3, #64	; 0x40
 80094f8:	d10b      	bne.n	8009512 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f7ff f9b0 	bl	8008870 <HAL_I2C_MemTxCpltCallback>
}
 8009510:	e035      	b.n	800957e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f7ff f964 	bl	80087f0 <HAL_I2C_MasterTxCpltCallback>
}
 8009528:	e029      	b.n	800957e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009530:	b2db      	uxtb	r3, r3
 8009532:	2b22      	cmp	r3, #34	; 0x22
 8009534:	d123      	bne.n	800957e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2220      	movs	r2, #32
 800953a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800954a:	b2db      	uxtb	r3, r3
 800954c:	2b40      	cmp	r3, #64	; 0x40
 800954e:	d10b      	bne.n	8009568 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f7ff f98f 	bl	8008884 <HAL_I2C_MemRxCpltCallback>
}
 8009566:	e00a      	b.n	800957e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f7ff f943 	bl	8008804 <HAL_I2C_MasterRxCpltCallback>
}
 800957e:	bf00      	nop
 8009580:	3718      	adds	r7, #24
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	fe00e800 	.word	0xfe00e800
 800958c:	ffff0000 	.word	0xffff0000

08009590 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b086      	sub	sp, #24
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095ac:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2220      	movs	r2, #32
 80095b4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80095b6:	7bfb      	ldrb	r3, [r7, #15]
 80095b8:	2b21      	cmp	r3, #33	; 0x21
 80095ba:	d002      	beq.n	80095c2 <I2C_ITSlaveCplt+0x32>
 80095bc:	7bfb      	ldrb	r3, [r7, #15]
 80095be:	2b29      	cmp	r3, #41	; 0x29
 80095c0:	d108      	bne.n	80095d4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80095c2:	f248 0101 	movw	r1, #32769	; 0x8001
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 fea0 	bl	800a30c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2221      	movs	r2, #33	; 0x21
 80095d0:	631a      	str	r2, [r3, #48]	; 0x30
 80095d2:	e00d      	b.n	80095f0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80095d4:	7bfb      	ldrb	r3, [r7, #15]
 80095d6:	2b22      	cmp	r3, #34	; 0x22
 80095d8:	d002      	beq.n	80095e0 <I2C_ITSlaveCplt+0x50>
 80095da:	7bfb      	ldrb	r3, [r7, #15]
 80095dc:	2b2a      	cmp	r3, #42	; 0x2a
 80095de:	d107      	bne.n	80095f0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80095e0:	f248 0102 	movw	r1, #32770	; 0x8002
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 fe91 	bl	800a30c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2222      	movs	r2, #34	; 0x22
 80095ee:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	685a      	ldr	r2, [r3, #4]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80095fe:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	6859      	ldr	r1, [r3, #4]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	4b80      	ldr	r3, [pc, #512]	; (800980c <I2C_ITSlaveCplt+0x27c>)
 800960c:	400b      	ands	r3, r1
 800960e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 fb02 	bl	8009c1a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	0b9b      	lsrs	r3, r3, #14
 800961a:	f003 0301 	and.w	r3, r3, #1
 800961e:	2b00      	cmp	r3, #0
 8009620:	d07a      	beq.n	8009718 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009630:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009636:	2b00      	cmp	r3, #0
 8009638:	f000 8111 	beq.w	800985e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a73      	ldr	r2, [pc, #460]	; (8009810 <I2C_ITSlaveCplt+0x280>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d059      	beq.n	80096fc <I2C_ITSlaveCplt+0x16c>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a71      	ldr	r2, [pc, #452]	; (8009814 <I2C_ITSlaveCplt+0x284>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d053      	beq.n	80096fc <I2C_ITSlaveCplt+0x16c>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a6f      	ldr	r2, [pc, #444]	; (8009818 <I2C_ITSlaveCplt+0x288>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d04d      	beq.n	80096fc <I2C_ITSlaveCplt+0x16c>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a6d      	ldr	r2, [pc, #436]	; (800981c <I2C_ITSlaveCplt+0x28c>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d047      	beq.n	80096fc <I2C_ITSlaveCplt+0x16c>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a6b      	ldr	r2, [pc, #428]	; (8009820 <I2C_ITSlaveCplt+0x290>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d041      	beq.n	80096fc <I2C_ITSlaveCplt+0x16c>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a69      	ldr	r2, [pc, #420]	; (8009824 <I2C_ITSlaveCplt+0x294>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d03b      	beq.n	80096fc <I2C_ITSlaveCplt+0x16c>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a67      	ldr	r2, [pc, #412]	; (8009828 <I2C_ITSlaveCplt+0x298>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d035      	beq.n	80096fc <I2C_ITSlaveCplt+0x16c>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a65      	ldr	r2, [pc, #404]	; (800982c <I2C_ITSlaveCplt+0x29c>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d02f      	beq.n	80096fc <I2C_ITSlaveCplt+0x16c>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a63      	ldr	r2, [pc, #396]	; (8009830 <I2C_ITSlaveCplt+0x2a0>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d029      	beq.n	80096fc <I2C_ITSlaveCplt+0x16c>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a61      	ldr	r2, [pc, #388]	; (8009834 <I2C_ITSlaveCplt+0x2a4>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d023      	beq.n	80096fc <I2C_ITSlaveCplt+0x16c>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a5f      	ldr	r2, [pc, #380]	; (8009838 <I2C_ITSlaveCplt+0x2a8>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d01d      	beq.n	80096fc <I2C_ITSlaveCplt+0x16c>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a5d      	ldr	r2, [pc, #372]	; (800983c <I2C_ITSlaveCplt+0x2ac>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d017      	beq.n	80096fc <I2C_ITSlaveCplt+0x16c>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a5b      	ldr	r2, [pc, #364]	; (8009840 <I2C_ITSlaveCplt+0x2b0>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d011      	beq.n	80096fc <I2C_ITSlaveCplt+0x16c>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a59      	ldr	r2, [pc, #356]	; (8009844 <I2C_ITSlaveCplt+0x2b4>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d00b      	beq.n	80096fc <I2C_ITSlaveCplt+0x16c>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a57      	ldr	r2, [pc, #348]	; (8009848 <I2C_ITSlaveCplt+0x2b8>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d005      	beq.n	80096fc <I2C_ITSlaveCplt+0x16c>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a55      	ldr	r2, [pc, #340]	; (800984c <I2C_ITSlaveCplt+0x2bc>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d105      	bne.n	8009708 <I2C_ITSlaveCplt+0x178>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	b29b      	uxth	r3, r3
 8009706:	e004      	b.n	8009712 <I2C_ITSlaveCplt+0x182>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	b29b      	uxth	r3, r3
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	8553      	strh	r3, [r2, #42]	; 0x2a
 8009716:	e0a2      	b.n	800985e <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	0bdb      	lsrs	r3, r3, #15
 800971c:	f003 0301 	and.w	r3, r3, #1
 8009720:	2b00      	cmp	r3, #0
 8009722:	f000 809c 	beq.w	800985e <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009734:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800973a:	2b00      	cmp	r3, #0
 800973c:	f000 808f 	beq.w	800985e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a32      	ldr	r2, [pc, #200]	; (8009810 <I2C_ITSlaveCplt+0x280>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d059      	beq.n	8009800 <I2C_ITSlaveCplt+0x270>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a30      	ldr	r2, [pc, #192]	; (8009814 <I2C_ITSlaveCplt+0x284>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d053      	beq.n	8009800 <I2C_ITSlaveCplt+0x270>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a2e      	ldr	r2, [pc, #184]	; (8009818 <I2C_ITSlaveCplt+0x288>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d04d      	beq.n	8009800 <I2C_ITSlaveCplt+0x270>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a2c      	ldr	r2, [pc, #176]	; (800981c <I2C_ITSlaveCplt+0x28c>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d047      	beq.n	8009800 <I2C_ITSlaveCplt+0x270>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a2a      	ldr	r2, [pc, #168]	; (8009820 <I2C_ITSlaveCplt+0x290>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d041      	beq.n	8009800 <I2C_ITSlaveCplt+0x270>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a28      	ldr	r2, [pc, #160]	; (8009824 <I2C_ITSlaveCplt+0x294>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d03b      	beq.n	8009800 <I2C_ITSlaveCplt+0x270>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a26      	ldr	r2, [pc, #152]	; (8009828 <I2C_ITSlaveCplt+0x298>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d035      	beq.n	8009800 <I2C_ITSlaveCplt+0x270>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a24      	ldr	r2, [pc, #144]	; (800982c <I2C_ITSlaveCplt+0x29c>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d02f      	beq.n	8009800 <I2C_ITSlaveCplt+0x270>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a22      	ldr	r2, [pc, #136]	; (8009830 <I2C_ITSlaveCplt+0x2a0>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d029      	beq.n	8009800 <I2C_ITSlaveCplt+0x270>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a20      	ldr	r2, [pc, #128]	; (8009834 <I2C_ITSlaveCplt+0x2a4>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d023      	beq.n	8009800 <I2C_ITSlaveCplt+0x270>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a1e      	ldr	r2, [pc, #120]	; (8009838 <I2C_ITSlaveCplt+0x2a8>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d01d      	beq.n	8009800 <I2C_ITSlaveCplt+0x270>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a1c      	ldr	r2, [pc, #112]	; (800983c <I2C_ITSlaveCplt+0x2ac>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d017      	beq.n	8009800 <I2C_ITSlaveCplt+0x270>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a1a      	ldr	r2, [pc, #104]	; (8009840 <I2C_ITSlaveCplt+0x2b0>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d011      	beq.n	8009800 <I2C_ITSlaveCplt+0x270>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a18      	ldr	r2, [pc, #96]	; (8009844 <I2C_ITSlaveCplt+0x2b4>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d00b      	beq.n	8009800 <I2C_ITSlaveCplt+0x270>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a16      	ldr	r2, [pc, #88]	; (8009848 <I2C_ITSlaveCplt+0x2b8>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d005      	beq.n	8009800 <I2C_ITSlaveCplt+0x270>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a14      	ldr	r2, [pc, #80]	; (800984c <I2C_ITSlaveCplt+0x2bc>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d127      	bne.n	8009850 <I2C_ITSlaveCplt+0x2c0>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	b29b      	uxth	r3, r3
 800980a:	e026      	b.n	800985a <I2C_ITSlaveCplt+0x2ca>
 800980c:	fe00e800 	.word	0xfe00e800
 8009810:	40020010 	.word	0x40020010
 8009814:	40020028 	.word	0x40020028
 8009818:	40020040 	.word	0x40020040
 800981c:	40020058 	.word	0x40020058
 8009820:	40020070 	.word	0x40020070
 8009824:	40020088 	.word	0x40020088
 8009828:	400200a0 	.word	0x400200a0
 800982c:	400200b8 	.word	0x400200b8
 8009830:	40020410 	.word	0x40020410
 8009834:	40020428 	.word	0x40020428
 8009838:	40020440 	.word	0x40020440
 800983c:	40020458 	.word	0x40020458
 8009840:	40020470 	.word	0x40020470
 8009844:	40020488 	.word	0x40020488
 8009848:	400204a0 	.word	0x400204a0
 800984c:	400204b8 	.word	0x400204b8
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	b29b      	uxth	r3, r3
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	089b      	lsrs	r3, r3, #2
 8009862:	f003 0301 	and.w	r3, r3, #1
 8009866:	2b00      	cmp	r3, #0
 8009868:	d020      	beq.n	80098ac <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	f023 0304 	bic.w	r3, r3, #4
 8009870:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987c:	b2d2      	uxtb	r2, r2
 800987e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009884:	1c5a      	adds	r2, r3, #1
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00c      	beq.n	80098ac <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009896:	3b01      	subs	r3, #1
 8009898:	b29a      	uxth	r2, r3
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	3b01      	subs	r3, #1
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d005      	beq.n	80098c2 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ba:	f043 0204 	orr.w	r2, r3, #4
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d010      	beq.n	80098fa <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098dc:	4619      	mov	r1, r3
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 f8a4 	bl	8009a2c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	2b28      	cmp	r3, #40	; 0x28
 80098ee:	d141      	bne.n	8009974 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80098f0:	6979      	ldr	r1, [r7, #20]
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 f844 	bl	8009980 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80098f8:	e03c      	b.n	8009974 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009902:	d014      	beq.n	800992e <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f7ff fd1a 	bl	800933e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a1b      	ldr	r2, [pc, #108]	; (800997c <I2C_ITSlaveCplt+0x3ec>)
 800990e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2220      	movs	r2, #32
 8009914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f7fe ff98 	bl	800885c <HAL_I2C_ListenCpltCallback>
}
 800992c:	e022      	b.n	8009974 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009934:	b2db      	uxtb	r3, r3
 8009936:	2b22      	cmp	r3, #34	; 0x22
 8009938:	d10e      	bne.n	8009958 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2220      	movs	r2, #32
 800993e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f7fe ff6b 	bl	800882c <HAL_I2C_SlaveRxCpltCallback>
}
 8009956:	e00d      	b.n	8009974 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2220      	movs	r2, #32
 800995c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f7fe ff52 	bl	8008818 <HAL_I2C_SlaveTxCpltCallback>
}
 8009974:	bf00      	nop
 8009976:	3718      	adds	r7, #24
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	ffff0000 	.word	0xffff0000

08009980 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	4a26      	ldr	r2, [pc, #152]	; (8009a28 <I2C_ITListenCplt+0xa8>)
 800998e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2220      	movs	r2, #32
 800999a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2200      	movs	r2, #0
 80099aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	089b      	lsrs	r3, r3, #2
 80099b0:	f003 0301 	and.w	r3, r3, #1
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d022      	beq.n	80099fe <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c2:	b2d2      	uxtb	r2, r2
 80099c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ca:	1c5a      	adds	r2, r3, #1
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d012      	beq.n	80099fe <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099dc:	3b01      	subs	r3, #1
 80099de:	b29a      	uxth	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	3b01      	subs	r3, #1
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099f6:	f043 0204 	orr.w	r2, r3, #4
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80099fe:	f248 0103 	movw	r1, #32771	; 0x8003
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 fc82 	bl	800a30c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2210      	movs	r2, #16
 8009a0e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f7fe ff1f 	bl	800885c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009a1e:	bf00      	nop
 8009a20:	3708      	adds	r7, #8
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	ffff0000 	.word	0xffff0000

08009a2c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	4a5d      	ldr	r2, [pc, #372]	; (8009bc0 <I2C_ITError+0x194>)
 8009a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	431a      	orrs	r2, r3
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009a5e:	7bfb      	ldrb	r3, [r7, #15]
 8009a60:	2b28      	cmp	r3, #40	; 0x28
 8009a62:	d005      	beq.n	8009a70 <I2C_ITError+0x44>
 8009a64:	7bfb      	ldrb	r3, [r7, #15]
 8009a66:	2b29      	cmp	r3, #41	; 0x29
 8009a68:	d002      	beq.n	8009a70 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009a6a:	7bfb      	ldrb	r3, [r7, #15]
 8009a6c:	2b2a      	cmp	r3, #42	; 0x2a
 8009a6e:	d10b      	bne.n	8009a88 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009a70:	2103      	movs	r1, #3
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 fc4a 	bl	800a30c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2228      	movs	r2, #40	; 0x28
 8009a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4a50      	ldr	r2, [pc, #320]	; (8009bc4 <I2C_ITError+0x198>)
 8009a84:	635a      	str	r2, [r3, #52]	; 0x34
 8009a86:	e011      	b.n	8009aac <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009a88:	f248 0103 	movw	r1, #32771	; 0x8003
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 fc3d 	bl	800a30c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	2b60      	cmp	r3, #96	; 0x60
 8009a9c:	d003      	beq.n	8009aa6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2220      	movs	r2, #32
 8009aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ab0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d039      	beq.n	8009b2e <I2C_ITError+0x102>
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	2b11      	cmp	r3, #17
 8009abe:	d002      	beq.n	8009ac6 <I2C_ITError+0x9a>
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	2b21      	cmp	r3, #33	; 0x21
 8009ac4:	d133      	bne.n	8009b2e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ad0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ad4:	d107      	bne.n	8009ae6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009ae4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7fd fcca 	bl	8007484 <HAL_DMA_GetState>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d017      	beq.n	8009b26 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009afa:	4a33      	ldr	r2, [pc, #204]	; (8009bc8 <I2C_ITError+0x19c>)
 8009afc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7fc fb4c 	bl	80061a8 <HAL_DMA_Abort_IT>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d04d      	beq.n	8009bb2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009b20:	4610      	mov	r0, r2
 8009b22:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009b24:	e045      	b.n	8009bb2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f850 	bl	8009bcc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009b2c:	e041      	b.n	8009bb2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d039      	beq.n	8009baa <I2C_ITError+0x17e>
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	2b12      	cmp	r3, #18
 8009b3a:	d002      	beq.n	8009b42 <I2C_ITError+0x116>
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	2b22      	cmp	r3, #34	; 0x22
 8009b40:	d133      	bne.n	8009baa <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b50:	d107      	bne.n	8009b62 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009b60:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7fd fc8c 	bl	8007484 <HAL_DMA_GetState>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d017      	beq.n	8009ba2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b76:	4a14      	ldr	r2, [pc, #80]	; (8009bc8 <I2C_ITError+0x19c>)
 8009b78:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7fc fb0e 	bl	80061a8 <HAL_DMA_Abort_IT>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d011      	beq.n	8009bb6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009b9c:	4610      	mov	r0, r2
 8009b9e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009ba0:	e009      	b.n	8009bb6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 f812 	bl	8009bcc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009ba8:	e005      	b.n	8009bb6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 f80e 	bl	8009bcc <I2C_TreatErrorCallback>
  }
}
 8009bb0:	e002      	b.n	8009bb8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009bb2:	bf00      	nop
 8009bb4:	e000      	b.n	8009bb8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009bb6:	bf00      	nop
}
 8009bb8:	bf00      	nop
 8009bba:	3710      	adds	r7, #16
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	ffff0000 	.word	0xffff0000
 8009bc4:	080088c1 	.word	0x080088c1
 8009bc8:	08009f69 	.word	0x08009f69

08009bcc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	2b60      	cmp	r3, #96	; 0x60
 8009bde:	d10e      	bne.n	8009bfe <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2220      	movs	r2, #32
 8009be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f7fe fe58 	bl	80088ac <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009bfc:	e009      	b.n	8009c12 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f7fe fe43 	bl	8008898 <HAL_I2C_ErrorCallback>
}
 8009c12:	bf00      	nop
 8009c14:	3708      	adds	r7, #8
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009c1a:	b480      	push	{r7}
 8009c1c:	b083      	sub	sp, #12
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	699b      	ldr	r3, [r3, #24]
 8009c28:	f003 0302 	and.w	r3, r3, #2
 8009c2c:	2b02      	cmp	r3, #2
 8009c2e:	d103      	bne.n	8009c38 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2200      	movs	r2, #0
 8009c36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	699b      	ldr	r3, [r3, #24]
 8009c3e:	f003 0301 	and.w	r3, r3, #1
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d007      	beq.n	8009c56 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	699a      	ldr	r2, [r3, #24]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f042 0201 	orr.w	r2, r2, #1
 8009c54:	619a      	str	r2, [r3, #24]
  }
}
 8009c56:	bf00      	nop
 8009c58:	370c      	adds	r7, #12
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr

08009c62 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b084      	sub	sp, #16
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c6e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009c7e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d104      	bne.n	8009c94 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009c8a:	2120      	movs	r1, #32
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f000 fad9 	bl	800a244 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8009c92:	e02d      	b.n	8009cf0 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009c9c:	441a      	add	r2, r3
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	2bff      	cmp	r3, #255	; 0xff
 8009caa:	d903      	bls.n	8009cb4 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	22ff      	movs	r2, #255	; 0xff
 8009cb0:	851a      	strh	r2, [r3, #40]	; 0x28
 8009cb2:	e004      	b.n	8009cbe <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cb8:	b29a      	uxth	r2, r3
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	3324      	adds	r3, #36	; 0x24
 8009cc8:	4619      	mov	r1, r3
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cce:	461a      	mov	r2, r3
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cd4:	f7fb fce0 	bl	8005698 <HAL_DMA_Start_IT>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d004      	beq.n	8009ce8 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8009cde:	2110      	movs	r1, #16
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f7ff fea3 	bl	8009a2c <I2C_ITError>
}
 8009ce6:	e003      	b.n	8009cf0 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8009ce8:	2140      	movs	r1, #64	; 0x40
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f000 faaa 	bl	800a244 <I2C_Enable_IRQ>
}
 8009cf0:	bf00      	nop
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8009d00:	2300      	movs	r3, #0
 8009d02:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d08:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d076      	beq.n	8009e00 <I2C_DMAError+0x108>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a83      	ldr	r2, [pc, #524]	; (8009f28 <I2C_DMAError+0x230>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d059      	beq.n	8009dd2 <I2C_DMAError+0xda>
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a81      	ldr	r2, [pc, #516]	; (8009f2c <I2C_DMAError+0x234>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d053      	beq.n	8009dd2 <I2C_DMAError+0xda>
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a7f      	ldr	r2, [pc, #508]	; (8009f30 <I2C_DMAError+0x238>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d04d      	beq.n	8009dd2 <I2C_DMAError+0xda>
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a7d      	ldr	r2, [pc, #500]	; (8009f34 <I2C_DMAError+0x23c>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d047      	beq.n	8009dd2 <I2C_DMAError+0xda>
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a7b      	ldr	r2, [pc, #492]	; (8009f38 <I2C_DMAError+0x240>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d041      	beq.n	8009dd2 <I2C_DMAError+0xda>
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a79      	ldr	r2, [pc, #484]	; (8009f3c <I2C_DMAError+0x244>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d03b      	beq.n	8009dd2 <I2C_DMAError+0xda>
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a77      	ldr	r2, [pc, #476]	; (8009f40 <I2C_DMAError+0x248>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d035      	beq.n	8009dd2 <I2C_DMAError+0xda>
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a75      	ldr	r2, [pc, #468]	; (8009f44 <I2C_DMAError+0x24c>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d02f      	beq.n	8009dd2 <I2C_DMAError+0xda>
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a73      	ldr	r2, [pc, #460]	; (8009f48 <I2C_DMAError+0x250>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d029      	beq.n	8009dd2 <I2C_DMAError+0xda>
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a71      	ldr	r2, [pc, #452]	; (8009f4c <I2C_DMAError+0x254>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d023      	beq.n	8009dd2 <I2C_DMAError+0xda>
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a6f      	ldr	r2, [pc, #444]	; (8009f50 <I2C_DMAError+0x258>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d01d      	beq.n	8009dd2 <I2C_DMAError+0xda>
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a6d      	ldr	r2, [pc, #436]	; (8009f54 <I2C_DMAError+0x25c>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d017      	beq.n	8009dd2 <I2C_DMAError+0xda>
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a6b      	ldr	r2, [pc, #428]	; (8009f58 <I2C_DMAError+0x260>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d011      	beq.n	8009dd2 <I2C_DMAError+0xda>
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a69      	ldr	r2, [pc, #420]	; (8009f5c <I2C_DMAError+0x264>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d00b      	beq.n	8009dd2 <I2C_DMAError+0xda>
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a67      	ldr	r2, [pc, #412]	; (8009f60 <I2C_DMAError+0x268>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d005      	beq.n	8009dd2 <I2C_DMAError+0xda>
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a65      	ldr	r2, [pc, #404]	; (8009f64 <I2C_DMAError+0x26c>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d109      	bne.n	8009de6 <I2C_DMAError+0xee>
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	bf0c      	ite	eq
 8009dde:	2301      	moveq	r3, #1
 8009de0:	2300      	movne	r3, #0
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	e008      	b.n	8009df8 <I2C_DMAError+0x100>
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	bf0c      	ite	eq
 8009df2:	2301      	moveq	r3, #1
 8009df4:	2300      	movne	r3, #0
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d001      	beq.n	8009e00 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d076      	beq.n	8009ef6 <I2C_DMAError+0x1fe>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a46      	ldr	r2, [pc, #280]	; (8009f28 <I2C_DMAError+0x230>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d059      	beq.n	8009ec8 <I2C_DMAError+0x1d0>
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a44      	ldr	r2, [pc, #272]	; (8009f2c <I2C_DMAError+0x234>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d053      	beq.n	8009ec8 <I2C_DMAError+0x1d0>
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a42      	ldr	r2, [pc, #264]	; (8009f30 <I2C_DMAError+0x238>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d04d      	beq.n	8009ec8 <I2C_DMAError+0x1d0>
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a40      	ldr	r2, [pc, #256]	; (8009f34 <I2C_DMAError+0x23c>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d047      	beq.n	8009ec8 <I2C_DMAError+0x1d0>
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a3e      	ldr	r2, [pc, #248]	; (8009f38 <I2C_DMAError+0x240>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d041      	beq.n	8009ec8 <I2C_DMAError+0x1d0>
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a3c      	ldr	r2, [pc, #240]	; (8009f3c <I2C_DMAError+0x244>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d03b      	beq.n	8009ec8 <I2C_DMAError+0x1d0>
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a3a      	ldr	r2, [pc, #232]	; (8009f40 <I2C_DMAError+0x248>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d035      	beq.n	8009ec8 <I2C_DMAError+0x1d0>
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a38      	ldr	r2, [pc, #224]	; (8009f44 <I2C_DMAError+0x24c>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d02f      	beq.n	8009ec8 <I2C_DMAError+0x1d0>
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a36      	ldr	r2, [pc, #216]	; (8009f48 <I2C_DMAError+0x250>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d029      	beq.n	8009ec8 <I2C_DMAError+0x1d0>
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a34      	ldr	r2, [pc, #208]	; (8009f4c <I2C_DMAError+0x254>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d023      	beq.n	8009ec8 <I2C_DMAError+0x1d0>
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a32      	ldr	r2, [pc, #200]	; (8009f50 <I2C_DMAError+0x258>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d01d      	beq.n	8009ec8 <I2C_DMAError+0x1d0>
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a30      	ldr	r2, [pc, #192]	; (8009f54 <I2C_DMAError+0x25c>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d017      	beq.n	8009ec8 <I2C_DMAError+0x1d0>
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a2e      	ldr	r2, [pc, #184]	; (8009f58 <I2C_DMAError+0x260>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d011      	beq.n	8009ec8 <I2C_DMAError+0x1d0>
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a2c      	ldr	r2, [pc, #176]	; (8009f5c <I2C_DMAError+0x264>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d00b      	beq.n	8009ec8 <I2C_DMAError+0x1d0>
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a2a      	ldr	r2, [pc, #168]	; (8009f60 <I2C_DMAError+0x268>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d005      	beq.n	8009ec8 <I2C_DMAError+0x1d0>
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a28      	ldr	r2, [pc, #160]	; (8009f64 <I2C_DMAError+0x26c>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d109      	bne.n	8009edc <I2C_DMAError+0x1e4>
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	bf0c      	ite	eq
 8009ed4:	2301      	moveq	r3, #1
 8009ed6:	2300      	movne	r3, #0
 8009ed8:	b2db      	uxtb	r3, r3
 8009eda:	e008      	b.n	8009eee <I2C_DMAError+0x1f6>
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	bf0c      	ite	eq
 8009ee8:	2301      	moveq	r3, #1
 8009eea:	2300      	movne	r3, #0
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d001      	beq.n	8009ef6 <I2C_DMAError+0x1fe>
    {
      treatdmaerror = 1U;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f7fd fad2 	bl	80074a0 <HAL_DMA_GetError>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b02      	cmp	r3, #2
 8009f00:	d00e      	beq.n	8009f20 <I2C_DMAError+0x228>
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d00b      	beq.n	8009f20 <I2C_DMAError+0x228>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	685a      	ldr	r2, [r3, #4]
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f16:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8009f18:	2110      	movs	r1, #16
 8009f1a:	68b8      	ldr	r0, [r7, #8]
 8009f1c:	f7ff fd86 	bl	8009a2c <I2C_ITError>
  }
}
 8009f20:	bf00      	nop
 8009f22:	3710      	adds	r7, #16
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	40020010 	.word	0x40020010
 8009f2c:	40020028 	.word	0x40020028
 8009f30:	40020040 	.word	0x40020040
 8009f34:	40020058 	.word	0x40020058
 8009f38:	40020070 	.word	0x40020070
 8009f3c:	40020088 	.word	0x40020088
 8009f40:	400200a0 	.word	0x400200a0
 8009f44:	400200b8 	.word	0x400200b8
 8009f48:	40020410 	.word	0x40020410
 8009f4c:	40020428 	.word	0x40020428
 8009f50:	40020440 	.word	0x40020440
 8009f54:	40020458 	.word	0x40020458
 8009f58:	40020470 	.word	0x40020470
 8009f5c:	40020488 	.word	0x40020488
 8009f60:	400204a0 	.word	0x400204a0
 8009f64:	400204b8 	.word	0x400204b8

08009f68 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f74:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d003      	beq.n	8009f86 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f82:	2200      	movs	r2, #0
 8009f84:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d003      	beq.n	8009f96 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f92:	2200      	movs	r2, #0
 8009f94:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8009f96:	68f8      	ldr	r0, [r7, #12]
 8009f98:	f7ff fe18 	bl	8009bcc <I2C_TreatErrorCallback>
}
 8009f9c:	bf00      	nop
 8009f9e:	3710      	adds	r7, #16
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	60b9      	str	r1, [r7, #8]
 8009fae:	603b      	str	r3, [r7, #0]
 8009fb0:	4613      	mov	r3, r2
 8009fb2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009fb4:	e022      	b.n	8009ffc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fbc:	d01e      	beq.n	8009ffc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fbe:	f7fa fec3 	bl	8004d48 <HAL_GetTick>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	69bb      	ldr	r3, [r7, #24]
 8009fc6:	1ad3      	subs	r3, r2, r3
 8009fc8:	683a      	ldr	r2, [r7, #0]
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d302      	bcc.n	8009fd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d113      	bne.n	8009ffc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fd8:	f043 0220 	orr.w	r2, r3, #32
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2220      	movs	r2, #32
 8009fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	e00f      	b.n	800a01c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	699a      	ldr	r2, [r3, #24]
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	4013      	ands	r3, r2
 800a006:	68ba      	ldr	r2, [r7, #8]
 800a008:	429a      	cmp	r2, r3
 800a00a:	bf0c      	ite	eq
 800a00c:	2301      	moveq	r3, #1
 800a00e:	2300      	movne	r3, #0
 800a010:	b2db      	uxtb	r3, r3
 800a012:	461a      	mov	r2, r3
 800a014:	79fb      	ldrb	r3, [r7, #7]
 800a016:	429a      	cmp	r2, r3
 800a018:	d0cd      	beq.n	8009fb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a01a:	2300      	movs	r3, #0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a030:	e02c      	b.n	800a08c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	68b9      	ldr	r1, [r7, #8]
 800a036:	68f8      	ldr	r0, [r7, #12]
 800a038:	f000 f870 	bl	800a11c <I2C_IsAcknowledgeFailed>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d001      	beq.n	800a046 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	e02a      	b.n	800a09c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a04c:	d01e      	beq.n	800a08c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a04e:	f7fa fe7b 	bl	8004d48 <HAL_GetTick>
 800a052:	4602      	mov	r2, r0
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	1ad3      	subs	r3, r2, r3
 800a058:	68ba      	ldr	r2, [r7, #8]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d302      	bcc.n	800a064 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d113      	bne.n	800a08c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a068:	f043 0220 	orr.w	r2, r3, #32
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2220      	movs	r2, #32
 800a074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2200      	movs	r2, #0
 800a07c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2200      	movs	r2, #0
 800a084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a088:	2301      	movs	r3, #1
 800a08a:	e007      	b.n	800a09c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	699b      	ldr	r3, [r3, #24]
 800a092:	f003 0302 	and.w	r3, r3, #2
 800a096:	2b02      	cmp	r3, #2
 800a098:	d1cb      	bne.n	800a032 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a09a:	2300      	movs	r3, #0
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3710      	adds	r7, #16
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a0b0:	e028      	b.n	800a104 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	68b9      	ldr	r1, [r7, #8]
 800a0b6:	68f8      	ldr	r0, [r7, #12]
 800a0b8:	f000 f830 	bl	800a11c <I2C_IsAcknowledgeFailed>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d001      	beq.n	800a0c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e026      	b.n	800a114 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0c6:	f7fa fe3f 	bl	8004d48 <HAL_GetTick>
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	1ad3      	subs	r3, r2, r3
 800a0d0:	68ba      	ldr	r2, [r7, #8]
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d302      	bcc.n	800a0dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d113      	bne.n	800a104 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0e0:	f043 0220 	orr.w	r2, r3, #32
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2220      	movs	r2, #32
 800a0ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a100:	2301      	movs	r3, #1
 800a102:	e007      	b.n	800a114 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	699b      	ldr	r3, [r3, #24]
 800a10a:	f003 0320 	and.w	r3, r3, #32
 800a10e:	2b20      	cmp	r3, #32
 800a110:	d1cf      	bne.n	800a0b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a112:	2300      	movs	r3, #0
}
 800a114:	4618      	mov	r0, r3
 800a116:	3710      	adds	r7, #16
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	699b      	ldr	r3, [r3, #24]
 800a12e:	f003 0310 	and.w	r3, r3, #16
 800a132:	2b10      	cmp	r3, #16
 800a134:	d151      	bne.n	800a1da <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a136:	e022      	b.n	800a17e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a13e:	d01e      	beq.n	800a17e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a140:	f7fa fe02 	bl	8004d48 <HAL_GetTick>
 800a144:	4602      	mov	r2, r0
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	1ad3      	subs	r3, r2, r3
 800a14a:	68ba      	ldr	r2, [r7, #8]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d302      	bcc.n	800a156 <I2C_IsAcknowledgeFailed+0x3a>
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d113      	bne.n	800a17e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a15a:	f043 0220 	orr.w	r2, r3, #32
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2220      	movs	r2, #32
 800a166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2200      	movs	r2, #0
 800a16e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2200      	movs	r2, #0
 800a176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	e02e      	b.n	800a1dc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	699b      	ldr	r3, [r3, #24]
 800a184:	f003 0320 	and.w	r3, r3, #32
 800a188:	2b20      	cmp	r3, #32
 800a18a:	d1d5      	bne.n	800a138 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2210      	movs	r2, #16
 800a192:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2220      	movs	r2, #32
 800a19a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f7ff fd3c 	bl	8009c1a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	6859      	ldr	r1, [r3, #4]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	4b0d      	ldr	r3, [pc, #52]	; (800a1e4 <I2C_IsAcknowledgeFailed+0xc8>)
 800a1ae:	400b      	ands	r3, r1
 800a1b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1b6:	f043 0204 	orr.w	r2, r3, #4
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2220      	movs	r2, #32
 800a1c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e000      	b.n	800a1dc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800a1da:	2300      	movs	r3, #0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3710      	adds	r7, #16
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	fe00e800 	.word	0xfe00e800

0800a1e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	607b      	str	r3, [r7, #4]
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	817b      	strh	r3, [r7, #10]
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	685a      	ldr	r2, [r3, #4]
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	0d5b      	lsrs	r3, r3, #21
 800a204:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a208:	4b0d      	ldr	r3, [pc, #52]	; (800a240 <I2C_TransferConfig+0x58>)
 800a20a:	430b      	orrs	r3, r1
 800a20c:	43db      	mvns	r3, r3
 800a20e:	ea02 0103 	and.w	r1, r2, r3
 800a212:	897b      	ldrh	r3, [r7, #10]
 800a214:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a218:	7a7b      	ldrb	r3, [r7, #9]
 800a21a:	041b      	lsls	r3, r3, #16
 800a21c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a220:	431a      	orrs	r2, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	431a      	orrs	r2, r3
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	431a      	orrs	r2, r3
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	430a      	orrs	r2, r1
 800a230:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800a232:	bf00      	nop
 800a234:	3714      	adds	r7, #20
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr
 800a23e:	bf00      	nop
 800a240:	03ff63ff 	.word	0x03ff63ff

0800a244 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	460b      	mov	r3, r1
 800a24e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a250:	2300      	movs	r3, #0
 800a252:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a258:	4a2a      	ldr	r2, [pc, #168]	; (800a304 <I2C_Enable_IRQ+0xc0>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d004      	beq.n	800a268 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800a262:	4a29      	ldr	r2, [pc, #164]	; (800a308 <I2C_Enable_IRQ+0xc4>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d11d      	bne.n	800a2a4 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a268:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	da03      	bge.n	800a278 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a276:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a278:	887b      	ldrh	r3, [r7, #2]
 800a27a:	2b10      	cmp	r3, #16
 800a27c:	d103      	bne.n	800a286 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800a284:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a286:	887b      	ldrh	r3, [r7, #2]
 800a288:	2b20      	cmp	r3, #32
 800a28a:	d103      	bne.n	800a294 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a292:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a294:	887b      	ldrh	r3, [r7, #2]
 800a296:	2b40      	cmp	r3, #64	; 0x40
 800a298:	d125      	bne.n	800a2e6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2a0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a2a2:	e020      	b.n	800a2e6 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a2a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	da03      	bge.n	800a2b4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a2b2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a2b4:	887b      	ldrh	r3, [r7, #2]
 800a2b6:	f003 0301 	and.w	r3, r3, #1
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d003      	beq.n	800a2c6 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800a2c4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a2c6:	887b      	ldrh	r3, [r7, #2]
 800a2c8:	f003 0302 	and.w	r3, r3, #2
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d003      	beq.n	800a2d8 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800a2d6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a2d8:	887b      	ldrh	r3, [r7, #2]
 800a2da:	2b20      	cmp	r3, #32
 800a2dc:	d103      	bne.n	800a2e6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f043 0320 	orr.w	r3, r3, #32
 800a2e4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	6819      	ldr	r1, [r3, #0]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	68fa      	ldr	r2, [r7, #12]
 800a2f2:	430a      	orrs	r2, r1
 800a2f4:	601a      	str	r2, [r3, #0]
}
 800a2f6:	bf00      	nop
 800a2f8:	3714      	adds	r7, #20
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr
 800a302:	bf00      	nop
 800a304:	08008ac7 	.word	0x08008ac7
 800a308:	08008cad 	.word	0x08008cad

0800a30c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b085      	sub	sp, #20
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	460b      	mov	r3, r1
 800a316:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a318:	2300      	movs	r3, #0
 800a31a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a31c:	887b      	ldrh	r3, [r7, #2]
 800a31e:	f003 0301 	and.w	r3, r3, #1
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00f      	beq.n	800a346 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800a32c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a334:	b2db      	uxtb	r3, r3
 800a336:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a33a:	2b28      	cmp	r3, #40	; 0x28
 800a33c:	d003      	beq.n	800a346 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a344:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a346:	887b      	ldrh	r3, [r7, #2]
 800a348:	f003 0302 	and.w	r3, r3, #2
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d00f      	beq.n	800a370 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800a356:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a364:	2b28      	cmp	r3, #40	; 0x28
 800a366:	d003      	beq.n	800a370 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a36e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a370:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a374:	2b00      	cmp	r3, #0
 800a376:	da03      	bge.n	800a380 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a37e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a380:	887b      	ldrh	r3, [r7, #2]
 800a382:	2b10      	cmp	r3, #16
 800a384:	d103      	bne.n	800a38e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800a38c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a38e:	887b      	ldrh	r3, [r7, #2]
 800a390:	2b20      	cmp	r3, #32
 800a392:	d103      	bne.n	800a39c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f043 0320 	orr.w	r3, r3, #32
 800a39a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a39c:	887b      	ldrh	r3, [r7, #2]
 800a39e:	2b40      	cmp	r3, #64	; 0x40
 800a3a0:	d103      	bne.n	800a3aa <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3a8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	6819      	ldr	r1, [r3, #0]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	43da      	mvns	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	400a      	ands	r2, r1
 800a3ba:	601a      	str	r2, [r3, #0]
}
 800a3bc:	bf00      	nop
 800a3be:	3714      	adds	r7, #20
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	2b20      	cmp	r3, #32
 800a3dc:	d138      	bne.n	800a450 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d101      	bne.n	800a3ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a3e8:	2302      	movs	r3, #2
 800a3ea:	e032      	b.n	800a452 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2224      	movs	r2, #36	; 0x24
 800a3f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f022 0201 	bic.w	r2, r2, #1
 800a40a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a41a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	6819      	ldr	r1, [r3, #0]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	683a      	ldr	r2, [r7, #0]
 800a428:	430a      	orrs	r2, r1
 800a42a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f042 0201 	orr.w	r2, r2, #1
 800a43a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2220      	movs	r2, #32
 800a440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a44c:	2300      	movs	r3, #0
 800a44e:	e000      	b.n	800a452 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a450:	2302      	movs	r3, #2
  }
}
 800a452:	4618      	mov	r0, r3
 800a454:	370c      	adds	r7, #12
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr

0800a45e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a45e:	b480      	push	{r7}
 800a460:	b085      	sub	sp, #20
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
 800a466:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	2b20      	cmp	r3, #32
 800a472:	d139      	bne.n	800a4e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d101      	bne.n	800a482 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a47e:	2302      	movs	r3, #2
 800a480:	e033      	b.n	800a4ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2201      	movs	r2, #1
 800a486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2224      	movs	r2, #36	; 0x24
 800a48e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f022 0201 	bic.w	r2, r2, #1
 800a4a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a4b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	021b      	lsls	r3, r3, #8
 800a4b6:	68fa      	ldr	r2, [r7, #12]
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	68fa      	ldr	r2, [r7, #12]
 800a4c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f042 0201 	orr.w	r2, r2, #1
 800a4d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2220      	movs	r2, #32
 800a4d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	e000      	b.n	800a4ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a4e8:	2302      	movs	r3, #2
  }
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3714      	adds	r7, #20
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr
	...

0800a4f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a500:	4b19      	ldr	r3, [pc, #100]	; (800a568 <HAL_PWREx_ConfigSupply+0x70>)
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	f003 0304 	and.w	r3, r3, #4
 800a508:	2b04      	cmp	r3, #4
 800a50a:	d00a      	beq.n	800a522 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a50c:	4b16      	ldr	r3, [pc, #88]	; (800a568 <HAL_PWREx_ConfigSupply+0x70>)
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	f003 0307 	and.w	r3, r3, #7
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	429a      	cmp	r2, r3
 800a518:	d001      	beq.n	800a51e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	e01f      	b.n	800a55e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a51e:	2300      	movs	r3, #0
 800a520:	e01d      	b.n	800a55e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a522:	4b11      	ldr	r3, [pc, #68]	; (800a568 <HAL_PWREx_ConfigSupply+0x70>)
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	f023 0207 	bic.w	r2, r3, #7
 800a52a:	490f      	ldr	r1, [pc, #60]	; (800a568 <HAL_PWREx_ConfigSupply+0x70>)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	4313      	orrs	r3, r2
 800a530:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a532:	f7fa fc09 	bl	8004d48 <HAL_GetTick>
 800a536:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a538:	e009      	b.n	800a54e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a53a:	f7fa fc05 	bl	8004d48 <HAL_GetTick>
 800a53e:	4602      	mov	r2, r0
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	1ad3      	subs	r3, r2, r3
 800a544:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a548:	d901      	bls.n	800a54e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a54a:	2301      	movs	r3, #1
 800a54c:	e007      	b.n	800a55e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a54e:	4b06      	ldr	r3, [pc, #24]	; (800a568 <HAL_PWREx_ConfigSupply+0x70>)
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a55a:	d1ee      	bne.n	800a53a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a55c:	2300      	movs	r3, #0
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	58024800 	.word	0x58024800

0800a56c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b08c      	sub	sp, #48	; 0x30
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d101      	bne.n	800a57e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a57a:	2301      	movs	r3, #1
 800a57c:	e3ff      	b.n	800ad7e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f003 0301 	and.w	r3, r3, #1
 800a586:	2b00      	cmp	r3, #0
 800a588:	f000 8087 	beq.w	800a69a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a58c:	4b99      	ldr	r3, [pc, #612]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a58e:	691b      	ldr	r3, [r3, #16]
 800a590:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a594:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a596:	4b97      	ldr	r3, [pc, #604]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a59a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59e:	2b10      	cmp	r3, #16
 800a5a0:	d007      	beq.n	800a5b2 <HAL_RCC_OscConfig+0x46>
 800a5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a4:	2b18      	cmp	r3, #24
 800a5a6:	d110      	bne.n	800a5ca <HAL_RCC_OscConfig+0x5e>
 800a5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5aa:	f003 0303 	and.w	r3, r3, #3
 800a5ae:	2b02      	cmp	r3, #2
 800a5b0:	d10b      	bne.n	800a5ca <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a5b2:	4b90      	ldr	r3, [pc, #576]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d06c      	beq.n	800a698 <HAL_RCC_OscConfig+0x12c>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d168      	bne.n	800a698 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e3d9      	b.n	800ad7e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5d2:	d106      	bne.n	800a5e2 <HAL_RCC_OscConfig+0x76>
 800a5d4:	4b87      	ldr	r3, [pc, #540]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a86      	ldr	r2, [pc, #536]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a5da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5de:	6013      	str	r3, [r2, #0]
 800a5e0:	e02e      	b.n	800a640 <HAL_RCC_OscConfig+0xd4>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d10c      	bne.n	800a604 <HAL_RCC_OscConfig+0x98>
 800a5ea:	4b82      	ldr	r3, [pc, #520]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4a81      	ldr	r2, [pc, #516]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a5f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5f4:	6013      	str	r3, [r2, #0]
 800a5f6:	4b7f      	ldr	r3, [pc, #508]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4a7e      	ldr	r2, [pc, #504]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a5fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a600:	6013      	str	r3, [r2, #0]
 800a602:	e01d      	b.n	800a640 <HAL_RCC_OscConfig+0xd4>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a60c:	d10c      	bne.n	800a628 <HAL_RCC_OscConfig+0xbc>
 800a60e:	4b79      	ldr	r3, [pc, #484]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a78      	ldr	r2, [pc, #480]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a618:	6013      	str	r3, [r2, #0]
 800a61a:	4b76      	ldr	r3, [pc, #472]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4a75      	ldr	r2, [pc, #468]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a624:	6013      	str	r3, [r2, #0]
 800a626:	e00b      	b.n	800a640 <HAL_RCC_OscConfig+0xd4>
 800a628:	4b72      	ldr	r3, [pc, #456]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a71      	ldr	r2, [pc, #452]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a62e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a632:	6013      	str	r3, [r2, #0]
 800a634:	4b6f      	ldr	r3, [pc, #444]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a6e      	ldr	r2, [pc, #440]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a63a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a63e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d013      	beq.n	800a670 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a648:	f7fa fb7e 	bl	8004d48 <HAL_GetTick>
 800a64c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a64e:	e008      	b.n	800a662 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a650:	f7fa fb7a 	bl	8004d48 <HAL_GetTick>
 800a654:	4602      	mov	r2, r0
 800a656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a658:	1ad3      	subs	r3, r2, r3
 800a65a:	2b64      	cmp	r3, #100	; 0x64
 800a65c:	d901      	bls.n	800a662 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a65e:	2303      	movs	r3, #3
 800a660:	e38d      	b.n	800ad7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a662:	4b64      	ldr	r3, [pc, #400]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d0f0      	beq.n	800a650 <HAL_RCC_OscConfig+0xe4>
 800a66e:	e014      	b.n	800a69a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a670:	f7fa fb6a 	bl	8004d48 <HAL_GetTick>
 800a674:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a676:	e008      	b.n	800a68a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a678:	f7fa fb66 	bl	8004d48 <HAL_GetTick>
 800a67c:	4602      	mov	r2, r0
 800a67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	2b64      	cmp	r3, #100	; 0x64
 800a684:	d901      	bls.n	800a68a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a686:	2303      	movs	r3, #3
 800a688:	e379      	b.n	800ad7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a68a:	4b5a      	ldr	r3, [pc, #360]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a692:	2b00      	cmp	r3, #0
 800a694:	d1f0      	bne.n	800a678 <HAL_RCC_OscConfig+0x10c>
 800a696:	e000      	b.n	800a69a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f003 0302 	and.w	r3, r3, #2
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f000 80ae 	beq.w	800a804 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a6a8:	4b52      	ldr	r3, [pc, #328]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a6aa:	691b      	ldr	r3, [r3, #16]
 800a6ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a6b2:	4b50      	ldr	r3, [pc, #320]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a6b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6b6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a6b8:	6a3b      	ldr	r3, [r7, #32]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d007      	beq.n	800a6ce <HAL_RCC_OscConfig+0x162>
 800a6be:	6a3b      	ldr	r3, [r7, #32]
 800a6c0:	2b18      	cmp	r3, #24
 800a6c2:	d13a      	bne.n	800a73a <HAL_RCC_OscConfig+0x1ce>
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	f003 0303 	and.w	r3, r3, #3
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d135      	bne.n	800a73a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a6ce:	4b49      	ldr	r3, [pc, #292]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f003 0304 	and.w	r3, r3, #4
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d005      	beq.n	800a6e6 <HAL_RCC_OscConfig+0x17a>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d101      	bne.n	800a6e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e34b      	b.n	800ad7e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a6e6:	f7fa fb5f 	bl	8004da8 <HAL_GetREVID>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	f241 0203 	movw	r2, #4099	; 0x1003
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d817      	bhi.n	800a724 <HAL_RCC_OscConfig+0x1b8>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	691b      	ldr	r3, [r3, #16]
 800a6f8:	2b40      	cmp	r3, #64	; 0x40
 800a6fa:	d108      	bne.n	800a70e <HAL_RCC_OscConfig+0x1a2>
 800a6fc:	4b3d      	ldr	r3, [pc, #244]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a704:	4a3b      	ldr	r2, [pc, #236]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a70a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a70c:	e07a      	b.n	800a804 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a70e:	4b39      	ldr	r3, [pc, #228]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	691b      	ldr	r3, [r3, #16]
 800a71a:	031b      	lsls	r3, r3, #12
 800a71c:	4935      	ldr	r1, [pc, #212]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a71e:	4313      	orrs	r3, r2
 800a720:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a722:	e06f      	b.n	800a804 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a724:	4b33      	ldr	r3, [pc, #204]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	691b      	ldr	r3, [r3, #16]
 800a730:	061b      	lsls	r3, r3, #24
 800a732:	4930      	ldr	r1, [pc, #192]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a734:	4313      	orrs	r3, r2
 800a736:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a738:	e064      	b.n	800a804 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d045      	beq.n	800a7ce <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a742:	4b2c      	ldr	r3, [pc, #176]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f023 0219 	bic.w	r2, r3, #25
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	4929      	ldr	r1, [pc, #164]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a750:	4313      	orrs	r3, r2
 800a752:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a754:	f7fa faf8 	bl	8004d48 <HAL_GetTick>
 800a758:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a75a:	e008      	b.n	800a76e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a75c:	f7fa faf4 	bl	8004d48 <HAL_GetTick>
 800a760:	4602      	mov	r2, r0
 800a762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a764:	1ad3      	subs	r3, r2, r3
 800a766:	2b02      	cmp	r3, #2
 800a768:	d901      	bls.n	800a76e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800a76a:	2303      	movs	r3, #3
 800a76c:	e307      	b.n	800ad7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a76e:	4b21      	ldr	r3, [pc, #132]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f003 0304 	and.w	r3, r3, #4
 800a776:	2b00      	cmp	r3, #0
 800a778:	d0f0      	beq.n	800a75c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a77a:	f7fa fb15 	bl	8004da8 <HAL_GetREVID>
 800a77e:	4603      	mov	r3, r0
 800a780:	f241 0203 	movw	r2, #4099	; 0x1003
 800a784:	4293      	cmp	r3, r2
 800a786:	d817      	bhi.n	800a7b8 <HAL_RCC_OscConfig+0x24c>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	691b      	ldr	r3, [r3, #16]
 800a78c:	2b40      	cmp	r3, #64	; 0x40
 800a78e:	d108      	bne.n	800a7a2 <HAL_RCC_OscConfig+0x236>
 800a790:	4b18      	ldr	r3, [pc, #96]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a798:	4a16      	ldr	r2, [pc, #88]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a79a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a79e:	6053      	str	r3, [r2, #4]
 800a7a0:	e030      	b.n	800a804 <HAL_RCC_OscConfig+0x298>
 800a7a2:	4b14      	ldr	r3, [pc, #80]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	031b      	lsls	r3, r3, #12
 800a7b0:	4910      	ldr	r1, [pc, #64]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	604b      	str	r3, [r1, #4]
 800a7b6:	e025      	b.n	800a804 <HAL_RCC_OscConfig+0x298>
 800a7b8:	4b0e      	ldr	r3, [pc, #56]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	691b      	ldr	r3, [r3, #16]
 800a7c4:	061b      	lsls	r3, r3, #24
 800a7c6:	490b      	ldr	r1, [pc, #44]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	604b      	str	r3, [r1, #4]
 800a7cc:	e01a      	b.n	800a804 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a7ce:	4b09      	ldr	r3, [pc, #36]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a08      	ldr	r2, [pc, #32]	; (800a7f4 <HAL_RCC_OscConfig+0x288>)
 800a7d4:	f023 0301 	bic.w	r3, r3, #1
 800a7d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7da:	f7fa fab5 	bl	8004d48 <HAL_GetTick>
 800a7de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a7e0:	e00a      	b.n	800a7f8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a7e2:	f7fa fab1 	bl	8004d48 <HAL_GetTick>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ea:	1ad3      	subs	r3, r2, r3
 800a7ec:	2b02      	cmp	r3, #2
 800a7ee:	d903      	bls.n	800a7f8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800a7f0:	2303      	movs	r3, #3
 800a7f2:	e2c4      	b.n	800ad7e <HAL_RCC_OscConfig+0x812>
 800a7f4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a7f8:	4ba4      	ldr	r3, [pc, #656]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f003 0304 	and.w	r3, r3, #4
 800a800:	2b00      	cmp	r3, #0
 800a802:	d1ee      	bne.n	800a7e2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f003 0310 	and.w	r3, r3, #16
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	f000 80a9 	beq.w	800a964 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a812:	4b9e      	ldr	r3, [pc, #632]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800a814:	691b      	ldr	r3, [r3, #16]
 800a816:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a81a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a81c:	4b9b      	ldr	r3, [pc, #620]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800a81e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a820:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a822:	69bb      	ldr	r3, [r7, #24]
 800a824:	2b08      	cmp	r3, #8
 800a826:	d007      	beq.n	800a838 <HAL_RCC_OscConfig+0x2cc>
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	2b18      	cmp	r3, #24
 800a82c:	d13a      	bne.n	800a8a4 <HAL_RCC_OscConfig+0x338>
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	f003 0303 	and.w	r3, r3, #3
 800a834:	2b01      	cmp	r3, #1
 800a836:	d135      	bne.n	800a8a4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a838:	4b94      	ldr	r3, [pc, #592]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a840:	2b00      	cmp	r3, #0
 800a842:	d005      	beq.n	800a850 <HAL_RCC_OscConfig+0x2e4>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	69db      	ldr	r3, [r3, #28]
 800a848:	2b80      	cmp	r3, #128	; 0x80
 800a84a:	d001      	beq.n	800a850 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	e296      	b.n	800ad7e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a850:	f7fa faaa 	bl	8004da8 <HAL_GetREVID>
 800a854:	4603      	mov	r3, r0
 800a856:	f241 0203 	movw	r2, #4099	; 0x1003
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d817      	bhi.n	800a88e <HAL_RCC_OscConfig+0x322>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6a1b      	ldr	r3, [r3, #32]
 800a862:	2b20      	cmp	r3, #32
 800a864:	d108      	bne.n	800a878 <HAL_RCC_OscConfig+0x30c>
 800a866:	4b89      	ldr	r3, [pc, #548]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a86e:	4a87      	ldr	r2, [pc, #540]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800a870:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a874:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a876:	e075      	b.n	800a964 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a878:	4b84      	ldr	r3, [pc, #528]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6a1b      	ldr	r3, [r3, #32]
 800a884:	069b      	lsls	r3, r3, #26
 800a886:	4981      	ldr	r1, [pc, #516]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800a888:	4313      	orrs	r3, r2
 800a88a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a88c:	e06a      	b.n	800a964 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a88e:	4b7f      	ldr	r3, [pc, #508]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6a1b      	ldr	r3, [r3, #32]
 800a89a:	061b      	lsls	r3, r3, #24
 800a89c:	497b      	ldr	r1, [pc, #492]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a8a2:	e05f      	b.n	800a964 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	69db      	ldr	r3, [r3, #28]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d042      	beq.n	800a932 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a8ac:	4b77      	ldr	r3, [pc, #476]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a76      	ldr	r2, [pc, #472]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800a8b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8b8:	f7fa fa46 	bl	8004d48 <HAL_GetTick>
 800a8bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a8be:	e008      	b.n	800a8d2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a8c0:	f7fa fa42 	bl	8004d48 <HAL_GetTick>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c8:	1ad3      	subs	r3, r2, r3
 800a8ca:	2b02      	cmp	r3, #2
 800a8cc:	d901      	bls.n	800a8d2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800a8ce:	2303      	movs	r3, #3
 800a8d0:	e255      	b.n	800ad7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a8d2:	4b6e      	ldr	r3, [pc, #440]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d0f0      	beq.n	800a8c0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a8de:	f7fa fa63 	bl	8004da8 <HAL_GetREVID>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	f241 0203 	movw	r2, #4099	; 0x1003
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d817      	bhi.n	800a91c <HAL_RCC_OscConfig+0x3b0>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6a1b      	ldr	r3, [r3, #32]
 800a8f0:	2b20      	cmp	r3, #32
 800a8f2:	d108      	bne.n	800a906 <HAL_RCC_OscConfig+0x39a>
 800a8f4:	4b65      	ldr	r3, [pc, #404]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a8fc:	4a63      	ldr	r2, [pc, #396]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800a8fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a902:	6053      	str	r3, [r2, #4]
 800a904:	e02e      	b.n	800a964 <HAL_RCC_OscConfig+0x3f8>
 800a906:	4b61      	ldr	r3, [pc, #388]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6a1b      	ldr	r3, [r3, #32]
 800a912:	069b      	lsls	r3, r3, #26
 800a914:	495d      	ldr	r1, [pc, #372]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800a916:	4313      	orrs	r3, r2
 800a918:	604b      	str	r3, [r1, #4]
 800a91a:	e023      	b.n	800a964 <HAL_RCC_OscConfig+0x3f8>
 800a91c:	4b5b      	ldr	r3, [pc, #364]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6a1b      	ldr	r3, [r3, #32]
 800a928:	061b      	lsls	r3, r3, #24
 800a92a:	4958      	ldr	r1, [pc, #352]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800a92c:	4313      	orrs	r3, r2
 800a92e:	60cb      	str	r3, [r1, #12]
 800a930:	e018      	b.n	800a964 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a932:	4b56      	ldr	r3, [pc, #344]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4a55      	ldr	r2, [pc, #340]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800a938:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a93c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a93e:	f7fa fa03 	bl	8004d48 <HAL_GetTick>
 800a942:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a944:	e008      	b.n	800a958 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a946:	f7fa f9ff 	bl	8004d48 <HAL_GetTick>
 800a94a:	4602      	mov	r2, r0
 800a94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94e:	1ad3      	subs	r3, r2, r3
 800a950:	2b02      	cmp	r3, #2
 800a952:	d901      	bls.n	800a958 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800a954:	2303      	movs	r3, #3
 800a956:	e212      	b.n	800ad7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a958:	4b4c      	ldr	r3, [pc, #304]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a960:	2b00      	cmp	r3, #0
 800a962:	d1f0      	bne.n	800a946 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f003 0308 	and.w	r3, r3, #8
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d036      	beq.n	800a9de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	695b      	ldr	r3, [r3, #20]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d019      	beq.n	800a9ac <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a978:	4b44      	ldr	r3, [pc, #272]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800a97a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a97c:	4a43      	ldr	r2, [pc, #268]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800a97e:	f043 0301 	orr.w	r3, r3, #1
 800a982:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a984:	f7fa f9e0 	bl	8004d48 <HAL_GetTick>
 800a988:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a98a:	e008      	b.n	800a99e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a98c:	f7fa f9dc 	bl	8004d48 <HAL_GetTick>
 800a990:	4602      	mov	r2, r0
 800a992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a994:	1ad3      	subs	r3, r2, r3
 800a996:	2b02      	cmp	r3, #2
 800a998:	d901      	bls.n	800a99e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800a99a:	2303      	movs	r3, #3
 800a99c:	e1ef      	b.n	800ad7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a99e:	4b3b      	ldr	r3, [pc, #236]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800a9a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9a2:	f003 0302 	and.w	r3, r3, #2
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d0f0      	beq.n	800a98c <HAL_RCC_OscConfig+0x420>
 800a9aa:	e018      	b.n	800a9de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a9ac:	4b37      	ldr	r3, [pc, #220]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800a9ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9b0:	4a36      	ldr	r2, [pc, #216]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800a9b2:	f023 0301 	bic.w	r3, r3, #1
 800a9b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9b8:	f7fa f9c6 	bl	8004d48 <HAL_GetTick>
 800a9bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a9be:	e008      	b.n	800a9d2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a9c0:	f7fa f9c2 	bl	8004d48 <HAL_GetTick>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c8:	1ad3      	subs	r3, r2, r3
 800a9ca:	2b02      	cmp	r3, #2
 800a9cc:	d901      	bls.n	800a9d2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800a9ce:	2303      	movs	r3, #3
 800a9d0:	e1d5      	b.n	800ad7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a9d2:	4b2e      	ldr	r3, [pc, #184]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800a9d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9d6:	f003 0302 	and.w	r3, r3, #2
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d1f0      	bne.n	800a9c0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f003 0320 	and.w	r3, r3, #32
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d036      	beq.n	800aa58 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	699b      	ldr	r3, [r3, #24]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d019      	beq.n	800aa26 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a9f2:	4b26      	ldr	r3, [pc, #152]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a25      	ldr	r2, [pc, #148]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800a9f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a9fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a9fe:	f7fa f9a3 	bl	8004d48 <HAL_GetTick>
 800aa02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aa04:	e008      	b.n	800aa18 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800aa06:	f7fa f99f 	bl	8004d48 <HAL_GetTick>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0e:	1ad3      	subs	r3, r2, r3
 800aa10:	2b02      	cmp	r3, #2
 800aa12:	d901      	bls.n	800aa18 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800aa14:	2303      	movs	r3, #3
 800aa16:	e1b2      	b.n	800ad7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aa18:	4b1c      	ldr	r3, [pc, #112]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d0f0      	beq.n	800aa06 <HAL_RCC_OscConfig+0x49a>
 800aa24:	e018      	b.n	800aa58 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800aa26:	4b19      	ldr	r3, [pc, #100]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4a18      	ldr	r2, [pc, #96]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800aa2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aa32:	f7fa f989 	bl	8004d48 <HAL_GetTick>
 800aa36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800aa38:	e008      	b.n	800aa4c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800aa3a:	f7fa f985 	bl	8004d48 <HAL_GetTick>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa42:	1ad3      	subs	r3, r2, r3
 800aa44:	2b02      	cmp	r3, #2
 800aa46:	d901      	bls.n	800aa4c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800aa48:	2303      	movs	r3, #3
 800aa4a:	e198      	b.n	800ad7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800aa4c:	4b0f      	ldr	r3, [pc, #60]	; (800aa8c <HAL_RCC_OscConfig+0x520>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d1f0      	bne.n	800aa3a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f003 0304 	and.w	r3, r3, #4
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	f000 8085 	beq.w	800ab70 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800aa66:	4b0a      	ldr	r3, [pc, #40]	; (800aa90 <HAL_RCC_OscConfig+0x524>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a09      	ldr	r2, [pc, #36]	; (800aa90 <HAL_RCC_OscConfig+0x524>)
 800aa6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aa72:	f7fa f969 	bl	8004d48 <HAL_GetTick>
 800aa76:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa78:	e00c      	b.n	800aa94 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800aa7a:	f7fa f965 	bl	8004d48 <HAL_GetTick>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa82:	1ad3      	subs	r3, r2, r3
 800aa84:	2b64      	cmp	r3, #100	; 0x64
 800aa86:	d905      	bls.n	800aa94 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800aa88:	2303      	movs	r3, #3
 800aa8a:	e178      	b.n	800ad7e <HAL_RCC_OscConfig+0x812>
 800aa8c:	58024400 	.word	0x58024400
 800aa90:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa94:	4b96      	ldr	r3, [pc, #600]	; (800acf0 <HAL_RCC_OscConfig+0x784>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d0ec      	beq.n	800aa7a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	689b      	ldr	r3, [r3, #8]
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d106      	bne.n	800aab6 <HAL_RCC_OscConfig+0x54a>
 800aaa8:	4b92      	ldr	r3, [pc, #584]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800aaaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaac:	4a91      	ldr	r2, [pc, #580]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800aaae:	f043 0301 	orr.w	r3, r3, #1
 800aab2:	6713      	str	r3, [r2, #112]	; 0x70
 800aab4:	e02d      	b.n	800ab12 <HAL_RCC_OscConfig+0x5a6>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	689b      	ldr	r3, [r3, #8]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d10c      	bne.n	800aad8 <HAL_RCC_OscConfig+0x56c>
 800aabe:	4b8d      	ldr	r3, [pc, #564]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800aac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aac2:	4a8c      	ldr	r2, [pc, #560]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800aac4:	f023 0301 	bic.w	r3, r3, #1
 800aac8:	6713      	str	r3, [r2, #112]	; 0x70
 800aaca:	4b8a      	ldr	r3, [pc, #552]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800aacc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aace:	4a89      	ldr	r2, [pc, #548]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800aad0:	f023 0304 	bic.w	r3, r3, #4
 800aad4:	6713      	str	r3, [r2, #112]	; 0x70
 800aad6:	e01c      	b.n	800ab12 <HAL_RCC_OscConfig+0x5a6>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	689b      	ldr	r3, [r3, #8]
 800aadc:	2b05      	cmp	r3, #5
 800aade:	d10c      	bne.n	800aafa <HAL_RCC_OscConfig+0x58e>
 800aae0:	4b84      	ldr	r3, [pc, #528]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800aae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aae4:	4a83      	ldr	r2, [pc, #524]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800aae6:	f043 0304 	orr.w	r3, r3, #4
 800aaea:	6713      	str	r3, [r2, #112]	; 0x70
 800aaec:	4b81      	ldr	r3, [pc, #516]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800aaee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaf0:	4a80      	ldr	r2, [pc, #512]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800aaf2:	f043 0301 	orr.w	r3, r3, #1
 800aaf6:	6713      	str	r3, [r2, #112]	; 0x70
 800aaf8:	e00b      	b.n	800ab12 <HAL_RCC_OscConfig+0x5a6>
 800aafa:	4b7e      	ldr	r3, [pc, #504]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800aafc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aafe:	4a7d      	ldr	r2, [pc, #500]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800ab00:	f023 0301 	bic.w	r3, r3, #1
 800ab04:	6713      	str	r3, [r2, #112]	; 0x70
 800ab06:	4b7b      	ldr	r3, [pc, #492]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800ab08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab0a:	4a7a      	ldr	r2, [pc, #488]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800ab0c:	f023 0304 	bic.w	r3, r3, #4
 800ab10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	689b      	ldr	r3, [r3, #8]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d015      	beq.n	800ab46 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab1a:	f7fa f915 	bl	8004d48 <HAL_GetTick>
 800ab1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ab20:	e00a      	b.n	800ab38 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ab22:	f7fa f911 	bl	8004d48 <HAL_GetTick>
 800ab26:	4602      	mov	r2, r0
 800ab28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2a:	1ad3      	subs	r3, r2, r3
 800ab2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d901      	bls.n	800ab38 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800ab34:	2303      	movs	r3, #3
 800ab36:	e122      	b.n	800ad7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ab38:	4b6e      	ldr	r3, [pc, #440]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800ab3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab3c:	f003 0302 	and.w	r3, r3, #2
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d0ee      	beq.n	800ab22 <HAL_RCC_OscConfig+0x5b6>
 800ab44:	e014      	b.n	800ab70 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab46:	f7fa f8ff 	bl	8004d48 <HAL_GetTick>
 800ab4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ab4c:	e00a      	b.n	800ab64 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ab4e:	f7fa f8fb 	bl	8004d48 <HAL_GetTick>
 800ab52:	4602      	mov	r2, r0
 800ab54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab56:	1ad3      	subs	r3, r2, r3
 800ab58:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d901      	bls.n	800ab64 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800ab60:	2303      	movs	r3, #3
 800ab62:	e10c      	b.n	800ad7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ab64:	4b63      	ldr	r3, [pc, #396]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800ab66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab68:	f003 0302 	and.w	r3, r3, #2
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d1ee      	bne.n	800ab4e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	f000 8101 	beq.w	800ad7c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ab7a:	4b5e      	ldr	r3, [pc, #376]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800ab7c:	691b      	ldr	r3, [r3, #16]
 800ab7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab82:	2b18      	cmp	r3, #24
 800ab84:	f000 80bc 	beq.w	800ad00 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8c:	2b02      	cmp	r3, #2
 800ab8e:	f040 8095 	bne.w	800acbc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab92:	4b58      	ldr	r3, [pc, #352]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4a57      	ldr	r2, [pc, #348]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800ab98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab9e:	f7fa f8d3 	bl	8004d48 <HAL_GetTick>
 800aba2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aba4:	e008      	b.n	800abb8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aba6:	f7fa f8cf 	bl	8004d48 <HAL_GetTick>
 800abaa:	4602      	mov	r2, r0
 800abac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abae:	1ad3      	subs	r3, r2, r3
 800abb0:	2b02      	cmp	r3, #2
 800abb2:	d901      	bls.n	800abb8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800abb4:	2303      	movs	r3, #3
 800abb6:	e0e2      	b.n	800ad7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800abb8:	4b4e      	ldr	r3, [pc, #312]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d1f0      	bne.n	800aba6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800abc4:	4b4b      	ldr	r3, [pc, #300]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800abc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800abc8:	4b4b      	ldr	r3, [pc, #300]	; (800acf8 <HAL_RCC_OscConfig+0x78c>)
 800abca:	4013      	ands	r3, r2
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800abd4:	0112      	lsls	r2, r2, #4
 800abd6:	430a      	orrs	r2, r1
 800abd8:	4946      	ldr	r1, [pc, #280]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800abda:	4313      	orrs	r3, r2
 800abdc:	628b      	str	r3, [r1, #40]	; 0x28
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe2:	3b01      	subs	r3, #1
 800abe4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abec:	3b01      	subs	r3, #1
 800abee:	025b      	lsls	r3, r3, #9
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	431a      	orrs	r2, r3
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf8:	3b01      	subs	r3, #1
 800abfa:	041b      	lsls	r3, r3, #16
 800abfc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ac00:	431a      	orrs	r2, r3
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac06:	3b01      	subs	r3, #1
 800ac08:	061b      	lsls	r3, r3, #24
 800ac0a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ac0e:	4939      	ldr	r1, [pc, #228]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800ac10:	4313      	orrs	r3, r2
 800ac12:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800ac14:	4b37      	ldr	r3, [pc, #220]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800ac16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac18:	4a36      	ldr	r2, [pc, #216]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800ac1a:	f023 0301 	bic.w	r3, r3, #1
 800ac1e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ac20:	4b34      	ldr	r3, [pc, #208]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800ac22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac24:	4b35      	ldr	r3, [pc, #212]	; (800acfc <HAL_RCC_OscConfig+0x790>)
 800ac26:	4013      	ands	r3, r2
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ac2c:	00d2      	lsls	r2, r2, #3
 800ac2e:	4931      	ldr	r1, [pc, #196]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800ac30:	4313      	orrs	r3, r2
 800ac32:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ac34:	4b2f      	ldr	r3, [pc, #188]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800ac36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac38:	f023 020c 	bic.w	r2, r3, #12
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac40:	492c      	ldr	r1, [pc, #176]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800ac42:	4313      	orrs	r3, r2
 800ac44:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ac46:	4b2b      	ldr	r3, [pc, #172]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800ac48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4a:	f023 0202 	bic.w	r2, r3, #2
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac52:	4928      	ldr	r1, [pc, #160]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800ac54:	4313      	orrs	r3, r2
 800ac56:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ac58:	4b26      	ldr	r3, [pc, #152]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800ac5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac5c:	4a25      	ldr	r2, [pc, #148]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800ac5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac64:	4b23      	ldr	r3, [pc, #140]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800ac66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac68:	4a22      	ldr	r2, [pc, #136]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800ac6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ac70:	4b20      	ldr	r3, [pc, #128]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800ac72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac74:	4a1f      	ldr	r2, [pc, #124]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800ac76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ac7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800ac7c:	4b1d      	ldr	r3, [pc, #116]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800ac7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac80:	4a1c      	ldr	r2, [pc, #112]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800ac82:	f043 0301 	orr.w	r3, r3, #1
 800ac86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac88:	4b1a      	ldr	r3, [pc, #104]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a19      	ldr	r2, [pc, #100]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800ac8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ac92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac94:	f7fa f858 	bl	8004d48 <HAL_GetTick>
 800ac98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ac9a:	e008      	b.n	800acae <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ac9c:	f7fa f854 	bl	8004d48 <HAL_GetTick>
 800aca0:	4602      	mov	r2, r0
 800aca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca4:	1ad3      	subs	r3, r2, r3
 800aca6:	2b02      	cmp	r3, #2
 800aca8:	d901      	bls.n	800acae <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800acaa:	2303      	movs	r3, #3
 800acac:	e067      	b.n	800ad7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800acae:	4b11      	ldr	r3, [pc, #68]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d0f0      	beq.n	800ac9c <HAL_RCC_OscConfig+0x730>
 800acba:	e05f      	b.n	800ad7c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800acbc:	4b0d      	ldr	r3, [pc, #52]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a0c      	ldr	r2, [pc, #48]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800acc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800acc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acc8:	f7fa f83e 	bl	8004d48 <HAL_GetTick>
 800accc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800acce:	e008      	b.n	800ace2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800acd0:	f7fa f83a 	bl	8004d48 <HAL_GetTick>
 800acd4:	4602      	mov	r2, r0
 800acd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd8:	1ad3      	subs	r3, r2, r3
 800acda:	2b02      	cmp	r3, #2
 800acdc:	d901      	bls.n	800ace2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800acde:	2303      	movs	r3, #3
 800ace0:	e04d      	b.n	800ad7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ace2:	4b04      	ldr	r3, [pc, #16]	; (800acf4 <HAL_RCC_OscConfig+0x788>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acea:	2b00      	cmp	r3, #0
 800acec:	d1f0      	bne.n	800acd0 <HAL_RCC_OscConfig+0x764>
 800acee:	e045      	b.n	800ad7c <HAL_RCC_OscConfig+0x810>
 800acf0:	58024800 	.word	0x58024800
 800acf4:	58024400 	.word	0x58024400
 800acf8:	fffffc0c 	.word	0xfffffc0c
 800acfc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ad00:	4b21      	ldr	r3, [pc, #132]	; (800ad88 <HAL_RCC_OscConfig+0x81c>)
 800ad02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ad06:	4b20      	ldr	r3, [pc, #128]	; (800ad88 <HAL_RCC_OscConfig+0x81c>)
 800ad08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad0a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d031      	beq.n	800ad78 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	f003 0203 	and.w	r2, r3, #3
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d12a      	bne.n	800ad78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	091b      	lsrs	r3, r3, #4
 800ad26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d122      	bne.n	800ad78 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad3c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d11a      	bne.n	800ad78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	0a5b      	lsrs	r3, r3, #9
 800ad46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad4e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d111      	bne.n	800ad78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	0c1b      	lsrs	r3, r3, #16
 800ad58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad60:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d108      	bne.n	800ad78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	0e1b      	lsrs	r3, r3, #24
 800ad6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad72:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d001      	beq.n	800ad7c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	e000      	b.n	800ad7e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800ad7c:	2300      	movs	r3, #0
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3730      	adds	r7, #48	; 0x30
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	58024400 	.word	0x58024400

0800ad8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b086      	sub	sp, #24
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d101      	bne.n	800ada0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	e19c      	b.n	800b0da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ada0:	4b8a      	ldr	r3, [pc, #552]	; (800afcc <HAL_RCC_ClockConfig+0x240>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f003 030f 	and.w	r3, r3, #15
 800ada8:	683a      	ldr	r2, [r7, #0]
 800adaa:	429a      	cmp	r2, r3
 800adac:	d910      	bls.n	800add0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800adae:	4b87      	ldr	r3, [pc, #540]	; (800afcc <HAL_RCC_ClockConfig+0x240>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f023 020f 	bic.w	r2, r3, #15
 800adb6:	4985      	ldr	r1, [pc, #532]	; (800afcc <HAL_RCC_ClockConfig+0x240>)
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	4313      	orrs	r3, r2
 800adbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800adbe:	4b83      	ldr	r3, [pc, #524]	; (800afcc <HAL_RCC_ClockConfig+0x240>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f003 030f 	and.w	r3, r3, #15
 800adc6:	683a      	ldr	r2, [r7, #0]
 800adc8:	429a      	cmp	r2, r3
 800adca:	d001      	beq.n	800add0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800adcc:	2301      	movs	r3, #1
 800adce:	e184      	b.n	800b0da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f003 0304 	and.w	r3, r3, #4
 800add8:	2b00      	cmp	r3, #0
 800adda:	d010      	beq.n	800adfe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	691a      	ldr	r2, [r3, #16]
 800ade0:	4b7b      	ldr	r3, [pc, #492]	; (800afd0 <HAL_RCC_ClockConfig+0x244>)
 800ade2:	699b      	ldr	r3, [r3, #24]
 800ade4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ade8:	429a      	cmp	r2, r3
 800adea:	d908      	bls.n	800adfe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800adec:	4b78      	ldr	r3, [pc, #480]	; (800afd0 <HAL_RCC_ClockConfig+0x244>)
 800adee:	699b      	ldr	r3, [r3, #24]
 800adf0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	691b      	ldr	r3, [r3, #16]
 800adf8:	4975      	ldr	r1, [pc, #468]	; (800afd0 <HAL_RCC_ClockConfig+0x244>)
 800adfa:	4313      	orrs	r3, r2
 800adfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f003 0308 	and.w	r3, r3, #8
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d010      	beq.n	800ae2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	695a      	ldr	r2, [r3, #20]
 800ae0e:	4b70      	ldr	r3, [pc, #448]	; (800afd0 <HAL_RCC_ClockConfig+0x244>)
 800ae10:	69db      	ldr	r3, [r3, #28]
 800ae12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d908      	bls.n	800ae2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ae1a:	4b6d      	ldr	r3, [pc, #436]	; (800afd0 <HAL_RCC_ClockConfig+0x244>)
 800ae1c:	69db      	ldr	r3, [r3, #28]
 800ae1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	695b      	ldr	r3, [r3, #20]
 800ae26:	496a      	ldr	r1, [pc, #424]	; (800afd0 <HAL_RCC_ClockConfig+0x244>)
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f003 0310 	and.w	r3, r3, #16
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d010      	beq.n	800ae5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	699a      	ldr	r2, [r3, #24]
 800ae3c:	4b64      	ldr	r3, [pc, #400]	; (800afd0 <HAL_RCC_ClockConfig+0x244>)
 800ae3e:	69db      	ldr	r3, [r3, #28]
 800ae40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d908      	bls.n	800ae5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ae48:	4b61      	ldr	r3, [pc, #388]	; (800afd0 <HAL_RCC_ClockConfig+0x244>)
 800ae4a:	69db      	ldr	r3, [r3, #28]
 800ae4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	699b      	ldr	r3, [r3, #24]
 800ae54:	495e      	ldr	r1, [pc, #376]	; (800afd0 <HAL_RCC_ClockConfig+0x244>)
 800ae56:	4313      	orrs	r3, r2
 800ae58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f003 0320 	and.w	r3, r3, #32
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d010      	beq.n	800ae88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	69da      	ldr	r2, [r3, #28]
 800ae6a:	4b59      	ldr	r3, [pc, #356]	; (800afd0 <HAL_RCC_ClockConfig+0x244>)
 800ae6c:	6a1b      	ldr	r3, [r3, #32]
 800ae6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d908      	bls.n	800ae88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800ae76:	4b56      	ldr	r3, [pc, #344]	; (800afd0 <HAL_RCC_ClockConfig+0x244>)
 800ae78:	6a1b      	ldr	r3, [r3, #32]
 800ae7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	69db      	ldr	r3, [r3, #28]
 800ae82:	4953      	ldr	r1, [pc, #332]	; (800afd0 <HAL_RCC_ClockConfig+0x244>)
 800ae84:	4313      	orrs	r3, r2
 800ae86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f003 0302 	and.w	r3, r3, #2
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d010      	beq.n	800aeb6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	68da      	ldr	r2, [r3, #12]
 800ae98:	4b4d      	ldr	r3, [pc, #308]	; (800afd0 <HAL_RCC_ClockConfig+0x244>)
 800ae9a:	699b      	ldr	r3, [r3, #24]
 800ae9c:	f003 030f 	and.w	r3, r3, #15
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d908      	bls.n	800aeb6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aea4:	4b4a      	ldr	r3, [pc, #296]	; (800afd0 <HAL_RCC_ClockConfig+0x244>)
 800aea6:	699b      	ldr	r3, [r3, #24]
 800aea8:	f023 020f 	bic.w	r2, r3, #15
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	4947      	ldr	r1, [pc, #284]	; (800afd0 <HAL_RCC_ClockConfig+0x244>)
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f003 0301 	and.w	r3, r3, #1
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d055      	beq.n	800af6e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800aec2:	4b43      	ldr	r3, [pc, #268]	; (800afd0 <HAL_RCC_ClockConfig+0x244>)
 800aec4:	699b      	ldr	r3, [r3, #24]
 800aec6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	4940      	ldr	r1, [pc, #256]	; (800afd0 <HAL_RCC_ClockConfig+0x244>)
 800aed0:	4313      	orrs	r3, r2
 800aed2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	2b02      	cmp	r3, #2
 800aeda:	d107      	bne.n	800aeec <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aedc:	4b3c      	ldr	r3, [pc, #240]	; (800afd0 <HAL_RCC_ClockConfig+0x244>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d121      	bne.n	800af2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800aee8:	2301      	movs	r3, #1
 800aeea:	e0f6      	b.n	800b0da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	2b03      	cmp	r3, #3
 800aef2:	d107      	bne.n	800af04 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aef4:	4b36      	ldr	r3, [pc, #216]	; (800afd0 <HAL_RCC_ClockConfig+0x244>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d115      	bne.n	800af2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800af00:	2301      	movs	r3, #1
 800af02:	e0ea      	b.n	800b0da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d107      	bne.n	800af1c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800af0c:	4b30      	ldr	r3, [pc, #192]	; (800afd0 <HAL_RCC_ClockConfig+0x244>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af14:	2b00      	cmp	r3, #0
 800af16:	d109      	bne.n	800af2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800af18:	2301      	movs	r3, #1
 800af1a:	e0de      	b.n	800b0da <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800af1c:	4b2c      	ldr	r3, [pc, #176]	; (800afd0 <HAL_RCC_ClockConfig+0x244>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f003 0304 	and.w	r3, r3, #4
 800af24:	2b00      	cmp	r3, #0
 800af26:	d101      	bne.n	800af2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800af28:	2301      	movs	r3, #1
 800af2a:	e0d6      	b.n	800b0da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800af2c:	4b28      	ldr	r3, [pc, #160]	; (800afd0 <HAL_RCC_ClockConfig+0x244>)
 800af2e:	691b      	ldr	r3, [r3, #16]
 800af30:	f023 0207 	bic.w	r2, r3, #7
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	4925      	ldr	r1, [pc, #148]	; (800afd0 <HAL_RCC_ClockConfig+0x244>)
 800af3a:	4313      	orrs	r3, r2
 800af3c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af3e:	f7f9 ff03 	bl	8004d48 <HAL_GetTick>
 800af42:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af44:	e00a      	b.n	800af5c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af46:	f7f9 feff 	bl	8004d48 <HAL_GetTick>
 800af4a:	4602      	mov	r2, r0
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	1ad3      	subs	r3, r2, r3
 800af50:	f241 3288 	movw	r2, #5000	; 0x1388
 800af54:	4293      	cmp	r3, r2
 800af56:	d901      	bls.n	800af5c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800af58:	2303      	movs	r3, #3
 800af5a:	e0be      	b.n	800b0da <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af5c:	4b1c      	ldr	r3, [pc, #112]	; (800afd0 <HAL_RCC_ClockConfig+0x244>)
 800af5e:	691b      	ldr	r3, [r3, #16]
 800af60:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	00db      	lsls	r3, r3, #3
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d1eb      	bne.n	800af46 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f003 0302 	and.w	r3, r3, #2
 800af76:	2b00      	cmp	r3, #0
 800af78:	d010      	beq.n	800af9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	68da      	ldr	r2, [r3, #12]
 800af7e:	4b14      	ldr	r3, [pc, #80]	; (800afd0 <HAL_RCC_ClockConfig+0x244>)
 800af80:	699b      	ldr	r3, [r3, #24]
 800af82:	f003 030f 	and.w	r3, r3, #15
 800af86:	429a      	cmp	r2, r3
 800af88:	d208      	bcs.n	800af9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af8a:	4b11      	ldr	r3, [pc, #68]	; (800afd0 <HAL_RCC_ClockConfig+0x244>)
 800af8c:	699b      	ldr	r3, [r3, #24]
 800af8e:	f023 020f 	bic.w	r2, r3, #15
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	68db      	ldr	r3, [r3, #12]
 800af96:	490e      	ldr	r1, [pc, #56]	; (800afd0 <HAL_RCC_ClockConfig+0x244>)
 800af98:	4313      	orrs	r3, r2
 800af9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800af9c:	4b0b      	ldr	r3, [pc, #44]	; (800afcc <HAL_RCC_ClockConfig+0x240>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f003 030f 	and.w	r3, r3, #15
 800afa4:	683a      	ldr	r2, [r7, #0]
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d214      	bcs.n	800afd4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800afaa:	4b08      	ldr	r3, [pc, #32]	; (800afcc <HAL_RCC_ClockConfig+0x240>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f023 020f 	bic.w	r2, r3, #15
 800afb2:	4906      	ldr	r1, [pc, #24]	; (800afcc <HAL_RCC_ClockConfig+0x240>)
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	4313      	orrs	r3, r2
 800afb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800afba:	4b04      	ldr	r3, [pc, #16]	; (800afcc <HAL_RCC_ClockConfig+0x240>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f003 030f 	and.w	r3, r3, #15
 800afc2:	683a      	ldr	r2, [r7, #0]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d005      	beq.n	800afd4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800afc8:	2301      	movs	r3, #1
 800afca:	e086      	b.n	800b0da <HAL_RCC_ClockConfig+0x34e>
 800afcc:	52002000 	.word	0x52002000
 800afd0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f003 0304 	and.w	r3, r3, #4
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d010      	beq.n	800b002 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	691a      	ldr	r2, [r3, #16]
 800afe4:	4b3f      	ldr	r3, [pc, #252]	; (800b0e4 <HAL_RCC_ClockConfig+0x358>)
 800afe6:	699b      	ldr	r3, [r3, #24]
 800afe8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800afec:	429a      	cmp	r2, r3
 800afee:	d208      	bcs.n	800b002 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aff0:	4b3c      	ldr	r3, [pc, #240]	; (800b0e4 <HAL_RCC_ClockConfig+0x358>)
 800aff2:	699b      	ldr	r3, [r3, #24]
 800aff4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	691b      	ldr	r3, [r3, #16]
 800affc:	4939      	ldr	r1, [pc, #228]	; (800b0e4 <HAL_RCC_ClockConfig+0x358>)
 800affe:	4313      	orrs	r3, r2
 800b000:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f003 0308 	and.w	r3, r3, #8
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d010      	beq.n	800b030 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	695a      	ldr	r2, [r3, #20]
 800b012:	4b34      	ldr	r3, [pc, #208]	; (800b0e4 <HAL_RCC_ClockConfig+0x358>)
 800b014:	69db      	ldr	r3, [r3, #28]
 800b016:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d208      	bcs.n	800b030 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b01e:	4b31      	ldr	r3, [pc, #196]	; (800b0e4 <HAL_RCC_ClockConfig+0x358>)
 800b020:	69db      	ldr	r3, [r3, #28]
 800b022:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	695b      	ldr	r3, [r3, #20]
 800b02a:	492e      	ldr	r1, [pc, #184]	; (800b0e4 <HAL_RCC_ClockConfig+0x358>)
 800b02c:	4313      	orrs	r3, r2
 800b02e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f003 0310 	and.w	r3, r3, #16
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d010      	beq.n	800b05e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	699a      	ldr	r2, [r3, #24]
 800b040:	4b28      	ldr	r3, [pc, #160]	; (800b0e4 <HAL_RCC_ClockConfig+0x358>)
 800b042:	69db      	ldr	r3, [r3, #28]
 800b044:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b048:	429a      	cmp	r2, r3
 800b04a:	d208      	bcs.n	800b05e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b04c:	4b25      	ldr	r3, [pc, #148]	; (800b0e4 <HAL_RCC_ClockConfig+0x358>)
 800b04e:	69db      	ldr	r3, [r3, #28]
 800b050:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	699b      	ldr	r3, [r3, #24]
 800b058:	4922      	ldr	r1, [pc, #136]	; (800b0e4 <HAL_RCC_ClockConfig+0x358>)
 800b05a:	4313      	orrs	r3, r2
 800b05c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f003 0320 	and.w	r3, r3, #32
 800b066:	2b00      	cmp	r3, #0
 800b068:	d010      	beq.n	800b08c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	69da      	ldr	r2, [r3, #28]
 800b06e:	4b1d      	ldr	r3, [pc, #116]	; (800b0e4 <HAL_RCC_ClockConfig+0x358>)
 800b070:	6a1b      	ldr	r3, [r3, #32]
 800b072:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b076:	429a      	cmp	r2, r3
 800b078:	d208      	bcs.n	800b08c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b07a:	4b1a      	ldr	r3, [pc, #104]	; (800b0e4 <HAL_RCC_ClockConfig+0x358>)
 800b07c:	6a1b      	ldr	r3, [r3, #32]
 800b07e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	69db      	ldr	r3, [r3, #28]
 800b086:	4917      	ldr	r1, [pc, #92]	; (800b0e4 <HAL_RCC_ClockConfig+0x358>)
 800b088:	4313      	orrs	r3, r2
 800b08a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b08c:	f000 f834 	bl	800b0f8 <HAL_RCC_GetSysClockFreq>
 800b090:	4602      	mov	r2, r0
 800b092:	4b14      	ldr	r3, [pc, #80]	; (800b0e4 <HAL_RCC_ClockConfig+0x358>)
 800b094:	699b      	ldr	r3, [r3, #24]
 800b096:	0a1b      	lsrs	r3, r3, #8
 800b098:	f003 030f 	and.w	r3, r3, #15
 800b09c:	4912      	ldr	r1, [pc, #72]	; (800b0e8 <HAL_RCC_ClockConfig+0x35c>)
 800b09e:	5ccb      	ldrb	r3, [r1, r3]
 800b0a0:	f003 031f 	and.w	r3, r3, #31
 800b0a4:	fa22 f303 	lsr.w	r3, r2, r3
 800b0a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b0aa:	4b0e      	ldr	r3, [pc, #56]	; (800b0e4 <HAL_RCC_ClockConfig+0x358>)
 800b0ac:	699b      	ldr	r3, [r3, #24]
 800b0ae:	f003 030f 	and.w	r3, r3, #15
 800b0b2:	4a0d      	ldr	r2, [pc, #52]	; (800b0e8 <HAL_RCC_ClockConfig+0x35c>)
 800b0b4:	5cd3      	ldrb	r3, [r2, r3]
 800b0b6:	f003 031f 	and.w	r3, r3, #31
 800b0ba:	693a      	ldr	r2, [r7, #16]
 800b0bc:	fa22 f303 	lsr.w	r3, r2, r3
 800b0c0:	4a0a      	ldr	r2, [pc, #40]	; (800b0ec <HAL_RCC_ClockConfig+0x360>)
 800b0c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b0c4:	4a0a      	ldr	r2, [pc, #40]	; (800b0f0 <HAL_RCC_ClockConfig+0x364>)
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800b0ca:	4b0a      	ldr	r3, [pc, #40]	; (800b0f4 <HAL_RCC_ClockConfig+0x368>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f7f9 fdf0 	bl	8004cb4 <HAL_InitTick>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b0d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3718      	adds	r7, #24
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	58024400 	.word	0x58024400
 800b0e8:	08013a94 	.word	0x08013a94
 800b0ec:	24000018 	.word	0x24000018
 800b0f0:	24000014 	.word	0x24000014
 800b0f4:	2400001c 	.word	0x2400001c

0800b0f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b089      	sub	sp, #36	; 0x24
 800b0fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b0fe:	4bb3      	ldr	r3, [pc, #716]	; (800b3cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b100:	691b      	ldr	r3, [r3, #16]
 800b102:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b106:	2b18      	cmp	r3, #24
 800b108:	f200 8155 	bhi.w	800b3b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800b10c:	a201      	add	r2, pc, #4	; (adr r2, 800b114 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b10e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b112:	bf00      	nop
 800b114:	0800b179 	.word	0x0800b179
 800b118:	0800b3b7 	.word	0x0800b3b7
 800b11c:	0800b3b7 	.word	0x0800b3b7
 800b120:	0800b3b7 	.word	0x0800b3b7
 800b124:	0800b3b7 	.word	0x0800b3b7
 800b128:	0800b3b7 	.word	0x0800b3b7
 800b12c:	0800b3b7 	.word	0x0800b3b7
 800b130:	0800b3b7 	.word	0x0800b3b7
 800b134:	0800b19f 	.word	0x0800b19f
 800b138:	0800b3b7 	.word	0x0800b3b7
 800b13c:	0800b3b7 	.word	0x0800b3b7
 800b140:	0800b3b7 	.word	0x0800b3b7
 800b144:	0800b3b7 	.word	0x0800b3b7
 800b148:	0800b3b7 	.word	0x0800b3b7
 800b14c:	0800b3b7 	.word	0x0800b3b7
 800b150:	0800b3b7 	.word	0x0800b3b7
 800b154:	0800b1a5 	.word	0x0800b1a5
 800b158:	0800b3b7 	.word	0x0800b3b7
 800b15c:	0800b3b7 	.word	0x0800b3b7
 800b160:	0800b3b7 	.word	0x0800b3b7
 800b164:	0800b3b7 	.word	0x0800b3b7
 800b168:	0800b3b7 	.word	0x0800b3b7
 800b16c:	0800b3b7 	.word	0x0800b3b7
 800b170:	0800b3b7 	.word	0x0800b3b7
 800b174:	0800b1ab 	.word	0x0800b1ab
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b178:	4b94      	ldr	r3, [pc, #592]	; (800b3cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f003 0320 	and.w	r3, r3, #32
 800b180:	2b00      	cmp	r3, #0
 800b182:	d009      	beq.n	800b198 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b184:	4b91      	ldr	r3, [pc, #580]	; (800b3cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	08db      	lsrs	r3, r3, #3
 800b18a:	f003 0303 	and.w	r3, r3, #3
 800b18e:	4a90      	ldr	r2, [pc, #576]	; (800b3d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b190:	fa22 f303 	lsr.w	r3, r2, r3
 800b194:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800b196:	e111      	b.n	800b3bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b198:	4b8d      	ldr	r3, [pc, #564]	; (800b3d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b19a:	61bb      	str	r3, [r7, #24]
    break;
 800b19c:	e10e      	b.n	800b3bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800b19e:	4b8d      	ldr	r3, [pc, #564]	; (800b3d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b1a0:	61bb      	str	r3, [r7, #24]
    break;
 800b1a2:	e10b      	b.n	800b3bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800b1a4:	4b8c      	ldr	r3, [pc, #560]	; (800b3d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b1a6:	61bb      	str	r3, [r7, #24]
    break;
 800b1a8:	e108      	b.n	800b3bc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b1aa:	4b88      	ldr	r3, [pc, #544]	; (800b3cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ae:	f003 0303 	and.w	r3, r3, #3
 800b1b2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800b1b4:	4b85      	ldr	r3, [pc, #532]	; (800b3cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1b8:	091b      	lsrs	r3, r3, #4
 800b1ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1be:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b1c0:	4b82      	ldr	r3, [pc, #520]	; (800b3cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c4:	f003 0301 	and.w	r3, r3, #1
 800b1c8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b1ca:	4b80      	ldr	r3, [pc, #512]	; (800b3cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ce:	08db      	lsrs	r3, r3, #3
 800b1d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1d4:	68fa      	ldr	r2, [r7, #12]
 800b1d6:	fb02 f303 	mul.w	r3, r2, r3
 800b1da:	ee07 3a90 	vmov	s15, r3
 800b1de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1e2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	f000 80e1 	beq.w	800b3b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	2b02      	cmp	r3, #2
 800b1f2:	f000 8083 	beq.w	800b2fc <HAL_RCC_GetSysClockFreq+0x204>
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	2b02      	cmp	r3, #2
 800b1fa:	f200 80a1 	bhi.w	800b340 <HAL_RCC_GetSysClockFreq+0x248>
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d003      	beq.n	800b20c <HAL_RCC_GetSysClockFreq+0x114>
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	2b01      	cmp	r3, #1
 800b208:	d056      	beq.n	800b2b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b20a:	e099      	b.n	800b340 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b20c:	4b6f      	ldr	r3, [pc, #444]	; (800b3cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f003 0320 	and.w	r3, r3, #32
 800b214:	2b00      	cmp	r3, #0
 800b216:	d02d      	beq.n	800b274 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b218:	4b6c      	ldr	r3, [pc, #432]	; (800b3cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	08db      	lsrs	r3, r3, #3
 800b21e:	f003 0303 	and.w	r3, r3, #3
 800b222:	4a6b      	ldr	r2, [pc, #428]	; (800b3d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b224:	fa22 f303 	lsr.w	r3, r2, r3
 800b228:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	ee07 3a90 	vmov	s15, r3
 800b230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	ee07 3a90 	vmov	s15, r3
 800b23a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b23e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b242:	4b62      	ldr	r3, [pc, #392]	; (800b3cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b24a:	ee07 3a90 	vmov	s15, r3
 800b24e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b252:	ed97 6a02 	vldr	s12, [r7, #8]
 800b256:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b3dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b25a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b25e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b26a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b26e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800b272:	e087      	b.n	800b384 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	ee07 3a90 	vmov	s15, r3
 800b27a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b27e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b3e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b286:	4b51      	ldr	r3, [pc, #324]	; (800b3cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b28a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b28e:	ee07 3a90 	vmov	s15, r3
 800b292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b296:	ed97 6a02 	vldr	s12, [r7, #8]
 800b29a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b3dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b29e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2b6:	e065      	b.n	800b384 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	ee07 3a90 	vmov	s15, r3
 800b2be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b3e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b2c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2ca:	4b40      	ldr	r3, [pc, #256]	; (800b3cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2d2:	ee07 3a90 	vmov	s15, r3
 800b2d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2da:	ed97 6a02 	vldr	s12, [r7, #8]
 800b2de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b3dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b2e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2fa:	e043      	b.n	800b384 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	ee07 3a90 	vmov	s15, r3
 800b302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b306:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b3e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b30a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b30e:	4b2f      	ldr	r3, [pc, #188]	; (800b3cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b316:	ee07 3a90 	vmov	s15, r3
 800b31a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b31e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b322:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b3dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b32a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b32e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b33a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b33e:	e021      	b.n	800b384 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	ee07 3a90 	vmov	s15, r3
 800b346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b34a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b3e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b34e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b352:	4b1e      	ldr	r3, [pc, #120]	; (800b3cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b35a:	ee07 3a90 	vmov	s15, r3
 800b35e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b362:	ed97 6a02 	vldr	s12, [r7, #8]
 800b366:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b3dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b36a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b36e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b37a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b37e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b382:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800b384:	4b11      	ldr	r3, [pc, #68]	; (800b3cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b388:	0a5b      	lsrs	r3, r3, #9
 800b38a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b38e:	3301      	adds	r3, #1
 800b390:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	ee07 3a90 	vmov	s15, r3
 800b398:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b39c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3a8:	ee17 3a90 	vmov	r3, s15
 800b3ac:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800b3ae:	e005      	b.n	800b3bc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	61bb      	str	r3, [r7, #24]
    break;
 800b3b4:	e002      	b.n	800b3bc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800b3b6:	4b07      	ldr	r3, [pc, #28]	; (800b3d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b3b8:	61bb      	str	r3, [r7, #24]
    break;
 800b3ba:	bf00      	nop
  }

  return sysclockfreq;
 800b3bc:	69bb      	ldr	r3, [r7, #24]
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3724      	adds	r7, #36	; 0x24
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr
 800b3ca:	bf00      	nop
 800b3cc:	58024400 	.word	0x58024400
 800b3d0:	03d09000 	.word	0x03d09000
 800b3d4:	003d0900 	.word	0x003d0900
 800b3d8:	017d7840 	.word	0x017d7840
 800b3dc:	46000000 	.word	0x46000000
 800b3e0:	4c742400 	.word	0x4c742400
 800b3e4:	4a742400 	.word	0x4a742400
 800b3e8:	4bbebc20 	.word	0x4bbebc20

0800b3ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b3f2:	f7ff fe81 	bl	800b0f8 <HAL_RCC_GetSysClockFreq>
 800b3f6:	4602      	mov	r2, r0
 800b3f8:	4b10      	ldr	r3, [pc, #64]	; (800b43c <HAL_RCC_GetHCLKFreq+0x50>)
 800b3fa:	699b      	ldr	r3, [r3, #24]
 800b3fc:	0a1b      	lsrs	r3, r3, #8
 800b3fe:	f003 030f 	and.w	r3, r3, #15
 800b402:	490f      	ldr	r1, [pc, #60]	; (800b440 <HAL_RCC_GetHCLKFreq+0x54>)
 800b404:	5ccb      	ldrb	r3, [r1, r3]
 800b406:	f003 031f 	and.w	r3, r3, #31
 800b40a:	fa22 f303 	lsr.w	r3, r2, r3
 800b40e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b410:	4b0a      	ldr	r3, [pc, #40]	; (800b43c <HAL_RCC_GetHCLKFreq+0x50>)
 800b412:	699b      	ldr	r3, [r3, #24]
 800b414:	f003 030f 	and.w	r3, r3, #15
 800b418:	4a09      	ldr	r2, [pc, #36]	; (800b440 <HAL_RCC_GetHCLKFreq+0x54>)
 800b41a:	5cd3      	ldrb	r3, [r2, r3]
 800b41c:	f003 031f 	and.w	r3, r3, #31
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	fa22 f303 	lsr.w	r3, r2, r3
 800b426:	4a07      	ldr	r2, [pc, #28]	; (800b444 <HAL_RCC_GetHCLKFreq+0x58>)
 800b428:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b42a:	4a07      	ldr	r2, [pc, #28]	; (800b448 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b430:	4b04      	ldr	r3, [pc, #16]	; (800b444 <HAL_RCC_GetHCLKFreq+0x58>)
 800b432:	681b      	ldr	r3, [r3, #0]
}
 800b434:	4618      	mov	r0, r3
 800b436:	3708      	adds	r7, #8
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}
 800b43c:	58024400 	.word	0x58024400
 800b440:	08013a94 	.word	0x08013a94
 800b444:	24000018 	.word	0x24000018
 800b448:	24000014 	.word	0x24000014

0800b44c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b450:	f7ff ffcc 	bl	800b3ec <HAL_RCC_GetHCLKFreq>
 800b454:	4602      	mov	r2, r0
 800b456:	4b06      	ldr	r3, [pc, #24]	; (800b470 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b458:	69db      	ldr	r3, [r3, #28]
 800b45a:	091b      	lsrs	r3, r3, #4
 800b45c:	f003 0307 	and.w	r3, r3, #7
 800b460:	4904      	ldr	r1, [pc, #16]	; (800b474 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b462:	5ccb      	ldrb	r3, [r1, r3]
 800b464:	f003 031f 	and.w	r3, r3, #31
 800b468:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	58024400 	.word	0x58024400
 800b474:	08013a94 	.word	0x08013a94

0800b478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b47c:	f7ff ffb6 	bl	800b3ec <HAL_RCC_GetHCLKFreq>
 800b480:	4602      	mov	r2, r0
 800b482:	4b06      	ldr	r3, [pc, #24]	; (800b49c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b484:	69db      	ldr	r3, [r3, #28]
 800b486:	0a1b      	lsrs	r3, r3, #8
 800b488:	f003 0307 	and.w	r3, r3, #7
 800b48c:	4904      	ldr	r1, [pc, #16]	; (800b4a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b48e:	5ccb      	ldrb	r3, [r1, r3]
 800b490:	f003 031f 	and.w	r3, r3, #31
 800b494:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b498:	4618      	mov	r0, r3
 800b49a:	bd80      	pop	{r7, pc}
 800b49c:	58024400 	.word	0x58024400
 800b4a0:	08013a94 	.word	0x08013a94

0800b4a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b086      	sub	sp, #24
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d03f      	beq.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b4c8:	d02a      	beq.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b4ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b4ce:	d824      	bhi.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b4d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b4d4:	d018      	beq.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b4d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b4da:	d81e      	bhi.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d003      	beq.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b4e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4e4:	d007      	beq.n	800b4f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b4e6:	e018      	b.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4e8:	4bab      	ldr	r3, [pc, #684]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ec:	4aaa      	ldr	r2, [pc, #680]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b4ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b4f4:	e015      	b.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	3304      	adds	r3, #4
 800b4fa:	2102      	movs	r1, #2
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f001 f9cf 	bl	800c8a0 <RCCEx_PLL2_Config>
 800b502:	4603      	mov	r3, r0
 800b504:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b506:	e00c      	b.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	3324      	adds	r3, #36	; 0x24
 800b50c:	2102      	movs	r1, #2
 800b50e:	4618      	mov	r0, r3
 800b510:	f001 fa78 	bl	800ca04 <RCCEx_PLL3_Config>
 800b514:	4603      	mov	r3, r0
 800b516:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b518:	e003      	b.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b51a:	2301      	movs	r3, #1
 800b51c:	75fb      	strb	r3, [r7, #23]
      break;
 800b51e:	e000      	b.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b520:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b522:	7dfb      	ldrb	r3, [r7, #23]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d109      	bne.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b528:	4b9b      	ldr	r3, [pc, #620]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b52a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b52c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b534:	4998      	ldr	r1, [pc, #608]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b536:	4313      	orrs	r3, r2
 800b538:	650b      	str	r3, [r1, #80]	; 0x50
 800b53a:	e001      	b.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b53c:	7dfb      	ldrb	r3, [r7, #23]
 800b53e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d03d      	beq.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b550:	2b04      	cmp	r3, #4
 800b552:	d826      	bhi.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b554:	a201      	add	r2, pc, #4	; (adr r2, 800b55c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800b556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b55a:	bf00      	nop
 800b55c:	0800b571 	.word	0x0800b571
 800b560:	0800b57f 	.word	0x0800b57f
 800b564:	0800b591 	.word	0x0800b591
 800b568:	0800b5a9 	.word	0x0800b5a9
 800b56c:	0800b5a9 	.word	0x0800b5a9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b570:	4b89      	ldr	r3, [pc, #548]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b574:	4a88      	ldr	r2, [pc, #544]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b57a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b57c:	e015      	b.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	3304      	adds	r3, #4
 800b582:	2100      	movs	r1, #0
 800b584:	4618      	mov	r0, r3
 800b586:	f001 f98b 	bl	800c8a0 <RCCEx_PLL2_Config>
 800b58a:	4603      	mov	r3, r0
 800b58c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b58e:	e00c      	b.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	3324      	adds	r3, #36	; 0x24
 800b594:	2100      	movs	r1, #0
 800b596:	4618      	mov	r0, r3
 800b598:	f001 fa34 	bl	800ca04 <RCCEx_PLL3_Config>
 800b59c:	4603      	mov	r3, r0
 800b59e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b5a0:	e003      	b.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	75fb      	strb	r3, [r7, #23]
      break;
 800b5a6:	e000      	b.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800b5a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b5aa:	7dfb      	ldrb	r3, [r7, #23]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d109      	bne.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b5b0:	4b79      	ldr	r3, [pc, #484]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b5b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5b4:	f023 0207 	bic.w	r2, r3, #7
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5bc:	4976      	ldr	r1, [pc, #472]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	650b      	str	r3, [r1, #80]	; 0x50
 800b5c2:	e001      	b.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5c4:	7dfb      	ldrb	r3, [r7, #23]
 800b5c6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d042      	beq.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5dc:	d02b      	beq.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800b5de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5e2:	d825      	bhi.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b5e4:	2bc0      	cmp	r3, #192	; 0xc0
 800b5e6:	d028      	beq.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b5e8:	2bc0      	cmp	r3, #192	; 0xc0
 800b5ea:	d821      	bhi.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b5ec:	2b80      	cmp	r3, #128	; 0x80
 800b5ee:	d016      	beq.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800b5f0:	2b80      	cmp	r3, #128	; 0x80
 800b5f2:	d81d      	bhi.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d002      	beq.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800b5f8:	2b40      	cmp	r3, #64	; 0x40
 800b5fa:	d007      	beq.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800b5fc:	e018      	b.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5fe:	4b66      	ldr	r3, [pc, #408]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b602:	4a65      	ldr	r2, [pc, #404]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b608:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b60a:	e017      	b.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	3304      	adds	r3, #4
 800b610:	2100      	movs	r1, #0
 800b612:	4618      	mov	r0, r3
 800b614:	f001 f944 	bl	800c8a0 <RCCEx_PLL2_Config>
 800b618:	4603      	mov	r3, r0
 800b61a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b61c:	e00e      	b.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	3324      	adds	r3, #36	; 0x24
 800b622:	2100      	movs	r1, #0
 800b624:	4618      	mov	r0, r3
 800b626:	f001 f9ed 	bl	800ca04 <RCCEx_PLL3_Config>
 800b62a:	4603      	mov	r3, r0
 800b62c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b62e:	e005      	b.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b630:	2301      	movs	r3, #1
 800b632:	75fb      	strb	r3, [r7, #23]
      break;
 800b634:	e002      	b.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b636:	bf00      	nop
 800b638:	e000      	b.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b63a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b63c:	7dfb      	ldrb	r3, [r7, #23]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d109      	bne.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b642:	4b55      	ldr	r3, [pc, #340]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b646:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b64e:	4952      	ldr	r1, [pc, #328]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b650:	4313      	orrs	r3, r2
 800b652:	650b      	str	r3, [r1, #80]	; 0x50
 800b654:	e001      	b.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b656:	7dfb      	ldrb	r3, [r7, #23]
 800b658:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b662:	2b00      	cmp	r3, #0
 800b664:	d049      	beq.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b66c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b670:	d030      	beq.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800b672:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b676:	d82a      	bhi.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b678:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b67c:	d02c      	beq.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800b67e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b682:	d824      	bhi.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b684:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b688:	d018      	beq.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0x218>
 800b68a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b68e:	d81e      	bhi.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b690:	2b00      	cmp	r3, #0
 800b692:	d003      	beq.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800b694:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b698:	d007      	beq.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b69a:	e018      	b.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b69c:	4b3e      	ldr	r3, [pc, #248]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a0:	4a3d      	ldr	r2, [pc, #244]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b6a8:	e017      	b.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	3304      	adds	r3, #4
 800b6ae:	2100      	movs	r1, #0
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f001 f8f5 	bl	800c8a0 <RCCEx_PLL2_Config>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b6ba:	e00e      	b.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	3324      	adds	r3, #36	; 0x24
 800b6c0:	2100      	movs	r1, #0
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f001 f99e 	bl	800ca04 <RCCEx_PLL3_Config>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b6cc:	e005      	b.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	75fb      	strb	r3, [r7, #23]
      break;
 800b6d2:	e002      	b.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b6d4:	bf00      	nop
 800b6d6:	e000      	b.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b6d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b6da:	7dfb      	ldrb	r3, [r7, #23]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d10a      	bne.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b6e0:	4b2d      	ldr	r3, [pc, #180]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6e4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b6ee:	492a      	ldr	r1, [pc, #168]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	658b      	str	r3, [r1, #88]	; 0x58
 800b6f4:	e001      	b.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6f6:	7dfb      	ldrb	r3, [r7, #23]
 800b6f8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b702:	2b00      	cmp	r3, #0
 800b704:	d04c      	beq.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b70c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b710:	d030      	beq.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800b712:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b716:	d82a      	bhi.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b718:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b71c:	d02c      	beq.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800b71e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b722:	d824      	bhi.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b724:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b728:	d018      	beq.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800b72a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b72e:	d81e      	bhi.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b730:	2b00      	cmp	r3, #0
 800b732:	d003      	beq.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b738:	d007      	beq.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b73a:	e018      	b.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b73c:	4b16      	ldr	r3, [pc, #88]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b740:	4a15      	ldr	r2, [pc, #84]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b746:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b748:	e017      	b.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	3304      	adds	r3, #4
 800b74e:	2100      	movs	r1, #0
 800b750:	4618      	mov	r0, r3
 800b752:	f001 f8a5 	bl	800c8a0 <RCCEx_PLL2_Config>
 800b756:	4603      	mov	r3, r0
 800b758:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b75a:	e00e      	b.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	3324      	adds	r3, #36	; 0x24
 800b760:	2100      	movs	r1, #0
 800b762:	4618      	mov	r0, r3
 800b764:	f001 f94e 	bl	800ca04 <RCCEx_PLL3_Config>
 800b768:	4603      	mov	r3, r0
 800b76a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b76c:	e005      	b.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b76e:	2301      	movs	r3, #1
 800b770:	75fb      	strb	r3, [r7, #23]
      break;
 800b772:	e002      	b.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800b774:	bf00      	nop
 800b776:	e000      	b.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800b778:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b77a:	7dfb      	ldrb	r3, [r7, #23]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d10d      	bne.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b780:	4b05      	ldr	r3, [pc, #20]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b784:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b78e:	4902      	ldr	r1, [pc, #8]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b790:	4313      	orrs	r3, r2
 800b792:	658b      	str	r3, [r1, #88]	; 0x58
 800b794:	e004      	b.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800b796:	bf00      	nop
 800b798:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b79c:	7dfb      	ldrb	r3, [r7, #23]
 800b79e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d032      	beq.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7b0:	2b30      	cmp	r3, #48	; 0x30
 800b7b2:	d01c      	beq.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b7b4:	2b30      	cmp	r3, #48	; 0x30
 800b7b6:	d817      	bhi.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800b7b8:	2b20      	cmp	r3, #32
 800b7ba:	d00c      	beq.n	800b7d6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800b7bc:	2b20      	cmp	r3, #32
 800b7be:	d813      	bhi.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d016      	beq.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800b7c4:	2b10      	cmp	r3, #16
 800b7c6:	d10f      	bne.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7c8:	4baf      	ldr	r3, [pc, #700]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7cc:	4aae      	ldr	r2, [pc, #696]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b7ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b7d4:	e00e      	b.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	3304      	adds	r3, #4
 800b7da:	2102      	movs	r1, #2
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f001 f85f 	bl	800c8a0 <RCCEx_PLL2_Config>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b7e6:	e005      	b.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	75fb      	strb	r3, [r7, #23]
      break;
 800b7ec:	e002      	b.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800b7ee:	bf00      	nop
 800b7f0:	e000      	b.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800b7f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b7f4:	7dfb      	ldrb	r3, [r7, #23]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d109      	bne.n	800b80e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b7fa:	4ba3      	ldr	r3, [pc, #652]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b7fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b806:	49a0      	ldr	r1, [pc, #640]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b808:	4313      	orrs	r3, r2
 800b80a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b80c:	e001      	b.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b80e:	7dfb      	ldrb	r3, [r7, #23]
 800b810:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d047      	beq.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b822:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b826:	d030      	beq.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800b828:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b82c:	d82a      	bhi.n	800b884 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b82e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b832:	d02c      	beq.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800b834:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b838:	d824      	bhi.n	800b884 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b83a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b83e:	d018      	beq.n	800b872 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800b840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b844:	d81e      	bhi.n	800b884 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b846:	2b00      	cmp	r3, #0
 800b848:	d003      	beq.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800b84a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b84e:	d007      	beq.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800b850:	e018      	b.n	800b884 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b852:	4b8d      	ldr	r3, [pc, #564]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b856:	4a8c      	ldr	r2, [pc, #560]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b85c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b85e:	e017      	b.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	3304      	adds	r3, #4
 800b864:	2100      	movs	r1, #0
 800b866:	4618      	mov	r0, r3
 800b868:	f001 f81a 	bl	800c8a0 <RCCEx_PLL2_Config>
 800b86c:	4603      	mov	r3, r0
 800b86e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b870:	e00e      	b.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	3324      	adds	r3, #36	; 0x24
 800b876:	2100      	movs	r1, #0
 800b878:	4618      	mov	r0, r3
 800b87a:	f001 f8c3 	bl	800ca04 <RCCEx_PLL3_Config>
 800b87e:	4603      	mov	r3, r0
 800b880:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b882:	e005      	b.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b884:	2301      	movs	r3, #1
 800b886:	75fb      	strb	r3, [r7, #23]
      break;
 800b888:	e002      	b.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800b88a:	bf00      	nop
 800b88c:	e000      	b.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800b88e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b890:	7dfb      	ldrb	r3, [r7, #23]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d109      	bne.n	800b8aa <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b896:	4b7c      	ldr	r3, [pc, #496]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b89a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8a2:	4979      	ldr	r1, [pc, #484]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	650b      	str	r3, [r1, #80]	; 0x50
 800b8a8:	e001      	b.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8aa:	7dfb      	ldrb	r3, [r7, #23]
 800b8ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d049      	beq.n	800b94e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b8c2:	d02e      	beq.n	800b922 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800b8c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b8c8:	d828      	bhi.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b8ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b8ce:	d02a      	beq.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800b8d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b8d4:	d822      	bhi.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b8d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b8da:	d026      	beq.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800b8dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b8e0:	d81c      	bhi.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b8e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8e6:	d010      	beq.n	800b90a <HAL_RCCEx_PeriphCLKConfig+0x466>
 800b8e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8ec:	d816      	bhi.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d01d      	beq.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800b8f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8f6:	d111      	bne.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	3304      	adds	r3, #4
 800b8fc:	2101      	movs	r1, #1
 800b8fe:	4618      	mov	r0, r3
 800b900:	f000 ffce 	bl	800c8a0 <RCCEx_PLL2_Config>
 800b904:	4603      	mov	r3, r0
 800b906:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b908:	e012      	b.n	800b930 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	3324      	adds	r3, #36	; 0x24
 800b90e:	2101      	movs	r1, #1
 800b910:	4618      	mov	r0, r3
 800b912:	f001 f877 	bl	800ca04 <RCCEx_PLL3_Config>
 800b916:	4603      	mov	r3, r0
 800b918:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b91a:	e009      	b.n	800b930 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b91c:	2301      	movs	r3, #1
 800b91e:	75fb      	strb	r3, [r7, #23]
      break;
 800b920:	e006      	b.n	800b930 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b922:	bf00      	nop
 800b924:	e004      	b.n	800b930 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b926:	bf00      	nop
 800b928:	e002      	b.n	800b930 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b92a:	bf00      	nop
 800b92c:	e000      	b.n	800b930 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b92e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b930:	7dfb      	ldrb	r3, [r7, #23]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d109      	bne.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b936:	4b54      	ldr	r3, [pc, #336]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b93a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b942:	4951      	ldr	r1, [pc, #324]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b944:	4313      	orrs	r3, r2
 800b946:	650b      	str	r3, [r1, #80]	; 0x50
 800b948:	e001      	b.n	800b94e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b94a:	7dfb      	ldrb	r3, [r7, #23]
 800b94c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b956:	2b00      	cmp	r3, #0
 800b958:	d04b      	beq.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b960:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b964:	d02e      	beq.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800b966:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b96a:	d828      	bhi.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b96c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b970:	d02a      	beq.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800b972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b976:	d822      	bhi.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b978:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b97c:	d026      	beq.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0x528>
 800b97e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b982:	d81c      	bhi.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b988:	d010      	beq.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0x508>
 800b98a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b98e:	d816      	bhi.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b990:	2b00      	cmp	r3, #0
 800b992:	d01d      	beq.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800b994:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b998:	d111      	bne.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	3304      	adds	r3, #4
 800b99e:	2101      	movs	r1, #1
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f000 ff7d 	bl	800c8a0 <RCCEx_PLL2_Config>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b9aa:	e012      	b.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	3324      	adds	r3, #36	; 0x24
 800b9b0:	2101      	movs	r1, #1
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f001 f826 	bl	800ca04 <RCCEx_PLL3_Config>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b9bc:	e009      	b.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	75fb      	strb	r3, [r7, #23]
      break;
 800b9c2:	e006      	b.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b9c4:	bf00      	nop
 800b9c6:	e004      	b.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b9c8:	bf00      	nop
 800b9ca:	e002      	b.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b9cc:	bf00      	nop
 800b9ce:	e000      	b.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b9d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b9d2:	7dfb      	ldrb	r3, [r7, #23]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d10a      	bne.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b9d8:	4b2b      	ldr	r3, [pc, #172]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b9da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9dc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b9e6:	4928      	ldr	r1, [pc, #160]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	658b      	str	r3, [r1, #88]	; 0x58
 800b9ec:	e001      	b.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9ee:	7dfb      	ldrb	r3, [r7, #23]
 800b9f0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d02f      	beq.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba06:	d00e      	beq.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800ba08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba0c:	d814      	bhi.n	800ba38 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d015      	beq.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800ba12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba16:	d10f      	bne.n	800ba38 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba18:	4b1b      	ldr	r3, [pc, #108]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ba1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba1c:	4a1a      	ldr	r2, [pc, #104]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ba1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ba24:	e00c      	b.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	3304      	adds	r3, #4
 800ba2a:	2101      	movs	r1, #1
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f000 ff37 	bl	800c8a0 <RCCEx_PLL2_Config>
 800ba32:	4603      	mov	r3, r0
 800ba34:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ba36:	e003      	b.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	75fb      	strb	r3, [r7, #23]
      break;
 800ba3c:	e000      	b.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800ba3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba40:	7dfb      	ldrb	r3, [r7, #23]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d109      	bne.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ba46:	4b10      	ldr	r3, [pc, #64]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ba48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba52:	490d      	ldr	r1, [pc, #52]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ba54:	4313      	orrs	r3, r2
 800ba56:	650b      	str	r3, [r1, #80]	; 0x50
 800ba58:	e001      	b.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba5a:	7dfb      	ldrb	r3, [r7, #23]
 800ba5c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d033      	beq.n	800bad2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba6e:	2b03      	cmp	r3, #3
 800ba70:	d81c      	bhi.n	800baac <HAL_RCCEx_PeriphCLKConfig+0x608>
 800ba72:	a201      	add	r2, pc, #4	; (adr r2, 800ba78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800ba74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba78:	0800bab3 	.word	0x0800bab3
 800ba7c:	0800ba8d 	.word	0x0800ba8d
 800ba80:	0800ba9b 	.word	0x0800ba9b
 800ba84:	0800bab3 	.word	0x0800bab3
 800ba88:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba8c:	4bb8      	ldr	r3, [pc, #736]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ba8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba90:	4ab7      	ldr	r2, [pc, #732]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ba92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ba98:	e00c      	b.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	3304      	adds	r3, #4
 800ba9e:	2102      	movs	r1, #2
 800baa0:	4618      	mov	r0, r3
 800baa2:	f000 fefd 	bl	800c8a0 <RCCEx_PLL2_Config>
 800baa6:	4603      	mov	r3, r0
 800baa8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800baaa:	e003      	b.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800baac:	2301      	movs	r3, #1
 800baae:	75fb      	strb	r3, [r7, #23]
      break;
 800bab0:	e000      	b.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800bab2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bab4:	7dfb      	ldrb	r3, [r7, #23]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d109      	bne.n	800bace <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800baba:	4bad      	ldr	r3, [pc, #692]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800babc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800babe:	f023 0203 	bic.w	r2, r3, #3
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bac6:	49aa      	ldr	r1, [pc, #680]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bac8:	4313      	orrs	r3, r2
 800baca:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bacc:	e001      	b.n	800bad2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bace:	7dfb      	ldrb	r3, [r7, #23]
 800bad0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bada:	2b00      	cmp	r3, #0
 800badc:	f000 8086 	beq.w	800bbec <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bae0:	4ba4      	ldr	r3, [pc, #656]	; (800bd74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4aa3      	ldr	r2, [pc, #652]	; (800bd74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800bae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800baea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800baec:	f7f9 f92c 	bl	8004d48 <HAL_GetTick>
 800baf0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800baf2:	e009      	b.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800baf4:	f7f9 f928 	bl	8004d48 <HAL_GetTick>
 800baf8:	4602      	mov	r2, r0
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	1ad3      	subs	r3, r2, r3
 800bafe:	2b64      	cmp	r3, #100	; 0x64
 800bb00:	d902      	bls.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800bb02:	2303      	movs	r3, #3
 800bb04:	75fb      	strb	r3, [r7, #23]
        break;
 800bb06:	e005      	b.n	800bb14 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bb08:	4b9a      	ldr	r3, [pc, #616]	; (800bd74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d0ef      	beq.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800bb14:	7dfb      	ldrb	r3, [r7, #23]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d166      	bne.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bb1a:	4b95      	ldr	r3, [pc, #596]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bb1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bb24:	4053      	eors	r3, r2
 800bb26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d013      	beq.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bb2e:	4b90      	ldr	r3, [pc, #576]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bb30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb36:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bb38:	4b8d      	ldr	r3, [pc, #564]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bb3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb3c:	4a8c      	ldr	r2, [pc, #560]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bb3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb42:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bb44:	4b8a      	ldr	r3, [pc, #552]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bb46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb48:	4a89      	ldr	r2, [pc, #548]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bb4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb4e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bb50:	4a87      	ldr	r2, [pc, #540]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bb5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb60:	d115      	bne.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb62:	f7f9 f8f1 	bl	8004d48 <HAL_GetTick>
 800bb66:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bb68:	e00b      	b.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb6a:	f7f9 f8ed 	bl	8004d48 <HAL_GetTick>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	1ad3      	subs	r3, r2, r3
 800bb74:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d902      	bls.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800bb7c:	2303      	movs	r3, #3
 800bb7e:	75fb      	strb	r3, [r7, #23]
            break;
 800bb80:	e005      	b.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bb82:	4b7b      	ldr	r3, [pc, #492]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bb84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb86:	f003 0302 	and.w	r3, r3, #2
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d0ed      	beq.n	800bb6a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800bb8e:	7dfb      	ldrb	r3, [r7, #23]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d126      	bne.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bb9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bba2:	d10d      	bne.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800bba4:	4b72      	ldr	r3, [pc, #456]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bba6:	691b      	ldr	r3, [r3, #16]
 800bba8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bbb2:	0919      	lsrs	r1, r3, #4
 800bbb4:	4b70      	ldr	r3, [pc, #448]	; (800bd78 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800bbb6:	400b      	ands	r3, r1
 800bbb8:	496d      	ldr	r1, [pc, #436]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bbba:	4313      	orrs	r3, r2
 800bbbc:	610b      	str	r3, [r1, #16]
 800bbbe:	e005      	b.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0x728>
 800bbc0:	4b6b      	ldr	r3, [pc, #428]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bbc2:	691b      	ldr	r3, [r3, #16]
 800bbc4:	4a6a      	ldr	r2, [pc, #424]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bbc6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bbca:	6113      	str	r3, [r2, #16]
 800bbcc:	4b68      	ldr	r3, [pc, #416]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bbce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bbd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bbda:	4965      	ldr	r1, [pc, #404]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bbdc:	4313      	orrs	r3, r2
 800bbde:	670b      	str	r3, [r1, #112]	; 0x70
 800bbe0:	e004      	b.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bbe2:	7dfb      	ldrb	r3, [r7, #23]
 800bbe4:	75bb      	strb	r3, [r7, #22]
 800bbe6:	e001      	b.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbe8:	7dfb      	ldrb	r3, [r7, #23]
 800bbea:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f003 0301 	and.w	r3, r3, #1
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d07e      	beq.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbfc:	2b28      	cmp	r3, #40	; 0x28
 800bbfe:	d867      	bhi.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800bc00:	a201      	add	r2, pc, #4	; (adr r2, 800bc08 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800bc02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc06:	bf00      	nop
 800bc08:	0800bcd7 	.word	0x0800bcd7
 800bc0c:	0800bcd1 	.word	0x0800bcd1
 800bc10:	0800bcd1 	.word	0x0800bcd1
 800bc14:	0800bcd1 	.word	0x0800bcd1
 800bc18:	0800bcd1 	.word	0x0800bcd1
 800bc1c:	0800bcd1 	.word	0x0800bcd1
 800bc20:	0800bcd1 	.word	0x0800bcd1
 800bc24:	0800bcd1 	.word	0x0800bcd1
 800bc28:	0800bcad 	.word	0x0800bcad
 800bc2c:	0800bcd1 	.word	0x0800bcd1
 800bc30:	0800bcd1 	.word	0x0800bcd1
 800bc34:	0800bcd1 	.word	0x0800bcd1
 800bc38:	0800bcd1 	.word	0x0800bcd1
 800bc3c:	0800bcd1 	.word	0x0800bcd1
 800bc40:	0800bcd1 	.word	0x0800bcd1
 800bc44:	0800bcd1 	.word	0x0800bcd1
 800bc48:	0800bcbf 	.word	0x0800bcbf
 800bc4c:	0800bcd1 	.word	0x0800bcd1
 800bc50:	0800bcd1 	.word	0x0800bcd1
 800bc54:	0800bcd1 	.word	0x0800bcd1
 800bc58:	0800bcd1 	.word	0x0800bcd1
 800bc5c:	0800bcd1 	.word	0x0800bcd1
 800bc60:	0800bcd1 	.word	0x0800bcd1
 800bc64:	0800bcd1 	.word	0x0800bcd1
 800bc68:	0800bcd7 	.word	0x0800bcd7
 800bc6c:	0800bcd1 	.word	0x0800bcd1
 800bc70:	0800bcd1 	.word	0x0800bcd1
 800bc74:	0800bcd1 	.word	0x0800bcd1
 800bc78:	0800bcd1 	.word	0x0800bcd1
 800bc7c:	0800bcd1 	.word	0x0800bcd1
 800bc80:	0800bcd1 	.word	0x0800bcd1
 800bc84:	0800bcd1 	.word	0x0800bcd1
 800bc88:	0800bcd7 	.word	0x0800bcd7
 800bc8c:	0800bcd1 	.word	0x0800bcd1
 800bc90:	0800bcd1 	.word	0x0800bcd1
 800bc94:	0800bcd1 	.word	0x0800bcd1
 800bc98:	0800bcd1 	.word	0x0800bcd1
 800bc9c:	0800bcd1 	.word	0x0800bcd1
 800bca0:	0800bcd1 	.word	0x0800bcd1
 800bca4:	0800bcd1 	.word	0x0800bcd1
 800bca8:	0800bcd7 	.word	0x0800bcd7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	3304      	adds	r3, #4
 800bcb0:	2101      	movs	r1, #1
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f000 fdf4 	bl	800c8a0 <RCCEx_PLL2_Config>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800bcbc:	e00c      	b.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	3324      	adds	r3, #36	; 0x24
 800bcc2:	2101      	movs	r1, #1
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f000 fe9d 	bl	800ca04 <RCCEx_PLL3_Config>
 800bcca:	4603      	mov	r3, r0
 800bccc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800bcce:	e003      	b.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	75fb      	strb	r3, [r7, #23]
      break;
 800bcd4:	e000      	b.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800bcd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bcd8:	7dfb      	ldrb	r3, [r7, #23]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d109      	bne.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bcde:	4b24      	ldr	r3, [pc, #144]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bce2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bcea:	4921      	ldr	r1, [pc, #132]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bcec:	4313      	orrs	r3, r2
 800bcee:	654b      	str	r3, [r1, #84]	; 0x54
 800bcf0:	e001      	b.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcf2:	7dfb      	ldrb	r3, [r7, #23]
 800bcf4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f003 0302 	and.w	r3, r3, #2
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d03e      	beq.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd06:	2b05      	cmp	r3, #5
 800bd08:	d820      	bhi.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800bd0a:	a201      	add	r2, pc, #4	; (adr r2, 800bd10 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800bd0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd10:	0800bd53 	.word	0x0800bd53
 800bd14:	0800bd29 	.word	0x0800bd29
 800bd18:	0800bd3b 	.word	0x0800bd3b
 800bd1c:	0800bd53 	.word	0x0800bd53
 800bd20:	0800bd53 	.word	0x0800bd53
 800bd24:	0800bd53 	.word	0x0800bd53
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	3304      	adds	r3, #4
 800bd2c:	2101      	movs	r1, #1
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f000 fdb6 	bl	800c8a0 <RCCEx_PLL2_Config>
 800bd34:	4603      	mov	r3, r0
 800bd36:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800bd38:	e00c      	b.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	3324      	adds	r3, #36	; 0x24
 800bd3e:	2101      	movs	r1, #1
 800bd40:	4618      	mov	r0, r3
 800bd42:	f000 fe5f 	bl	800ca04 <RCCEx_PLL3_Config>
 800bd46:	4603      	mov	r3, r0
 800bd48:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800bd4a:	e003      	b.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	75fb      	strb	r3, [r7, #23]
      break;
 800bd50:	e000      	b.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800bd52:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd54:	7dfb      	ldrb	r3, [r7, #23]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d110      	bne.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bd5a:	4b05      	ldr	r3, [pc, #20]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bd5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd5e:	f023 0207 	bic.w	r2, r3, #7
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd66:	4902      	ldr	r1, [pc, #8]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bd68:	4313      	orrs	r3, r2
 800bd6a:	654b      	str	r3, [r1, #84]	; 0x54
 800bd6c:	e008      	b.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800bd6e:	bf00      	nop
 800bd70:	58024400 	.word	0x58024400
 800bd74:	58024800 	.word	0x58024800
 800bd78:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd7c:	7dfb      	ldrb	r3, [r7, #23]
 800bd7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f003 0304 	and.w	r3, r3, #4
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d039      	beq.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd92:	2b05      	cmp	r3, #5
 800bd94:	d820      	bhi.n	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800bd96:	a201      	add	r2, pc, #4	; (adr r2, 800bd9c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800bd98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd9c:	0800bddf 	.word	0x0800bddf
 800bda0:	0800bdb5 	.word	0x0800bdb5
 800bda4:	0800bdc7 	.word	0x0800bdc7
 800bda8:	0800bddf 	.word	0x0800bddf
 800bdac:	0800bddf 	.word	0x0800bddf
 800bdb0:	0800bddf 	.word	0x0800bddf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	3304      	adds	r3, #4
 800bdb8:	2101      	movs	r1, #1
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f000 fd70 	bl	800c8a0 <RCCEx_PLL2_Config>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800bdc4:	e00c      	b.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	3324      	adds	r3, #36	; 0x24
 800bdca:	2101      	movs	r1, #1
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f000 fe19 	bl	800ca04 <RCCEx_PLL3_Config>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800bdd6:	e003      	b.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bdd8:	2301      	movs	r3, #1
 800bdda:	75fb      	strb	r3, [r7, #23]
      break;
 800bddc:	e000      	b.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800bdde:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bde0:	7dfb      	ldrb	r3, [r7, #23]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d10a      	bne.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bde6:	4bb7      	ldr	r3, [pc, #732]	; (800c0c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bde8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdea:	f023 0207 	bic.w	r2, r3, #7
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdf4:	49b3      	ldr	r1, [pc, #716]	; (800c0c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	658b      	str	r3, [r1, #88]	; 0x58
 800bdfa:	e001      	b.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdfc:	7dfb      	ldrb	r3, [r7, #23]
 800bdfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f003 0320 	and.w	r3, r3, #32
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d04b      	beq.n	800bea4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be16:	d02e      	beq.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800be18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be1c:	d828      	bhi.n	800be70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800be1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be22:	d02a      	beq.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800be24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be28:	d822      	bhi.n	800be70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800be2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800be2e:	d026      	beq.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800be30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800be34:	d81c      	bhi.n	800be70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800be36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be3a:	d010      	beq.n	800be5e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800be3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be40:	d816      	bhi.n	800be70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800be42:	2b00      	cmp	r3, #0
 800be44:	d01d      	beq.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800be46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be4a:	d111      	bne.n	800be70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	3304      	adds	r3, #4
 800be50:	2100      	movs	r1, #0
 800be52:	4618      	mov	r0, r3
 800be54:	f000 fd24 	bl	800c8a0 <RCCEx_PLL2_Config>
 800be58:	4603      	mov	r3, r0
 800be5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800be5c:	e012      	b.n	800be84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	3324      	adds	r3, #36	; 0x24
 800be62:	2102      	movs	r1, #2
 800be64:	4618      	mov	r0, r3
 800be66:	f000 fdcd 	bl	800ca04 <RCCEx_PLL3_Config>
 800be6a:	4603      	mov	r3, r0
 800be6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800be6e:	e009      	b.n	800be84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800be70:	2301      	movs	r3, #1
 800be72:	75fb      	strb	r3, [r7, #23]
      break;
 800be74:	e006      	b.n	800be84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800be76:	bf00      	nop
 800be78:	e004      	b.n	800be84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800be7a:	bf00      	nop
 800be7c:	e002      	b.n	800be84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800be7e:	bf00      	nop
 800be80:	e000      	b.n	800be84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800be82:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be84:	7dfb      	ldrb	r3, [r7, #23]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d10a      	bne.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800be8a:	4b8e      	ldr	r3, [pc, #568]	; (800c0c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800be8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be8e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be98:	498a      	ldr	r1, [pc, #552]	; (800c0c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800be9a:	4313      	orrs	r3, r2
 800be9c:	654b      	str	r3, [r1, #84]	; 0x54
 800be9e:	e001      	b.n	800bea4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bea0:	7dfb      	ldrb	r3, [r7, #23]
 800bea2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beac:	2b00      	cmp	r3, #0
 800beae:	d04b      	beq.n	800bf48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800beb6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800beba:	d02e      	beq.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800bebc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bec0:	d828      	bhi.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800bec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bec6:	d02a      	beq.n	800bf1e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800bec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800becc:	d822      	bhi.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800bece:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bed2:	d026      	beq.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800bed4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bed8:	d81c      	bhi.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800beda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bede:	d010      	beq.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800bee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bee4:	d816      	bhi.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d01d      	beq.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800beea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800beee:	d111      	bne.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	3304      	adds	r3, #4
 800bef4:	2100      	movs	r1, #0
 800bef6:	4618      	mov	r0, r3
 800bef8:	f000 fcd2 	bl	800c8a0 <RCCEx_PLL2_Config>
 800befc:	4603      	mov	r3, r0
 800befe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800bf00:	e012      	b.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	3324      	adds	r3, #36	; 0x24
 800bf06:	2102      	movs	r1, #2
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f000 fd7b 	bl	800ca04 <RCCEx_PLL3_Config>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800bf12:	e009      	b.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bf14:	2301      	movs	r3, #1
 800bf16:	75fb      	strb	r3, [r7, #23]
      break;
 800bf18:	e006      	b.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800bf1a:	bf00      	nop
 800bf1c:	e004      	b.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800bf1e:	bf00      	nop
 800bf20:	e002      	b.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800bf22:	bf00      	nop
 800bf24:	e000      	b.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800bf26:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf28:	7dfb      	ldrb	r3, [r7, #23]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d10a      	bne.n	800bf44 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bf2e:	4b65      	ldr	r3, [pc, #404]	; (800c0c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bf30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf32:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bf3c:	4961      	ldr	r1, [pc, #388]	; (800c0c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bf3e:	4313      	orrs	r3, r2
 800bf40:	658b      	str	r3, [r1, #88]	; 0x58
 800bf42:	e001      	b.n	800bf48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf44:	7dfb      	ldrb	r3, [r7, #23]
 800bf46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d04b      	beq.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bf5a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bf5e:	d02e      	beq.n	800bfbe <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800bf60:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bf64:	d828      	bhi.n	800bfb8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800bf66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf6a:	d02a      	beq.n	800bfc2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800bf6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf70:	d822      	bhi.n	800bfb8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800bf72:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bf76:	d026      	beq.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800bf78:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bf7c:	d81c      	bhi.n	800bfb8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800bf7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf82:	d010      	beq.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800bf84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf88:	d816      	bhi.n	800bfb8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d01d      	beq.n	800bfca <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800bf8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf92:	d111      	bne.n	800bfb8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	3304      	adds	r3, #4
 800bf98:	2100      	movs	r1, #0
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f000 fc80 	bl	800c8a0 <RCCEx_PLL2_Config>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800bfa4:	e012      	b.n	800bfcc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	3324      	adds	r3, #36	; 0x24
 800bfaa:	2102      	movs	r1, #2
 800bfac:	4618      	mov	r0, r3
 800bfae:	f000 fd29 	bl	800ca04 <RCCEx_PLL3_Config>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800bfb6:	e009      	b.n	800bfcc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bfb8:	2301      	movs	r3, #1
 800bfba:	75fb      	strb	r3, [r7, #23]
      break;
 800bfbc:	e006      	b.n	800bfcc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800bfbe:	bf00      	nop
 800bfc0:	e004      	b.n	800bfcc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800bfc2:	bf00      	nop
 800bfc4:	e002      	b.n	800bfcc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800bfc6:	bf00      	nop
 800bfc8:	e000      	b.n	800bfcc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800bfca:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bfcc:	7dfb      	ldrb	r3, [r7, #23]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d10a      	bne.n	800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bfd2:	4b3c      	ldr	r3, [pc, #240]	; (800c0c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bfd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bfe0:	4938      	ldr	r1, [pc, #224]	; (800c0c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	658b      	str	r3, [r1, #88]	; 0x58
 800bfe6:	e001      	b.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfe8:	7dfb      	ldrb	r3, [r7, #23]
 800bfea:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f003 0308 	and.w	r3, r3, #8
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d01a      	beq.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c002:	d10a      	bne.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	3324      	adds	r3, #36	; 0x24
 800c008:	2102      	movs	r1, #2
 800c00a:	4618      	mov	r0, r3
 800c00c:	f000 fcfa 	bl	800ca04 <RCCEx_PLL3_Config>
 800c010:	4603      	mov	r3, r0
 800c012:	2b00      	cmp	r3, #0
 800c014:	d001      	beq.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800c016:	2301      	movs	r3, #1
 800c018:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c01a:	4b2a      	ldr	r3, [pc, #168]	; (800c0c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c01c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c01e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c028:	4926      	ldr	r1, [pc, #152]	; (800c0c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c02a:	4313      	orrs	r3, r2
 800c02c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f003 0310 	and.w	r3, r3, #16
 800c036:	2b00      	cmp	r3, #0
 800c038:	d01a      	beq.n	800c070 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c044:	d10a      	bne.n	800c05c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	3324      	adds	r3, #36	; 0x24
 800c04a:	2102      	movs	r1, #2
 800c04c:	4618      	mov	r0, r3
 800c04e:	f000 fcd9 	bl	800ca04 <RCCEx_PLL3_Config>
 800c052:	4603      	mov	r3, r0
 800c054:	2b00      	cmp	r3, #0
 800c056:	d001      	beq.n	800c05c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800c058:	2301      	movs	r3, #1
 800c05a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c05c:	4b19      	ldr	r3, [pc, #100]	; (800c0c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c05e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c060:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c06a:	4916      	ldr	r1, [pc, #88]	; (800c0c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c06c:	4313      	orrs	r3, r2
 800c06e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d036      	beq.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c082:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c086:	d01f      	beq.n	800c0c8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800c088:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c08c:	d817      	bhi.n	800c0be <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d003      	beq.n	800c09a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800c092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c096:	d009      	beq.n	800c0ac <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800c098:	e011      	b.n	800c0be <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	3304      	adds	r3, #4
 800c09e:	2100      	movs	r1, #0
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f000 fbfd 	bl	800c8a0 <RCCEx_PLL2_Config>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c0aa:	e00e      	b.n	800c0ca <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	3324      	adds	r3, #36	; 0x24
 800c0b0:	2102      	movs	r1, #2
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f000 fca6 	bl	800ca04 <RCCEx_PLL3_Config>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c0bc:	e005      	b.n	800c0ca <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	75fb      	strb	r3, [r7, #23]
      break;
 800c0c2:	e002      	b.n	800c0ca <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800c0c4:	58024400 	.word	0x58024400
      break;
 800c0c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c0ca:	7dfb      	ldrb	r3, [r7, #23]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d10a      	bne.n	800c0e6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c0d0:	4b93      	ldr	r3, [pc, #588]	; (800c320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c0d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c0de:	4990      	ldr	r1, [pc, #576]	; (800c320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c0e0:	4313      	orrs	r3, r2
 800c0e2:	658b      	str	r3, [r1, #88]	; 0x58
 800c0e4:	e001      	b.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0e6:	7dfb      	ldrb	r3, [r7, #23]
 800c0e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d033      	beq.n	800c15e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c100:	d01c      	beq.n	800c13c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800c102:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c106:	d816      	bhi.n	800c136 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800c108:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c10c:	d003      	beq.n	800c116 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800c10e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c112:	d007      	beq.n	800c124 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800c114:	e00f      	b.n	800c136 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c116:	4b82      	ldr	r3, [pc, #520]	; (800c320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c11a:	4a81      	ldr	r2, [pc, #516]	; (800c320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c11c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c120:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800c122:	e00c      	b.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	3324      	adds	r3, #36	; 0x24
 800c128:	2101      	movs	r1, #1
 800c12a:	4618      	mov	r0, r3
 800c12c:	f000 fc6a 	bl	800ca04 <RCCEx_PLL3_Config>
 800c130:	4603      	mov	r3, r0
 800c132:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800c134:	e003      	b.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c136:	2301      	movs	r3, #1
 800c138:	75fb      	strb	r3, [r7, #23]
      break;
 800c13a:	e000      	b.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800c13c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c13e:	7dfb      	ldrb	r3, [r7, #23]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d10a      	bne.n	800c15a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c144:	4b76      	ldr	r3, [pc, #472]	; (800c320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c148:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c152:	4973      	ldr	r1, [pc, #460]	; (800c320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c154:	4313      	orrs	r3, r2
 800c156:	654b      	str	r3, [r1, #84]	; 0x54
 800c158:	e001      	b.n	800c15e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c15a:	7dfb      	ldrb	r3, [r7, #23]
 800c15c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c166:	2b00      	cmp	r3, #0
 800c168:	d029      	beq.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d003      	beq.n	800c17a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800c172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c176:	d007      	beq.n	800c188 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800c178:	e00f      	b.n	800c19a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c17a:	4b69      	ldr	r3, [pc, #420]	; (800c320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c17e:	4a68      	ldr	r2, [pc, #416]	; (800c320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c184:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c186:	e00b      	b.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	3304      	adds	r3, #4
 800c18c:	2102      	movs	r1, #2
 800c18e:	4618      	mov	r0, r3
 800c190:	f000 fb86 	bl	800c8a0 <RCCEx_PLL2_Config>
 800c194:	4603      	mov	r3, r0
 800c196:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c198:	e002      	b.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800c19a:	2301      	movs	r3, #1
 800c19c:	75fb      	strb	r3, [r7, #23]
      break;
 800c19e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c1a0:	7dfb      	ldrb	r3, [r7, #23]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d109      	bne.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c1a6:	4b5e      	ldr	r3, [pc, #376]	; (800c320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c1a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1b2:	495b      	ldr	r1, [pc, #364]	; (800c320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c1b4:	4313      	orrs	r3, r2
 800c1b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c1b8:	e001      	b.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1ba:	7dfb      	ldrb	r3, [r7, #23]
 800c1bc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d00a      	beq.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	3324      	adds	r3, #36	; 0x24
 800c1ce:	2102      	movs	r1, #2
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f000 fc17 	bl	800ca04 <RCCEx_PLL3_Config>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d001      	beq.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800c1dc:	2301      	movs	r3, #1
 800c1de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d030      	beq.n	800c24e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c1f4:	d017      	beq.n	800c226 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800c1f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c1fa:	d811      	bhi.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800c1fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c200:	d013      	beq.n	800c22a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800c202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c206:	d80b      	bhi.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d010      	beq.n	800c22e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800c20c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c210:	d106      	bne.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c212:	4b43      	ldr	r3, [pc, #268]	; (800c320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c216:	4a42      	ldr	r2, [pc, #264]	; (800c320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c21c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800c21e:	e007      	b.n	800c230 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c220:	2301      	movs	r3, #1
 800c222:	75fb      	strb	r3, [r7, #23]
      break;
 800c224:	e004      	b.n	800c230 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800c226:	bf00      	nop
 800c228:	e002      	b.n	800c230 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800c22a:	bf00      	nop
 800c22c:	e000      	b.n	800c230 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800c22e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c230:	7dfb      	ldrb	r3, [r7, #23]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d109      	bne.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c236:	4b3a      	ldr	r3, [pc, #232]	; (800c320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c23a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c242:	4937      	ldr	r1, [pc, #220]	; (800c320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c244:	4313      	orrs	r3, r2
 800c246:	654b      	str	r3, [r1, #84]	; 0x54
 800c248:	e001      	b.n	800c24e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c24a:	7dfb      	ldrb	r3, [r7, #23]
 800c24c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c256:	2b00      	cmp	r3, #0
 800c258:	d008      	beq.n	800c26c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c25a:	4b31      	ldr	r3, [pc, #196]	; (800c320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c25c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c25e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c266:	492e      	ldr	r1, [pc, #184]	; (800c320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c268:	4313      	orrs	r3, r2
 800c26a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c274:	2b00      	cmp	r3, #0
 800c276:	d009      	beq.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c278:	4b29      	ldr	r3, [pc, #164]	; (800c320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c27a:	691b      	ldr	r3, [r3, #16]
 800c27c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c286:	4926      	ldr	r1, [pc, #152]	; (800c320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c288:	4313      	orrs	r3, r2
 800c28a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c294:	2b00      	cmp	r3, #0
 800c296:	d008      	beq.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c298:	4b21      	ldr	r3, [pc, #132]	; (800c320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c29a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c29c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2a4:	491e      	ldr	r1, [pc, #120]	; (800c320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d00d      	beq.n	800c2d2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c2b6:	4b1a      	ldr	r3, [pc, #104]	; (800c320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c2b8:	691b      	ldr	r3, [r3, #16]
 800c2ba:	4a19      	ldr	r2, [pc, #100]	; (800c320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c2bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c2c0:	6113      	str	r3, [r2, #16]
 800c2c2:	4b17      	ldr	r3, [pc, #92]	; (800c320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c2c4:	691a      	ldr	r2, [r3, #16]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c2cc:	4914      	ldr	r1, [pc, #80]	; (800c320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	da08      	bge.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c2da:	4b11      	ldr	r3, [pc, #68]	; (800c320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c2dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2e6:	490e      	ldr	r1, [pc, #56]	; (800c320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d009      	beq.n	800c30c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c2f8:	4b09      	ldr	r3, [pc, #36]	; (800c320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c2fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c306:	4906      	ldr	r1, [pc, #24]	; (800c320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c308:	4313      	orrs	r3, r2
 800c30a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800c30c:	7dbb      	ldrb	r3, [r7, #22]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d101      	bne.n	800c316 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800c312:	2300      	movs	r3, #0
 800c314:	e000      	b.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800c316:	2301      	movs	r3, #1
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3718      	adds	r7, #24
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	58024400 	.word	0x58024400

0800c324 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c328:	f7ff f860 	bl	800b3ec <HAL_RCC_GetHCLKFreq>
 800c32c:	4602      	mov	r2, r0
 800c32e:	4b06      	ldr	r3, [pc, #24]	; (800c348 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c330:	6a1b      	ldr	r3, [r3, #32]
 800c332:	091b      	lsrs	r3, r3, #4
 800c334:	f003 0307 	and.w	r3, r3, #7
 800c338:	4904      	ldr	r1, [pc, #16]	; (800c34c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c33a:	5ccb      	ldrb	r3, [r1, r3]
 800c33c:	f003 031f 	and.w	r3, r3, #31
 800c340:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c344:	4618      	mov	r0, r3
 800c346:	bd80      	pop	{r7, pc}
 800c348:	58024400 	.word	0x58024400
 800c34c:	08013a94 	.word	0x08013a94

0800c350 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c350:	b480      	push	{r7}
 800c352:	b089      	sub	sp, #36	; 0x24
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c358:	4ba1      	ldr	r3, [pc, #644]	; (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c35a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c35c:	f003 0303 	and.w	r3, r3, #3
 800c360:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c362:	4b9f      	ldr	r3, [pc, #636]	; (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c366:	0b1b      	lsrs	r3, r3, #12
 800c368:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c36c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c36e:	4b9c      	ldr	r3, [pc, #624]	; (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c372:	091b      	lsrs	r3, r3, #4
 800c374:	f003 0301 	and.w	r3, r3, #1
 800c378:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c37a:	4b99      	ldr	r3, [pc, #612]	; (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c37c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c37e:	08db      	lsrs	r3, r3, #3
 800c380:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c384:	693a      	ldr	r2, [r7, #16]
 800c386:	fb02 f303 	mul.w	r3, r2, r3
 800c38a:	ee07 3a90 	vmov	s15, r3
 800c38e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c392:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	f000 8111 	beq.w	800c5c0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c39e:	69bb      	ldr	r3, [r7, #24]
 800c3a0:	2b02      	cmp	r3, #2
 800c3a2:	f000 8083 	beq.w	800c4ac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c3a6:	69bb      	ldr	r3, [r7, #24]
 800c3a8:	2b02      	cmp	r3, #2
 800c3aa:	f200 80a1 	bhi.w	800c4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c3ae:	69bb      	ldr	r3, [r7, #24]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d003      	beq.n	800c3bc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c3b4:	69bb      	ldr	r3, [r7, #24]
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	d056      	beq.n	800c468 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c3ba:	e099      	b.n	800c4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c3bc:	4b88      	ldr	r3, [pc, #544]	; (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f003 0320 	and.w	r3, r3, #32
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d02d      	beq.n	800c424 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c3c8:	4b85      	ldr	r3, [pc, #532]	; (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	08db      	lsrs	r3, r3, #3
 800c3ce:	f003 0303 	and.w	r3, r3, #3
 800c3d2:	4a84      	ldr	r2, [pc, #528]	; (800c5e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c3d4:	fa22 f303 	lsr.w	r3, r2, r3
 800c3d8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	ee07 3a90 	vmov	s15, r3
 800c3e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	ee07 3a90 	vmov	s15, r3
 800c3ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3f2:	4b7b      	ldr	r3, [pc, #492]	; (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3fa:	ee07 3a90 	vmov	s15, r3
 800c3fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c402:	ed97 6a03 	vldr	s12, [r7, #12]
 800c406:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c40a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c40e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c41a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c41e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c422:	e087      	b.n	800c534 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	ee07 3a90 	vmov	s15, r3
 800c42a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c42e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c5ec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c436:	4b6a      	ldr	r3, [pc, #424]	; (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c43a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c43e:	ee07 3a90 	vmov	s15, r3
 800c442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c446:	ed97 6a03 	vldr	s12, [r7, #12]
 800c44a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c44e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c456:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c45a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c45e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c462:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c466:	e065      	b.n	800c534 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	ee07 3a90 	vmov	s15, r3
 800c46e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c472:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c47a:	4b59      	ldr	r3, [pc, #356]	; (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c47e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c482:	ee07 3a90 	vmov	s15, r3
 800c486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c48a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c48e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c49a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c49e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c4aa:	e043      	b.n	800c534 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	ee07 3a90 	vmov	s15, r3
 800c4b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c5f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c4ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4be:	4b48      	ldr	r3, [pc, #288]	; (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4c6:	ee07 3a90 	vmov	s15, r3
 800c4ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4d2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c4d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c4ee:	e021      	b.n	800c534 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	ee07 3a90 	vmov	s15, r3
 800c4f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c4fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c502:	4b37      	ldr	r3, [pc, #220]	; (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c50a:	ee07 3a90 	vmov	s15, r3
 800c50e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c512:	ed97 6a03 	vldr	s12, [r7, #12]
 800c516:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c51a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c51e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c52a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c52e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c532:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c534:	4b2a      	ldr	r3, [pc, #168]	; (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c538:	0a5b      	lsrs	r3, r3, #9
 800c53a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c53e:	ee07 3a90 	vmov	s15, r3
 800c542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c546:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c54a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c54e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c552:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c55a:	ee17 2a90 	vmov	r2, s15
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c562:	4b1f      	ldr	r3, [pc, #124]	; (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c566:	0c1b      	lsrs	r3, r3, #16
 800c568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c56c:	ee07 3a90 	vmov	s15, r3
 800c570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c574:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c578:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c57c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c580:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c584:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c588:	ee17 2a90 	vmov	r2, s15
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c590:	4b13      	ldr	r3, [pc, #76]	; (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c594:	0e1b      	lsrs	r3, r3, #24
 800c596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c59a:	ee07 3a90 	vmov	s15, r3
 800c59e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c5a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c5aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800c5ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5b6:	ee17 2a90 	vmov	r2, s15
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c5be:	e008      	b.n	800c5d2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	609a      	str	r2, [r3, #8]
}
 800c5d2:	bf00      	nop
 800c5d4:	3724      	adds	r7, #36	; 0x24
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5dc:	4770      	bx	lr
 800c5de:	bf00      	nop
 800c5e0:	58024400 	.word	0x58024400
 800c5e4:	03d09000 	.word	0x03d09000
 800c5e8:	46000000 	.word	0x46000000
 800c5ec:	4c742400 	.word	0x4c742400
 800c5f0:	4a742400 	.word	0x4a742400
 800c5f4:	4bbebc20 	.word	0x4bbebc20

0800c5f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b089      	sub	sp, #36	; 0x24
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c600:	4ba1      	ldr	r3, [pc, #644]	; (800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c604:	f003 0303 	and.w	r3, r3, #3
 800c608:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c60a:	4b9f      	ldr	r3, [pc, #636]	; (800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c60c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c60e:	0d1b      	lsrs	r3, r3, #20
 800c610:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c614:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c616:	4b9c      	ldr	r3, [pc, #624]	; (800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c61a:	0a1b      	lsrs	r3, r3, #8
 800c61c:	f003 0301 	and.w	r3, r3, #1
 800c620:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c622:	4b99      	ldr	r3, [pc, #612]	; (800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c626:	08db      	lsrs	r3, r3, #3
 800c628:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c62c:	693a      	ldr	r2, [r7, #16]
 800c62e:	fb02 f303 	mul.w	r3, r2, r3
 800c632:	ee07 3a90 	vmov	s15, r3
 800c636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c63a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	2b00      	cmp	r3, #0
 800c642:	f000 8111 	beq.w	800c868 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c646:	69bb      	ldr	r3, [r7, #24]
 800c648:	2b02      	cmp	r3, #2
 800c64a:	f000 8083 	beq.w	800c754 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c64e:	69bb      	ldr	r3, [r7, #24]
 800c650:	2b02      	cmp	r3, #2
 800c652:	f200 80a1 	bhi.w	800c798 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c656:	69bb      	ldr	r3, [r7, #24]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d003      	beq.n	800c664 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c65c:	69bb      	ldr	r3, [r7, #24]
 800c65e:	2b01      	cmp	r3, #1
 800c660:	d056      	beq.n	800c710 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c662:	e099      	b.n	800c798 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c664:	4b88      	ldr	r3, [pc, #544]	; (800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f003 0320 	and.w	r3, r3, #32
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d02d      	beq.n	800c6cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c670:	4b85      	ldr	r3, [pc, #532]	; (800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	08db      	lsrs	r3, r3, #3
 800c676:	f003 0303 	and.w	r3, r3, #3
 800c67a:	4a84      	ldr	r2, [pc, #528]	; (800c88c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c67c:	fa22 f303 	lsr.w	r3, r2, r3
 800c680:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	ee07 3a90 	vmov	s15, r3
 800c688:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	ee07 3a90 	vmov	s15, r3
 800c692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c69a:	4b7b      	ldr	r3, [pc, #492]	; (800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c69c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c69e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6a2:	ee07 3a90 	vmov	s15, r3
 800c6a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c890 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c6b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c6ca:	e087      	b.n	800c7dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	ee07 3a90 	vmov	s15, r3
 800c6d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c894 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c6da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6de:	4b6a      	ldr	r3, [pc, #424]	; (800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6e6:	ee07 3a90 	vmov	s15, r3
 800c6ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c890 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c6f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c70a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c70e:	e065      	b.n	800c7dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	ee07 3a90 	vmov	s15, r3
 800c716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c71a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c898 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c71e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c722:	4b59      	ldr	r3, [pc, #356]	; (800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c72a:	ee07 3a90 	vmov	s15, r3
 800c72e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c732:	ed97 6a03 	vldr	s12, [r7, #12]
 800c736:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c890 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c73a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c73e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c74a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c74e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c752:	e043      	b.n	800c7dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	ee07 3a90 	vmov	s15, r3
 800c75a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c75e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c89c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c766:	4b48      	ldr	r3, [pc, #288]	; (800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c76a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c76e:	ee07 3a90 	vmov	s15, r3
 800c772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c776:	ed97 6a03 	vldr	s12, [r7, #12]
 800c77a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c890 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c77e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c78a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c78e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c792:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c796:	e021      	b.n	800c7dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	ee07 3a90 	vmov	s15, r3
 800c79e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c898 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c7a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7aa:	4b37      	ldr	r3, [pc, #220]	; (800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7b2:	ee07 3a90 	vmov	s15, r3
 800c7b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7be:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c890 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c7c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c7da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c7dc:	4b2a      	ldr	r3, [pc, #168]	; (800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7e0:	0a5b      	lsrs	r3, r3, #9
 800c7e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7e6:	ee07 3a90 	vmov	s15, r3
 800c7ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c7f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c7f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c7fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c802:	ee17 2a90 	vmov	r2, s15
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c80a:	4b1f      	ldr	r3, [pc, #124]	; (800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c80e:	0c1b      	lsrs	r3, r3, #16
 800c810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c814:	ee07 3a90 	vmov	s15, r3
 800c818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c81c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c820:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c824:	edd7 6a07 	vldr	s13, [r7, #28]
 800c828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c82c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c830:	ee17 2a90 	vmov	r2, s15
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c838:	4b13      	ldr	r3, [pc, #76]	; (800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c83a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c83c:	0e1b      	lsrs	r3, r3, #24
 800c83e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c842:	ee07 3a90 	vmov	s15, r3
 800c846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c84a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c84e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c852:	edd7 6a07 	vldr	s13, [r7, #28]
 800c856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c85a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c85e:	ee17 2a90 	vmov	r2, s15
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c866:	e008      	b.n	800c87a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2200      	movs	r2, #0
 800c86c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2200      	movs	r2, #0
 800c872:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2200      	movs	r2, #0
 800c878:	609a      	str	r2, [r3, #8]
}
 800c87a:	bf00      	nop
 800c87c:	3724      	adds	r7, #36	; 0x24
 800c87e:	46bd      	mov	sp, r7
 800c880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c884:	4770      	bx	lr
 800c886:	bf00      	nop
 800c888:	58024400 	.word	0x58024400
 800c88c:	03d09000 	.word	0x03d09000
 800c890:	46000000 	.word	0x46000000
 800c894:	4c742400 	.word	0x4c742400
 800c898:	4a742400 	.word	0x4a742400
 800c89c:	4bbebc20 	.word	0x4bbebc20

0800c8a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b084      	sub	sp, #16
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c8ae:	4b53      	ldr	r3, [pc, #332]	; (800c9fc <RCCEx_PLL2_Config+0x15c>)
 800c8b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8b2:	f003 0303 	and.w	r3, r3, #3
 800c8b6:	2b03      	cmp	r3, #3
 800c8b8:	d101      	bne.n	800c8be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	e099      	b.n	800c9f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c8be:	4b4f      	ldr	r3, [pc, #316]	; (800c9fc <RCCEx_PLL2_Config+0x15c>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4a4e      	ldr	r2, [pc, #312]	; (800c9fc <RCCEx_PLL2_Config+0x15c>)
 800c8c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c8c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c8ca:	f7f8 fa3d 	bl	8004d48 <HAL_GetTick>
 800c8ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c8d0:	e008      	b.n	800c8e4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c8d2:	f7f8 fa39 	bl	8004d48 <HAL_GetTick>
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	1ad3      	subs	r3, r2, r3
 800c8dc:	2b02      	cmp	r3, #2
 800c8de:	d901      	bls.n	800c8e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c8e0:	2303      	movs	r3, #3
 800c8e2:	e086      	b.n	800c9f2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c8e4:	4b45      	ldr	r3, [pc, #276]	; (800c9fc <RCCEx_PLL2_Config+0x15c>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d1f0      	bne.n	800c8d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c8f0:	4b42      	ldr	r3, [pc, #264]	; (800c9fc <RCCEx_PLL2_Config+0x15c>)
 800c8f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	031b      	lsls	r3, r3, #12
 800c8fe:	493f      	ldr	r1, [pc, #252]	; (800c9fc <RCCEx_PLL2_Config+0x15c>)
 800c900:	4313      	orrs	r3, r2
 800c902:	628b      	str	r3, [r1, #40]	; 0x28
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	685b      	ldr	r3, [r3, #4]
 800c908:	3b01      	subs	r3, #1
 800c90a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	689b      	ldr	r3, [r3, #8]
 800c912:	3b01      	subs	r3, #1
 800c914:	025b      	lsls	r3, r3, #9
 800c916:	b29b      	uxth	r3, r3
 800c918:	431a      	orrs	r2, r3
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	3b01      	subs	r3, #1
 800c920:	041b      	lsls	r3, r3, #16
 800c922:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c926:	431a      	orrs	r2, r3
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	691b      	ldr	r3, [r3, #16]
 800c92c:	3b01      	subs	r3, #1
 800c92e:	061b      	lsls	r3, r3, #24
 800c930:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c934:	4931      	ldr	r1, [pc, #196]	; (800c9fc <RCCEx_PLL2_Config+0x15c>)
 800c936:	4313      	orrs	r3, r2
 800c938:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c93a:	4b30      	ldr	r3, [pc, #192]	; (800c9fc <RCCEx_PLL2_Config+0x15c>)
 800c93c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c93e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	695b      	ldr	r3, [r3, #20]
 800c946:	492d      	ldr	r1, [pc, #180]	; (800c9fc <RCCEx_PLL2_Config+0x15c>)
 800c948:	4313      	orrs	r3, r2
 800c94a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c94c:	4b2b      	ldr	r3, [pc, #172]	; (800c9fc <RCCEx_PLL2_Config+0x15c>)
 800c94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c950:	f023 0220 	bic.w	r2, r3, #32
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	699b      	ldr	r3, [r3, #24]
 800c958:	4928      	ldr	r1, [pc, #160]	; (800c9fc <RCCEx_PLL2_Config+0x15c>)
 800c95a:	4313      	orrs	r3, r2
 800c95c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c95e:	4b27      	ldr	r3, [pc, #156]	; (800c9fc <RCCEx_PLL2_Config+0x15c>)
 800c960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c962:	4a26      	ldr	r2, [pc, #152]	; (800c9fc <RCCEx_PLL2_Config+0x15c>)
 800c964:	f023 0310 	bic.w	r3, r3, #16
 800c968:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c96a:	4b24      	ldr	r3, [pc, #144]	; (800c9fc <RCCEx_PLL2_Config+0x15c>)
 800c96c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c96e:	4b24      	ldr	r3, [pc, #144]	; (800ca00 <RCCEx_PLL2_Config+0x160>)
 800c970:	4013      	ands	r3, r2
 800c972:	687a      	ldr	r2, [r7, #4]
 800c974:	69d2      	ldr	r2, [r2, #28]
 800c976:	00d2      	lsls	r2, r2, #3
 800c978:	4920      	ldr	r1, [pc, #128]	; (800c9fc <RCCEx_PLL2_Config+0x15c>)
 800c97a:	4313      	orrs	r3, r2
 800c97c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c97e:	4b1f      	ldr	r3, [pc, #124]	; (800c9fc <RCCEx_PLL2_Config+0x15c>)
 800c980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c982:	4a1e      	ldr	r2, [pc, #120]	; (800c9fc <RCCEx_PLL2_Config+0x15c>)
 800c984:	f043 0310 	orr.w	r3, r3, #16
 800c988:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d106      	bne.n	800c99e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c990:	4b1a      	ldr	r3, [pc, #104]	; (800c9fc <RCCEx_PLL2_Config+0x15c>)
 800c992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c994:	4a19      	ldr	r2, [pc, #100]	; (800c9fc <RCCEx_PLL2_Config+0x15c>)
 800c996:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c99a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c99c:	e00f      	b.n	800c9be <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	d106      	bne.n	800c9b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c9a4:	4b15      	ldr	r3, [pc, #84]	; (800c9fc <RCCEx_PLL2_Config+0x15c>)
 800c9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9a8:	4a14      	ldr	r2, [pc, #80]	; (800c9fc <RCCEx_PLL2_Config+0x15c>)
 800c9aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c9ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c9b0:	e005      	b.n	800c9be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c9b2:	4b12      	ldr	r3, [pc, #72]	; (800c9fc <RCCEx_PLL2_Config+0x15c>)
 800c9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9b6:	4a11      	ldr	r2, [pc, #68]	; (800c9fc <RCCEx_PLL2_Config+0x15c>)
 800c9b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c9bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c9be:	4b0f      	ldr	r3, [pc, #60]	; (800c9fc <RCCEx_PLL2_Config+0x15c>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	4a0e      	ldr	r2, [pc, #56]	; (800c9fc <RCCEx_PLL2_Config+0x15c>)
 800c9c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c9c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c9ca:	f7f8 f9bd 	bl	8004d48 <HAL_GetTick>
 800c9ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c9d0:	e008      	b.n	800c9e4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c9d2:	f7f8 f9b9 	bl	8004d48 <HAL_GetTick>
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	1ad3      	subs	r3, r2, r3
 800c9dc:	2b02      	cmp	r3, #2
 800c9de:	d901      	bls.n	800c9e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c9e0:	2303      	movs	r3, #3
 800c9e2:	e006      	b.n	800c9f2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c9e4:	4b05      	ldr	r3, [pc, #20]	; (800c9fc <RCCEx_PLL2_Config+0x15c>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d0f0      	beq.n	800c9d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c9f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3710      	adds	r7, #16
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}
 800c9fa:	bf00      	nop
 800c9fc:	58024400 	.word	0x58024400
 800ca00:	ffff0007 	.word	0xffff0007

0800ca04 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ca12:	4b53      	ldr	r3, [pc, #332]	; (800cb60 <RCCEx_PLL3_Config+0x15c>)
 800ca14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca16:	f003 0303 	and.w	r3, r3, #3
 800ca1a:	2b03      	cmp	r3, #3
 800ca1c:	d101      	bne.n	800ca22 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ca1e:	2301      	movs	r3, #1
 800ca20:	e099      	b.n	800cb56 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ca22:	4b4f      	ldr	r3, [pc, #316]	; (800cb60 <RCCEx_PLL3_Config+0x15c>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	4a4e      	ldr	r2, [pc, #312]	; (800cb60 <RCCEx_PLL3_Config+0x15c>)
 800ca28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca2e:	f7f8 f98b 	bl	8004d48 <HAL_GetTick>
 800ca32:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ca34:	e008      	b.n	800ca48 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ca36:	f7f8 f987 	bl	8004d48 <HAL_GetTick>
 800ca3a:	4602      	mov	r2, r0
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	1ad3      	subs	r3, r2, r3
 800ca40:	2b02      	cmp	r3, #2
 800ca42:	d901      	bls.n	800ca48 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ca44:	2303      	movs	r3, #3
 800ca46:	e086      	b.n	800cb56 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ca48:	4b45      	ldr	r3, [pc, #276]	; (800cb60 <RCCEx_PLL3_Config+0x15c>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d1f0      	bne.n	800ca36 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ca54:	4b42      	ldr	r3, [pc, #264]	; (800cb60 <RCCEx_PLL3_Config+0x15c>)
 800ca56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca58:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	051b      	lsls	r3, r3, #20
 800ca62:	493f      	ldr	r1, [pc, #252]	; (800cb60 <RCCEx_PLL3_Config+0x15c>)
 800ca64:	4313      	orrs	r3, r2
 800ca66:	628b      	str	r3, [r1, #40]	; 0x28
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	3b01      	subs	r3, #1
 800ca6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	689b      	ldr	r3, [r3, #8]
 800ca76:	3b01      	subs	r3, #1
 800ca78:	025b      	lsls	r3, r3, #9
 800ca7a:	b29b      	uxth	r3, r3
 800ca7c:	431a      	orrs	r2, r3
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	68db      	ldr	r3, [r3, #12]
 800ca82:	3b01      	subs	r3, #1
 800ca84:	041b      	lsls	r3, r3, #16
 800ca86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ca8a:	431a      	orrs	r2, r3
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	691b      	ldr	r3, [r3, #16]
 800ca90:	3b01      	subs	r3, #1
 800ca92:	061b      	lsls	r3, r3, #24
 800ca94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ca98:	4931      	ldr	r1, [pc, #196]	; (800cb60 <RCCEx_PLL3_Config+0x15c>)
 800ca9a:	4313      	orrs	r3, r2
 800ca9c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ca9e:	4b30      	ldr	r3, [pc, #192]	; (800cb60 <RCCEx_PLL3_Config+0x15c>)
 800caa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caa2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	695b      	ldr	r3, [r3, #20]
 800caaa:	492d      	ldr	r1, [pc, #180]	; (800cb60 <RCCEx_PLL3_Config+0x15c>)
 800caac:	4313      	orrs	r3, r2
 800caae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cab0:	4b2b      	ldr	r3, [pc, #172]	; (800cb60 <RCCEx_PLL3_Config+0x15c>)
 800cab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cab4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	699b      	ldr	r3, [r3, #24]
 800cabc:	4928      	ldr	r1, [pc, #160]	; (800cb60 <RCCEx_PLL3_Config+0x15c>)
 800cabe:	4313      	orrs	r3, r2
 800cac0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cac2:	4b27      	ldr	r3, [pc, #156]	; (800cb60 <RCCEx_PLL3_Config+0x15c>)
 800cac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cac6:	4a26      	ldr	r2, [pc, #152]	; (800cb60 <RCCEx_PLL3_Config+0x15c>)
 800cac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cacc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cace:	4b24      	ldr	r3, [pc, #144]	; (800cb60 <RCCEx_PLL3_Config+0x15c>)
 800cad0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cad2:	4b24      	ldr	r3, [pc, #144]	; (800cb64 <RCCEx_PLL3_Config+0x160>)
 800cad4:	4013      	ands	r3, r2
 800cad6:	687a      	ldr	r2, [r7, #4]
 800cad8:	69d2      	ldr	r2, [r2, #28]
 800cada:	00d2      	lsls	r2, r2, #3
 800cadc:	4920      	ldr	r1, [pc, #128]	; (800cb60 <RCCEx_PLL3_Config+0x15c>)
 800cade:	4313      	orrs	r3, r2
 800cae0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cae2:	4b1f      	ldr	r3, [pc, #124]	; (800cb60 <RCCEx_PLL3_Config+0x15c>)
 800cae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae6:	4a1e      	ldr	r2, [pc, #120]	; (800cb60 <RCCEx_PLL3_Config+0x15c>)
 800cae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800caec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d106      	bne.n	800cb02 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800caf4:	4b1a      	ldr	r3, [pc, #104]	; (800cb60 <RCCEx_PLL3_Config+0x15c>)
 800caf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caf8:	4a19      	ldr	r2, [pc, #100]	; (800cb60 <RCCEx_PLL3_Config+0x15c>)
 800cafa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cafe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cb00:	e00f      	b.n	800cb22 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	d106      	bne.n	800cb16 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cb08:	4b15      	ldr	r3, [pc, #84]	; (800cb60 <RCCEx_PLL3_Config+0x15c>)
 800cb0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb0c:	4a14      	ldr	r2, [pc, #80]	; (800cb60 <RCCEx_PLL3_Config+0x15c>)
 800cb0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cb12:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cb14:	e005      	b.n	800cb22 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cb16:	4b12      	ldr	r3, [pc, #72]	; (800cb60 <RCCEx_PLL3_Config+0x15c>)
 800cb18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb1a:	4a11      	ldr	r2, [pc, #68]	; (800cb60 <RCCEx_PLL3_Config+0x15c>)
 800cb1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cb20:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cb22:	4b0f      	ldr	r3, [pc, #60]	; (800cb60 <RCCEx_PLL3_Config+0x15c>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	4a0e      	ldr	r2, [pc, #56]	; (800cb60 <RCCEx_PLL3_Config+0x15c>)
 800cb28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb2e:	f7f8 f90b 	bl	8004d48 <HAL_GetTick>
 800cb32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cb34:	e008      	b.n	800cb48 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cb36:	f7f8 f907 	bl	8004d48 <HAL_GetTick>
 800cb3a:	4602      	mov	r2, r0
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	1ad3      	subs	r3, r2, r3
 800cb40:	2b02      	cmp	r3, #2
 800cb42:	d901      	bls.n	800cb48 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cb44:	2303      	movs	r3, #3
 800cb46:	e006      	b.n	800cb56 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cb48:	4b05      	ldr	r3, [pc, #20]	; (800cb60 <RCCEx_PLL3_Config+0x15c>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d0f0      	beq.n	800cb36 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cb54:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3710      	adds	r7, #16
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}
 800cb5e:	bf00      	nop
 800cb60:	58024400 	.word	0x58024400
 800cb64:	ffff0007 	.word	0xffff0007

0800cb68 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b084      	sub	sp, #16
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800cb70:	2300      	movs	r3, #0
 800cb72:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d101      	bne.n	800cb7e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	e0eb      	b.n	800cd56 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2200      	movs	r2, #0
 800cb82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4a75      	ldr	r2, [pc, #468]	; (800cd60 <HAL_SPI_Init+0x1f8>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d00f      	beq.n	800cbae <HAL_SPI_Init+0x46>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	4a74      	ldr	r2, [pc, #464]	; (800cd64 <HAL_SPI_Init+0x1fc>)
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d00a      	beq.n	800cbae <HAL_SPI_Init+0x46>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4a72      	ldr	r2, [pc, #456]	; (800cd68 <HAL_SPI_Init+0x200>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d005      	beq.n	800cbae <HAL_SPI_Init+0x46>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	68db      	ldr	r3, [r3, #12]
 800cba6:	2b0f      	cmp	r3, #15
 800cba8:	d901      	bls.n	800cbae <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	e0d3      	b.n	800cd56 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f001 f87a 	bl	800dca8 <SPI_GetPacketSize>
 800cbb4:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	4a69      	ldr	r2, [pc, #420]	; (800cd60 <HAL_SPI_Init+0x1f8>)
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d00c      	beq.n	800cbda <HAL_SPI_Init+0x72>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	4a67      	ldr	r2, [pc, #412]	; (800cd64 <HAL_SPI_Init+0x1fc>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d007      	beq.n	800cbda <HAL_SPI_Init+0x72>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4a66      	ldr	r2, [pc, #408]	; (800cd68 <HAL_SPI_Init+0x200>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d002      	beq.n	800cbda <HAL_SPI_Init+0x72>
 800cbd4:	68bb      	ldr	r3, [r7, #8]
 800cbd6:	2b08      	cmp	r3, #8
 800cbd8:	d811      	bhi.n	800cbfe <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cbde:	4a60      	ldr	r2, [pc, #384]	; (800cd60 <HAL_SPI_Init+0x1f8>)
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d009      	beq.n	800cbf8 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	4a5e      	ldr	r2, [pc, #376]	; (800cd64 <HAL_SPI_Init+0x1fc>)
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d004      	beq.n	800cbf8 <HAL_SPI_Init+0x90>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	4a5d      	ldr	r2, [pc, #372]	; (800cd68 <HAL_SPI_Init+0x200>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d104      	bne.n	800cc02 <HAL_SPI_Init+0x9a>
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	2b10      	cmp	r3, #16
 800cbfc:	d901      	bls.n	800cc02 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800cbfe:	2301      	movs	r3, #1
 800cc00:	e0a9      	b.n	800cd56 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cc08:	b2db      	uxtb	r3, r3
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d106      	bne.n	800cc1c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2200      	movs	r2, #0
 800cc12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f7f6 fe8e 	bl	8003938 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2202      	movs	r2, #2
 800cc20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	681a      	ldr	r2, [r3, #0]
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f022 0201 	bic.w	r2, r2, #1
 800cc32:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	699b      	ldr	r3, [r3, #24]
 800cc38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cc3c:	d119      	bne.n	800cc72 <HAL_SPI_Init+0x10a>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cc46:	d103      	bne.n	800cc50 <HAL_SPI_Init+0xe8>
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d008      	beq.n	800cc62 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d10c      	bne.n	800cc72 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc60:	d107      	bne.n	800cc72 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	681a      	ldr	r2, [r3, #0]
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cc70:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	69da      	ldr	r2, [r3, #28]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc7a:	431a      	orrs	r2, r3
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	431a      	orrs	r2, r3
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc84:	ea42 0103 	orr.w	r1, r2, r3
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	68da      	ldr	r2, [r3, #12]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	430a      	orrs	r2, r1
 800cc92:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc9c:	431a      	orrs	r2, r3
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cca2:	431a      	orrs	r2, r3
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	699b      	ldr	r3, [r3, #24]
 800cca8:	431a      	orrs	r2, r3
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	691b      	ldr	r3, [r3, #16]
 800ccae:	431a      	orrs	r2, r3
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	695b      	ldr	r3, [r3, #20]
 800ccb4:	431a      	orrs	r2, r3
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6a1b      	ldr	r3, [r3, #32]
 800ccba:	431a      	orrs	r2, r3
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	685b      	ldr	r3, [r3, #4]
 800ccc0:	431a      	orrs	r2, r3
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccc6:	431a      	orrs	r2, r3
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	689b      	ldr	r3, [r3, #8]
 800cccc:	431a      	orrs	r2, r3
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ccd2:	ea42 0103 	orr.w	r1, r2, r3
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	430a      	orrs	r2, r1
 800cce0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	685b      	ldr	r3, [r3, #4]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d113      	bne.n	800cd12 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	689b      	ldr	r3, [r3, #8]
 800ccf0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ccfc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	689b      	ldr	r3, [r3, #8]
 800cd04:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cd10:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f022 0201 	bic.w	r2, r2, #1
 800cd20:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d00a      	beq.n	800cd44 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	430a      	orrs	r2, r1
 800cd42:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2200      	movs	r2, #0
 800cd48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2201      	movs	r2, #1
 800cd50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800cd54:	2300      	movs	r3, #0
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	3710      	adds	r7, #16
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
 800cd5e:	bf00      	nop
 800cd60:	40013000 	.word	0x40013000
 800cd64:	40003800 	.word	0x40003800
 800cd68:	40003c00 	.word	0x40003c00

0800cd6c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b08a      	sub	sp, #40	; 0x28
 800cd70:	af02      	add	r7, sp, #8
 800cd72:	60f8      	str	r0, [r7, #12]
 800cd74:	60b9      	str	r1, [r7, #8]
 800cd76:	603b      	str	r3, [r7, #0]
 800cd78:	4613      	mov	r3, r2
 800cd7a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	3320      	adds	r3, #32
 800cd82:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cd84:	2300      	movs	r3, #0
 800cd86:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cd8e:	2b01      	cmp	r3, #1
 800cd90:	d101      	bne.n	800cd96 <HAL_SPI_Transmit+0x2a>
 800cd92:	2302      	movs	r3, #2
 800cd94:	e1d7      	b.n	800d146 <HAL_SPI_Transmit+0x3da>
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	2201      	movs	r2, #1
 800cd9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cd9e:	f7f7 ffd3 	bl	8004d48 <HAL_GetTick>
 800cda2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cdaa:	b2db      	uxtb	r3, r3
 800cdac:	2b01      	cmp	r3, #1
 800cdae:	d007      	beq.n	800cdc0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800cdb0:	2302      	movs	r3, #2
 800cdb2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cdbc:	7efb      	ldrb	r3, [r7, #27]
 800cdbe:	e1c2      	b.n	800d146 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d002      	beq.n	800cdcc <HAL_SPI_Transmit+0x60>
 800cdc6:	88fb      	ldrh	r3, [r7, #6]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d107      	bne.n	800cddc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800cdcc:	2301      	movs	r3, #1
 800cdce:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cdd8:	7efb      	ldrb	r3, [r7, #27]
 800cdda:	e1b4      	b.n	800d146 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	2203      	movs	r2, #3
 800cde0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2200      	movs	r2, #0
 800cde8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	68ba      	ldr	r2, [r7, #8]
 800cdf0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	88fa      	ldrh	r2, [r7, #6]
 800cdf6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	88fa      	ldrh	r2, [r7, #6]
 800cdfe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	2200      	movs	r2, #0
 800ce06:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2200      	movs	r2, #0
 800ce14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	2200      	movs	r2, #0
 800ce22:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	689b      	ldr	r3, [r3, #8]
 800ce28:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ce2c:	d107      	bne.n	800ce3e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	681a      	ldr	r2, [r3, #0]
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	685a      	ldr	r2, [r3, #4]
 800ce44:	4b96      	ldr	r3, [pc, #600]	; (800d0a0 <HAL_SPI_Transmit+0x334>)
 800ce46:	4013      	ands	r3, r2
 800ce48:	88f9      	ldrh	r1, [r7, #6]
 800ce4a:	68fa      	ldr	r2, [r7, #12]
 800ce4c:	6812      	ldr	r2, [r2, #0]
 800ce4e:	430b      	orrs	r3, r1
 800ce50:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f042 0201 	orr.w	r2, r2, #1
 800ce60:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce6a:	d107      	bne.n	800ce7c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	681a      	ldr	r2, [r3, #0]
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	68db      	ldr	r3, [r3, #12]
 800ce80:	2b0f      	cmp	r3, #15
 800ce82:	d947      	bls.n	800cf14 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ce84:	e03f      	b.n	800cf06 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	695b      	ldr	r3, [r3, #20]
 800ce8c:	f003 0302 	and.w	r3, r3, #2
 800ce90:	2b02      	cmp	r3, #2
 800ce92:	d114      	bne.n	800cebe <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	6812      	ldr	r2, [r2, #0]
 800ce9e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cea4:	1d1a      	adds	r2, r3, #4
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ceb0:	b29b      	uxth	r3, r3
 800ceb2:	3b01      	subs	r3, #1
 800ceb4:	b29a      	uxth	r2, r3
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cebc:	e023      	b.n	800cf06 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cebe:	f7f7 ff43 	bl	8004d48 <HAL_GetTick>
 800cec2:	4602      	mov	r2, r0
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	1ad3      	subs	r3, r2, r3
 800cec8:	683a      	ldr	r2, [r7, #0]
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d803      	bhi.n	800ced6 <HAL_SPI_Transmit+0x16a>
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ced4:	d102      	bne.n	800cedc <HAL_SPI_Transmit+0x170>
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d114      	bne.n	800cf06 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cedc:	68f8      	ldr	r0, [r7, #12]
 800cede:	f000 fe15 	bl	800db0c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	2200      	movs	r2, #0
 800cee6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cef0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2201      	movs	r2, #1
 800cefe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800cf02:	2301      	movs	r3, #1
 800cf04:	e11f      	b.n	800d146 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf0c:	b29b      	uxth	r3, r3
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d1b9      	bne.n	800ce86 <HAL_SPI_Transmit+0x11a>
 800cf12:	e0f2      	b.n	800d0fa <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	68db      	ldr	r3, [r3, #12]
 800cf18:	2b07      	cmp	r3, #7
 800cf1a:	f240 80e7 	bls.w	800d0ec <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800cf1e:	e05d      	b.n	800cfdc <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	695b      	ldr	r3, [r3, #20]
 800cf26:	f003 0302 	and.w	r3, r3, #2
 800cf2a:	2b02      	cmp	r3, #2
 800cf2c:	d132      	bne.n	800cf94 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf34:	b29b      	uxth	r3, r3
 800cf36:	2b01      	cmp	r3, #1
 800cf38:	d918      	bls.n	800cf6c <HAL_SPI_Transmit+0x200>
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d014      	beq.n	800cf6c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	6812      	ldr	r2, [r2, #0]
 800cf4c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf52:	1d1a      	adds	r2, r3, #4
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf5e:	b29b      	uxth	r3, r3
 800cf60:	3b02      	subs	r3, #2
 800cf62:	b29a      	uxth	r2, r3
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cf6a:	e037      	b.n	800cfdc <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf70:	881a      	ldrh	r2, [r3, #0]
 800cf72:	69fb      	ldr	r3, [r7, #28]
 800cf74:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf7a:	1c9a      	adds	r2, r3, #2
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf86:	b29b      	uxth	r3, r3
 800cf88:	3b01      	subs	r3, #1
 800cf8a:	b29a      	uxth	r2, r3
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cf92:	e023      	b.n	800cfdc <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf94:	f7f7 fed8 	bl	8004d48 <HAL_GetTick>
 800cf98:	4602      	mov	r2, r0
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	1ad3      	subs	r3, r2, r3
 800cf9e:	683a      	ldr	r2, [r7, #0]
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d803      	bhi.n	800cfac <HAL_SPI_Transmit+0x240>
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfaa:	d102      	bne.n	800cfb2 <HAL_SPI_Transmit+0x246>
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d114      	bne.n	800cfdc <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cfb2:	68f8      	ldr	r0, [r7, #12]
 800cfb4:	f000 fdaa 	bl	800db0c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800cfd8:	2301      	movs	r3, #1
 800cfda:	e0b4      	b.n	800d146 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cfe2:	b29b      	uxth	r3, r3
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d19b      	bne.n	800cf20 <HAL_SPI_Transmit+0x1b4>
 800cfe8:	e087      	b.n	800d0fa <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	695b      	ldr	r3, [r3, #20]
 800cff0:	f003 0302 	and.w	r3, r3, #2
 800cff4:	2b02      	cmp	r3, #2
 800cff6:	d155      	bne.n	800d0a4 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cffe:	b29b      	uxth	r3, r3
 800d000:	2b03      	cmp	r3, #3
 800d002:	d918      	bls.n	800d036 <HAL_SPI_Transmit+0x2ca>
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d008:	2b40      	cmp	r3, #64	; 0x40
 800d00a:	d914      	bls.n	800d036 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	6812      	ldr	r2, [r2, #0]
 800d016:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d01c:	1d1a      	adds	r2, r3, #4
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d028:	b29b      	uxth	r3, r3
 800d02a:	3b04      	subs	r3, #4
 800d02c:	b29a      	uxth	r2, r3
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d034:	e05a      	b.n	800d0ec <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d03c:	b29b      	uxth	r3, r3
 800d03e:	2b01      	cmp	r3, #1
 800d040:	d917      	bls.n	800d072 <HAL_SPI_Transmit+0x306>
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d046:	2b00      	cmp	r3, #0
 800d048:	d013      	beq.n	800d072 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d04e:	881a      	ldrh	r2, [r3, #0]
 800d050:	69fb      	ldr	r3, [r7, #28]
 800d052:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d058:	1c9a      	adds	r2, r3, #2
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d064:	b29b      	uxth	r3, r3
 800d066:	3b02      	subs	r3, #2
 800d068:	b29a      	uxth	r2, r3
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d070:	e03c      	b.n	800d0ec <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	3320      	adds	r3, #32
 800d07c:	7812      	ldrb	r2, [r2, #0]
 800d07e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d084:	1c5a      	adds	r2, r3, #1
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d090:	b29b      	uxth	r3, r3
 800d092:	3b01      	subs	r3, #1
 800d094:	b29a      	uxth	r2, r3
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d09c:	e026      	b.n	800d0ec <HAL_SPI_Transmit+0x380>
 800d09e:	bf00      	nop
 800d0a0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d0a4:	f7f7 fe50 	bl	8004d48 <HAL_GetTick>
 800d0a8:	4602      	mov	r2, r0
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	1ad3      	subs	r3, r2, r3
 800d0ae:	683a      	ldr	r2, [r7, #0]
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d803      	bhi.n	800d0bc <HAL_SPI_Transmit+0x350>
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0ba:	d102      	bne.n	800d0c2 <HAL_SPI_Transmit+0x356>
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d114      	bne.n	800d0ec <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d0c2:	68f8      	ldr	r0, [r7, #12]
 800d0c4:	f000 fd22 	bl	800db0c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	2201      	movs	r2, #1
 800d0e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	e02c      	b.n	800d146 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d0f2:	b29b      	uxth	r3, r3
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	f47f af78 	bne.w	800cfea <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	9300      	str	r3, [sp, #0]
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	2200      	movs	r2, #0
 800d102:	2108      	movs	r1, #8
 800d104:	68f8      	ldr	r0, [r7, #12]
 800d106:	f000 fda1 	bl	800dc4c <SPI_WaitOnFlagUntilTimeout>
 800d10a:	4603      	mov	r3, r0
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d007      	beq.n	800d120 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d116:	f043 0220 	orr.w	r2, r3, #32
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d120:	68f8      	ldr	r0, [r7, #12]
 800d122:	f000 fcf3 	bl	800db0c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	2200      	movs	r2, #0
 800d12a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	2201      	movs	r2, #1
 800d132:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d001      	beq.n	800d144 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800d140:	2301      	movs	r3, #1
 800d142:	e000      	b.n	800d146 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800d144:	7efb      	ldrb	r3, [r7, #27]
}
 800d146:	4618      	mov	r0, r3
 800d148:	3720      	adds	r7, #32
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}
 800d14e:	bf00      	nop

0800d150 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b08a      	sub	sp, #40	; 0x28
 800d154:	af02      	add	r7, sp, #8
 800d156:	60f8      	str	r0, [r7, #12]
 800d158:	60b9      	str	r1, [r7, #8]
 800d15a:	603b      	str	r3, [r7, #0]
 800d15c:	4613      	mov	r3, r2
 800d15e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d160:	2300      	movs	r3, #0
 800d162:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	3330      	adds	r3, #48	; 0x30
 800d16a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	685b      	ldr	r3, [r3, #4]
 800d170:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d174:	d112      	bne.n	800d19c <HAL_SPI_Receive+0x4c>
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	689b      	ldr	r3, [r3, #8]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d10e      	bne.n	800d19c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	2204      	movs	r2, #4
 800d182:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d186:	88fa      	ldrh	r2, [r7, #6]
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	9300      	str	r3, [sp, #0]
 800d18c:	4613      	mov	r3, r2
 800d18e:	68ba      	ldr	r2, [r7, #8]
 800d190:	68b9      	ldr	r1, [r7, #8]
 800d192:	68f8      	ldr	r0, [r7, #12]
 800d194:	f000 f9ce 	bl	800d534 <HAL_SPI_TransmitReceive>
 800d198:	4603      	mov	r3, r0
 800d19a:	e1c7      	b.n	800d52c <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d1a2:	2b01      	cmp	r3, #1
 800d1a4:	d101      	bne.n	800d1aa <HAL_SPI_Receive+0x5a>
 800d1a6:	2302      	movs	r3, #2
 800d1a8:	e1c0      	b.n	800d52c <HAL_SPI_Receive+0x3dc>
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d1b2:	f7f7 fdc9 	bl	8004d48 <HAL_GetTick>
 800d1b6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d1be:	b2db      	uxtb	r3, r3
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	d007      	beq.n	800d1d4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800d1c4:	2302      	movs	r3, #2
 800d1c6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d1d0:	7ffb      	ldrb	r3, [r7, #31]
 800d1d2:	e1ab      	b.n	800d52c <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d002      	beq.n	800d1e0 <HAL_SPI_Receive+0x90>
 800d1da:	88fb      	ldrh	r3, [r7, #6]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d107      	bne.n	800d1f0 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d1ec:	7ffb      	ldrb	r3, [r7, #31]
 800d1ee:	e19d      	b.n	800d52c <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	2204      	movs	r2, #4
 800d1f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	68ba      	ldr	r2, [r7, #8]
 800d204:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	88fa      	ldrh	r2, [r7, #6]
 800d20a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	88fa      	ldrh	r2, [r7, #6]
 800d212:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	2200      	movs	r2, #0
 800d21a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2200      	movs	r2, #0
 800d220:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	2200      	movs	r2, #0
 800d228:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	2200      	movs	r2, #0
 800d230:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	2200      	movs	r2, #0
 800d236:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	689b      	ldr	r3, [r3, #8]
 800d23c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d240:	d107      	bne.n	800d252 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	681a      	ldr	r2, [r3, #0]
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d250:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	685a      	ldr	r2, [r3, #4]
 800d258:	4b94      	ldr	r3, [pc, #592]	; (800d4ac <HAL_SPI_Receive+0x35c>)
 800d25a:	4013      	ands	r3, r2
 800d25c:	88f9      	ldrh	r1, [r7, #6]
 800d25e:	68fa      	ldr	r2, [r7, #12]
 800d260:	6812      	ldr	r2, [r2, #0]
 800d262:	430b      	orrs	r3, r1
 800d264:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	681a      	ldr	r2, [r3, #0]
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	f042 0201 	orr.w	r2, r2, #1
 800d274:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d27e:	d107      	bne.n	800d290 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	681a      	ldr	r2, [r3, #0]
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d28e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	68db      	ldr	r3, [r3, #12]
 800d294:	2b0f      	cmp	r3, #15
 800d296:	d948      	bls.n	800d32a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d298:	e040      	b.n	800d31c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	695a      	ldr	r2, [r3, #20]
 800d2a0:	f248 0308 	movw	r3, #32776	; 0x8008
 800d2a4:	4013      	ands	r3, r2
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d014      	beq.n	800d2d4 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	681a      	ldr	r2, [r3, #0]
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d2b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d2b4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d2ba:	1d1a      	adds	r2, r3, #4
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d2c6:	b29b      	uxth	r3, r3
 800d2c8:	3b01      	subs	r3, #1
 800d2ca:	b29a      	uxth	r2, r3
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d2d2:	e023      	b.n	800d31c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d2d4:	f7f7 fd38 	bl	8004d48 <HAL_GetTick>
 800d2d8:	4602      	mov	r2, r0
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	1ad3      	subs	r3, r2, r3
 800d2de:	683a      	ldr	r2, [r7, #0]
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	d803      	bhi.n	800d2ec <HAL_SPI_Receive+0x19c>
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2ea:	d102      	bne.n	800d2f2 <HAL_SPI_Receive+0x1a2>
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d114      	bne.n	800d31c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d2f2:	68f8      	ldr	r0, [r7, #12]
 800d2f4:	f000 fc0a 	bl	800db0c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d306:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	2201      	movs	r2, #1
 800d314:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d318:	2301      	movs	r3, #1
 800d31a:	e107      	b.n	800d52c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d322:	b29b      	uxth	r3, r3
 800d324:	2b00      	cmp	r3, #0
 800d326:	d1b8      	bne.n	800d29a <HAL_SPI_Receive+0x14a>
 800d328:	e0ed      	b.n	800d506 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	68db      	ldr	r3, [r3, #12]
 800d32e:	2b07      	cmp	r3, #7
 800d330:	f240 80e2 	bls.w	800d4f8 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d334:	e05b      	b.n	800d3ee <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	695b      	ldr	r3, [r3, #20]
 800d33c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d340:	2b00      	cmp	r3, #0
 800d342:	d030      	beq.n	800d3a6 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	695b      	ldr	r3, [r3, #20]
 800d34a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d014      	beq.n	800d37c <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	681a      	ldr	r2, [r3, #0]
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d35a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d35c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d362:	1d1a      	adds	r2, r3, #4
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d36e:	b29b      	uxth	r3, r3
 800d370:	3b02      	subs	r3, #2
 800d372:	b29a      	uxth	r2, r3
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d37a:	e038      	b.n	800d3ee <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d380:	69ba      	ldr	r2, [r7, #24]
 800d382:	8812      	ldrh	r2, [r2, #0]
 800d384:	b292      	uxth	r2, r2
 800d386:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d38c:	1c9a      	adds	r2, r3, #2
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d398:	b29b      	uxth	r3, r3
 800d39a:	3b01      	subs	r3, #1
 800d39c:	b29a      	uxth	r2, r3
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d3a4:	e023      	b.n	800d3ee <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d3a6:	f7f7 fccf 	bl	8004d48 <HAL_GetTick>
 800d3aa:	4602      	mov	r2, r0
 800d3ac:	697b      	ldr	r3, [r7, #20]
 800d3ae:	1ad3      	subs	r3, r2, r3
 800d3b0:	683a      	ldr	r2, [r7, #0]
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d803      	bhi.n	800d3be <HAL_SPI_Receive+0x26e>
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3bc:	d102      	bne.n	800d3c4 <HAL_SPI_Receive+0x274>
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d114      	bne.n	800d3ee <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d3c4:	68f8      	ldr	r0, [r7, #12]
 800d3c6:	f000 fba1 	bl	800db0c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	e09e      	b.n	800d52c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d3f4:	b29b      	uxth	r3, r3
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d19d      	bne.n	800d336 <HAL_SPI_Receive+0x1e6>
 800d3fa:	e084      	b.n	800d506 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	695b      	ldr	r3, [r3, #20]
 800d402:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d406:	2b00      	cmp	r3, #0
 800d408:	d052      	beq.n	800d4b0 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	695b      	ldr	r3, [r3, #20]
 800d410:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d414:	2b00      	cmp	r3, #0
 800d416:	d014      	beq.n	800d442 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	681a      	ldr	r2, [r3, #0]
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d420:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d422:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d428:	1d1a      	adds	r2, r3, #4
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d434:	b29b      	uxth	r3, r3
 800d436:	3b04      	subs	r3, #4
 800d438:	b29a      	uxth	r2, r3
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d440:	e05a      	b.n	800d4f8 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	695b      	ldr	r3, [r3, #20]
 800d448:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800d44c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d450:	d914      	bls.n	800d47c <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d456:	69ba      	ldr	r2, [r7, #24]
 800d458:	8812      	ldrh	r2, [r2, #0]
 800d45a:	b292      	uxth	r2, r2
 800d45c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d462:	1c9a      	adds	r2, r3, #2
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d46e:	b29b      	uxth	r3, r3
 800d470:	3b02      	subs	r3, #2
 800d472:	b29a      	uxth	r2, r3
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d47a:	e03d      	b.n	800d4f8 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d488:	7812      	ldrb	r2, [r2, #0]
 800d48a:	b2d2      	uxtb	r2, r2
 800d48c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d492:	1c5a      	adds	r2, r3, #1
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d49e:	b29b      	uxth	r3, r3
 800d4a0:	3b01      	subs	r3, #1
 800d4a2:	b29a      	uxth	r2, r3
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d4aa:	e025      	b.n	800d4f8 <HAL_SPI_Receive+0x3a8>
 800d4ac:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d4b0:	f7f7 fc4a 	bl	8004d48 <HAL_GetTick>
 800d4b4:	4602      	mov	r2, r0
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	1ad3      	subs	r3, r2, r3
 800d4ba:	683a      	ldr	r2, [r7, #0]
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d803      	bhi.n	800d4c8 <HAL_SPI_Receive+0x378>
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4c6:	d102      	bne.n	800d4ce <HAL_SPI_Receive+0x37e>
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d114      	bne.n	800d4f8 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d4ce:	68f8      	ldr	r0, [r7, #12]
 800d4d0:	f000 fb1c 	bl	800db0c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	e019      	b.n	800d52c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d4fe:	b29b      	uxth	r3, r3
 800d500:	2b00      	cmp	r3, #0
 800d502:	f47f af7b 	bne.w	800d3fc <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d506:	68f8      	ldr	r0, [r7, #12]
 800d508:	f000 fb00 	bl	800db0c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2200      	movs	r2, #0
 800d510:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	2201      	movs	r2, #1
 800d518:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d522:	2b00      	cmp	r3, #0
 800d524:	d001      	beq.n	800d52a <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800d526:	2301      	movs	r3, #1
 800d528:	e000      	b.n	800d52c <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800d52a:	7ffb      	ldrb	r3, [r7, #31]
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3720      	adds	r7, #32
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}

0800d534 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b08e      	sub	sp, #56	; 0x38
 800d538:	af02      	add	r7, sp, #8
 800d53a:	60f8      	str	r0, [r7, #12]
 800d53c:	60b9      	str	r1, [r7, #8]
 800d53e:	607a      	str	r2, [r7, #4]
 800d540:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d542:	2300      	movs	r3, #0
 800d544:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	3320      	adds	r3, #32
 800d54e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	3330      	adds	r3, #48	; 0x30
 800d556:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d55e:	2b01      	cmp	r3, #1
 800d560:	d101      	bne.n	800d566 <HAL_SPI_TransmitReceive+0x32>
 800d562:	2302      	movs	r3, #2
 800d564:	e2ce      	b.n	800db04 <HAL_SPI_TransmitReceive+0x5d0>
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	2201      	movs	r2, #1
 800d56a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d56e:	f7f7 fbeb 	bl	8004d48 <HAL_GetTick>
 800d572:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800d574:	887b      	ldrh	r3, [r7, #2]
 800d576:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800d578:	887b      	ldrh	r3, [r7, #2]
 800d57a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d582:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d58a:	7efb      	ldrb	r3, [r7, #27]
 800d58c:	2b01      	cmp	r3, #1
 800d58e:	d014      	beq.n	800d5ba <HAL_SPI_TransmitReceive+0x86>
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d596:	d106      	bne.n	800d5a6 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	689b      	ldr	r3, [r3, #8]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d102      	bne.n	800d5a6 <HAL_SPI_TransmitReceive+0x72>
 800d5a0:	7efb      	ldrb	r3, [r7, #27]
 800d5a2:	2b04      	cmp	r3, #4
 800d5a4:	d009      	beq.n	800d5ba <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800d5a6:	2302      	movs	r3, #2
 800d5a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d5b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d5b8:	e2a4      	b.n	800db04 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d005      	beq.n	800d5cc <HAL_SPI_TransmitReceive+0x98>
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d002      	beq.n	800d5cc <HAL_SPI_TransmitReceive+0x98>
 800d5c6:	887b      	ldrh	r3, [r7, #2]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d109      	bne.n	800d5e0 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d5da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d5de:	e291      	b.n	800db04 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d5e6:	b2db      	uxtb	r3, r3
 800d5e8:	2b04      	cmp	r3, #4
 800d5ea:	d003      	beq.n	800d5f4 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	2205      	movs	r2, #5
 800d5f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	687a      	ldr	r2, [r7, #4]
 800d600:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	887a      	ldrh	r2, [r7, #2]
 800d606:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	887a      	ldrh	r2, [r7, #2]
 800d60e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	68ba      	ldr	r2, [r7, #8]
 800d616:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	887a      	ldrh	r2, [r7, #2]
 800d61c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	887a      	ldrh	r2, [r7, #2]
 800d624:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	2200      	movs	r2, #0
 800d62c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2200      	movs	r2, #0
 800d632:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	685a      	ldr	r2, [r3, #4]
 800d63a:	4b9f      	ldr	r3, [pc, #636]	; (800d8b8 <HAL_SPI_TransmitReceive+0x384>)
 800d63c:	4013      	ands	r3, r2
 800d63e:	8879      	ldrh	r1, [r7, #2]
 800d640:	68fa      	ldr	r2, [r7, #12]
 800d642:	6812      	ldr	r2, [r2, #0]
 800d644:	430b      	orrs	r3, r1
 800d646:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	681a      	ldr	r2, [r3, #0]
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f042 0201 	orr.w	r2, r2, #1
 800d656:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	685b      	ldr	r3, [r3, #4]
 800d65c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d660:	d107      	bne.n	800d672 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	681a      	ldr	r2, [r3, #0]
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d670:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	68db      	ldr	r3, [r3, #12]
 800d676:	2b0f      	cmp	r3, #15
 800d678:	d970      	bls.n	800d75c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d67a:	e068      	b.n	800d74e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	695b      	ldr	r3, [r3, #20]
 800d682:	f003 0302 	and.w	r3, r3, #2
 800d686:	2b02      	cmp	r3, #2
 800d688:	d11a      	bne.n	800d6c0 <HAL_SPI_TransmitReceive+0x18c>
 800d68a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d017      	beq.n	800d6c0 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	6812      	ldr	r2, [r2, #0]
 800d69a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d6a0:	1d1a      	adds	r2, r3, #4
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d6ac:	b29b      	uxth	r3, r3
 800d6ae:	3b01      	subs	r3, #1
 800d6b0:	b29a      	uxth	r2, r3
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d6be:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	695a      	ldr	r2, [r3, #20]
 800d6c6:	f248 0308 	movw	r3, #32776	; 0x8008
 800d6ca:	4013      	ands	r3, r2
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d01a      	beq.n	800d706 <HAL_SPI_TransmitReceive+0x1d2>
 800d6d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d017      	beq.n	800d706 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	681a      	ldr	r2, [r3, #0]
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d6e0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6e6:	1d1a      	adds	r2, r3, #4
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	3b01      	subs	r3, #1
 800d6f6:	b29a      	uxth	r2, r3
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d704:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d706:	f7f7 fb1f 	bl	8004d48 <HAL_GetTick>
 800d70a:	4602      	mov	r2, r0
 800d70c:	69fb      	ldr	r3, [r7, #28]
 800d70e:	1ad3      	subs	r3, r2, r3
 800d710:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d712:	429a      	cmp	r2, r3
 800d714:	d803      	bhi.n	800d71e <HAL_SPI_TransmitReceive+0x1ea>
 800d716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d71c:	d102      	bne.n	800d724 <HAL_SPI_TransmitReceive+0x1f0>
 800d71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d720:	2b00      	cmp	r3, #0
 800d722:	d114      	bne.n	800d74e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d724:	68f8      	ldr	r0, [r7, #12]
 800d726:	f000 f9f1 	bl	800db0c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2200      	movs	r2, #0
 800d72e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d738:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	2201      	movs	r2, #1
 800d746:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800d74a:	2301      	movs	r3, #1
 800d74c:	e1da      	b.n	800db04 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d74e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d750:	2b00      	cmp	r3, #0
 800d752:	d193      	bne.n	800d67c <HAL_SPI_TransmitReceive+0x148>
 800d754:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d756:	2b00      	cmp	r3, #0
 800d758:	d190      	bne.n	800d67c <HAL_SPI_TransmitReceive+0x148>
 800d75a:	e1ac      	b.n	800dab6 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	68db      	ldr	r3, [r3, #12]
 800d760:	2b07      	cmp	r3, #7
 800d762:	f240 81a0 	bls.w	800daa6 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d766:	e0a9      	b.n	800d8bc <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	695b      	ldr	r3, [r3, #20]
 800d76e:	f003 0302 	and.w	r3, r3, #2
 800d772:	2b02      	cmp	r3, #2
 800d774:	d139      	bne.n	800d7ea <HAL_SPI_TransmitReceive+0x2b6>
 800d776:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d036      	beq.n	800d7ea <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d77c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d77e:	2b01      	cmp	r3, #1
 800d780:	d91c      	bls.n	800d7bc <HAL_SPI_TransmitReceive+0x288>
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d786:	2b00      	cmp	r3, #0
 800d788:	d018      	beq.n	800d7bc <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	6812      	ldr	r2, [r2, #0]
 800d794:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d79a:	1d1a      	adds	r2, r3, #4
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d7a6:	b29b      	uxth	r3, r3
 800d7a8:	3b02      	subs	r3, #2
 800d7aa:	b29a      	uxth	r2, r3
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d7b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d7ba:	e016      	b.n	800d7ea <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7c0:	881a      	ldrh	r2, [r3, #0]
 800d7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7ca:	1c9a      	adds	r2, r3, #2
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d7d6:	b29b      	uxth	r3, r3
 800d7d8:	3b01      	subs	r3, #1
 800d7da:	b29a      	uxth	r2, r3
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d7e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	695b      	ldr	r3, [r3, #20]
 800d7f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d03a      	beq.n	800d86e <HAL_SPI_TransmitReceive+0x33a>
 800d7f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d037      	beq.n	800d86e <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	695b      	ldr	r3, [r3, #20]
 800d804:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d018      	beq.n	800d83e <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681a      	ldr	r2, [r3, #0]
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d814:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d816:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d81c:	1d1a      	adds	r2, r3, #4
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d828:	b29b      	uxth	r3, r3
 800d82a:	3b02      	subs	r3, #2
 800d82c:	b29a      	uxth	r2, r3
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d83a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d83c:	e017      	b.n	800d86e <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d842:	6a3a      	ldr	r2, [r7, #32]
 800d844:	8812      	ldrh	r2, [r2, #0]
 800d846:	b292      	uxth	r2, r2
 800d848:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d84e:	1c9a      	adds	r2, r3, #2
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d85a:	b29b      	uxth	r3, r3
 800d85c:	3b01      	subs	r3, #1
 800d85e:	b29a      	uxth	r2, r3
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d86c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d86e:	f7f7 fa6b 	bl	8004d48 <HAL_GetTick>
 800d872:	4602      	mov	r2, r0
 800d874:	69fb      	ldr	r3, [r7, #28]
 800d876:	1ad3      	subs	r3, r2, r3
 800d878:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d803      	bhi.n	800d886 <HAL_SPI_TransmitReceive+0x352>
 800d87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d880:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d884:	d102      	bne.n	800d88c <HAL_SPI_TransmitReceive+0x358>
 800d886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d117      	bne.n	800d8bc <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d88c:	68f8      	ldr	r0, [r7, #12]
 800d88e:	f000 f93d 	bl	800db0c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	2200      	movs	r2, #0
 800d896:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	2201      	movs	r2, #1
 800d8ae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	e126      	b.n	800db04 <HAL_SPI_TransmitReceive+0x5d0>
 800d8b6:	bf00      	nop
 800d8b8:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d8bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	f47f af52 	bne.w	800d768 <HAL_SPI_TransmitReceive+0x234>
 800d8c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	f47f af4e 	bne.w	800d768 <HAL_SPI_TransmitReceive+0x234>
 800d8cc:	e0f3      	b.n	800dab6 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	695b      	ldr	r3, [r3, #20]
 800d8d4:	f003 0302 	and.w	r3, r3, #2
 800d8d8:	2b02      	cmp	r3, #2
 800d8da:	d15a      	bne.n	800d992 <HAL_SPI_TransmitReceive+0x45e>
 800d8dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d057      	beq.n	800d992 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d8e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d8e4:	2b03      	cmp	r3, #3
 800d8e6:	d91c      	bls.n	800d922 <HAL_SPI_TransmitReceive+0x3ee>
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8ec:	2b40      	cmp	r3, #64	; 0x40
 800d8ee:	d918      	bls.n	800d922 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	6812      	ldr	r2, [r2, #0]
 800d8fa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d900:	1d1a      	adds	r2, r3, #4
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d90c:	b29b      	uxth	r3, r3
 800d90e:	3b04      	subs	r3, #4
 800d910:	b29a      	uxth	r2, r3
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d91e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d920:	e037      	b.n	800d992 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d922:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d924:	2b01      	cmp	r3, #1
 800d926:	d91b      	bls.n	800d960 <HAL_SPI_TransmitReceive+0x42c>
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d017      	beq.n	800d960 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d934:	881a      	ldrh	r2, [r3, #0]
 800d936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d938:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d93e:	1c9a      	adds	r2, r3, #2
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d94a:	b29b      	uxth	r3, r3
 800d94c:	3b02      	subs	r3, #2
 800d94e:	b29a      	uxth	r2, r3
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d95c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d95e:	e018      	b.n	800d992 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	3320      	adds	r3, #32
 800d96a:	7812      	ldrb	r2, [r2, #0]
 800d96c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d972:	1c5a      	adds	r2, r3, #1
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d97e:	b29b      	uxth	r3, r3
 800d980:	3b01      	subs	r3, #1
 800d982:	b29a      	uxth	r2, r3
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d990:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	695b      	ldr	r3, [r3, #20]
 800d998:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d05e      	beq.n	800da5e <HAL_SPI_TransmitReceive+0x52a>
 800d9a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d05b      	beq.n	800da5e <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	695b      	ldr	r3, [r3, #20]
 800d9ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d018      	beq.n	800d9e6 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	681a      	ldr	r2, [r3, #0]
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d9be:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9c4:	1d1a      	adds	r2, r3, #4
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d9d0:	b29b      	uxth	r3, r3
 800d9d2:	3b04      	subs	r3, #4
 800d9d4:	b29a      	uxth	r2, r3
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d9e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d9e4:	e03b      	b.n	800da5e <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	695b      	ldr	r3, [r3, #20]
 800d9ec:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800d9f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d9f4:	d918      	bls.n	800da28 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9fa:	6a3a      	ldr	r2, [r7, #32]
 800d9fc:	8812      	ldrh	r2, [r2, #0]
 800d9fe:	b292      	uxth	r2, r2
 800da00:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da06:	1c9a      	adds	r2, r3, #2
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800da12:	b29b      	uxth	r3, r3
 800da14:	3b02      	subs	r3, #2
 800da16:	b29a      	uxth	r2, r3
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800da24:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800da26:	e01a      	b.n	800da5e <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da34:	7812      	ldrb	r2, [r2, #0]
 800da36:	b2d2      	uxtb	r2, r2
 800da38:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da3e:	1c5a      	adds	r2, r3, #1
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800da4a:	b29b      	uxth	r3, r3
 800da4c:	3b01      	subs	r3, #1
 800da4e:	b29a      	uxth	r2, r3
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800da5c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da5e:	f7f7 f973 	bl	8004d48 <HAL_GetTick>
 800da62:	4602      	mov	r2, r0
 800da64:	69fb      	ldr	r3, [r7, #28]
 800da66:	1ad3      	subs	r3, r2, r3
 800da68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da6a:	429a      	cmp	r2, r3
 800da6c:	d803      	bhi.n	800da76 <HAL_SPI_TransmitReceive+0x542>
 800da6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da74:	d102      	bne.n	800da7c <HAL_SPI_TransmitReceive+0x548>
 800da76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d114      	bne.n	800daa6 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800da7c:	68f8      	ldr	r0, [r7, #12]
 800da7e:	f000 f845 	bl	800db0c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	2200      	movs	r2, #0
 800da86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	2201      	movs	r2, #1
 800da9e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800daa2:	2301      	movs	r3, #1
 800daa4:	e02e      	b.n	800db04 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800daa6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	f47f af10 	bne.w	800d8ce <HAL_SPI_TransmitReceive+0x39a>
 800daae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	f47f af0c 	bne.w	800d8ce <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800dab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab8:	9300      	str	r3, [sp, #0]
 800daba:	69fb      	ldr	r3, [r7, #28]
 800dabc:	2200      	movs	r2, #0
 800dabe:	2108      	movs	r1, #8
 800dac0:	68f8      	ldr	r0, [r7, #12]
 800dac2:	f000 f8c3 	bl	800dc4c <SPI_WaitOnFlagUntilTimeout>
 800dac6:	4603      	mov	r3, r0
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d007      	beq.n	800dadc <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dad2:	f043 0220 	orr.w	r2, r3, #32
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800dadc:	68f8      	ldr	r0, [r7, #12]
 800dade:	f000 f815 	bl	800db0c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	2200      	movs	r2, #0
 800dae6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	2201      	movs	r2, #1
 800daee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d001      	beq.n	800db00 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800dafc:	2301      	movs	r3, #1
 800dafe:	e001      	b.n	800db04 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800db00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800db04:	4618      	mov	r0, r3
 800db06:	3730      	adds	r7, #48	; 0x30
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800db0c:	b480      	push	{r7}
 800db0e:	b085      	sub	sp, #20
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	695b      	ldr	r3, [r3, #20]
 800db1a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	699a      	ldr	r2, [r3, #24]
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	f042 0208 	orr.w	r2, r2, #8
 800db2a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	699a      	ldr	r2, [r3, #24]
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	f042 0210 	orr.w	r2, r2, #16
 800db3a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	681a      	ldr	r2, [r3, #0]
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	f022 0201 	bic.w	r2, r2, #1
 800db4a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	6919      	ldr	r1, [r3, #16]
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	4b3c      	ldr	r3, [pc, #240]	; (800dc48 <SPI_CloseTransfer+0x13c>)
 800db58:	400b      	ands	r3, r1
 800db5a:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	689a      	ldr	r2, [r3, #8]
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800db6a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800db72:	b2db      	uxtb	r3, r3
 800db74:	2b04      	cmp	r3, #4
 800db76:	d014      	beq.n	800dba2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	f003 0320 	and.w	r3, r3, #32
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d00f      	beq.n	800dba2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	699a      	ldr	r2, [r3, #24]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	f042 0220 	orr.w	r2, r2, #32
 800dba0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dba8:	b2db      	uxtb	r3, r3
 800dbaa:	2b03      	cmp	r3, #3
 800dbac:	d014      	beq.n	800dbd8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d00f      	beq.n	800dbd8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbbe:	f043 0204 	orr.w	r2, r3, #4
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	699a      	ldr	r2, [r3, #24]
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dbd6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d00f      	beq.n	800dc02 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbe8:	f043 0201 	orr.w	r2, r3, #1
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	699a      	ldr	r2, [r3, #24]
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dc00:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d00f      	beq.n	800dc2c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc12:	f043 0208 	orr.w	r2, r3, #8
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	699a      	ldr	r2, [r3, #24]
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dc2a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2200      	movs	r2, #0
 800dc30:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2200      	movs	r2, #0
 800dc38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800dc3c:	bf00      	nop
 800dc3e:	3714      	adds	r7, #20
 800dc40:	46bd      	mov	sp, r7
 800dc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc46:	4770      	bx	lr
 800dc48:	fffffc90 	.word	0xfffffc90

0800dc4c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b084      	sub	sp, #16
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	60f8      	str	r0, [r7, #12]
 800dc54:	60b9      	str	r1, [r7, #8]
 800dc56:	603b      	str	r3, [r7, #0]
 800dc58:	4613      	mov	r3, r2
 800dc5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800dc5c:	e010      	b.n	800dc80 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dc5e:	f7f7 f873 	bl	8004d48 <HAL_GetTick>
 800dc62:	4602      	mov	r2, r0
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	1ad3      	subs	r3, r2, r3
 800dc68:	69ba      	ldr	r2, [r7, #24]
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d803      	bhi.n	800dc76 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800dc6e:	69bb      	ldr	r3, [r7, #24]
 800dc70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc74:	d102      	bne.n	800dc7c <SPI_WaitOnFlagUntilTimeout+0x30>
 800dc76:	69bb      	ldr	r3, [r7, #24]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d101      	bne.n	800dc80 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800dc7c:	2303      	movs	r3, #3
 800dc7e:	e00f      	b.n	800dca0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	695a      	ldr	r2, [r3, #20]
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	4013      	ands	r3, r2
 800dc8a:	68ba      	ldr	r2, [r7, #8]
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	bf0c      	ite	eq
 800dc90:	2301      	moveq	r3, #1
 800dc92:	2300      	movne	r3, #0
 800dc94:	b2db      	uxtb	r3, r3
 800dc96:	461a      	mov	r2, r3
 800dc98:	79fb      	ldrb	r3, [r7, #7]
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d0df      	beq.n	800dc5e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800dc9e:	2300      	movs	r3, #0
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3710      	adds	r7, #16
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}

0800dca8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b085      	sub	sp, #20
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcb4:	095b      	lsrs	r3, r3, #5
 800dcb6:	3301      	adds	r3, #1
 800dcb8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	68db      	ldr	r3, [r3, #12]
 800dcbe:	3301      	adds	r3, #1
 800dcc0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	3307      	adds	r3, #7
 800dcc6:	08db      	lsrs	r3, r3, #3
 800dcc8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	68fa      	ldr	r2, [r7, #12]
 800dcce:	fb02 f303 	mul.w	r3, r2, r3
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3714      	adds	r7, #20
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcdc:	4770      	bx	lr

0800dcde <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dcde:	b580      	push	{r7, lr}
 800dce0:	b082      	sub	sp, #8
 800dce2:	af00      	add	r7, sp, #0
 800dce4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d101      	bne.n	800dcf0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dcec:	2301      	movs	r3, #1
 800dcee:	e049      	b.n	800dd84 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dcf6:	b2db      	uxtb	r3, r3
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d106      	bne.n	800dd0a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f7f5 fe7d 	bl	8003a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2202      	movs	r2, #2
 800dd0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681a      	ldr	r2, [r3, #0]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	3304      	adds	r3, #4
 800dd1a:	4619      	mov	r1, r3
 800dd1c:	4610      	mov	r0, r2
 800dd1e:	f000 f9ed 	bl	800e0fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	2201      	movs	r2, #1
 800dd26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2201      	movs	r2, #1
 800dd2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2201      	movs	r2, #1
 800dd36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2201      	movs	r2, #1
 800dd46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2201      	movs	r2, #1
 800dd4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	2201      	movs	r2, #1
 800dd56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2201      	movs	r2, #1
 800dd5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2201      	movs	r2, #1
 800dd66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2201      	movs	r2, #1
 800dd6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2201      	movs	r2, #1
 800dd76:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2201      	movs	r2, #1
 800dd7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dd82:	2300      	movs	r3, #0
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3708      	adds	r7, #8
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}

0800dd8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	b085      	sub	sp, #20
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd9a:	b2db      	uxtb	r3, r3
 800dd9c:	2b01      	cmp	r3, #1
 800dd9e:	d001      	beq.n	800dda4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dda0:	2301      	movs	r3, #1
 800dda2:	e04f      	b.n	800de44 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2202      	movs	r2, #2
 800dda8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	68da      	ldr	r2, [r3, #12]
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	f042 0201 	orr.w	r2, r2, #1
 800ddba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	4a23      	ldr	r2, [pc, #140]	; (800de50 <HAL_TIM_Base_Start_IT+0xc4>)
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	d01d      	beq.n	800de02 <HAL_TIM_Base_Start_IT+0x76>
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ddce:	d018      	beq.n	800de02 <HAL_TIM_Base_Start_IT+0x76>
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	4a1f      	ldr	r2, [pc, #124]	; (800de54 <HAL_TIM_Base_Start_IT+0xc8>)
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d013      	beq.n	800de02 <HAL_TIM_Base_Start_IT+0x76>
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	4a1e      	ldr	r2, [pc, #120]	; (800de58 <HAL_TIM_Base_Start_IT+0xcc>)
 800dde0:	4293      	cmp	r3, r2
 800dde2:	d00e      	beq.n	800de02 <HAL_TIM_Base_Start_IT+0x76>
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	4a1c      	ldr	r2, [pc, #112]	; (800de5c <HAL_TIM_Base_Start_IT+0xd0>)
 800ddea:	4293      	cmp	r3, r2
 800ddec:	d009      	beq.n	800de02 <HAL_TIM_Base_Start_IT+0x76>
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	4a1b      	ldr	r2, [pc, #108]	; (800de60 <HAL_TIM_Base_Start_IT+0xd4>)
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	d004      	beq.n	800de02 <HAL_TIM_Base_Start_IT+0x76>
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	4a19      	ldr	r2, [pc, #100]	; (800de64 <HAL_TIM_Base_Start_IT+0xd8>)
 800ddfe:	4293      	cmp	r3, r2
 800de00:	d115      	bne.n	800de2e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	689a      	ldr	r2, [r3, #8]
 800de08:	4b17      	ldr	r3, [pc, #92]	; (800de68 <HAL_TIM_Base_Start_IT+0xdc>)
 800de0a:	4013      	ands	r3, r2
 800de0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2b06      	cmp	r3, #6
 800de12:	d015      	beq.n	800de40 <HAL_TIM_Base_Start_IT+0xb4>
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de1a:	d011      	beq.n	800de40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	681a      	ldr	r2, [r3, #0]
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	f042 0201 	orr.w	r2, r2, #1
 800de2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de2c:	e008      	b.n	800de40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	681a      	ldr	r2, [r3, #0]
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	f042 0201 	orr.w	r2, r2, #1
 800de3c:	601a      	str	r2, [r3, #0]
 800de3e:	e000      	b.n	800de42 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800de42:	2300      	movs	r3, #0
}
 800de44:	4618      	mov	r0, r3
 800de46:	3714      	adds	r7, #20
 800de48:	46bd      	mov	sp, r7
 800de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4e:	4770      	bx	lr
 800de50:	40010000 	.word	0x40010000
 800de54:	40000400 	.word	0x40000400
 800de58:	40000800 	.word	0x40000800
 800de5c:	40000c00 	.word	0x40000c00
 800de60:	40010400 	.word	0x40010400
 800de64:	40001800 	.word	0x40001800
 800de68:	00010007 	.word	0x00010007

0800de6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b082      	sub	sp, #8
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	691b      	ldr	r3, [r3, #16]
 800de7a:	f003 0302 	and.w	r3, r3, #2
 800de7e:	2b02      	cmp	r3, #2
 800de80:	d122      	bne.n	800dec8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	68db      	ldr	r3, [r3, #12]
 800de88:	f003 0302 	and.w	r3, r3, #2
 800de8c:	2b02      	cmp	r3, #2
 800de8e:	d11b      	bne.n	800dec8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	f06f 0202 	mvn.w	r2, #2
 800de98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2201      	movs	r2, #1
 800de9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	699b      	ldr	r3, [r3, #24]
 800dea6:	f003 0303 	and.w	r3, r3, #3
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d003      	beq.n	800deb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f000 f905 	bl	800e0be <HAL_TIM_IC_CaptureCallback>
 800deb4:	e005      	b.n	800dec2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f000 f8f7 	bl	800e0aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f000 f908 	bl	800e0d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	2200      	movs	r2, #0
 800dec6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	691b      	ldr	r3, [r3, #16]
 800dece:	f003 0304 	and.w	r3, r3, #4
 800ded2:	2b04      	cmp	r3, #4
 800ded4:	d122      	bne.n	800df1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	68db      	ldr	r3, [r3, #12]
 800dedc:	f003 0304 	and.w	r3, r3, #4
 800dee0:	2b04      	cmp	r3, #4
 800dee2:	d11b      	bne.n	800df1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f06f 0204 	mvn.w	r2, #4
 800deec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2202      	movs	r2, #2
 800def2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	699b      	ldr	r3, [r3, #24]
 800defa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800defe:	2b00      	cmp	r3, #0
 800df00:	d003      	beq.n	800df0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f000 f8db 	bl	800e0be <HAL_TIM_IC_CaptureCallback>
 800df08:	e005      	b.n	800df16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f000 f8cd 	bl	800e0aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f000 f8de 	bl	800e0d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	2200      	movs	r2, #0
 800df1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	691b      	ldr	r3, [r3, #16]
 800df22:	f003 0308 	and.w	r3, r3, #8
 800df26:	2b08      	cmp	r3, #8
 800df28:	d122      	bne.n	800df70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	68db      	ldr	r3, [r3, #12]
 800df30:	f003 0308 	and.w	r3, r3, #8
 800df34:	2b08      	cmp	r3, #8
 800df36:	d11b      	bne.n	800df70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	f06f 0208 	mvn.w	r2, #8
 800df40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2204      	movs	r2, #4
 800df46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	69db      	ldr	r3, [r3, #28]
 800df4e:	f003 0303 	and.w	r3, r3, #3
 800df52:	2b00      	cmp	r3, #0
 800df54:	d003      	beq.n	800df5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f000 f8b1 	bl	800e0be <HAL_TIM_IC_CaptureCallback>
 800df5c:	e005      	b.n	800df6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	f000 f8a3 	bl	800e0aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f000 f8b4 	bl	800e0d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2200      	movs	r2, #0
 800df6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	691b      	ldr	r3, [r3, #16]
 800df76:	f003 0310 	and.w	r3, r3, #16
 800df7a:	2b10      	cmp	r3, #16
 800df7c:	d122      	bne.n	800dfc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	68db      	ldr	r3, [r3, #12]
 800df84:	f003 0310 	and.w	r3, r3, #16
 800df88:	2b10      	cmp	r3, #16
 800df8a:	d11b      	bne.n	800dfc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	f06f 0210 	mvn.w	r2, #16
 800df94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2208      	movs	r2, #8
 800df9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	69db      	ldr	r3, [r3, #28]
 800dfa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d003      	beq.n	800dfb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f000 f887 	bl	800e0be <HAL_TIM_IC_CaptureCallback>
 800dfb0:	e005      	b.n	800dfbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f000 f879 	bl	800e0aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f000 f88a 	bl	800e0d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	691b      	ldr	r3, [r3, #16]
 800dfca:	f003 0301 	and.w	r3, r3, #1
 800dfce:	2b01      	cmp	r3, #1
 800dfd0:	d10e      	bne.n	800dff0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	68db      	ldr	r3, [r3, #12]
 800dfd8:	f003 0301 	and.w	r3, r3, #1
 800dfdc:	2b01      	cmp	r3, #1
 800dfde:	d107      	bne.n	800dff0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	f06f 0201 	mvn.w	r2, #1
 800dfe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f7f5 ffc4 	bl	8003f78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	691b      	ldr	r3, [r3, #16]
 800dff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dffa:	2b80      	cmp	r3, #128	; 0x80
 800dffc:	d10e      	bne.n	800e01c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	68db      	ldr	r3, [r3, #12]
 800e004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e008:	2b80      	cmp	r3, #128	; 0x80
 800e00a:	d107      	bne.n	800e01c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f000 f99c 	bl	800e354 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	691b      	ldr	r3, [r3, #16]
 800e022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e02a:	d10e      	bne.n	800e04a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	68db      	ldr	r3, [r3, #12]
 800e032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e036:	2b80      	cmp	r3, #128	; 0x80
 800e038:	d107      	bne.n	800e04a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	f000 f98f 	bl	800e368 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	691b      	ldr	r3, [r3, #16]
 800e050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e054:	2b40      	cmp	r3, #64	; 0x40
 800e056:	d10e      	bne.n	800e076 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	68db      	ldr	r3, [r3, #12]
 800e05e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e062:	2b40      	cmp	r3, #64	; 0x40
 800e064:	d107      	bne.n	800e076 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e06e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f000 f838 	bl	800e0e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	691b      	ldr	r3, [r3, #16]
 800e07c:	f003 0320 	and.w	r3, r3, #32
 800e080:	2b20      	cmp	r3, #32
 800e082:	d10e      	bne.n	800e0a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	68db      	ldr	r3, [r3, #12]
 800e08a:	f003 0320 	and.w	r3, r3, #32
 800e08e:	2b20      	cmp	r3, #32
 800e090:	d107      	bne.n	800e0a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	f06f 0220 	mvn.w	r2, #32
 800e09a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e09c:	6878      	ldr	r0, [r7, #4]
 800e09e:	f000 f94f 	bl	800e340 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e0a2:	bf00      	nop
 800e0a4:	3708      	adds	r7, #8
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}

0800e0aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e0aa:	b480      	push	{r7}
 800e0ac:	b083      	sub	sp, #12
 800e0ae:	af00      	add	r7, sp, #0
 800e0b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e0b2:	bf00      	nop
 800e0b4:	370c      	adds	r7, #12
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0bc:	4770      	bx	lr

0800e0be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e0be:	b480      	push	{r7}
 800e0c0:	b083      	sub	sp, #12
 800e0c2:	af00      	add	r7, sp, #0
 800e0c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e0c6:	bf00      	nop
 800e0c8:	370c      	adds	r7, #12
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d0:	4770      	bx	lr

0800e0d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e0d2:	b480      	push	{r7}
 800e0d4:	b083      	sub	sp, #12
 800e0d6:	af00      	add	r7, sp, #0
 800e0d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e0da:	bf00      	nop
 800e0dc:	370c      	adds	r7, #12
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e4:	4770      	bx	lr

0800e0e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e0e6:	b480      	push	{r7}
 800e0e8:	b083      	sub	sp, #12
 800e0ea:	af00      	add	r7, sp, #0
 800e0ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e0ee:	bf00      	nop
 800e0f0:	370c      	adds	r7, #12
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f8:	4770      	bx	lr
	...

0800e0fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b085      	sub	sp, #20
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	4a40      	ldr	r2, [pc, #256]	; (800e210 <TIM_Base_SetConfig+0x114>)
 800e110:	4293      	cmp	r3, r2
 800e112:	d013      	beq.n	800e13c <TIM_Base_SetConfig+0x40>
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e11a:	d00f      	beq.n	800e13c <TIM_Base_SetConfig+0x40>
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	4a3d      	ldr	r2, [pc, #244]	; (800e214 <TIM_Base_SetConfig+0x118>)
 800e120:	4293      	cmp	r3, r2
 800e122:	d00b      	beq.n	800e13c <TIM_Base_SetConfig+0x40>
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	4a3c      	ldr	r2, [pc, #240]	; (800e218 <TIM_Base_SetConfig+0x11c>)
 800e128:	4293      	cmp	r3, r2
 800e12a:	d007      	beq.n	800e13c <TIM_Base_SetConfig+0x40>
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	4a3b      	ldr	r2, [pc, #236]	; (800e21c <TIM_Base_SetConfig+0x120>)
 800e130:	4293      	cmp	r3, r2
 800e132:	d003      	beq.n	800e13c <TIM_Base_SetConfig+0x40>
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	4a3a      	ldr	r2, [pc, #232]	; (800e220 <TIM_Base_SetConfig+0x124>)
 800e138:	4293      	cmp	r3, r2
 800e13a:	d108      	bne.n	800e14e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	685b      	ldr	r3, [r3, #4]
 800e148:	68fa      	ldr	r2, [r7, #12]
 800e14a:	4313      	orrs	r3, r2
 800e14c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	4a2f      	ldr	r2, [pc, #188]	; (800e210 <TIM_Base_SetConfig+0x114>)
 800e152:	4293      	cmp	r3, r2
 800e154:	d01f      	beq.n	800e196 <TIM_Base_SetConfig+0x9a>
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e15c:	d01b      	beq.n	800e196 <TIM_Base_SetConfig+0x9a>
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	4a2c      	ldr	r2, [pc, #176]	; (800e214 <TIM_Base_SetConfig+0x118>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d017      	beq.n	800e196 <TIM_Base_SetConfig+0x9a>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	4a2b      	ldr	r2, [pc, #172]	; (800e218 <TIM_Base_SetConfig+0x11c>)
 800e16a:	4293      	cmp	r3, r2
 800e16c:	d013      	beq.n	800e196 <TIM_Base_SetConfig+0x9a>
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	4a2a      	ldr	r2, [pc, #168]	; (800e21c <TIM_Base_SetConfig+0x120>)
 800e172:	4293      	cmp	r3, r2
 800e174:	d00f      	beq.n	800e196 <TIM_Base_SetConfig+0x9a>
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	4a29      	ldr	r2, [pc, #164]	; (800e220 <TIM_Base_SetConfig+0x124>)
 800e17a:	4293      	cmp	r3, r2
 800e17c:	d00b      	beq.n	800e196 <TIM_Base_SetConfig+0x9a>
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	4a28      	ldr	r2, [pc, #160]	; (800e224 <TIM_Base_SetConfig+0x128>)
 800e182:	4293      	cmp	r3, r2
 800e184:	d007      	beq.n	800e196 <TIM_Base_SetConfig+0x9a>
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	4a27      	ldr	r2, [pc, #156]	; (800e228 <TIM_Base_SetConfig+0x12c>)
 800e18a:	4293      	cmp	r3, r2
 800e18c:	d003      	beq.n	800e196 <TIM_Base_SetConfig+0x9a>
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	4a26      	ldr	r2, [pc, #152]	; (800e22c <TIM_Base_SetConfig+0x130>)
 800e192:	4293      	cmp	r3, r2
 800e194:	d108      	bne.n	800e1a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e19c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	68db      	ldr	r3, [r3, #12]
 800e1a2:	68fa      	ldr	r2, [r7, #12]
 800e1a4:	4313      	orrs	r3, r2
 800e1a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	695b      	ldr	r3, [r3, #20]
 800e1b2:	4313      	orrs	r3, r2
 800e1b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	68fa      	ldr	r2, [r7, #12]
 800e1ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	689a      	ldr	r2, [r3, #8]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	681a      	ldr	r2, [r3, #0]
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	4a10      	ldr	r2, [pc, #64]	; (800e210 <TIM_Base_SetConfig+0x114>)
 800e1d0:	4293      	cmp	r3, r2
 800e1d2:	d00f      	beq.n	800e1f4 <TIM_Base_SetConfig+0xf8>
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	4a12      	ldr	r2, [pc, #72]	; (800e220 <TIM_Base_SetConfig+0x124>)
 800e1d8:	4293      	cmp	r3, r2
 800e1da:	d00b      	beq.n	800e1f4 <TIM_Base_SetConfig+0xf8>
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	4a11      	ldr	r2, [pc, #68]	; (800e224 <TIM_Base_SetConfig+0x128>)
 800e1e0:	4293      	cmp	r3, r2
 800e1e2:	d007      	beq.n	800e1f4 <TIM_Base_SetConfig+0xf8>
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	4a10      	ldr	r2, [pc, #64]	; (800e228 <TIM_Base_SetConfig+0x12c>)
 800e1e8:	4293      	cmp	r3, r2
 800e1ea:	d003      	beq.n	800e1f4 <TIM_Base_SetConfig+0xf8>
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	4a0f      	ldr	r2, [pc, #60]	; (800e22c <TIM_Base_SetConfig+0x130>)
 800e1f0:	4293      	cmp	r3, r2
 800e1f2:	d103      	bne.n	800e1fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	691a      	ldr	r2, [r3, #16]
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2201      	movs	r2, #1
 800e200:	615a      	str	r2, [r3, #20]
}
 800e202:	bf00      	nop
 800e204:	3714      	adds	r7, #20
 800e206:	46bd      	mov	sp, r7
 800e208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20c:	4770      	bx	lr
 800e20e:	bf00      	nop
 800e210:	40010000 	.word	0x40010000
 800e214:	40000400 	.word	0x40000400
 800e218:	40000800 	.word	0x40000800
 800e21c:	40000c00 	.word	0x40000c00
 800e220:	40010400 	.word	0x40010400
 800e224:	40014000 	.word	0x40014000
 800e228:	40014400 	.word	0x40014400
 800e22c:	40014800 	.word	0x40014800

0800e230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e230:	b480      	push	{r7}
 800e232:	b085      	sub	sp, #20
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
 800e238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e240:	2b01      	cmp	r3, #1
 800e242:	d101      	bne.n	800e248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e244:	2302      	movs	r3, #2
 800e246:	e068      	b.n	800e31a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2201      	movs	r2, #1
 800e24c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2202      	movs	r2, #2
 800e254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	689b      	ldr	r3, [r3, #8]
 800e266:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	4a2e      	ldr	r2, [pc, #184]	; (800e328 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800e26e:	4293      	cmp	r3, r2
 800e270:	d004      	beq.n	800e27c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	4a2d      	ldr	r2, [pc, #180]	; (800e32c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800e278:	4293      	cmp	r3, r2
 800e27a:	d108      	bne.n	800e28e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e282:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	685b      	ldr	r3, [r3, #4]
 800e288:	68fa      	ldr	r2, [r7, #12]
 800e28a:	4313      	orrs	r3, r2
 800e28c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e294:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	68fa      	ldr	r2, [r7, #12]
 800e29c:	4313      	orrs	r3, r2
 800e29e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	68fa      	ldr	r2, [r7, #12]
 800e2a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	4a1e      	ldr	r2, [pc, #120]	; (800e328 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800e2ae:	4293      	cmp	r3, r2
 800e2b0:	d01d      	beq.n	800e2ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2ba:	d018      	beq.n	800e2ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	4a1b      	ldr	r2, [pc, #108]	; (800e330 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e2c2:	4293      	cmp	r3, r2
 800e2c4:	d013      	beq.n	800e2ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	4a1a      	ldr	r2, [pc, #104]	; (800e334 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e2cc:	4293      	cmp	r3, r2
 800e2ce:	d00e      	beq.n	800e2ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	4a18      	ldr	r2, [pc, #96]	; (800e338 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e2d6:	4293      	cmp	r3, r2
 800e2d8:	d009      	beq.n	800e2ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	4a13      	ldr	r2, [pc, #76]	; (800e32c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800e2e0:	4293      	cmp	r3, r2
 800e2e2:	d004      	beq.n	800e2ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	4a14      	ldr	r2, [pc, #80]	; (800e33c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e2ea:	4293      	cmp	r3, r2
 800e2ec:	d10c      	bne.n	800e308 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e2ee:	68bb      	ldr	r3, [r7, #8]
 800e2f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e2f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	689b      	ldr	r3, [r3, #8]
 800e2fa:	68ba      	ldr	r2, [r7, #8]
 800e2fc:	4313      	orrs	r3, r2
 800e2fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	68ba      	ldr	r2, [r7, #8]
 800e306:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2201      	movs	r2, #1
 800e30c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2200      	movs	r2, #0
 800e314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e318:	2300      	movs	r3, #0
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	3714      	adds	r7, #20
 800e31e:	46bd      	mov	sp, r7
 800e320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e324:	4770      	bx	lr
 800e326:	bf00      	nop
 800e328:	40010000 	.word	0x40010000
 800e32c:	40010400 	.word	0x40010400
 800e330:	40000400 	.word	0x40000400
 800e334:	40000800 	.word	0x40000800
 800e338:	40000c00 	.word	0x40000c00
 800e33c:	40001800 	.word	0x40001800

0800e340 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e340:	b480      	push	{r7}
 800e342:	b083      	sub	sp, #12
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e348:	bf00      	nop
 800e34a:	370c      	adds	r7, #12
 800e34c:	46bd      	mov	sp, r7
 800e34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e352:	4770      	bx	lr

0800e354 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e354:	b480      	push	{r7}
 800e356:	b083      	sub	sp, #12
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e35c:	bf00      	nop
 800e35e:	370c      	adds	r7, #12
 800e360:	46bd      	mov	sp, r7
 800e362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e366:	4770      	bx	lr

0800e368 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e368:	b480      	push	{r7}
 800e36a:	b083      	sub	sp, #12
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e370:	bf00      	nop
 800e372:	370c      	adds	r7, #12
 800e374:	46bd      	mov	sp, r7
 800e376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37a:	4770      	bx	lr

0800e37c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b082      	sub	sp, #8
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d101      	bne.n	800e38e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e38a:	2301      	movs	r3, #1
 800e38c:	e042      	b.n	800e414 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e394:	2b00      	cmp	r3, #0
 800e396:	d106      	bne.n	800e3a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2200      	movs	r2, #0
 800e39c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f7f5 fb57 	bl	8003a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2224      	movs	r2, #36	; 0x24
 800e3aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	681a      	ldr	r2, [r3, #0]
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	f022 0201 	bic.w	r2, r2, #1
 800e3bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f000 fc26 	bl	800ec10 <UART_SetConfig>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	2b01      	cmp	r3, #1
 800e3c8:	d101      	bne.n	800e3ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	e022      	b.n	800e414 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d002      	beq.n	800e3dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f001 f97a 	bl	800f6d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	685a      	ldr	r2, [r3, #4]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e3ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	689a      	ldr	r2, [r3, #8]
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e3fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	681a      	ldr	r2, [r3, #0]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f042 0201 	orr.w	r2, r2, #1
 800e40a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f001 fa01 	bl	800f814 <UART_CheckIdleState>
 800e412:	4603      	mov	r3, r0
}
 800e414:	4618      	mov	r0, r3
 800e416:	3708      	adds	r7, #8
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}

0800e41c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b084      	sub	sp, #16
 800e420:	af00      	add	r7, sp, #0
 800e422:	60f8      	str	r0, [r7, #12]
 800e424:	60b9      	str	r1, [r7, #8]
 800e426:	4613      	mov	r3, r2
 800e428:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e430:	2b20      	cmp	r3, #32
 800e432:	d131      	bne.n	800e498 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d002      	beq.n	800e440 <HAL_UART_Receive_IT+0x24>
 800e43a:	88fb      	ldrh	r3, [r7, #6]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d101      	bne.n	800e444 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e440:	2301      	movs	r3, #1
 800e442:	e02a      	b.n	800e49a <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e44a:	2b01      	cmp	r3, #1
 800e44c:	d101      	bne.n	800e452 <HAL_UART_Receive_IT+0x36>
 800e44e:	2302      	movs	r3, #2
 800e450:	e023      	b.n	800e49a <HAL_UART_Receive_IT+0x7e>
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	2201      	movs	r2, #1
 800e456:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	2200      	movs	r2, #0
 800e45e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	4a0f      	ldr	r2, [pc, #60]	; (800e4a4 <HAL_UART_Receive_IT+0x88>)
 800e466:	4293      	cmp	r3, r2
 800e468:	d00e      	beq.n	800e488 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	685b      	ldr	r3, [r3, #4]
 800e470:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e474:	2b00      	cmp	r3, #0
 800e476:	d007      	beq.n	800e488 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	681a      	ldr	r2, [r3, #0]
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800e486:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e488:	88fb      	ldrh	r3, [r7, #6]
 800e48a:	461a      	mov	r2, r3
 800e48c:	68b9      	ldr	r1, [r7, #8]
 800e48e:	68f8      	ldr	r0, [r7, #12]
 800e490:	f001 fa8c 	bl	800f9ac <UART_Start_Receive_IT>
 800e494:	4603      	mov	r3, r0
 800e496:	e000      	b.n	800e49a <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800e498:	2302      	movs	r3, #2
  }
}
 800e49a:	4618      	mov	r0, r3
 800e49c:	3710      	adds	r7, #16
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}
 800e4a2:	bf00      	nop
 800e4a4:	58000c00 	.word	0x58000c00

0800e4a8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b084      	sub	sp, #16
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	60f8      	str	r0, [r7, #12]
 800e4b0:	60b9      	str	r1, [r7, #8]
 800e4b2:	4613      	mov	r3, r2
 800e4b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4bc:	2b20      	cmp	r3, #32
 800e4be:	d168      	bne.n	800e592 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d002      	beq.n	800e4cc <HAL_UART_Transmit_DMA+0x24>
 800e4c6:	88fb      	ldrh	r3, [r7, #6]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d101      	bne.n	800e4d0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	e061      	b.n	800e594 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	d101      	bne.n	800e4de <HAL_UART_Transmit_DMA+0x36>
 800e4da:	2302      	movs	r3, #2
 800e4dc:	e05a      	b.n	800e594 <HAL_UART_Transmit_DMA+0xec>
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	2201      	movs	r2, #1
 800e4e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	68ba      	ldr	r2, [r7, #8]
 800e4ea:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	88fa      	ldrh	r2, [r7, #6]
 800e4f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	88fa      	ldrh	r2, [r7, #6]
 800e4f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	2200      	movs	r2, #0
 800e500:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	2221      	movs	r2, #33	; 0x21
 800e508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e510:	2b00      	cmp	r3, #0
 800e512:	d02c      	beq.n	800e56e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e518:	4a20      	ldr	r2, [pc, #128]	; (800e59c <HAL_UART_Transmit_DMA+0xf4>)
 800e51a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e520:	4a1f      	ldr	r2, [pc, #124]	; (800e5a0 <HAL_UART_Transmit_DMA+0xf8>)
 800e522:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e528:	4a1e      	ldr	r2, [pc, #120]	; (800e5a4 <HAL_UART_Transmit_DMA+0xfc>)
 800e52a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e530:	2200      	movs	r2, #0
 800e532:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e53c:	4619      	mov	r1, r3
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	3328      	adds	r3, #40	; 0x28
 800e544:	461a      	mov	r2, r3
 800e546:	88fb      	ldrh	r3, [r7, #6]
 800e548:	f7f7 f8a6 	bl	8005698 <HAL_DMA_Start_IT>
 800e54c:	4603      	mov	r3, r0
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d00d      	beq.n	800e56e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	2210      	movs	r2, #16
 800e556:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	2200      	movs	r2, #0
 800e55e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	2220      	movs	r2, #32
 800e566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800e56a:	2301      	movs	r3, #1
 800e56c:	e012      	b.n	800e594 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	2240      	movs	r2, #64	; 0x40
 800e574:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	2200      	movs	r2, #0
 800e57a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	689a      	ldr	r2, [r3, #8]
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e58c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800e58e:	2300      	movs	r3, #0
 800e590:	e000      	b.n	800e594 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800e592:	2302      	movs	r3, #2
  }
}
 800e594:	4618      	mov	r0, r3
 800e596:	3710      	adds	r7, #16
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}
 800e59c:	0800fca5 	.word	0x0800fca5
 800e5a0:	0800fcf5 	.word	0x0800fcf5
 800e5a4:	0800fddf 	.word	0x0800fddf

0800e5a8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b084      	sub	sp, #16
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	60f8      	str	r0, [r7, #12]
 800e5b0:	60b9      	str	r1, [r7, #8]
 800e5b2:	4613      	mov	r3, r2
 800e5b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5bc:	2b20      	cmp	r3, #32
 800e5be:	d131      	bne.n	800e624 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d002      	beq.n	800e5cc <HAL_UART_Receive_DMA+0x24>
 800e5c6:	88fb      	ldrh	r3, [r7, #6]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d101      	bne.n	800e5d0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	e02a      	b.n	800e626 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e5d6:	2b01      	cmp	r3, #1
 800e5d8:	d101      	bne.n	800e5de <HAL_UART_Receive_DMA+0x36>
 800e5da:	2302      	movs	r3, #2
 800e5dc:	e023      	b.n	800e626 <HAL_UART_Receive_DMA+0x7e>
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	2201      	movs	r2, #1
 800e5e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	4a0f      	ldr	r2, [pc, #60]	; (800e630 <HAL_UART_Receive_DMA+0x88>)
 800e5f2:	4293      	cmp	r3, r2
 800e5f4:	d00e      	beq.n	800e614 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	685b      	ldr	r3, [r3, #4]
 800e5fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e600:	2b00      	cmp	r3, #0
 800e602:	d007      	beq.n	800e614 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	681a      	ldr	r2, [r3, #0]
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800e612:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e614:	88fb      	ldrh	r3, [r7, #6]
 800e616:	461a      	mov	r2, r3
 800e618:	68b9      	ldr	r1, [r7, #8]
 800e61a:	68f8      	ldr	r0, [r7, #12]
 800e61c:	f001 fa84 	bl	800fb28 <UART_Start_Receive_DMA>
 800e620:	4603      	mov	r3, r0
 800e622:	e000      	b.n	800e626 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800e624:	2302      	movs	r3, #2
  }
}
 800e626:	4618      	mov	r0, r3
 800e628:	3710      	adds	r7, #16
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}
 800e62e:	bf00      	nop
 800e630:	58000c00 	.word	0x58000c00

0800e634 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b088      	sub	sp, #32
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	69db      	ldr	r3, [r3, #28]
 800e642:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	689b      	ldr	r3, [r3, #8]
 800e652:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e654:	69fa      	ldr	r2, [r7, #28]
 800e656:	f640 030f 	movw	r3, #2063	; 0x80f
 800e65a:	4013      	ands	r3, r2
 800e65c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800e65e:	693b      	ldr	r3, [r7, #16]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d118      	bne.n	800e696 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e664:	69fb      	ldr	r3, [r7, #28]
 800e666:	f003 0320 	and.w	r3, r3, #32
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d013      	beq.n	800e696 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e66e:	69bb      	ldr	r3, [r7, #24]
 800e670:	f003 0320 	and.w	r3, r3, #32
 800e674:	2b00      	cmp	r3, #0
 800e676:	d104      	bne.n	800e682 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d009      	beq.n	800e696 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e686:	2b00      	cmp	r3, #0
 800e688:	f000 8282 	beq.w	800eb90 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e690:	6878      	ldr	r0, [r7, #4]
 800e692:	4798      	blx	r3
      }
      return;
 800e694:	e27c      	b.n	800eb90 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	f000 80ef 	beq.w	800e87c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e69e:	697a      	ldr	r2, [r7, #20]
 800e6a0:	4b73      	ldr	r3, [pc, #460]	; (800e870 <HAL_UART_IRQHandler+0x23c>)
 800e6a2:	4013      	ands	r3, r2
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d105      	bne.n	800e6b4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e6a8:	69ba      	ldr	r2, [r7, #24]
 800e6aa:	4b72      	ldr	r3, [pc, #456]	; (800e874 <HAL_UART_IRQHandler+0x240>)
 800e6ac:	4013      	ands	r3, r2
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	f000 80e4 	beq.w	800e87c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e6b4:	69fb      	ldr	r3, [r7, #28]
 800e6b6:	f003 0301 	and.w	r3, r3, #1
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d010      	beq.n	800e6e0 <HAL_UART_IRQHandler+0xac>
 800e6be:	69bb      	ldr	r3, [r7, #24]
 800e6c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d00b      	beq.n	800e6e0 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	2201      	movs	r2, #1
 800e6ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e6d6:	f043 0201 	orr.w	r2, r3, #1
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e6e0:	69fb      	ldr	r3, [r7, #28]
 800e6e2:	f003 0302 	and.w	r3, r3, #2
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d010      	beq.n	800e70c <HAL_UART_IRQHandler+0xd8>
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	f003 0301 	and.w	r3, r3, #1
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d00b      	beq.n	800e70c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	2202      	movs	r2, #2
 800e6fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e702:	f043 0204 	orr.w	r2, r3, #4
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e70c:	69fb      	ldr	r3, [r7, #28]
 800e70e:	f003 0304 	and.w	r3, r3, #4
 800e712:	2b00      	cmp	r3, #0
 800e714:	d010      	beq.n	800e738 <HAL_UART_IRQHandler+0x104>
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	f003 0301 	and.w	r3, r3, #1
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d00b      	beq.n	800e738 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	2204      	movs	r2, #4
 800e726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e72e:	f043 0202 	orr.w	r2, r3, #2
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e738:	69fb      	ldr	r3, [r7, #28]
 800e73a:	f003 0308 	and.w	r3, r3, #8
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d015      	beq.n	800e76e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e742:	69bb      	ldr	r3, [r7, #24]
 800e744:	f003 0320 	and.w	r3, r3, #32
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d104      	bne.n	800e756 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e74c:	697a      	ldr	r2, [r7, #20]
 800e74e:	4b48      	ldr	r3, [pc, #288]	; (800e870 <HAL_UART_IRQHandler+0x23c>)
 800e750:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e752:	2b00      	cmp	r3, #0
 800e754:	d00b      	beq.n	800e76e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	2208      	movs	r2, #8
 800e75c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e764:	f043 0208 	orr.w	r2, r3, #8
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e76e:	69fb      	ldr	r3, [r7, #28]
 800e770:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e774:	2b00      	cmp	r3, #0
 800e776:	d011      	beq.n	800e79c <HAL_UART_IRQHandler+0x168>
 800e778:	69bb      	ldr	r3, [r7, #24]
 800e77a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d00c      	beq.n	800e79c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e78a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e792:	f043 0220 	orr.w	r2, r3, #32
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	f000 81f6 	beq.w	800eb94 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e7a8:	69fb      	ldr	r3, [r7, #28]
 800e7aa:	f003 0320 	and.w	r3, r3, #32
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d011      	beq.n	800e7d6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e7b2:	69bb      	ldr	r3, [r7, #24]
 800e7b4:	f003 0320 	and.w	r3, r3, #32
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d104      	bne.n	800e7c6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d007      	beq.n	800e7d6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d003      	beq.n	800e7d6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e7dc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	689b      	ldr	r3, [r3, #8]
 800e7e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7e8:	2b40      	cmp	r3, #64	; 0x40
 800e7ea:	d004      	beq.n	800e7f6 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d031      	beq.n	800e85a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f001 fa22 	bl	800fc40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	689b      	ldr	r3, [r3, #8]
 800e802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e806:	2b40      	cmp	r3, #64	; 0x40
 800e808:	d123      	bne.n	800e852 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	689a      	ldr	r2, [r3, #8]
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e818:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d013      	beq.n	800e84a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e826:	4a14      	ldr	r2, [pc, #80]	; (800e878 <HAL_UART_IRQHandler+0x244>)
 800e828:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e82e:	4618      	mov	r0, r3
 800e830:	f7f7 fcba 	bl	80061a8 <HAL_DMA_Abort_IT>
 800e834:	4603      	mov	r3, r0
 800e836:	2b00      	cmp	r3, #0
 800e838:	d017      	beq.n	800e86a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e83e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e840:	687a      	ldr	r2, [r7, #4]
 800e842:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e844:	4610      	mov	r0, r2
 800e846:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e848:	e00f      	b.n	800e86a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f000 f9ca 	bl	800ebe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e850:	e00b      	b.n	800e86a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f000 f9c6 	bl	800ebe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e858:	e007      	b.n	800e86a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f000 f9c2 	bl	800ebe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2200      	movs	r2, #0
 800e864:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e868:	e194      	b.n	800eb94 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e86a:	bf00      	nop
    return;
 800e86c:	e192      	b.n	800eb94 <HAL_UART_IRQHandler+0x560>
 800e86e:	bf00      	nop
 800e870:	10000001 	.word	0x10000001
 800e874:	04000120 	.word	0x04000120
 800e878:	0800fe5f 	.word	0x0800fe5f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e880:	2b01      	cmp	r3, #1
 800e882:	f040 810f 	bne.w	800eaa4 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e886:	69fb      	ldr	r3, [r7, #28]
 800e888:	f003 0310 	and.w	r3, r3, #16
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	f000 8109 	beq.w	800eaa4 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e892:	69bb      	ldr	r3, [r7, #24]
 800e894:	f003 0310 	and.w	r3, r3, #16
 800e898:	2b00      	cmp	r3, #0
 800e89a:	f000 8103 	beq.w	800eaa4 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	2210      	movs	r2, #16
 800e8a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	689b      	ldr	r3, [r3, #8]
 800e8ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8b0:	2b40      	cmp	r3, #64	; 0x40
 800e8b2:	f040 80bb 	bne.w	800ea2c <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	4a96      	ldr	r2, [pc, #600]	; (800eb18 <HAL_UART_IRQHandler+0x4e4>)
 800e8be:	4293      	cmp	r3, r2
 800e8c0:	d059      	beq.n	800e976 <HAL_UART_IRQHandler+0x342>
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	4a94      	ldr	r2, [pc, #592]	; (800eb1c <HAL_UART_IRQHandler+0x4e8>)
 800e8ca:	4293      	cmp	r3, r2
 800e8cc:	d053      	beq.n	800e976 <HAL_UART_IRQHandler+0x342>
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	4a92      	ldr	r2, [pc, #584]	; (800eb20 <HAL_UART_IRQHandler+0x4ec>)
 800e8d6:	4293      	cmp	r3, r2
 800e8d8:	d04d      	beq.n	800e976 <HAL_UART_IRQHandler+0x342>
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	4a90      	ldr	r2, [pc, #576]	; (800eb24 <HAL_UART_IRQHandler+0x4f0>)
 800e8e2:	4293      	cmp	r3, r2
 800e8e4:	d047      	beq.n	800e976 <HAL_UART_IRQHandler+0x342>
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	4a8e      	ldr	r2, [pc, #568]	; (800eb28 <HAL_UART_IRQHandler+0x4f4>)
 800e8ee:	4293      	cmp	r3, r2
 800e8f0:	d041      	beq.n	800e976 <HAL_UART_IRQHandler+0x342>
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	4a8c      	ldr	r2, [pc, #560]	; (800eb2c <HAL_UART_IRQHandler+0x4f8>)
 800e8fa:	4293      	cmp	r3, r2
 800e8fc:	d03b      	beq.n	800e976 <HAL_UART_IRQHandler+0x342>
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	4a8a      	ldr	r2, [pc, #552]	; (800eb30 <HAL_UART_IRQHandler+0x4fc>)
 800e906:	4293      	cmp	r3, r2
 800e908:	d035      	beq.n	800e976 <HAL_UART_IRQHandler+0x342>
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	4a88      	ldr	r2, [pc, #544]	; (800eb34 <HAL_UART_IRQHandler+0x500>)
 800e912:	4293      	cmp	r3, r2
 800e914:	d02f      	beq.n	800e976 <HAL_UART_IRQHandler+0x342>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	4a86      	ldr	r2, [pc, #536]	; (800eb38 <HAL_UART_IRQHandler+0x504>)
 800e91e:	4293      	cmp	r3, r2
 800e920:	d029      	beq.n	800e976 <HAL_UART_IRQHandler+0x342>
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	4a84      	ldr	r2, [pc, #528]	; (800eb3c <HAL_UART_IRQHandler+0x508>)
 800e92a:	4293      	cmp	r3, r2
 800e92c:	d023      	beq.n	800e976 <HAL_UART_IRQHandler+0x342>
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	4a82      	ldr	r2, [pc, #520]	; (800eb40 <HAL_UART_IRQHandler+0x50c>)
 800e936:	4293      	cmp	r3, r2
 800e938:	d01d      	beq.n	800e976 <HAL_UART_IRQHandler+0x342>
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	4a80      	ldr	r2, [pc, #512]	; (800eb44 <HAL_UART_IRQHandler+0x510>)
 800e942:	4293      	cmp	r3, r2
 800e944:	d017      	beq.n	800e976 <HAL_UART_IRQHandler+0x342>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	4a7e      	ldr	r2, [pc, #504]	; (800eb48 <HAL_UART_IRQHandler+0x514>)
 800e94e:	4293      	cmp	r3, r2
 800e950:	d011      	beq.n	800e976 <HAL_UART_IRQHandler+0x342>
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	4a7c      	ldr	r2, [pc, #496]	; (800eb4c <HAL_UART_IRQHandler+0x518>)
 800e95a:	4293      	cmp	r3, r2
 800e95c:	d00b      	beq.n	800e976 <HAL_UART_IRQHandler+0x342>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	4a7a      	ldr	r2, [pc, #488]	; (800eb50 <HAL_UART_IRQHandler+0x51c>)
 800e966:	4293      	cmp	r3, r2
 800e968:	d005      	beq.n	800e976 <HAL_UART_IRQHandler+0x342>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	4a78      	ldr	r2, [pc, #480]	; (800eb54 <HAL_UART_IRQHandler+0x520>)
 800e972:	4293      	cmp	r3, r2
 800e974:	d105      	bne.n	800e982 <HAL_UART_IRQHandler+0x34e>
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	685b      	ldr	r3, [r3, #4]
 800e97e:	b29b      	uxth	r3, r3
 800e980:	e004      	b.n	800e98c <HAL_UART_IRQHandler+0x358>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	685b      	ldr	r3, [r3, #4]
 800e98a:	b29b      	uxth	r3, r3
 800e98c:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800e98e:	893b      	ldrh	r3, [r7, #8]
 800e990:	2b00      	cmp	r3, #0
 800e992:	f000 8101 	beq.w	800eb98 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e99c:	893a      	ldrh	r2, [r7, #8]
 800e99e:	429a      	cmp	r2, r3
 800e9a0:	f080 80fa 	bcs.w	800eb98 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	893a      	ldrh	r2, [r7, #8]
 800e9a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9b0:	69db      	ldr	r3, [r3, #28]
 800e9b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9b6:	d02b      	beq.n	800ea10 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	681a      	ldr	r2, [r3, #0]
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e9c6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	689a      	ldr	r2, [r3, #8]
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	f022 0201 	bic.w	r2, r2, #1
 800e9d6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	689a      	ldr	r2, [r3, #8]
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e9e6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2220      	movs	r2, #32
 800e9ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	681a      	ldr	r2, [r3, #0]
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	f022 0210 	bic.w	r2, r2, #16
 800ea04:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f7f7 f8ae 	bl	8005b6c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ea1c:	b29b      	uxth	r3, r3
 800ea1e:	1ad3      	subs	r3, r2, r3
 800ea20:	b29b      	uxth	r3, r3
 800ea22:	4619      	mov	r1, r3
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f000 f8e7 	bl	800ebf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ea2a:	e0b5      	b.n	800eb98 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ea38:	b29b      	uxth	r3, r3
 800ea3a:	1ad3      	subs	r3, r2, r3
 800ea3c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ea44:	b29b      	uxth	r3, r3
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	f000 80a8 	beq.w	800eb9c <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800ea4c:	897b      	ldrh	r3, [r7, #10]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	f000 80a4 	beq.w	800eb9c <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	681a      	ldr	r2, [r3, #0]
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ea62:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	6899      	ldr	r1, [r3, #8]
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681a      	ldr	r2, [r3, #0]
 800ea6e:	4b3a      	ldr	r3, [pc, #232]	; (800eb58 <HAL_UART_IRQHandler+0x524>)
 800ea70:	400b      	ands	r3, r1
 800ea72:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2220      	movs	r2, #32
 800ea78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2200      	movs	r2, #0
 800ea80:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2200      	movs	r2, #0
 800ea86:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	681a      	ldr	r2, [r3, #0]
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	f022 0210 	bic.w	r2, r2, #16
 800ea96:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ea98:	897b      	ldrh	r3, [r7, #10]
 800ea9a:	4619      	mov	r1, r3
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f000 f8ab 	bl	800ebf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800eaa2:	e07b      	b.n	800eb9c <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800eaa4:	69fb      	ldr	r3, [r7, #28]
 800eaa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d00d      	beq.n	800eaca <HAL_UART_IRQHandler+0x496>
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d008      	beq.n	800eaca <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800eac0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f001 fcd8 	bl	8010478 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eac8:	e06b      	b.n	800eba2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800eaca:	69fb      	ldr	r3, [r7, #28]
 800eacc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d012      	beq.n	800eafa <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ead4:	69bb      	ldr	r3, [r7, #24]
 800ead6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d104      	bne.n	800eae8 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800eade:	697b      	ldr	r3, [r7, #20]
 800eae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d008      	beq.n	800eafa <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d057      	beq.n	800eba0 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	4798      	blx	r3
    }
    return;
 800eaf8:	e052      	b.n	800eba0 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800eafa:	69fb      	ldr	r3, [r7, #28]
 800eafc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d02b      	beq.n	800eb5c <HAL_UART_IRQHandler+0x528>
 800eb04:	69bb      	ldr	r3, [r7, #24]
 800eb06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d026      	beq.n	800eb5c <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800eb0e:	6878      	ldr	r0, [r7, #4]
 800eb10:	f001 f9bb 	bl	800fe8a <UART_EndTransmit_IT>
    return;
 800eb14:	e045      	b.n	800eba2 <HAL_UART_IRQHandler+0x56e>
 800eb16:	bf00      	nop
 800eb18:	40020010 	.word	0x40020010
 800eb1c:	40020028 	.word	0x40020028
 800eb20:	40020040 	.word	0x40020040
 800eb24:	40020058 	.word	0x40020058
 800eb28:	40020070 	.word	0x40020070
 800eb2c:	40020088 	.word	0x40020088
 800eb30:	400200a0 	.word	0x400200a0
 800eb34:	400200b8 	.word	0x400200b8
 800eb38:	40020410 	.word	0x40020410
 800eb3c:	40020428 	.word	0x40020428
 800eb40:	40020440 	.word	0x40020440
 800eb44:	40020458 	.word	0x40020458
 800eb48:	40020470 	.word	0x40020470
 800eb4c:	40020488 	.word	0x40020488
 800eb50:	400204a0 	.word	0x400204a0
 800eb54:	400204b8 	.word	0x400204b8
 800eb58:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800eb5c:	69fb      	ldr	r3, [r7, #28]
 800eb5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d008      	beq.n	800eb78 <HAL_UART_IRQHandler+0x544>
 800eb66:	69bb      	ldr	r3, [r7, #24]
 800eb68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d003      	beq.n	800eb78 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	f001 fc95 	bl	80104a0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eb76:	e014      	b.n	800eba2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800eb78:	69fb      	ldr	r3, [r7, #28]
 800eb7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d00f      	beq.n	800eba2 <HAL_UART_IRQHandler+0x56e>
 800eb82:	69bb      	ldr	r3, [r7, #24]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	da0c      	bge.n	800eba2 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	f001 fc7f 	bl	801048c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eb8e:	e008      	b.n	800eba2 <HAL_UART_IRQHandler+0x56e>
      return;
 800eb90:	bf00      	nop
 800eb92:	e006      	b.n	800eba2 <HAL_UART_IRQHandler+0x56e>
    return;
 800eb94:	bf00      	nop
 800eb96:	e004      	b.n	800eba2 <HAL_UART_IRQHandler+0x56e>
      return;
 800eb98:	bf00      	nop
 800eb9a:	e002      	b.n	800eba2 <HAL_UART_IRQHandler+0x56e>
      return;
 800eb9c:	bf00      	nop
 800eb9e:	e000      	b.n	800eba2 <HAL_UART_IRQHandler+0x56e>
    return;
 800eba0:	bf00      	nop
  }
}
 800eba2:	3720      	adds	r7, #32
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}

0800eba8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b083      	sub	sp, #12
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ebb0:	bf00      	nop
 800ebb2:	370c      	adds	r7, #12
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr

0800ebbc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	b083      	sub	sp, #12
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ebc4:	bf00      	nop
 800ebc6:	370c      	adds	r7, #12
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebce:	4770      	bx	lr

0800ebd0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	b083      	sub	sp, #12
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ebd8:	bf00      	nop
 800ebda:	370c      	adds	r7, #12
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe2:	4770      	bx	lr

0800ebe4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ebe4:	b480      	push	{r7}
 800ebe6:	b083      	sub	sp, #12
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ebec:	bf00      	nop
 800ebee:	370c      	adds	r7, #12
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf6:	4770      	bx	lr

0800ebf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b083      	sub	sp, #12
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	460b      	mov	r3, r1
 800ec02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ec04:	bf00      	nop
 800ec06:	370c      	adds	r7, #12
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0e:	4770      	bx	lr

0800ec10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ec10:	b5b0      	push	{r4, r5, r7, lr}
 800ec12:	b08e      	sub	sp, #56	; 0x38
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	689a      	ldr	r2, [r3, #8]
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	691b      	ldr	r3, [r3, #16]
 800ec26:	431a      	orrs	r2, r3
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	695b      	ldr	r3, [r3, #20]
 800ec2c:	431a      	orrs	r2, r3
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	69db      	ldr	r3, [r3, #28]
 800ec32:	4313      	orrs	r3, r2
 800ec34:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	681a      	ldr	r2, [r3, #0]
 800ec3c:	4bbf      	ldr	r3, [pc, #764]	; (800ef3c <UART_SetConfig+0x32c>)
 800ec3e:	4013      	ands	r3, r2
 800ec40:	687a      	ldr	r2, [r7, #4]
 800ec42:	6812      	ldr	r2, [r2, #0]
 800ec44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ec46:	430b      	orrs	r3, r1
 800ec48:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	685b      	ldr	r3, [r3, #4]
 800ec50:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	68da      	ldr	r2, [r3, #12]
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	430a      	orrs	r2, r1
 800ec5e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	699b      	ldr	r3, [r3, #24]
 800ec64:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	4ab5      	ldr	r2, [pc, #724]	; (800ef40 <UART_SetConfig+0x330>)
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d004      	beq.n	800ec7a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	6a1b      	ldr	r3, [r3, #32]
 800ec74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec76:	4313      	orrs	r3, r2
 800ec78:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	689a      	ldr	r2, [r3, #8]
 800ec80:	4bb0      	ldr	r3, [pc, #704]	; (800ef44 <UART_SetConfig+0x334>)
 800ec82:	4013      	ands	r3, r2
 800ec84:	687a      	ldr	r2, [r7, #4]
 800ec86:	6812      	ldr	r2, [r2, #0]
 800ec88:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ec8a:	430b      	orrs	r3, r1
 800ec8c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec94:	f023 010f 	bic.w	r1, r3, #15
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	430a      	orrs	r2, r1
 800eca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	4aa7      	ldr	r2, [pc, #668]	; (800ef48 <UART_SetConfig+0x338>)
 800ecaa:	4293      	cmp	r3, r2
 800ecac:	d176      	bne.n	800ed9c <UART_SetConfig+0x18c>
 800ecae:	4ba7      	ldr	r3, [pc, #668]	; (800ef4c <UART_SetConfig+0x33c>)
 800ecb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ecb6:	2b28      	cmp	r3, #40	; 0x28
 800ecb8:	d86c      	bhi.n	800ed94 <UART_SetConfig+0x184>
 800ecba:	a201      	add	r2, pc, #4	; (adr r2, 800ecc0 <UART_SetConfig+0xb0>)
 800ecbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecc0:	0800ed65 	.word	0x0800ed65
 800ecc4:	0800ed95 	.word	0x0800ed95
 800ecc8:	0800ed95 	.word	0x0800ed95
 800eccc:	0800ed95 	.word	0x0800ed95
 800ecd0:	0800ed95 	.word	0x0800ed95
 800ecd4:	0800ed95 	.word	0x0800ed95
 800ecd8:	0800ed95 	.word	0x0800ed95
 800ecdc:	0800ed95 	.word	0x0800ed95
 800ece0:	0800ed6d 	.word	0x0800ed6d
 800ece4:	0800ed95 	.word	0x0800ed95
 800ece8:	0800ed95 	.word	0x0800ed95
 800ecec:	0800ed95 	.word	0x0800ed95
 800ecf0:	0800ed95 	.word	0x0800ed95
 800ecf4:	0800ed95 	.word	0x0800ed95
 800ecf8:	0800ed95 	.word	0x0800ed95
 800ecfc:	0800ed95 	.word	0x0800ed95
 800ed00:	0800ed75 	.word	0x0800ed75
 800ed04:	0800ed95 	.word	0x0800ed95
 800ed08:	0800ed95 	.word	0x0800ed95
 800ed0c:	0800ed95 	.word	0x0800ed95
 800ed10:	0800ed95 	.word	0x0800ed95
 800ed14:	0800ed95 	.word	0x0800ed95
 800ed18:	0800ed95 	.word	0x0800ed95
 800ed1c:	0800ed95 	.word	0x0800ed95
 800ed20:	0800ed7d 	.word	0x0800ed7d
 800ed24:	0800ed95 	.word	0x0800ed95
 800ed28:	0800ed95 	.word	0x0800ed95
 800ed2c:	0800ed95 	.word	0x0800ed95
 800ed30:	0800ed95 	.word	0x0800ed95
 800ed34:	0800ed95 	.word	0x0800ed95
 800ed38:	0800ed95 	.word	0x0800ed95
 800ed3c:	0800ed95 	.word	0x0800ed95
 800ed40:	0800ed85 	.word	0x0800ed85
 800ed44:	0800ed95 	.word	0x0800ed95
 800ed48:	0800ed95 	.word	0x0800ed95
 800ed4c:	0800ed95 	.word	0x0800ed95
 800ed50:	0800ed95 	.word	0x0800ed95
 800ed54:	0800ed95 	.word	0x0800ed95
 800ed58:	0800ed95 	.word	0x0800ed95
 800ed5c:	0800ed95 	.word	0x0800ed95
 800ed60:	0800ed8d 	.word	0x0800ed8d
 800ed64:	2301      	movs	r3, #1
 800ed66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed6a:	e222      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800ed6c:	2304      	movs	r3, #4
 800ed6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed72:	e21e      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800ed74:	2308      	movs	r3, #8
 800ed76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed7a:	e21a      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800ed7c:	2310      	movs	r3, #16
 800ed7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed82:	e216      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800ed84:	2320      	movs	r3, #32
 800ed86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed8a:	e212      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800ed8c:	2340      	movs	r3, #64	; 0x40
 800ed8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed92:	e20e      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800ed94:	2380      	movs	r3, #128	; 0x80
 800ed96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed9a:	e20a      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	4a6b      	ldr	r2, [pc, #428]	; (800ef50 <UART_SetConfig+0x340>)
 800eda2:	4293      	cmp	r3, r2
 800eda4:	d130      	bne.n	800ee08 <UART_SetConfig+0x1f8>
 800eda6:	4b69      	ldr	r3, [pc, #420]	; (800ef4c <UART_SetConfig+0x33c>)
 800eda8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edaa:	f003 0307 	and.w	r3, r3, #7
 800edae:	2b05      	cmp	r3, #5
 800edb0:	d826      	bhi.n	800ee00 <UART_SetConfig+0x1f0>
 800edb2:	a201      	add	r2, pc, #4	; (adr r2, 800edb8 <UART_SetConfig+0x1a8>)
 800edb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edb8:	0800edd1 	.word	0x0800edd1
 800edbc:	0800edd9 	.word	0x0800edd9
 800edc0:	0800ede1 	.word	0x0800ede1
 800edc4:	0800ede9 	.word	0x0800ede9
 800edc8:	0800edf1 	.word	0x0800edf1
 800edcc:	0800edf9 	.word	0x0800edf9
 800edd0:	2300      	movs	r3, #0
 800edd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edd6:	e1ec      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800edd8:	2304      	movs	r3, #4
 800edda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edde:	e1e8      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800ede0:	2308      	movs	r3, #8
 800ede2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ede6:	e1e4      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800ede8:	2310      	movs	r3, #16
 800edea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edee:	e1e0      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800edf0:	2320      	movs	r3, #32
 800edf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edf6:	e1dc      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800edf8:	2340      	movs	r3, #64	; 0x40
 800edfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edfe:	e1d8      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800ee00:	2380      	movs	r3, #128	; 0x80
 800ee02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee06:	e1d4      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	4a51      	ldr	r2, [pc, #324]	; (800ef54 <UART_SetConfig+0x344>)
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	d130      	bne.n	800ee74 <UART_SetConfig+0x264>
 800ee12:	4b4e      	ldr	r3, [pc, #312]	; (800ef4c <UART_SetConfig+0x33c>)
 800ee14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee16:	f003 0307 	and.w	r3, r3, #7
 800ee1a:	2b05      	cmp	r3, #5
 800ee1c:	d826      	bhi.n	800ee6c <UART_SetConfig+0x25c>
 800ee1e:	a201      	add	r2, pc, #4	; (adr r2, 800ee24 <UART_SetConfig+0x214>)
 800ee20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee24:	0800ee3d 	.word	0x0800ee3d
 800ee28:	0800ee45 	.word	0x0800ee45
 800ee2c:	0800ee4d 	.word	0x0800ee4d
 800ee30:	0800ee55 	.word	0x0800ee55
 800ee34:	0800ee5d 	.word	0x0800ee5d
 800ee38:	0800ee65 	.word	0x0800ee65
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee42:	e1b6      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800ee44:	2304      	movs	r3, #4
 800ee46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee4a:	e1b2      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800ee4c:	2308      	movs	r3, #8
 800ee4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee52:	e1ae      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800ee54:	2310      	movs	r3, #16
 800ee56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee5a:	e1aa      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800ee5c:	2320      	movs	r3, #32
 800ee5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee62:	e1a6      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800ee64:	2340      	movs	r3, #64	; 0x40
 800ee66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee6a:	e1a2      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800ee6c:	2380      	movs	r3, #128	; 0x80
 800ee6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee72:	e19e      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	4a37      	ldr	r2, [pc, #220]	; (800ef58 <UART_SetConfig+0x348>)
 800ee7a:	4293      	cmp	r3, r2
 800ee7c:	d130      	bne.n	800eee0 <UART_SetConfig+0x2d0>
 800ee7e:	4b33      	ldr	r3, [pc, #204]	; (800ef4c <UART_SetConfig+0x33c>)
 800ee80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee82:	f003 0307 	and.w	r3, r3, #7
 800ee86:	2b05      	cmp	r3, #5
 800ee88:	d826      	bhi.n	800eed8 <UART_SetConfig+0x2c8>
 800ee8a:	a201      	add	r2, pc, #4	; (adr r2, 800ee90 <UART_SetConfig+0x280>)
 800ee8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee90:	0800eea9 	.word	0x0800eea9
 800ee94:	0800eeb1 	.word	0x0800eeb1
 800ee98:	0800eeb9 	.word	0x0800eeb9
 800ee9c:	0800eec1 	.word	0x0800eec1
 800eea0:	0800eec9 	.word	0x0800eec9
 800eea4:	0800eed1 	.word	0x0800eed1
 800eea8:	2300      	movs	r3, #0
 800eeaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eeae:	e180      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800eeb0:	2304      	movs	r3, #4
 800eeb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eeb6:	e17c      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800eeb8:	2308      	movs	r3, #8
 800eeba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eebe:	e178      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800eec0:	2310      	movs	r3, #16
 800eec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eec6:	e174      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800eec8:	2320      	movs	r3, #32
 800eeca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eece:	e170      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800eed0:	2340      	movs	r3, #64	; 0x40
 800eed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eed6:	e16c      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800eed8:	2380      	movs	r3, #128	; 0x80
 800eeda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eede:	e168      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	4a1d      	ldr	r2, [pc, #116]	; (800ef5c <UART_SetConfig+0x34c>)
 800eee6:	4293      	cmp	r3, r2
 800eee8:	d142      	bne.n	800ef70 <UART_SetConfig+0x360>
 800eeea:	4b18      	ldr	r3, [pc, #96]	; (800ef4c <UART_SetConfig+0x33c>)
 800eeec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eeee:	f003 0307 	and.w	r3, r3, #7
 800eef2:	2b05      	cmp	r3, #5
 800eef4:	d838      	bhi.n	800ef68 <UART_SetConfig+0x358>
 800eef6:	a201      	add	r2, pc, #4	; (adr r2, 800eefc <UART_SetConfig+0x2ec>)
 800eef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eefc:	0800ef15 	.word	0x0800ef15
 800ef00:	0800ef1d 	.word	0x0800ef1d
 800ef04:	0800ef25 	.word	0x0800ef25
 800ef08:	0800ef2d 	.word	0x0800ef2d
 800ef0c:	0800ef35 	.word	0x0800ef35
 800ef10:	0800ef61 	.word	0x0800ef61
 800ef14:	2300      	movs	r3, #0
 800ef16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef1a:	e14a      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800ef1c:	2304      	movs	r3, #4
 800ef1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef22:	e146      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800ef24:	2308      	movs	r3, #8
 800ef26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef2a:	e142      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800ef2c:	2310      	movs	r3, #16
 800ef2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef32:	e13e      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800ef34:	2320      	movs	r3, #32
 800ef36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef3a:	e13a      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800ef3c:	cfff69f3 	.word	0xcfff69f3
 800ef40:	58000c00 	.word	0x58000c00
 800ef44:	11fff4ff 	.word	0x11fff4ff
 800ef48:	40011000 	.word	0x40011000
 800ef4c:	58024400 	.word	0x58024400
 800ef50:	40004400 	.word	0x40004400
 800ef54:	40004800 	.word	0x40004800
 800ef58:	40004c00 	.word	0x40004c00
 800ef5c:	40005000 	.word	0x40005000
 800ef60:	2340      	movs	r3, #64	; 0x40
 800ef62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef66:	e124      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800ef68:	2380      	movs	r3, #128	; 0x80
 800ef6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef6e:	e120      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	4acc      	ldr	r2, [pc, #816]	; (800f2a8 <UART_SetConfig+0x698>)
 800ef76:	4293      	cmp	r3, r2
 800ef78:	d176      	bne.n	800f068 <UART_SetConfig+0x458>
 800ef7a:	4bcc      	ldr	r3, [pc, #816]	; (800f2ac <UART_SetConfig+0x69c>)
 800ef7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ef82:	2b28      	cmp	r3, #40	; 0x28
 800ef84:	d86c      	bhi.n	800f060 <UART_SetConfig+0x450>
 800ef86:	a201      	add	r2, pc, #4	; (adr r2, 800ef8c <UART_SetConfig+0x37c>)
 800ef88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef8c:	0800f031 	.word	0x0800f031
 800ef90:	0800f061 	.word	0x0800f061
 800ef94:	0800f061 	.word	0x0800f061
 800ef98:	0800f061 	.word	0x0800f061
 800ef9c:	0800f061 	.word	0x0800f061
 800efa0:	0800f061 	.word	0x0800f061
 800efa4:	0800f061 	.word	0x0800f061
 800efa8:	0800f061 	.word	0x0800f061
 800efac:	0800f039 	.word	0x0800f039
 800efb0:	0800f061 	.word	0x0800f061
 800efb4:	0800f061 	.word	0x0800f061
 800efb8:	0800f061 	.word	0x0800f061
 800efbc:	0800f061 	.word	0x0800f061
 800efc0:	0800f061 	.word	0x0800f061
 800efc4:	0800f061 	.word	0x0800f061
 800efc8:	0800f061 	.word	0x0800f061
 800efcc:	0800f041 	.word	0x0800f041
 800efd0:	0800f061 	.word	0x0800f061
 800efd4:	0800f061 	.word	0x0800f061
 800efd8:	0800f061 	.word	0x0800f061
 800efdc:	0800f061 	.word	0x0800f061
 800efe0:	0800f061 	.word	0x0800f061
 800efe4:	0800f061 	.word	0x0800f061
 800efe8:	0800f061 	.word	0x0800f061
 800efec:	0800f049 	.word	0x0800f049
 800eff0:	0800f061 	.word	0x0800f061
 800eff4:	0800f061 	.word	0x0800f061
 800eff8:	0800f061 	.word	0x0800f061
 800effc:	0800f061 	.word	0x0800f061
 800f000:	0800f061 	.word	0x0800f061
 800f004:	0800f061 	.word	0x0800f061
 800f008:	0800f061 	.word	0x0800f061
 800f00c:	0800f051 	.word	0x0800f051
 800f010:	0800f061 	.word	0x0800f061
 800f014:	0800f061 	.word	0x0800f061
 800f018:	0800f061 	.word	0x0800f061
 800f01c:	0800f061 	.word	0x0800f061
 800f020:	0800f061 	.word	0x0800f061
 800f024:	0800f061 	.word	0x0800f061
 800f028:	0800f061 	.word	0x0800f061
 800f02c:	0800f059 	.word	0x0800f059
 800f030:	2301      	movs	r3, #1
 800f032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f036:	e0bc      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800f038:	2304      	movs	r3, #4
 800f03a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f03e:	e0b8      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800f040:	2308      	movs	r3, #8
 800f042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f046:	e0b4      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800f048:	2310      	movs	r3, #16
 800f04a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f04e:	e0b0      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800f050:	2320      	movs	r3, #32
 800f052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f056:	e0ac      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800f058:	2340      	movs	r3, #64	; 0x40
 800f05a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f05e:	e0a8      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800f060:	2380      	movs	r3, #128	; 0x80
 800f062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f066:	e0a4      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	4a90      	ldr	r2, [pc, #576]	; (800f2b0 <UART_SetConfig+0x6a0>)
 800f06e:	4293      	cmp	r3, r2
 800f070:	d130      	bne.n	800f0d4 <UART_SetConfig+0x4c4>
 800f072:	4b8e      	ldr	r3, [pc, #568]	; (800f2ac <UART_SetConfig+0x69c>)
 800f074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f076:	f003 0307 	and.w	r3, r3, #7
 800f07a:	2b05      	cmp	r3, #5
 800f07c:	d826      	bhi.n	800f0cc <UART_SetConfig+0x4bc>
 800f07e:	a201      	add	r2, pc, #4	; (adr r2, 800f084 <UART_SetConfig+0x474>)
 800f080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f084:	0800f09d 	.word	0x0800f09d
 800f088:	0800f0a5 	.word	0x0800f0a5
 800f08c:	0800f0ad 	.word	0x0800f0ad
 800f090:	0800f0b5 	.word	0x0800f0b5
 800f094:	0800f0bd 	.word	0x0800f0bd
 800f098:	0800f0c5 	.word	0x0800f0c5
 800f09c:	2300      	movs	r3, #0
 800f09e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0a2:	e086      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800f0a4:	2304      	movs	r3, #4
 800f0a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0aa:	e082      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800f0ac:	2308      	movs	r3, #8
 800f0ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0b2:	e07e      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800f0b4:	2310      	movs	r3, #16
 800f0b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0ba:	e07a      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800f0bc:	2320      	movs	r3, #32
 800f0be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0c2:	e076      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800f0c4:	2340      	movs	r3, #64	; 0x40
 800f0c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0ca:	e072      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800f0cc:	2380      	movs	r3, #128	; 0x80
 800f0ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0d2:	e06e      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	4a76      	ldr	r2, [pc, #472]	; (800f2b4 <UART_SetConfig+0x6a4>)
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d130      	bne.n	800f140 <UART_SetConfig+0x530>
 800f0de:	4b73      	ldr	r3, [pc, #460]	; (800f2ac <UART_SetConfig+0x69c>)
 800f0e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0e2:	f003 0307 	and.w	r3, r3, #7
 800f0e6:	2b05      	cmp	r3, #5
 800f0e8:	d826      	bhi.n	800f138 <UART_SetConfig+0x528>
 800f0ea:	a201      	add	r2, pc, #4	; (adr r2, 800f0f0 <UART_SetConfig+0x4e0>)
 800f0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0f0:	0800f109 	.word	0x0800f109
 800f0f4:	0800f111 	.word	0x0800f111
 800f0f8:	0800f119 	.word	0x0800f119
 800f0fc:	0800f121 	.word	0x0800f121
 800f100:	0800f129 	.word	0x0800f129
 800f104:	0800f131 	.word	0x0800f131
 800f108:	2300      	movs	r3, #0
 800f10a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f10e:	e050      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800f110:	2304      	movs	r3, #4
 800f112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f116:	e04c      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800f118:	2308      	movs	r3, #8
 800f11a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f11e:	e048      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800f120:	2310      	movs	r3, #16
 800f122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f126:	e044      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800f128:	2320      	movs	r3, #32
 800f12a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f12e:	e040      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800f130:	2340      	movs	r3, #64	; 0x40
 800f132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f136:	e03c      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800f138:	2380      	movs	r3, #128	; 0x80
 800f13a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f13e:	e038      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	4a5c      	ldr	r2, [pc, #368]	; (800f2b8 <UART_SetConfig+0x6a8>)
 800f146:	4293      	cmp	r3, r2
 800f148:	d130      	bne.n	800f1ac <UART_SetConfig+0x59c>
 800f14a:	4b58      	ldr	r3, [pc, #352]	; (800f2ac <UART_SetConfig+0x69c>)
 800f14c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f14e:	f003 0307 	and.w	r3, r3, #7
 800f152:	2b05      	cmp	r3, #5
 800f154:	d826      	bhi.n	800f1a4 <UART_SetConfig+0x594>
 800f156:	a201      	add	r2, pc, #4	; (adr r2, 800f15c <UART_SetConfig+0x54c>)
 800f158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f15c:	0800f175 	.word	0x0800f175
 800f160:	0800f17d 	.word	0x0800f17d
 800f164:	0800f185 	.word	0x0800f185
 800f168:	0800f18d 	.word	0x0800f18d
 800f16c:	0800f195 	.word	0x0800f195
 800f170:	0800f19d 	.word	0x0800f19d
 800f174:	2302      	movs	r3, #2
 800f176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f17a:	e01a      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800f17c:	2304      	movs	r3, #4
 800f17e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f182:	e016      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800f184:	2308      	movs	r3, #8
 800f186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f18a:	e012      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800f18c:	2310      	movs	r3, #16
 800f18e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f192:	e00e      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800f194:	2320      	movs	r3, #32
 800f196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f19a:	e00a      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800f19c:	2340      	movs	r3, #64	; 0x40
 800f19e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f1a2:	e006      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800f1a4:	2380      	movs	r3, #128	; 0x80
 800f1a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f1aa:	e002      	b.n	800f1b2 <UART_SetConfig+0x5a2>
 800f1ac:	2380      	movs	r3, #128	; 0x80
 800f1ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	4a40      	ldr	r2, [pc, #256]	; (800f2b8 <UART_SetConfig+0x6a8>)
 800f1b8:	4293      	cmp	r3, r2
 800f1ba:	f040 80ef 	bne.w	800f39c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f1be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f1c2:	2b20      	cmp	r3, #32
 800f1c4:	dc46      	bgt.n	800f254 <UART_SetConfig+0x644>
 800f1c6:	2b02      	cmp	r3, #2
 800f1c8:	f2c0 8081 	blt.w	800f2ce <UART_SetConfig+0x6be>
 800f1cc:	3b02      	subs	r3, #2
 800f1ce:	2b1e      	cmp	r3, #30
 800f1d0:	d87d      	bhi.n	800f2ce <UART_SetConfig+0x6be>
 800f1d2:	a201      	add	r2, pc, #4	; (adr r2, 800f1d8 <UART_SetConfig+0x5c8>)
 800f1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1d8:	0800f25b 	.word	0x0800f25b
 800f1dc:	0800f2cf 	.word	0x0800f2cf
 800f1e0:	0800f263 	.word	0x0800f263
 800f1e4:	0800f2cf 	.word	0x0800f2cf
 800f1e8:	0800f2cf 	.word	0x0800f2cf
 800f1ec:	0800f2cf 	.word	0x0800f2cf
 800f1f0:	0800f273 	.word	0x0800f273
 800f1f4:	0800f2cf 	.word	0x0800f2cf
 800f1f8:	0800f2cf 	.word	0x0800f2cf
 800f1fc:	0800f2cf 	.word	0x0800f2cf
 800f200:	0800f2cf 	.word	0x0800f2cf
 800f204:	0800f2cf 	.word	0x0800f2cf
 800f208:	0800f2cf 	.word	0x0800f2cf
 800f20c:	0800f2cf 	.word	0x0800f2cf
 800f210:	0800f283 	.word	0x0800f283
 800f214:	0800f2cf 	.word	0x0800f2cf
 800f218:	0800f2cf 	.word	0x0800f2cf
 800f21c:	0800f2cf 	.word	0x0800f2cf
 800f220:	0800f2cf 	.word	0x0800f2cf
 800f224:	0800f2cf 	.word	0x0800f2cf
 800f228:	0800f2cf 	.word	0x0800f2cf
 800f22c:	0800f2cf 	.word	0x0800f2cf
 800f230:	0800f2cf 	.word	0x0800f2cf
 800f234:	0800f2cf 	.word	0x0800f2cf
 800f238:	0800f2cf 	.word	0x0800f2cf
 800f23c:	0800f2cf 	.word	0x0800f2cf
 800f240:	0800f2cf 	.word	0x0800f2cf
 800f244:	0800f2cf 	.word	0x0800f2cf
 800f248:	0800f2cf 	.word	0x0800f2cf
 800f24c:	0800f2cf 	.word	0x0800f2cf
 800f250:	0800f2c1 	.word	0x0800f2c1
 800f254:	2b40      	cmp	r3, #64	; 0x40
 800f256:	d036      	beq.n	800f2c6 <UART_SetConfig+0x6b6>
 800f258:	e039      	b.n	800f2ce <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f25a:	f7fd f863 	bl	800c324 <HAL_RCCEx_GetD3PCLK1Freq>
 800f25e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f260:	e03b      	b.n	800f2da <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f262:	f107 0314 	add.w	r3, r7, #20
 800f266:	4618      	mov	r0, r3
 800f268:	f7fd f872 	bl	800c350 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f26c:	69bb      	ldr	r3, [r7, #24]
 800f26e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f270:	e033      	b.n	800f2da <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f272:	f107 0308 	add.w	r3, r7, #8
 800f276:	4618      	mov	r0, r3
 800f278:	f7fd f9be 	bl	800c5f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f280:	e02b      	b.n	800f2da <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f282:	4b0a      	ldr	r3, [pc, #40]	; (800f2ac <UART_SetConfig+0x69c>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	f003 0320 	and.w	r3, r3, #32
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d009      	beq.n	800f2a2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f28e:	4b07      	ldr	r3, [pc, #28]	; (800f2ac <UART_SetConfig+0x69c>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	08db      	lsrs	r3, r3, #3
 800f294:	f003 0303 	and.w	r3, r3, #3
 800f298:	4a08      	ldr	r2, [pc, #32]	; (800f2bc <UART_SetConfig+0x6ac>)
 800f29a:	fa22 f303 	lsr.w	r3, r2, r3
 800f29e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f2a0:	e01b      	b.n	800f2da <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800f2a2:	4b06      	ldr	r3, [pc, #24]	; (800f2bc <UART_SetConfig+0x6ac>)
 800f2a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f2a6:	e018      	b.n	800f2da <UART_SetConfig+0x6ca>
 800f2a8:	40011400 	.word	0x40011400
 800f2ac:	58024400 	.word	0x58024400
 800f2b0:	40007800 	.word	0x40007800
 800f2b4:	40007c00 	.word	0x40007c00
 800f2b8:	58000c00 	.word	0x58000c00
 800f2bc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f2c0:	4bc4      	ldr	r3, [pc, #784]	; (800f5d4 <UART_SetConfig+0x9c4>)
 800f2c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f2c4:	e009      	b.n	800f2da <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f2c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f2ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f2cc:	e005      	b.n	800f2da <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f2d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	f000 81da 	beq.w	800f696 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2e6:	4abc      	ldr	r2, [pc, #752]	; (800f5d8 <UART_SetConfig+0x9c8>)
 800f2e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2ec:	461a      	mov	r2, r3
 800f2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2f4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	685a      	ldr	r2, [r3, #4]
 800f2fa:	4613      	mov	r3, r2
 800f2fc:	005b      	lsls	r3, r3, #1
 800f2fe:	4413      	add	r3, r2
 800f300:	6a3a      	ldr	r2, [r7, #32]
 800f302:	429a      	cmp	r2, r3
 800f304:	d305      	bcc.n	800f312 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	685b      	ldr	r3, [r3, #4]
 800f30a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f30c:	6a3a      	ldr	r2, [r7, #32]
 800f30e:	429a      	cmp	r2, r3
 800f310:	d903      	bls.n	800f31a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800f312:	2301      	movs	r3, #1
 800f314:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f318:	e1bd      	b.n	800f696 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f31c:	4618      	mov	r0, r3
 800f31e:	f04f 0100 	mov.w	r1, #0
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f326:	4aac      	ldr	r2, [pc, #688]	; (800f5d8 <UART_SetConfig+0x9c8>)
 800f328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f32c:	b29a      	uxth	r2, r3
 800f32e:	f04f 0300 	mov.w	r3, #0
 800f332:	f7f1 f82d 	bl	8000390 <__aeabi_uldivmod>
 800f336:	4602      	mov	r2, r0
 800f338:	460b      	mov	r3, r1
 800f33a:	4610      	mov	r0, r2
 800f33c:	4619      	mov	r1, r3
 800f33e:	f04f 0200 	mov.w	r2, #0
 800f342:	f04f 0300 	mov.w	r3, #0
 800f346:	020b      	lsls	r3, r1, #8
 800f348:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f34c:	0202      	lsls	r2, r0, #8
 800f34e:	6879      	ldr	r1, [r7, #4]
 800f350:	6849      	ldr	r1, [r1, #4]
 800f352:	0849      	lsrs	r1, r1, #1
 800f354:	4608      	mov	r0, r1
 800f356:	f04f 0100 	mov.w	r1, #0
 800f35a:	1814      	adds	r4, r2, r0
 800f35c:	eb43 0501 	adc.w	r5, r3, r1
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	685b      	ldr	r3, [r3, #4]
 800f364:	461a      	mov	r2, r3
 800f366:	f04f 0300 	mov.w	r3, #0
 800f36a:	4620      	mov	r0, r4
 800f36c:	4629      	mov	r1, r5
 800f36e:	f7f1 f80f 	bl	8000390 <__aeabi_uldivmod>
 800f372:	4602      	mov	r2, r0
 800f374:	460b      	mov	r3, r1
 800f376:	4613      	mov	r3, r2
 800f378:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f37c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f380:	d308      	bcc.n	800f394 <UART_SetConfig+0x784>
 800f382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f384:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f388:	d204      	bcs.n	800f394 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f390:	60da      	str	r2, [r3, #12]
 800f392:	e180      	b.n	800f696 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800f394:	2301      	movs	r3, #1
 800f396:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f39a:	e17c      	b.n	800f696 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	69db      	ldr	r3, [r3, #28]
 800f3a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f3a4:	f040 80bf 	bne.w	800f526 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800f3a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f3ac:	2b20      	cmp	r3, #32
 800f3ae:	dc49      	bgt.n	800f444 <UART_SetConfig+0x834>
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	db7c      	blt.n	800f4ae <UART_SetConfig+0x89e>
 800f3b4:	2b20      	cmp	r3, #32
 800f3b6:	d87a      	bhi.n	800f4ae <UART_SetConfig+0x89e>
 800f3b8:	a201      	add	r2, pc, #4	; (adr r2, 800f3c0 <UART_SetConfig+0x7b0>)
 800f3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3be:	bf00      	nop
 800f3c0:	0800f44b 	.word	0x0800f44b
 800f3c4:	0800f453 	.word	0x0800f453
 800f3c8:	0800f4af 	.word	0x0800f4af
 800f3cc:	0800f4af 	.word	0x0800f4af
 800f3d0:	0800f45b 	.word	0x0800f45b
 800f3d4:	0800f4af 	.word	0x0800f4af
 800f3d8:	0800f4af 	.word	0x0800f4af
 800f3dc:	0800f4af 	.word	0x0800f4af
 800f3e0:	0800f46b 	.word	0x0800f46b
 800f3e4:	0800f4af 	.word	0x0800f4af
 800f3e8:	0800f4af 	.word	0x0800f4af
 800f3ec:	0800f4af 	.word	0x0800f4af
 800f3f0:	0800f4af 	.word	0x0800f4af
 800f3f4:	0800f4af 	.word	0x0800f4af
 800f3f8:	0800f4af 	.word	0x0800f4af
 800f3fc:	0800f4af 	.word	0x0800f4af
 800f400:	0800f47b 	.word	0x0800f47b
 800f404:	0800f4af 	.word	0x0800f4af
 800f408:	0800f4af 	.word	0x0800f4af
 800f40c:	0800f4af 	.word	0x0800f4af
 800f410:	0800f4af 	.word	0x0800f4af
 800f414:	0800f4af 	.word	0x0800f4af
 800f418:	0800f4af 	.word	0x0800f4af
 800f41c:	0800f4af 	.word	0x0800f4af
 800f420:	0800f4af 	.word	0x0800f4af
 800f424:	0800f4af 	.word	0x0800f4af
 800f428:	0800f4af 	.word	0x0800f4af
 800f42c:	0800f4af 	.word	0x0800f4af
 800f430:	0800f4af 	.word	0x0800f4af
 800f434:	0800f4af 	.word	0x0800f4af
 800f438:	0800f4af 	.word	0x0800f4af
 800f43c:	0800f4af 	.word	0x0800f4af
 800f440:	0800f4a1 	.word	0x0800f4a1
 800f444:	2b40      	cmp	r3, #64	; 0x40
 800f446:	d02e      	beq.n	800f4a6 <UART_SetConfig+0x896>
 800f448:	e031      	b.n	800f4ae <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f44a:	f7fb ffff 	bl	800b44c <HAL_RCC_GetPCLK1Freq>
 800f44e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f450:	e033      	b.n	800f4ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f452:	f7fc f811 	bl	800b478 <HAL_RCC_GetPCLK2Freq>
 800f456:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f458:	e02f      	b.n	800f4ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f45a:	f107 0314 	add.w	r3, r7, #20
 800f45e:	4618      	mov	r0, r3
 800f460:	f7fc ff76 	bl	800c350 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f464:	69bb      	ldr	r3, [r7, #24]
 800f466:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f468:	e027      	b.n	800f4ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f46a:	f107 0308 	add.w	r3, r7, #8
 800f46e:	4618      	mov	r0, r3
 800f470:	f7fd f8c2 	bl	800c5f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f478:	e01f      	b.n	800f4ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f47a:	4b58      	ldr	r3, [pc, #352]	; (800f5dc <UART_SetConfig+0x9cc>)
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	f003 0320 	and.w	r3, r3, #32
 800f482:	2b00      	cmp	r3, #0
 800f484:	d009      	beq.n	800f49a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f486:	4b55      	ldr	r3, [pc, #340]	; (800f5dc <UART_SetConfig+0x9cc>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	08db      	lsrs	r3, r3, #3
 800f48c:	f003 0303 	and.w	r3, r3, #3
 800f490:	4a53      	ldr	r2, [pc, #332]	; (800f5e0 <UART_SetConfig+0x9d0>)
 800f492:	fa22 f303 	lsr.w	r3, r2, r3
 800f496:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f498:	e00f      	b.n	800f4ba <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800f49a:	4b51      	ldr	r3, [pc, #324]	; (800f5e0 <UART_SetConfig+0x9d0>)
 800f49c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f49e:	e00c      	b.n	800f4ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f4a0:	4b4c      	ldr	r3, [pc, #304]	; (800f5d4 <UART_SetConfig+0x9c4>)
 800f4a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f4a4:	e009      	b.n	800f4ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f4a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f4aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f4ac:	e005      	b.n	800f4ba <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f4b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	f000 80ea 	beq.w	800f696 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4c6:	4a44      	ldr	r2, [pc, #272]	; (800f5d8 <UART_SetConfig+0x9c8>)
 800f4c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f4cc:	461a      	mov	r2, r3
 800f4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f4d4:	005a      	lsls	r2, r3, #1
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	685b      	ldr	r3, [r3, #4]
 800f4da:	085b      	lsrs	r3, r3, #1
 800f4dc:	441a      	add	r2, r3
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	685b      	ldr	r3, [r3, #4]
 800f4e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4e6:	b29b      	uxth	r3, r3
 800f4e8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ec:	2b0f      	cmp	r3, #15
 800f4ee:	d916      	bls.n	800f51e <UART_SetConfig+0x90e>
 800f4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f4f6:	d212      	bcs.n	800f51e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4fa:	b29b      	uxth	r3, r3
 800f4fc:	f023 030f 	bic.w	r3, r3, #15
 800f500:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f504:	085b      	lsrs	r3, r3, #1
 800f506:	b29b      	uxth	r3, r3
 800f508:	f003 0307 	and.w	r3, r3, #7
 800f50c:	b29a      	uxth	r2, r3
 800f50e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f510:	4313      	orrs	r3, r2
 800f512:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f51a:	60da      	str	r2, [r3, #12]
 800f51c:	e0bb      	b.n	800f696 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800f51e:	2301      	movs	r3, #1
 800f520:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f524:	e0b7      	b.n	800f696 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f526:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f52a:	2b20      	cmp	r3, #32
 800f52c:	dc4a      	bgt.n	800f5c4 <UART_SetConfig+0x9b4>
 800f52e:	2b00      	cmp	r3, #0
 800f530:	f2c0 8086 	blt.w	800f640 <UART_SetConfig+0xa30>
 800f534:	2b20      	cmp	r3, #32
 800f536:	f200 8083 	bhi.w	800f640 <UART_SetConfig+0xa30>
 800f53a:	a201      	add	r2, pc, #4	; (adr r2, 800f540 <UART_SetConfig+0x930>)
 800f53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f540:	0800f5cb 	.word	0x0800f5cb
 800f544:	0800f5e5 	.word	0x0800f5e5
 800f548:	0800f641 	.word	0x0800f641
 800f54c:	0800f641 	.word	0x0800f641
 800f550:	0800f5ed 	.word	0x0800f5ed
 800f554:	0800f641 	.word	0x0800f641
 800f558:	0800f641 	.word	0x0800f641
 800f55c:	0800f641 	.word	0x0800f641
 800f560:	0800f5fd 	.word	0x0800f5fd
 800f564:	0800f641 	.word	0x0800f641
 800f568:	0800f641 	.word	0x0800f641
 800f56c:	0800f641 	.word	0x0800f641
 800f570:	0800f641 	.word	0x0800f641
 800f574:	0800f641 	.word	0x0800f641
 800f578:	0800f641 	.word	0x0800f641
 800f57c:	0800f641 	.word	0x0800f641
 800f580:	0800f60d 	.word	0x0800f60d
 800f584:	0800f641 	.word	0x0800f641
 800f588:	0800f641 	.word	0x0800f641
 800f58c:	0800f641 	.word	0x0800f641
 800f590:	0800f641 	.word	0x0800f641
 800f594:	0800f641 	.word	0x0800f641
 800f598:	0800f641 	.word	0x0800f641
 800f59c:	0800f641 	.word	0x0800f641
 800f5a0:	0800f641 	.word	0x0800f641
 800f5a4:	0800f641 	.word	0x0800f641
 800f5a8:	0800f641 	.word	0x0800f641
 800f5ac:	0800f641 	.word	0x0800f641
 800f5b0:	0800f641 	.word	0x0800f641
 800f5b4:	0800f641 	.word	0x0800f641
 800f5b8:	0800f641 	.word	0x0800f641
 800f5bc:	0800f641 	.word	0x0800f641
 800f5c0:	0800f633 	.word	0x0800f633
 800f5c4:	2b40      	cmp	r3, #64	; 0x40
 800f5c6:	d037      	beq.n	800f638 <UART_SetConfig+0xa28>
 800f5c8:	e03a      	b.n	800f640 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f5ca:	f7fb ff3f 	bl	800b44c <HAL_RCC_GetPCLK1Freq>
 800f5ce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f5d0:	e03c      	b.n	800f64c <UART_SetConfig+0xa3c>
 800f5d2:	bf00      	nop
 800f5d4:	003d0900 	.word	0x003d0900
 800f5d8:	08013aac 	.word	0x08013aac
 800f5dc:	58024400 	.word	0x58024400
 800f5e0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f5e4:	f7fb ff48 	bl	800b478 <HAL_RCC_GetPCLK2Freq>
 800f5e8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f5ea:	e02f      	b.n	800f64c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f5ec:	f107 0314 	add.w	r3, r7, #20
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	f7fc fead 	bl	800c350 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f5f6:	69bb      	ldr	r3, [r7, #24]
 800f5f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f5fa:	e027      	b.n	800f64c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f5fc:	f107 0308 	add.w	r3, r7, #8
 800f600:	4618      	mov	r0, r3
 800f602:	f7fc fff9 	bl	800c5f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f60a:	e01f      	b.n	800f64c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f60c:	4b2c      	ldr	r3, [pc, #176]	; (800f6c0 <UART_SetConfig+0xab0>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	f003 0320 	and.w	r3, r3, #32
 800f614:	2b00      	cmp	r3, #0
 800f616:	d009      	beq.n	800f62c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f618:	4b29      	ldr	r3, [pc, #164]	; (800f6c0 <UART_SetConfig+0xab0>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	08db      	lsrs	r3, r3, #3
 800f61e:	f003 0303 	and.w	r3, r3, #3
 800f622:	4a28      	ldr	r2, [pc, #160]	; (800f6c4 <UART_SetConfig+0xab4>)
 800f624:	fa22 f303 	lsr.w	r3, r2, r3
 800f628:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f62a:	e00f      	b.n	800f64c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800f62c:	4b25      	ldr	r3, [pc, #148]	; (800f6c4 <UART_SetConfig+0xab4>)
 800f62e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f630:	e00c      	b.n	800f64c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f632:	4b25      	ldr	r3, [pc, #148]	; (800f6c8 <UART_SetConfig+0xab8>)
 800f634:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f636:	e009      	b.n	800f64c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f638:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f63c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f63e:	e005      	b.n	800f64c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800f640:	2300      	movs	r3, #0
 800f642:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f644:	2301      	movs	r3, #1
 800f646:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f64a:	bf00      	nop
    }

    if (pclk != 0U)
 800f64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d021      	beq.n	800f696 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f656:	4a1d      	ldr	r2, [pc, #116]	; (800f6cc <UART_SetConfig+0xabc>)
 800f658:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f65c:	461a      	mov	r2, r3
 800f65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f660:	fbb3 f2f2 	udiv	r2, r3, r2
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	685b      	ldr	r3, [r3, #4]
 800f668:	085b      	lsrs	r3, r3, #1
 800f66a:	441a      	add	r2, r3
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	685b      	ldr	r3, [r3, #4]
 800f670:	fbb2 f3f3 	udiv	r3, r2, r3
 800f674:	b29b      	uxth	r3, r3
 800f676:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f67a:	2b0f      	cmp	r3, #15
 800f67c:	d908      	bls.n	800f690 <UART_SetConfig+0xa80>
 800f67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f684:	d204      	bcs.n	800f690 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f68c:	60da      	str	r2, [r3, #12]
 800f68e:	e002      	b.n	800f696 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800f690:	2301      	movs	r3, #1
 800f692:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2201      	movs	r2, #1
 800f69a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2201      	movs	r2, #1
 800f6a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f6b2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3738      	adds	r7, #56	; 0x38
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bdb0      	pop	{r4, r5, r7, pc}
 800f6be:	bf00      	nop
 800f6c0:	58024400 	.word	0x58024400
 800f6c4:	03d09000 	.word	0x03d09000
 800f6c8:	003d0900 	.word	0x003d0900
 800f6cc:	08013aac 	.word	0x08013aac

0800f6d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f6d0:	b480      	push	{r7}
 800f6d2:	b083      	sub	sp, #12
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6dc:	f003 0301 	and.w	r3, r3, #1
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d00a      	beq.n	800f6fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	685b      	ldr	r3, [r3, #4]
 800f6ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	430a      	orrs	r2, r1
 800f6f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6fe:	f003 0302 	and.w	r3, r3, #2
 800f702:	2b00      	cmp	r3, #0
 800f704:	d00a      	beq.n	800f71c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	685b      	ldr	r3, [r3, #4]
 800f70c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	430a      	orrs	r2, r1
 800f71a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f720:	f003 0304 	and.w	r3, r3, #4
 800f724:	2b00      	cmp	r3, #0
 800f726:	d00a      	beq.n	800f73e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	685b      	ldr	r3, [r3, #4]
 800f72e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	430a      	orrs	r2, r1
 800f73c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f742:	f003 0308 	and.w	r3, r3, #8
 800f746:	2b00      	cmp	r3, #0
 800f748:	d00a      	beq.n	800f760 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	685b      	ldr	r3, [r3, #4]
 800f750:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	430a      	orrs	r2, r1
 800f75e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f764:	f003 0310 	and.w	r3, r3, #16
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d00a      	beq.n	800f782 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	689b      	ldr	r3, [r3, #8]
 800f772:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	430a      	orrs	r2, r1
 800f780:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f786:	f003 0320 	and.w	r3, r3, #32
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d00a      	beq.n	800f7a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	689b      	ldr	r3, [r3, #8]
 800f794:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	430a      	orrs	r2, r1
 800f7a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d01a      	beq.n	800f7e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	685b      	ldr	r3, [r3, #4]
 800f7b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	430a      	orrs	r2, r1
 800f7c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f7ce:	d10a      	bne.n	800f7e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	685b      	ldr	r3, [r3, #4]
 800f7d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	430a      	orrs	r2, r1
 800f7e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d00a      	beq.n	800f808 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	685b      	ldr	r3, [r3, #4]
 800f7f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	430a      	orrs	r2, r1
 800f806:	605a      	str	r2, [r3, #4]
  }
}
 800f808:	bf00      	nop
 800f80a:	370c      	adds	r7, #12
 800f80c:	46bd      	mov	sp, r7
 800f80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f812:	4770      	bx	lr

0800f814 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b086      	sub	sp, #24
 800f818:	af02      	add	r7, sp, #8
 800f81a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	2200      	movs	r2, #0
 800f820:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f824:	f7f5 fa90 	bl	8004d48 <HAL_GetTick>
 800f828:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	f003 0308 	and.w	r3, r3, #8
 800f834:	2b08      	cmp	r3, #8
 800f836:	d10e      	bne.n	800f856 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f838:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f83c:	9300      	str	r3, [sp, #0]
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	2200      	movs	r2, #0
 800f842:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	f000 f82f 	bl	800f8aa <UART_WaitOnFlagUntilTimeout>
 800f84c:	4603      	mov	r3, r0
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d001      	beq.n	800f856 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f852:	2303      	movs	r3, #3
 800f854:	e025      	b.n	800f8a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	f003 0304 	and.w	r3, r3, #4
 800f860:	2b04      	cmp	r3, #4
 800f862:	d10e      	bne.n	800f882 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f864:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f868:	9300      	str	r3, [sp, #0]
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	2200      	movs	r2, #0
 800f86e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f872:	6878      	ldr	r0, [r7, #4]
 800f874:	f000 f819 	bl	800f8aa <UART_WaitOnFlagUntilTimeout>
 800f878:	4603      	mov	r3, r0
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d001      	beq.n	800f882 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f87e:	2303      	movs	r3, #3
 800f880:	e00f      	b.n	800f8a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	2220      	movs	r2, #32
 800f886:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2220      	movs	r2, #32
 800f88e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2200      	movs	r2, #0
 800f896:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2200      	movs	r2, #0
 800f89c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f8a0:	2300      	movs	r3, #0
}
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	3710      	adds	r7, #16
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}

0800f8aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f8aa:	b580      	push	{r7, lr}
 800f8ac:	b084      	sub	sp, #16
 800f8ae:	af00      	add	r7, sp, #0
 800f8b0:	60f8      	str	r0, [r7, #12]
 800f8b2:	60b9      	str	r1, [r7, #8]
 800f8b4:	603b      	str	r3, [r7, #0]
 800f8b6:	4613      	mov	r3, r2
 800f8b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f8ba:	e062      	b.n	800f982 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f8bc:	69bb      	ldr	r3, [r7, #24]
 800f8be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8c2:	d05e      	beq.n	800f982 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f8c4:	f7f5 fa40 	bl	8004d48 <HAL_GetTick>
 800f8c8:	4602      	mov	r2, r0
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	1ad3      	subs	r3, r2, r3
 800f8ce:	69ba      	ldr	r2, [r7, #24]
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d302      	bcc.n	800f8da <UART_WaitOnFlagUntilTimeout+0x30>
 800f8d4:	69bb      	ldr	r3, [r7, #24]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d11d      	bne.n	800f916 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	681a      	ldr	r2, [r3, #0]
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f8e8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	689a      	ldr	r2, [r3, #8]
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	f022 0201 	bic.w	r2, r2, #1
 800f8f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	2220      	movs	r2, #32
 800f8fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	2220      	movs	r2, #32
 800f906:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	2200      	movs	r2, #0
 800f90e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f912:	2303      	movs	r3, #3
 800f914:	e045      	b.n	800f9a2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	f003 0304 	and.w	r3, r3, #4
 800f920:	2b00      	cmp	r3, #0
 800f922:	d02e      	beq.n	800f982 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	69db      	ldr	r3, [r3, #28]
 800f92a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f92e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f932:	d126      	bne.n	800f982 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f93c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	681a      	ldr	r2, [r3, #0]
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f94c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	689a      	ldr	r2, [r3, #8]
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	f022 0201 	bic.w	r2, r2, #1
 800f95c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	2220      	movs	r2, #32
 800f962:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	2220      	movs	r2, #32
 800f96a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	2220      	movs	r2, #32
 800f972:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	2200      	movs	r2, #0
 800f97a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f97e:	2303      	movs	r3, #3
 800f980:	e00f      	b.n	800f9a2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	69da      	ldr	r2, [r3, #28]
 800f988:	68bb      	ldr	r3, [r7, #8]
 800f98a:	4013      	ands	r3, r2
 800f98c:	68ba      	ldr	r2, [r7, #8]
 800f98e:	429a      	cmp	r2, r3
 800f990:	bf0c      	ite	eq
 800f992:	2301      	moveq	r3, #1
 800f994:	2300      	movne	r3, #0
 800f996:	b2db      	uxtb	r3, r3
 800f998:	461a      	mov	r2, r3
 800f99a:	79fb      	ldrb	r3, [r7, #7]
 800f99c:	429a      	cmp	r2, r3
 800f99e:	d08d      	beq.n	800f8bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f9a0:	2300      	movs	r3, #0
}
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	3710      	adds	r7, #16
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd80      	pop	{r7, pc}
	...

0800f9ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f9ac:	b480      	push	{r7}
 800f9ae:	b085      	sub	sp, #20
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	60f8      	str	r0, [r7, #12]
 800f9b4:	60b9      	str	r1, [r7, #8]
 800f9b6:	4613      	mov	r3, r2
 800f9b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	68ba      	ldr	r2, [r7, #8]
 800f9be:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	88fa      	ldrh	r2, [r7, #6]
 800f9c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	88fa      	ldrh	r2, [r7, #6]
 800f9cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	689b      	ldr	r3, [r3, #8]
 800f9da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f9de:	d10e      	bne.n	800f9fe <UART_Start_Receive_IT+0x52>
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	691b      	ldr	r3, [r3, #16]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d105      	bne.n	800f9f4 <UART_Start_Receive_IT+0x48>
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f9ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f9f2:	e02d      	b.n	800fa50 <UART_Start_Receive_IT+0xa4>
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	22ff      	movs	r2, #255	; 0xff
 800f9f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f9fc:	e028      	b.n	800fa50 <UART_Start_Receive_IT+0xa4>
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	689b      	ldr	r3, [r3, #8]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d10d      	bne.n	800fa22 <UART_Start_Receive_IT+0x76>
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	691b      	ldr	r3, [r3, #16]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d104      	bne.n	800fa18 <UART_Start_Receive_IT+0x6c>
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	22ff      	movs	r2, #255	; 0xff
 800fa12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fa16:	e01b      	b.n	800fa50 <UART_Start_Receive_IT+0xa4>
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	227f      	movs	r2, #127	; 0x7f
 800fa1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fa20:	e016      	b.n	800fa50 <UART_Start_Receive_IT+0xa4>
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	689b      	ldr	r3, [r3, #8]
 800fa26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fa2a:	d10d      	bne.n	800fa48 <UART_Start_Receive_IT+0x9c>
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	691b      	ldr	r3, [r3, #16]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d104      	bne.n	800fa3e <UART_Start_Receive_IT+0x92>
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	227f      	movs	r2, #127	; 0x7f
 800fa38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fa3c:	e008      	b.n	800fa50 <UART_Start_Receive_IT+0xa4>
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	223f      	movs	r2, #63	; 0x3f
 800fa42:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fa46:	e003      	b.n	800fa50 <UART_Start_Receive_IT+0xa4>
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	2200      	movs	r2, #0
 800fa54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	2222      	movs	r2, #34	; 0x22
 800fa5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	689a      	ldr	r2, [r3, #8]
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	f042 0201 	orr.w	r2, r2, #1
 800fa6e:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fa74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fa78:	d12a      	bne.n	800fad0 <UART_Start_Receive_IT+0x124>
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fa80:	88fa      	ldrh	r2, [r7, #6]
 800fa82:	429a      	cmp	r2, r3
 800fa84:	d324      	bcc.n	800fad0 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	689b      	ldr	r3, [r3, #8]
 800fa8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa8e:	d107      	bne.n	800faa0 <UART_Start_Receive_IT+0xf4>
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	691b      	ldr	r3, [r3, #16]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d103      	bne.n	800faa0 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	4a1f      	ldr	r2, [pc, #124]	; (800fb18 <UART_Start_Receive_IT+0x16c>)
 800fa9c:	671a      	str	r2, [r3, #112]	; 0x70
 800fa9e:	e002      	b.n	800faa6 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	4a1e      	ldr	r2, [pc, #120]	; (800fb1c <UART_Start_Receive_IT+0x170>)
 800faa4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	2200      	movs	r2, #0
 800faaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	681a      	ldr	r2, [r3, #0]
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fabc:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	689a      	ldr	r2, [r3, #8]
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800facc:	609a      	str	r2, [r3, #8]
 800face:	e01b      	b.n	800fb08 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	689b      	ldr	r3, [r3, #8]
 800fad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fad8:	d107      	bne.n	800faea <UART_Start_Receive_IT+0x13e>
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	691b      	ldr	r3, [r3, #16]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d103      	bne.n	800faea <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	4a0e      	ldr	r2, [pc, #56]	; (800fb20 <UART_Start_Receive_IT+0x174>)
 800fae6:	671a      	str	r2, [r3, #112]	; 0x70
 800fae8:	e002      	b.n	800faf0 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	4a0d      	ldr	r2, [pc, #52]	; (800fb24 <UART_Start_Receive_IT+0x178>)
 800faee:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	2200      	movs	r2, #0
 800faf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	681a      	ldr	r2, [r3, #0]
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800fb06:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800fb08:	2300      	movs	r3, #0
}
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	3714      	adds	r7, #20
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb14:	4770      	bx	lr
 800fb16:	bf00      	nop
 800fb18:	08010275 	.word	0x08010275
 800fb1c:	08010071 	.word	0x08010071
 800fb20:	0800ff97 	.word	0x0800ff97
 800fb24:	0800febf 	.word	0x0800febf

0800fb28 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b084      	sub	sp, #16
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	60f8      	str	r0, [r7, #12]
 800fb30:	60b9      	str	r1, [r7, #8]
 800fb32:	4613      	mov	r3, r2
 800fb34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	68ba      	ldr	r2, [r7, #8]
 800fb3a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	88fa      	ldrh	r2, [r7, #6]
 800fb40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	2200      	movs	r2, #0
 800fb48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	2222      	movs	r2, #34	; 0x22
 800fb50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d02c      	beq.n	800fbb6 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb60:	4a25      	ldr	r2, [pc, #148]	; (800fbf8 <UART_Start_Receive_DMA+0xd0>)
 800fb62:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb68:	4a24      	ldr	r2, [pc, #144]	; (800fbfc <UART_Start_Receive_DMA+0xd4>)
 800fb6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb70:	4a23      	ldr	r2, [pc, #140]	; (800fc00 <UART_Start_Receive_DMA+0xd8>)
 800fb72:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb78:	2200      	movs	r2, #0
 800fb7a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	3324      	adds	r3, #36	; 0x24
 800fb86:	4619      	mov	r1, r3
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb8c:	461a      	mov	r2, r3
 800fb8e:	88fb      	ldrh	r3, [r7, #6]
 800fb90:	f7f5 fd82 	bl	8005698 <HAL_DMA_Start_IT>
 800fb94:	4603      	mov	r3, r0
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d00d      	beq.n	800fbb6 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	2210      	movs	r2, #16
 800fb9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	2200      	movs	r2, #0
 800fba6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	2220      	movs	r2, #32
 800fbae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	e01c      	b.n	800fbf0 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	2200      	movs	r2, #0
 800fbba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	681a      	ldr	r2, [r3, #0]
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fbcc:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	689a      	ldr	r2, [r3, #8]
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	f042 0201 	orr.w	r2, r2, #1
 800fbdc:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	689a      	ldr	r2, [r3, #8]
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fbec:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800fbee:	2300      	movs	r3, #0
}
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	3710      	adds	r7, #16
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}
 800fbf8:	0800fd11 	.word	0x0800fd11
 800fbfc:	0800fda7 	.word	0x0800fda7
 800fc00:	0800fddf 	.word	0x0800fddf

0800fc04 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fc04:	b480      	push	{r7}
 800fc06:	b083      	sub	sp, #12
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	681a      	ldr	r2, [r3, #0]
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800fc1a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	689a      	ldr	r2, [r3, #8]
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800fc2a:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	2220      	movs	r2, #32
 800fc30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800fc34:	bf00      	nop
 800fc36:	370c      	adds	r7, #12
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3e:	4770      	bx	lr

0800fc40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fc40:	b480      	push	{r7}
 800fc42:	b083      	sub	sp, #12
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	681a      	ldr	r2, [r3, #0]
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800fc56:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	6899      	ldr	r1, [r3, #8]
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681a      	ldr	r2, [r3, #0]
 800fc62:	4b0f      	ldr	r3, [pc, #60]	; (800fca0 <UART_EndRxTransfer+0x60>)
 800fc64:	400b      	ands	r3, r1
 800fc66:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc6c:	2b01      	cmp	r3, #1
 800fc6e:	d107      	bne.n	800fc80 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	681a      	ldr	r2, [r3, #0]
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	f022 0210 	bic.w	r2, r2, #16
 800fc7e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	2220      	movs	r2, #32
 800fc84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2200      	movs	r2, #0
 800fc92:	671a      	str	r2, [r3, #112]	; 0x70
}
 800fc94:	bf00      	nop
 800fc96:	370c      	adds	r7, #12
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9e:	4770      	bx	lr
 800fca0:	effffffe 	.word	0xeffffffe

0800fca4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b084      	sub	sp, #16
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcb0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	69db      	ldr	r3, [r3, #28]
 800fcb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fcba:	d014      	beq.n	800fce6 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	689a      	ldr	r2, [r3, #8]
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fcd2:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	681a      	ldr	r2, [r3, #0]
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fce2:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fce4:	e002      	b.n	800fcec <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800fce6:	68f8      	ldr	r0, [r7, #12]
 800fce8:	f7fe ff5e 	bl	800eba8 <HAL_UART_TxCpltCallback>
}
 800fcec:	bf00      	nop
 800fcee:	3710      	adds	r7, #16
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}

0800fcf4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b084      	sub	sp, #16
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd00:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800fd02:	68f8      	ldr	r0, [r7, #12]
 800fd04:	f7fe ff5a 	bl	800ebbc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fd08:	bf00      	nop
 800fd0a:	3710      	adds	r7, #16
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	bd80      	pop	{r7, pc}

0800fd10 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b084      	sub	sp, #16
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd1c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	69db      	ldr	r3, [r3, #28]
 800fd22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd26:	d02b      	beq.n	800fd80 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	681a      	ldr	r2, [r3, #0]
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fd3e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	689a      	ldr	r2, [r3, #8]
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	f022 0201 	bic.w	r2, r2, #1
 800fd4e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	689a      	ldr	r2, [r3, #8]
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fd5e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	2220      	movs	r2, #32
 800fd64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd6c:	2b01      	cmp	r3, #1
 800fd6e:	d107      	bne.n	800fd80 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	681a      	ldr	r2, [r3, #0]
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	f022 0210 	bic.w	r2, r2, #16
 800fd7e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd84:	2b01      	cmp	r3, #1
 800fd86:	d107      	bne.n	800fd98 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fd8e:	4619      	mov	r1, r3
 800fd90:	68f8      	ldr	r0, [r7, #12]
 800fd92:	f7fe ff31 	bl	800ebf8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fd96:	e002      	b.n	800fd9e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800fd98:	68f8      	ldr	r0, [r7, #12]
 800fd9a:	f7f4 f925 	bl	8003fe8 <HAL_UART_RxCpltCallback>
}
 800fd9e:	bf00      	nop
 800fda0:	3710      	adds	r7, #16
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}

0800fda6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fda6:	b580      	push	{r7, lr}
 800fda8:	b084      	sub	sp, #16
 800fdaa:	af00      	add	r7, sp, #0
 800fdac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdb2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdb8:	2b01      	cmp	r3, #1
 800fdba:	d109      	bne.n	800fdd0 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fdc2:	085b      	lsrs	r3, r3, #1
 800fdc4:	b29b      	uxth	r3, r3
 800fdc6:	4619      	mov	r1, r3
 800fdc8:	68f8      	ldr	r0, [r7, #12]
 800fdca:	f7fe ff15 	bl	800ebf8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fdce:	e002      	b.n	800fdd6 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800fdd0:	68f8      	ldr	r0, [r7, #12]
 800fdd2:	f7fe fefd 	bl	800ebd0 <HAL_UART_RxHalfCpltCallback>
}
 800fdd6:	bf00      	nop
 800fdd8:	3710      	adds	r7, #16
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd80      	pop	{r7, pc}

0800fdde <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fdde:	b580      	push	{r7, lr}
 800fde0:	b086      	sub	sp, #24
 800fde2:	af00      	add	r7, sp, #0
 800fde4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdea:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fdec:	697b      	ldr	r3, [r7, #20]
 800fdee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fdf2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fdf4:	697b      	ldr	r3, [r7, #20]
 800fdf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fdfa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fdfc:	697b      	ldr	r3, [r7, #20]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	689b      	ldr	r3, [r3, #8]
 800fe02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe06:	2b80      	cmp	r3, #128	; 0x80
 800fe08:	d109      	bne.n	800fe1e <UART_DMAError+0x40>
 800fe0a:	693b      	ldr	r3, [r7, #16]
 800fe0c:	2b21      	cmp	r3, #33	; 0x21
 800fe0e:	d106      	bne.n	800fe1e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fe10:	697b      	ldr	r3, [r7, #20]
 800fe12:	2200      	movs	r2, #0
 800fe14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800fe18:	6978      	ldr	r0, [r7, #20]
 800fe1a:	f7ff fef3 	bl	800fc04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fe1e:	697b      	ldr	r3, [r7, #20]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	689b      	ldr	r3, [r3, #8]
 800fe24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe28:	2b40      	cmp	r3, #64	; 0x40
 800fe2a:	d109      	bne.n	800fe40 <UART_DMAError+0x62>
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	2b22      	cmp	r3, #34	; 0x22
 800fe30:	d106      	bne.n	800fe40 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	2200      	movs	r2, #0
 800fe36:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800fe3a:	6978      	ldr	r0, [r7, #20]
 800fe3c:	f7ff ff00 	bl	800fc40 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fe40:	697b      	ldr	r3, [r7, #20]
 800fe42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe46:	f043 0210 	orr.w	r2, r3, #16
 800fe4a:	697b      	ldr	r3, [r7, #20]
 800fe4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fe50:	6978      	ldr	r0, [r7, #20]
 800fe52:	f7fe fec7 	bl	800ebe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe56:	bf00      	nop
 800fe58:	3718      	adds	r7, #24
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}

0800fe5e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fe5e:	b580      	push	{r7, lr}
 800fe60:	b084      	sub	sp, #16
 800fe62:	af00      	add	r7, sp, #0
 800fe64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	2200      	movs	r2, #0
 800fe70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	2200      	movs	r2, #0
 800fe78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fe7c:	68f8      	ldr	r0, [r7, #12]
 800fe7e:	f7fe feb1 	bl	800ebe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe82:	bf00      	nop
 800fe84:	3710      	adds	r7, #16
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}

0800fe8a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fe8a:	b580      	push	{r7, lr}
 800fe8c:	b082      	sub	sp, #8
 800fe8e:	af00      	add	r7, sp, #0
 800fe90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	681a      	ldr	r2, [r3, #0]
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fea0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	2220      	movs	r2, #32
 800fea6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	2200      	movs	r2, #0
 800feae:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f7fe fe79 	bl	800eba8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800feb6:	bf00      	nop
 800feb8:	3708      	adds	r7, #8
 800feba:	46bd      	mov	sp, r7
 800febc:	bd80      	pop	{r7, pc}

0800febe <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800febe:	b580      	push	{r7, lr}
 800fec0:	b084      	sub	sp, #16
 800fec2:	af00      	add	r7, sp, #0
 800fec4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fecc:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fed4:	2b22      	cmp	r3, #34	; 0x22
 800fed6:	d152      	bne.n	800ff7e <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fede:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fee0:	89bb      	ldrh	r3, [r7, #12]
 800fee2:	b2d9      	uxtb	r1, r3
 800fee4:	89fb      	ldrh	r3, [r7, #14]
 800fee6:	b2da      	uxtb	r2, r3
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800feec:	400a      	ands	r2, r1
 800feee:	b2d2      	uxtb	r2, r2
 800fef0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fef6:	1c5a      	adds	r2, r3, #1
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ff02:	b29b      	uxth	r3, r3
 800ff04:	3b01      	subs	r3, #1
 800ff06:	b29a      	uxth	r2, r3
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ff14:	b29b      	uxth	r3, r3
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d139      	bne.n	800ff8e <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	681a      	ldr	r2, [r3, #0]
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ff28:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	689a      	ldr	r2, [r3, #8]
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	f022 0201 	bic.w	r2, r2, #1
 800ff38:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	2220      	movs	r2, #32
 800ff3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2200      	movs	r2, #0
 800ff46:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff4c:	2b01      	cmp	r3, #1
 800ff4e:	d10f      	bne.n	800ff70 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	681a      	ldr	r2, [r3, #0]
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	f022 0210 	bic.w	r2, r2, #16
 800ff5e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ff66:	4619      	mov	r1, r3
 800ff68:	6878      	ldr	r0, [r7, #4]
 800ff6a:	f7fe fe45 	bl	800ebf8 <HAL_UARTEx_RxEventCallback>
 800ff6e:	e002      	b.n	800ff76 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ff70:	6878      	ldr	r0, [r7, #4]
 800ff72:	f7f4 f839 	bl	8003fe8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	2200      	movs	r2, #0
 800ff7a:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ff7c:	e007      	b.n	800ff8e <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	699a      	ldr	r2, [r3, #24]
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	f042 0208 	orr.w	r2, r2, #8
 800ff8c:	619a      	str	r2, [r3, #24]
}
 800ff8e:	bf00      	nop
 800ff90:	3710      	adds	r7, #16
 800ff92:	46bd      	mov	sp, r7
 800ff94:	bd80      	pop	{r7, pc}

0800ff96 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ff96:	b580      	push	{r7, lr}
 800ff98:	b084      	sub	sp, #16
 800ff9a:	af00      	add	r7, sp, #0
 800ff9c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ffa4:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ffac:	2b22      	cmp	r3, #34	; 0x22
 800ffae:	d152      	bne.n	8010056 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffb6:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ffbc:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800ffbe:	89ba      	ldrh	r2, [r7, #12]
 800ffc0:	89fb      	ldrh	r3, [r7, #14]
 800ffc2:	4013      	ands	r3, r2
 800ffc4:	b29a      	uxth	r2, r3
 800ffc6:	68bb      	ldr	r3, [r7, #8]
 800ffc8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ffce:	1c9a      	adds	r2, r3, #2
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ffda:	b29b      	uxth	r3, r3
 800ffdc:	3b01      	subs	r3, #1
 800ffde:	b29a      	uxth	r2, r3
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ffec:	b29b      	uxth	r3, r3
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d139      	bne.n	8010066 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	681a      	ldr	r2, [r3, #0]
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010000:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	689a      	ldr	r2, [r3, #8]
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	f022 0201 	bic.w	r2, r2, #1
 8010010:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	2220      	movs	r2, #32
 8010016:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	2200      	movs	r2, #0
 801001e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010024:	2b01      	cmp	r3, #1
 8010026:	d10f      	bne.n	8010048 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	681a      	ldr	r2, [r3, #0]
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	f022 0210 	bic.w	r2, r2, #16
 8010036:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801003e:	4619      	mov	r1, r3
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f7fe fdd9 	bl	800ebf8 <HAL_UARTEx_RxEventCallback>
 8010046:	e002      	b.n	801004e <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8010048:	6878      	ldr	r0, [r7, #4]
 801004a:	f7f3 ffcd 	bl	8003fe8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	2200      	movs	r2, #0
 8010052:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010054:	e007      	b.n	8010066 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	699a      	ldr	r2, [r3, #24]
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	f042 0208 	orr.w	r2, r2, #8
 8010064:	619a      	str	r2, [r3, #24]
}
 8010066:	bf00      	nop
 8010068:	3710      	adds	r7, #16
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}
	...

08010070 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b088      	sub	sp, #32
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801007e:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	69db      	ldr	r3, [r3, #28]
 8010086:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	689b      	ldr	r3, [r3, #8]
 8010096:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801009e:	2b22      	cmp	r3, #34	; 0x22
 80100a0:	f040 80d8 	bne.w	8010254 <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80100aa:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80100ac:	e0a8      	b.n	8010200 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100b4:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80100b6:	89bb      	ldrh	r3, [r7, #12]
 80100b8:	b2d9      	uxtb	r1, r3
 80100ba:	8b7b      	ldrh	r3, [r7, #26]
 80100bc:	b2da      	uxtb	r2, r3
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100c2:	400a      	ands	r2, r1
 80100c4:	b2d2      	uxtb	r2, r2
 80100c6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100cc:	1c5a      	adds	r2, r3, #1
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80100d8:	b29b      	uxth	r3, r3
 80100da:	3b01      	subs	r3, #1
 80100dc:	b29a      	uxth	r2, r3
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	69db      	ldr	r3, [r3, #28]
 80100ea:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80100ec:	69fb      	ldr	r3, [r7, #28]
 80100ee:	f003 0307 	and.w	r3, r3, #7
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d04d      	beq.n	8010192 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80100f6:	69fb      	ldr	r3, [r7, #28]
 80100f8:	f003 0301 	and.w	r3, r3, #1
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d010      	beq.n	8010122 <UART_RxISR_8BIT_FIFOEN+0xb2>
 8010100:	697b      	ldr	r3, [r7, #20]
 8010102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010106:	2b00      	cmp	r3, #0
 8010108:	d00b      	beq.n	8010122 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	2201      	movs	r2, #1
 8010110:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010118:	f043 0201 	orr.w	r2, r3, #1
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010122:	69fb      	ldr	r3, [r7, #28]
 8010124:	f003 0302 	and.w	r3, r3, #2
 8010128:	2b00      	cmp	r3, #0
 801012a:	d010      	beq.n	801014e <UART_RxISR_8BIT_FIFOEN+0xde>
 801012c:	693b      	ldr	r3, [r7, #16]
 801012e:	f003 0301 	and.w	r3, r3, #1
 8010132:	2b00      	cmp	r3, #0
 8010134:	d00b      	beq.n	801014e <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	2202      	movs	r2, #2
 801013c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010144:	f043 0204 	orr.w	r2, r3, #4
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801014e:	69fb      	ldr	r3, [r7, #28]
 8010150:	f003 0304 	and.w	r3, r3, #4
 8010154:	2b00      	cmp	r3, #0
 8010156:	d010      	beq.n	801017a <UART_RxISR_8BIT_FIFOEN+0x10a>
 8010158:	693b      	ldr	r3, [r7, #16]
 801015a:	f003 0301 	and.w	r3, r3, #1
 801015e:	2b00      	cmp	r3, #0
 8010160:	d00b      	beq.n	801017a <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	2204      	movs	r2, #4
 8010168:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010170:	f043 0202 	orr.w	r2, r3, #2
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010180:	2b00      	cmp	r3, #0
 8010182:	d006      	beq.n	8010192 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	f7fe fd2d 	bl	800ebe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	2200      	movs	r2, #0
 801018e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010198:	b29b      	uxth	r3, r3
 801019a:	2b00      	cmp	r3, #0
 801019c:	d130      	bne.n	8010200 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	681a      	ldr	r2, [r3, #0]
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80101ac:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	6899      	ldr	r1, [r3, #8]
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681a      	ldr	r2, [r3, #0]
 80101b8:	4b2c      	ldr	r3, [pc, #176]	; (801026c <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 80101ba:	400b      	ands	r3, r1
 80101bc:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	2220      	movs	r2, #32
 80101c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	2200      	movs	r2, #0
 80101ca:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101d0:	2b01      	cmp	r3, #1
 80101d2:	d10f      	bne.n	80101f4 <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	681a      	ldr	r2, [r3, #0]
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	f022 0210 	bic.w	r2, r2, #16
 80101e2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80101ea:	4619      	mov	r1, r3
 80101ec:	6878      	ldr	r0, [r7, #4]
 80101ee:	f7fe fd03 	bl	800ebf8 <HAL_UARTEx_RxEventCallback>
 80101f2:	e002      	b.n	80101fa <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f7f3 fef7 	bl	8003fe8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	2200      	movs	r2, #0
 80101fe:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010200:	89fb      	ldrh	r3, [r7, #14]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d005      	beq.n	8010212 <UART_RxISR_8BIT_FIFOEN+0x1a2>
 8010206:	69fb      	ldr	r3, [r7, #28]
 8010208:	f003 0320 	and.w	r3, r3, #32
 801020c:	2b00      	cmp	r3, #0
 801020e:	f47f af4e 	bne.w	80100ae <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010218:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801021a:	897b      	ldrh	r3, [r7, #10]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d021      	beq.n	8010264 <UART_RxISR_8BIT_FIFOEN+0x1f4>
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010226:	897a      	ldrh	r2, [r7, #10]
 8010228:	429a      	cmp	r2, r3
 801022a:	d21b      	bcs.n	8010264 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	689a      	ldr	r2, [r3, #8]
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 801023a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	4a0c      	ldr	r2, [pc, #48]	; (8010270 <UART_RxISR_8BIT_FIFOEN+0x200>)
 8010240:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	681a      	ldr	r2, [r3, #0]
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	f042 0220 	orr.w	r2, r2, #32
 8010250:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010252:	e007      	b.n	8010264 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	699a      	ldr	r2, [r3, #24]
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	f042 0208 	orr.w	r2, r2, #8
 8010262:	619a      	str	r2, [r3, #24]
}
 8010264:	bf00      	nop
 8010266:	3720      	adds	r7, #32
 8010268:	46bd      	mov	sp, r7
 801026a:	bd80      	pop	{r7, pc}
 801026c:	effffffe 	.word	0xeffffffe
 8010270:	0800febf 	.word	0x0800febf

08010274 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b08a      	sub	sp, #40	; 0x28
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010282:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	69db      	ldr	r3, [r3, #28]
 801028a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	689b      	ldr	r3, [r3, #8]
 801029a:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80102a2:	2b22      	cmp	r3, #34	; 0x22
 80102a4:	f040 80d8 	bne.w	8010458 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80102ae:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80102b0:	e0a8      	b.n	8010404 <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102b8:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102be:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 80102c0:	8aba      	ldrh	r2, [r7, #20]
 80102c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80102c4:	4013      	ands	r3, r2
 80102c6:	b29a      	uxth	r2, r3
 80102c8:	693b      	ldr	r3, [r7, #16]
 80102ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102d0:	1c9a      	adds	r2, r3, #2
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80102dc:	b29b      	uxth	r3, r3
 80102de:	3b01      	subs	r3, #1
 80102e0:	b29a      	uxth	r2, r3
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	69db      	ldr	r3, [r3, #28]
 80102ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80102f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f2:	f003 0307 	and.w	r3, r3, #7
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d04d      	beq.n	8010396 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80102fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102fc:	f003 0301 	and.w	r3, r3, #1
 8010300:	2b00      	cmp	r3, #0
 8010302:	d010      	beq.n	8010326 <UART_RxISR_16BIT_FIFOEN+0xb2>
 8010304:	69fb      	ldr	r3, [r7, #28]
 8010306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801030a:	2b00      	cmp	r3, #0
 801030c:	d00b      	beq.n	8010326 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	2201      	movs	r2, #1
 8010314:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801031c:	f043 0201 	orr.w	r2, r3, #1
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010328:	f003 0302 	and.w	r3, r3, #2
 801032c:	2b00      	cmp	r3, #0
 801032e:	d010      	beq.n	8010352 <UART_RxISR_16BIT_FIFOEN+0xde>
 8010330:	69bb      	ldr	r3, [r7, #24]
 8010332:	f003 0301 	and.w	r3, r3, #1
 8010336:	2b00      	cmp	r3, #0
 8010338:	d00b      	beq.n	8010352 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	2202      	movs	r2, #2
 8010340:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010348:	f043 0204 	orr.w	r2, r3, #4
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010354:	f003 0304 	and.w	r3, r3, #4
 8010358:	2b00      	cmp	r3, #0
 801035a:	d010      	beq.n	801037e <UART_RxISR_16BIT_FIFOEN+0x10a>
 801035c:	69bb      	ldr	r3, [r7, #24]
 801035e:	f003 0301 	and.w	r3, r3, #1
 8010362:	2b00      	cmp	r3, #0
 8010364:	d00b      	beq.n	801037e <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	2204      	movs	r2, #4
 801036c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010374:	f043 0202 	orr.w	r2, r3, #2
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010384:	2b00      	cmp	r3, #0
 8010386:	d006      	beq.n	8010396 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010388:	6878      	ldr	r0, [r7, #4]
 801038a:	f7fe fc2b 	bl	800ebe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	2200      	movs	r2, #0
 8010392:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801039c:	b29b      	uxth	r3, r3
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d130      	bne.n	8010404 <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	681a      	ldr	r2, [r3, #0]
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80103b0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	6899      	ldr	r1, [r3, #8]
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	681a      	ldr	r2, [r3, #0]
 80103bc:	4b2c      	ldr	r3, [pc, #176]	; (8010470 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 80103be:	400b      	ands	r3, r1
 80103c0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	2220      	movs	r2, #32
 80103c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	2200      	movs	r2, #0
 80103ce:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103d4:	2b01      	cmp	r3, #1
 80103d6:	d10f      	bne.n	80103f8 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	681a      	ldr	r2, [r3, #0]
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	f022 0210 	bic.w	r2, r2, #16
 80103e6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80103ee:	4619      	mov	r1, r3
 80103f0:	6878      	ldr	r0, [r7, #4]
 80103f2:	f7fe fc01 	bl	800ebf8 <HAL_UARTEx_RxEventCallback>
 80103f6:	e002      	b.n	80103fe <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f7f3 fdf5 	bl	8003fe8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2200      	movs	r2, #0
 8010402:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010404:	8afb      	ldrh	r3, [r7, #22]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d005      	beq.n	8010416 <UART_RxISR_16BIT_FIFOEN+0x1a2>
 801040a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801040c:	f003 0320 	and.w	r3, r3, #32
 8010410:	2b00      	cmp	r3, #0
 8010412:	f47f af4e 	bne.w	80102b2 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801041c:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801041e:	89fb      	ldrh	r3, [r7, #14]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d021      	beq.n	8010468 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801042a:	89fa      	ldrh	r2, [r7, #14]
 801042c:	429a      	cmp	r2, r3
 801042e:	d21b      	bcs.n	8010468 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	689a      	ldr	r2, [r3, #8]
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 801043e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	4a0c      	ldr	r2, [pc, #48]	; (8010474 <UART_RxISR_16BIT_FIFOEN+0x200>)
 8010444:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	681a      	ldr	r2, [r3, #0]
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	f042 0220 	orr.w	r2, r2, #32
 8010454:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010456:	e007      	b.n	8010468 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	699a      	ldr	r2, [r3, #24]
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	f042 0208 	orr.w	r2, r2, #8
 8010466:	619a      	str	r2, [r3, #24]
}
 8010468:	bf00      	nop
 801046a:	3728      	adds	r7, #40	; 0x28
 801046c:	46bd      	mov	sp, r7
 801046e:	bd80      	pop	{r7, pc}
 8010470:	effffffe 	.word	0xeffffffe
 8010474:	0800ff97 	.word	0x0800ff97

08010478 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010478:	b480      	push	{r7}
 801047a:	b083      	sub	sp, #12
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010480:	bf00      	nop
 8010482:	370c      	adds	r7, #12
 8010484:	46bd      	mov	sp, r7
 8010486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048a:	4770      	bx	lr

0801048c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801048c:	b480      	push	{r7}
 801048e:	b083      	sub	sp, #12
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010494:	bf00      	nop
 8010496:	370c      	adds	r7, #12
 8010498:	46bd      	mov	sp, r7
 801049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049e:	4770      	bx	lr

080104a0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80104a0:	b480      	push	{r7}
 80104a2:	b083      	sub	sp, #12
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80104a8:	bf00      	nop
 80104aa:	370c      	adds	r7, #12
 80104ac:	46bd      	mov	sp, r7
 80104ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b2:	4770      	bx	lr

080104b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80104b4:	b480      	push	{r7}
 80104b6:	b085      	sub	sp, #20
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80104c2:	2b01      	cmp	r3, #1
 80104c4:	d101      	bne.n	80104ca <HAL_UARTEx_DisableFifoMode+0x16>
 80104c6:	2302      	movs	r3, #2
 80104c8:	e027      	b.n	801051a <HAL_UARTEx_DisableFifoMode+0x66>
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	2201      	movs	r2, #1
 80104ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2224      	movs	r2, #36	; 0x24
 80104d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	681a      	ldr	r2, [r3, #0]
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	f022 0201 	bic.w	r2, r2, #1
 80104f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80104f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	2200      	movs	r2, #0
 80104fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	68fa      	ldr	r2, [r7, #12]
 8010506:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2220      	movs	r2, #32
 801050c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	2200      	movs	r2, #0
 8010514:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010518:	2300      	movs	r3, #0
}
 801051a:	4618      	mov	r0, r3
 801051c:	3714      	adds	r7, #20
 801051e:	46bd      	mov	sp, r7
 8010520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010524:	4770      	bx	lr

08010526 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010526:	b580      	push	{r7, lr}
 8010528:	b084      	sub	sp, #16
 801052a:	af00      	add	r7, sp, #0
 801052c:	6078      	str	r0, [r7, #4]
 801052e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010536:	2b01      	cmp	r3, #1
 8010538:	d101      	bne.n	801053e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801053a:	2302      	movs	r3, #2
 801053c:	e02d      	b.n	801059a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	2201      	movs	r2, #1
 8010542:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	2224      	movs	r2, #36	; 0x24
 801054a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	681a      	ldr	r2, [r3, #0]
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	f022 0201 	bic.w	r2, r2, #1
 8010564:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	689b      	ldr	r3, [r3, #8]
 801056c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	683a      	ldr	r2, [r7, #0]
 8010576:	430a      	orrs	r2, r1
 8010578:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801057a:	6878      	ldr	r0, [r7, #4]
 801057c:	f000 f850 	bl	8010620 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	68fa      	ldr	r2, [r7, #12]
 8010586:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2220      	movs	r2, #32
 801058c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2200      	movs	r2, #0
 8010594:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010598:	2300      	movs	r3, #0
}
 801059a:	4618      	mov	r0, r3
 801059c:	3710      	adds	r7, #16
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}

080105a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80105a2:	b580      	push	{r7, lr}
 80105a4:	b084      	sub	sp, #16
 80105a6:	af00      	add	r7, sp, #0
 80105a8:	6078      	str	r0, [r7, #4]
 80105aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80105b2:	2b01      	cmp	r3, #1
 80105b4:	d101      	bne.n	80105ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80105b6:	2302      	movs	r3, #2
 80105b8:	e02d      	b.n	8010616 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	2201      	movs	r2, #1
 80105be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	2224      	movs	r2, #36	; 0x24
 80105c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	681a      	ldr	r2, [r3, #0]
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	f022 0201 	bic.w	r2, r2, #1
 80105e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	689b      	ldr	r3, [r3, #8]
 80105e8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	683a      	ldr	r2, [r7, #0]
 80105f2:	430a      	orrs	r2, r1
 80105f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f000 f812 	bl	8010620 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	68fa      	ldr	r2, [r7, #12]
 8010602:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	2220      	movs	r2, #32
 8010608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2200      	movs	r2, #0
 8010610:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010614:	2300      	movs	r3, #0
}
 8010616:	4618      	mov	r0, r3
 8010618:	3710      	adds	r7, #16
 801061a:	46bd      	mov	sp, r7
 801061c:	bd80      	pop	{r7, pc}
	...

08010620 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010620:	b480      	push	{r7}
 8010622:	b085      	sub	sp, #20
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801062c:	2b00      	cmp	r3, #0
 801062e:	d108      	bne.n	8010642 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2201      	movs	r2, #1
 8010634:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2201      	movs	r2, #1
 801063c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010640:	e031      	b.n	80106a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010642:	2310      	movs	r3, #16
 8010644:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010646:	2310      	movs	r3, #16
 8010648:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	689b      	ldr	r3, [r3, #8]
 8010650:	0e5b      	lsrs	r3, r3, #25
 8010652:	b2db      	uxtb	r3, r3
 8010654:	f003 0307 	and.w	r3, r3, #7
 8010658:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	689b      	ldr	r3, [r3, #8]
 8010660:	0f5b      	lsrs	r3, r3, #29
 8010662:	b2db      	uxtb	r3, r3
 8010664:	f003 0307 	and.w	r3, r3, #7
 8010668:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801066a:	7bbb      	ldrb	r3, [r7, #14]
 801066c:	7b3a      	ldrb	r2, [r7, #12]
 801066e:	4911      	ldr	r1, [pc, #68]	; (80106b4 <UARTEx_SetNbDataToProcess+0x94>)
 8010670:	5c8a      	ldrb	r2, [r1, r2]
 8010672:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010676:	7b3a      	ldrb	r2, [r7, #12]
 8010678:	490f      	ldr	r1, [pc, #60]	; (80106b8 <UARTEx_SetNbDataToProcess+0x98>)
 801067a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801067c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010680:	b29a      	uxth	r2, r3
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010688:	7bfb      	ldrb	r3, [r7, #15]
 801068a:	7b7a      	ldrb	r2, [r7, #13]
 801068c:	4909      	ldr	r1, [pc, #36]	; (80106b4 <UARTEx_SetNbDataToProcess+0x94>)
 801068e:	5c8a      	ldrb	r2, [r1, r2]
 8010690:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010694:	7b7a      	ldrb	r2, [r7, #13]
 8010696:	4908      	ldr	r1, [pc, #32]	; (80106b8 <UARTEx_SetNbDataToProcess+0x98>)
 8010698:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801069a:	fb93 f3f2 	sdiv	r3, r3, r2
 801069e:	b29a      	uxth	r2, r3
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80106a6:	bf00      	nop
 80106a8:	3714      	adds	r7, #20
 80106aa:	46bd      	mov	sp, r7
 80106ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b0:	4770      	bx	lr
 80106b2:	bf00      	nop
 80106b4:	08013ac4 	.word	0x08013ac4
 80106b8:	08013acc 	.word	0x08013acc

080106bc <__errno>:
 80106bc:	4b01      	ldr	r3, [pc, #4]	; (80106c4 <__errno+0x8>)
 80106be:	6818      	ldr	r0, [r3, #0]
 80106c0:	4770      	bx	lr
 80106c2:	bf00      	nop
 80106c4:	24000024 	.word	0x24000024

080106c8 <__libc_init_array>:
 80106c8:	b570      	push	{r4, r5, r6, lr}
 80106ca:	4d0d      	ldr	r5, [pc, #52]	; (8010700 <__libc_init_array+0x38>)
 80106cc:	4c0d      	ldr	r4, [pc, #52]	; (8010704 <__libc_init_array+0x3c>)
 80106ce:	1b64      	subs	r4, r4, r5
 80106d0:	10a4      	asrs	r4, r4, #2
 80106d2:	2600      	movs	r6, #0
 80106d4:	42a6      	cmp	r6, r4
 80106d6:	d109      	bne.n	80106ec <__libc_init_array+0x24>
 80106d8:	4d0b      	ldr	r5, [pc, #44]	; (8010708 <__libc_init_array+0x40>)
 80106da:	4c0c      	ldr	r4, [pc, #48]	; (801070c <__libc_init_array+0x44>)
 80106dc:	f003 f992 	bl	8013a04 <_init>
 80106e0:	1b64      	subs	r4, r4, r5
 80106e2:	10a4      	asrs	r4, r4, #2
 80106e4:	2600      	movs	r6, #0
 80106e6:	42a6      	cmp	r6, r4
 80106e8:	d105      	bne.n	80106f6 <__libc_init_array+0x2e>
 80106ea:	bd70      	pop	{r4, r5, r6, pc}
 80106ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80106f0:	4798      	blx	r3
 80106f2:	3601      	adds	r6, #1
 80106f4:	e7ee      	b.n	80106d4 <__libc_init_array+0xc>
 80106f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80106fa:	4798      	blx	r3
 80106fc:	3601      	adds	r6, #1
 80106fe:	e7f2      	b.n	80106e6 <__libc_init_array+0x1e>
 8010700:	08013f68 	.word	0x08013f68
 8010704:	08013f68 	.word	0x08013f68
 8010708:	08013f68 	.word	0x08013f68
 801070c:	08013f6c 	.word	0x08013f6c

08010710 <memset>:
 8010710:	4402      	add	r2, r0
 8010712:	4603      	mov	r3, r0
 8010714:	4293      	cmp	r3, r2
 8010716:	d100      	bne.n	801071a <memset+0xa>
 8010718:	4770      	bx	lr
 801071a:	f803 1b01 	strb.w	r1, [r3], #1
 801071e:	e7f9      	b.n	8010714 <memset+0x4>

08010720 <__cvt>:
 8010720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010722:	ed2d 8b02 	vpush	{d8}
 8010726:	eeb0 8b40 	vmov.f64	d8, d0
 801072a:	b085      	sub	sp, #20
 801072c:	4617      	mov	r7, r2
 801072e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010730:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010732:	ee18 2a90 	vmov	r2, s17
 8010736:	f025 0520 	bic.w	r5, r5, #32
 801073a:	2a00      	cmp	r2, #0
 801073c:	bfb6      	itet	lt
 801073e:	222d      	movlt	r2, #45	; 0x2d
 8010740:	2200      	movge	r2, #0
 8010742:	eeb1 8b40 	vneglt.f64	d8, d0
 8010746:	2d46      	cmp	r5, #70	; 0x46
 8010748:	460c      	mov	r4, r1
 801074a:	701a      	strb	r2, [r3, #0]
 801074c:	d004      	beq.n	8010758 <__cvt+0x38>
 801074e:	2d45      	cmp	r5, #69	; 0x45
 8010750:	d100      	bne.n	8010754 <__cvt+0x34>
 8010752:	3401      	adds	r4, #1
 8010754:	2102      	movs	r1, #2
 8010756:	e000      	b.n	801075a <__cvt+0x3a>
 8010758:	2103      	movs	r1, #3
 801075a:	ab03      	add	r3, sp, #12
 801075c:	9301      	str	r3, [sp, #4]
 801075e:	ab02      	add	r3, sp, #8
 8010760:	9300      	str	r3, [sp, #0]
 8010762:	4622      	mov	r2, r4
 8010764:	4633      	mov	r3, r6
 8010766:	eeb0 0b48 	vmov.f64	d0, d8
 801076a:	f000 fdf5 	bl	8011358 <_dtoa_r>
 801076e:	2d47      	cmp	r5, #71	; 0x47
 8010770:	d109      	bne.n	8010786 <__cvt+0x66>
 8010772:	07fb      	lsls	r3, r7, #31
 8010774:	d407      	bmi.n	8010786 <__cvt+0x66>
 8010776:	9b03      	ldr	r3, [sp, #12]
 8010778:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801077a:	1a1b      	subs	r3, r3, r0
 801077c:	6013      	str	r3, [r2, #0]
 801077e:	b005      	add	sp, #20
 8010780:	ecbd 8b02 	vpop	{d8}
 8010784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010786:	2d46      	cmp	r5, #70	; 0x46
 8010788:	eb00 0204 	add.w	r2, r0, r4
 801078c:	d10c      	bne.n	80107a8 <__cvt+0x88>
 801078e:	7803      	ldrb	r3, [r0, #0]
 8010790:	2b30      	cmp	r3, #48	; 0x30
 8010792:	d107      	bne.n	80107a4 <__cvt+0x84>
 8010794:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801079c:	bf1c      	itt	ne
 801079e:	f1c4 0401 	rsbne	r4, r4, #1
 80107a2:	6034      	strne	r4, [r6, #0]
 80107a4:	6833      	ldr	r3, [r6, #0]
 80107a6:	441a      	add	r2, r3
 80107a8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80107ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107b0:	bf08      	it	eq
 80107b2:	9203      	streq	r2, [sp, #12]
 80107b4:	2130      	movs	r1, #48	; 0x30
 80107b6:	9b03      	ldr	r3, [sp, #12]
 80107b8:	4293      	cmp	r3, r2
 80107ba:	d2dc      	bcs.n	8010776 <__cvt+0x56>
 80107bc:	1c5c      	adds	r4, r3, #1
 80107be:	9403      	str	r4, [sp, #12]
 80107c0:	7019      	strb	r1, [r3, #0]
 80107c2:	e7f8      	b.n	80107b6 <__cvt+0x96>

080107c4 <__exponent>:
 80107c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80107c6:	4603      	mov	r3, r0
 80107c8:	2900      	cmp	r1, #0
 80107ca:	bfb8      	it	lt
 80107cc:	4249      	neglt	r1, r1
 80107ce:	f803 2b02 	strb.w	r2, [r3], #2
 80107d2:	bfb4      	ite	lt
 80107d4:	222d      	movlt	r2, #45	; 0x2d
 80107d6:	222b      	movge	r2, #43	; 0x2b
 80107d8:	2909      	cmp	r1, #9
 80107da:	7042      	strb	r2, [r0, #1]
 80107dc:	dd2a      	ble.n	8010834 <__exponent+0x70>
 80107de:	f10d 0407 	add.w	r4, sp, #7
 80107e2:	46a4      	mov	ip, r4
 80107e4:	270a      	movs	r7, #10
 80107e6:	46a6      	mov	lr, r4
 80107e8:	460a      	mov	r2, r1
 80107ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80107ee:	fb07 1516 	mls	r5, r7, r6, r1
 80107f2:	3530      	adds	r5, #48	; 0x30
 80107f4:	2a63      	cmp	r2, #99	; 0x63
 80107f6:	f104 34ff 	add.w	r4, r4, #4294967295
 80107fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80107fe:	4631      	mov	r1, r6
 8010800:	dcf1      	bgt.n	80107e6 <__exponent+0x22>
 8010802:	3130      	adds	r1, #48	; 0x30
 8010804:	f1ae 0502 	sub.w	r5, lr, #2
 8010808:	f804 1c01 	strb.w	r1, [r4, #-1]
 801080c:	1c44      	adds	r4, r0, #1
 801080e:	4629      	mov	r1, r5
 8010810:	4561      	cmp	r1, ip
 8010812:	d30a      	bcc.n	801082a <__exponent+0x66>
 8010814:	f10d 0209 	add.w	r2, sp, #9
 8010818:	eba2 020e 	sub.w	r2, r2, lr
 801081c:	4565      	cmp	r5, ip
 801081e:	bf88      	it	hi
 8010820:	2200      	movhi	r2, #0
 8010822:	4413      	add	r3, r2
 8010824:	1a18      	subs	r0, r3, r0
 8010826:	b003      	add	sp, #12
 8010828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801082a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801082e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010832:	e7ed      	b.n	8010810 <__exponent+0x4c>
 8010834:	2330      	movs	r3, #48	; 0x30
 8010836:	3130      	adds	r1, #48	; 0x30
 8010838:	7083      	strb	r3, [r0, #2]
 801083a:	70c1      	strb	r1, [r0, #3]
 801083c:	1d03      	adds	r3, r0, #4
 801083e:	e7f1      	b.n	8010824 <__exponent+0x60>

08010840 <_printf_float>:
 8010840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010844:	b08b      	sub	sp, #44	; 0x2c
 8010846:	460c      	mov	r4, r1
 8010848:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801084c:	4616      	mov	r6, r2
 801084e:	461f      	mov	r7, r3
 8010850:	4605      	mov	r5, r0
 8010852:	f001 fcbb 	bl	80121cc <_localeconv_r>
 8010856:	f8d0 b000 	ldr.w	fp, [r0]
 801085a:	4658      	mov	r0, fp
 801085c:	f7ef fd40 	bl	80002e0 <strlen>
 8010860:	2300      	movs	r3, #0
 8010862:	9308      	str	r3, [sp, #32]
 8010864:	f8d8 3000 	ldr.w	r3, [r8]
 8010868:	f894 9018 	ldrb.w	r9, [r4, #24]
 801086c:	6822      	ldr	r2, [r4, #0]
 801086e:	3307      	adds	r3, #7
 8010870:	f023 0307 	bic.w	r3, r3, #7
 8010874:	f103 0108 	add.w	r1, r3, #8
 8010878:	f8c8 1000 	str.w	r1, [r8]
 801087c:	4682      	mov	sl, r0
 801087e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010882:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8010886:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8010ae8 <_printf_float+0x2a8>
 801088a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801088e:	eeb0 6bc0 	vabs.f64	d6, d0
 8010892:	eeb4 6b47 	vcmp.f64	d6, d7
 8010896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801089a:	dd24      	ble.n	80108e6 <_printf_float+0xa6>
 801089c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80108a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108a4:	d502      	bpl.n	80108ac <_printf_float+0x6c>
 80108a6:	232d      	movs	r3, #45	; 0x2d
 80108a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80108ac:	4b90      	ldr	r3, [pc, #576]	; (8010af0 <_printf_float+0x2b0>)
 80108ae:	4891      	ldr	r0, [pc, #580]	; (8010af4 <_printf_float+0x2b4>)
 80108b0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80108b4:	bf94      	ite	ls
 80108b6:	4698      	movls	r8, r3
 80108b8:	4680      	movhi	r8, r0
 80108ba:	2303      	movs	r3, #3
 80108bc:	6123      	str	r3, [r4, #16]
 80108be:	f022 0204 	bic.w	r2, r2, #4
 80108c2:	2300      	movs	r3, #0
 80108c4:	6022      	str	r2, [r4, #0]
 80108c6:	9304      	str	r3, [sp, #16]
 80108c8:	9700      	str	r7, [sp, #0]
 80108ca:	4633      	mov	r3, r6
 80108cc:	aa09      	add	r2, sp, #36	; 0x24
 80108ce:	4621      	mov	r1, r4
 80108d0:	4628      	mov	r0, r5
 80108d2:	f000 f9d3 	bl	8010c7c <_printf_common>
 80108d6:	3001      	adds	r0, #1
 80108d8:	f040 808a 	bne.w	80109f0 <_printf_float+0x1b0>
 80108dc:	f04f 30ff 	mov.w	r0, #4294967295
 80108e0:	b00b      	add	sp, #44	; 0x2c
 80108e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108e6:	eeb4 0b40 	vcmp.f64	d0, d0
 80108ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108ee:	d709      	bvc.n	8010904 <_printf_float+0xc4>
 80108f0:	ee10 3a90 	vmov	r3, s1
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	bfbc      	itt	lt
 80108f8:	232d      	movlt	r3, #45	; 0x2d
 80108fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80108fe:	487e      	ldr	r0, [pc, #504]	; (8010af8 <_printf_float+0x2b8>)
 8010900:	4b7e      	ldr	r3, [pc, #504]	; (8010afc <_printf_float+0x2bc>)
 8010902:	e7d5      	b.n	80108b0 <_printf_float+0x70>
 8010904:	6863      	ldr	r3, [r4, #4]
 8010906:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801090a:	9104      	str	r1, [sp, #16]
 801090c:	1c59      	adds	r1, r3, #1
 801090e:	d13c      	bne.n	801098a <_printf_float+0x14a>
 8010910:	2306      	movs	r3, #6
 8010912:	6063      	str	r3, [r4, #4]
 8010914:	2300      	movs	r3, #0
 8010916:	9303      	str	r3, [sp, #12]
 8010918:	ab08      	add	r3, sp, #32
 801091a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801091e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010922:	ab07      	add	r3, sp, #28
 8010924:	6861      	ldr	r1, [r4, #4]
 8010926:	9300      	str	r3, [sp, #0]
 8010928:	6022      	str	r2, [r4, #0]
 801092a:	f10d 031b 	add.w	r3, sp, #27
 801092e:	4628      	mov	r0, r5
 8010930:	f7ff fef6 	bl	8010720 <__cvt>
 8010934:	9b04      	ldr	r3, [sp, #16]
 8010936:	9907      	ldr	r1, [sp, #28]
 8010938:	2b47      	cmp	r3, #71	; 0x47
 801093a:	4680      	mov	r8, r0
 801093c:	d108      	bne.n	8010950 <_printf_float+0x110>
 801093e:	1cc8      	adds	r0, r1, #3
 8010940:	db02      	blt.n	8010948 <_printf_float+0x108>
 8010942:	6863      	ldr	r3, [r4, #4]
 8010944:	4299      	cmp	r1, r3
 8010946:	dd41      	ble.n	80109cc <_printf_float+0x18c>
 8010948:	f1a9 0902 	sub.w	r9, r9, #2
 801094c:	fa5f f989 	uxtb.w	r9, r9
 8010950:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010954:	d820      	bhi.n	8010998 <_printf_float+0x158>
 8010956:	3901      	subs	r1, #1
 8010958:	464a      	mov	r2, r9
 801095a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801095e:	9107      	str	r1, [sp, #28]
 8010960:	f7ff ff30 	bl	80107c4 <__exponent>
 8010964:	9a08      	ldr	r2, [sp, #32]
 8010966:	9004      	str	r0, [sp, #16]
 8010968:	1813      	adds	r3, r2, r0
 801096a:	2a01      	cmp	r2, #1
 801096c:	6123      	str	r3, [r4, #16]
 801096e:	dc02      	bgt.n	8010976 <_printf_float+0x136>
 8010970:	6822      	ldr	r2, [r4, #0]
 8010972:	07d2      	lsls	r2, r2, #31
 8010974:	d501      	bpl.n	801097a <_printf_float+0x13a>
 8010976:	3301      	adds	r3, #1
 8010978:	6123      	str	r3, [r4, #16]
 801097a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d0a2      	beq.n	80108c8 <_printf_float+0x88>
 8010982:	232d      	movs	r3, #45	; 0x2d
 8010984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010988:	e79e      	b.n	80108c8 <_printf_float+0x88>
 801098a:	9904      	ldr	r1, [sp, #16]
 801098c:	2947      	cmp	r1, #71	; 0x47
 801098e:	d1c1      	bne.n	8010914 <_printf_float+0xd4>
 8010990:	2b00      	cmp	r3, #0
 8010992:	d1bf      	bne.n	8010914 <_printf_float+0xd4>
 8010994:	2301      	movs	r3, #1
 8010996:	e7bc      	b.n	8010912 <_printf_float+0xd2>
 8010998:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801099c:	d118      	bne.n	80109d0 <_printf_float+0x190>
 801099e:	2900      	cmp	r1, #0
 80109a0:	6863      	ldr	r3, [r4, #4]
 80109a2:	dd0b      	ble.n	80109bc <_printf_float+0x17c>
 80109a4:	6121      	str	r1, [r4, #16]
 80109a6:	b913      	cbnz	r3, 80109ae <_printf_float+0x16e>
 80109a8:	6822      	ldr	r2, [r4, #0]
 80109aa:	07d0      	lsls	r0, r2, #31
 80109ac:	d502      	bpl.n	80109b4 <_printf_float+0x174>
 80109ae:	3301      	adds	r3, #1
 80109b0:	440b      	add	r3, r1
 80109b2:	6123      	str	r3, [r4, #16]
 80109b4:	2300      	movs	r3, #0
 80109b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80109b8:	9304      	str	r3, [sp, #16]
 80109ba:	e7de      	b.n	801097a <_printf_float+0x13a>
 80109bc:	b913      	cbnz	r3, 80109c4 <_printf_float+0x184>
 80109be:	6822      	ldr	r2, [r4, #0]
 80109c0:	07d2      	lsls	r2, r2, #31
 80109c2:	d501      	bpl.n	80109c8 <_printf_float+0x188>
 80109c4:	3302      	adds	r3, #2
 80109c6:	e7f4      	b.n	80109b2 <_printf_float+0x172>
 80109c8:	2301      	movs	r3, #1
 80109ca:	e7f2      	b.n	80109b2 <_printf_float+0x172>
 80109cc:	f04f 0967 	mov.w	r9, #103	; 0x67
 80109d0:	9b08      	ldr	r3, [sp, #32]
 80109d2:	4299      	cmp	r1, r3
 80109d4:	db05      	blt.n	80109e2 <_printf_float+0x1a2>
 80109d6:	6823      	ldr	r3, [r4, #0]
 80109d8:	6121      	str	r1, [r4, #16]
 80109da:	07d8      	lsls	r0, r3, #31
 80109dc:	d5ea      	bpl.n	80109b4 <_printf_float+0x174>
 80109de:	1c4b      	adds	r3, r1, #1
 80109e0:	e7e7      	b.n	80109b2 <_printf_float+0x172>
 80109e2:	2900      	cmp	r1, #0
 80109e4:	bfd4      	ite	le
 80109e6:	f1c1 0202 	rsble	r2, r1, #2
 80109ea:	2201      	movgt	r2, #1
 80109ec:	4413      	add	r3, r2
 80109ee:	e7e0      	b.n	80109b2 <_printf_float+0x172>
 80109f0:	6823      	ldr	r3, [r4, #0]
 80109f2:	055a      	lsls	r2, r3, #21
 80109f4:	d407      	bmi.n	8010a06 <_printf_float+0x1c6>
 80109f6:	6923      	ldr	r3, [r4, #16]
 80109f8:	4642      	mov	r2, r8
 80109fa:	4631      	mov	r1, r6
 80109fc:	4628      	mov	r0, r5
 80109fe:	47b8      	blx	r7
 8010a00:	3001      	adds	r0, #1
 8010a02:	d12a      	bne.n	8010a5a <_printf_float+0x21a>
 8010a04:	e76a      	b.n	80108dc <_printf_float+0x9c>
 8010a06:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010a0a:	f240 80e2 	bls.w	8010bd2 <_printf_float+0x392>
 8010a0e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010a12:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a1a:	d133      	bne.n	8010a84 <_printf_float+0x244>
 8010a1c:	4a38      	ldr	r2, [pc, #224]	; (8010b00 <_printf_float+0x2c0>)
 8010a1e:	2301      	movs	r3, #1
 8010a20:	4631      	mov	r1, r6
 8010a22:	4628      	mov	r0, r5
 8010a24:	47b8      	blx	r7
 8010a26:	3001      	adds	r0, #1
 8010a28:	f43f af58 	beq.w	80108dc <_printf_float+0x9c>
 8010a2c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010a30:	429a      	cmp	r2, r3
 8010a32:	db02      	blt.n	8010a3a <_printf_float+0x1fa>
 8010a34:	6823      	ldr	r3, [r4, #0]
 8010a36:	07d8      	lsls	r0, r3, #31
 8010a38:	d50f      	bpl.n	8010a5a <_printf_float+0x21a>
 8010a3a:	4653      	mov	r3, sl
 8010a3c:	465a      	mov	r2, fp
 8010a3e:	4631      	mov	r1, r6
 8010a40:	4628      	mov	r0, r5
 8010a42:	47b8      	blx	r7
 8010a44:	3001      	adds	r0, #1
 8010a46:	f43f af49 	beq.w	80108dc <_printf_float+0x9c>
 8010a4a:	f04f 0800 	mov.w	r8, #0
 8010a4e:	f104 091a 	add.w	r9, r4, #26
 8010a52:	9b08      	ldr	r3, [sp, #32]
 8010a54:	3b01      	subs	r3, #1
 8010a56:	4543      	cmp	r3, r8
 8010a58:	dc09      	bgt.n	8010a6e <_printf_float+0x22e>
 8010a5a:	6823      	ldr	r3, [r4, #0]
 8010a5c:	079b      	lsls	r3, r3, #30
 8010a5e:	f100 8108 	bmi.w	8010c72 <_printf_float+0x432>
 8010a62:	68e0      	ldr	r0, [r4, #12]
 8010a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a66:	4298      	cmp	r0, r3
 8010a68:	bfb8      	it	lt
 8010a6a:	4618      	movlt	r0, r3
 8010a6c:	e738      	b.n	80108e0 <_printf_float+0xa0>
 8010a6e:	2301      	movs	r3, #1
 8010a70:	464a      	mov	r2, r9
 8010a72:	4631      	mov	r1, r6
 8010a74:	4628      	mov	r0, r5
 8010a76:	47b8      	blx	r7
 8010a78:	3001      	adds	r0, #1
 8010a7a:	f43f af2f 	beq.w	80108dc <_printf_float+0x9c>
 8010a7e:	f108 0801 	add.w	r8, r8, #1
 8010a82:	e7e6      	b.n	8010a52 <_printf_float+0x212>
 8010a84:	9b07      	ldr	r3, [sp, #28]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	dc3c      	bgt.n	8010b04 <_printf_float+0x2c4>
 8010a8a:	4a1d      	ldr	r2, [pc, #116]	; (8010b00 <_printf_float+0x2c0>)
 8010a8c:	2301      	movs	r3, #1
 8010a8e:	4631      	mov	r1, r6
 8010a90:	4628      	mov	r0, r5
 8010a92:	47b8      	blx	r7
 8010a94:	3001      	adds	r0, #1
 8010a96:	f43f af21 	beq.w	80108dc <_printf_float+0x9c>
 8010a9a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010a9e:	4313      	orrs	r3, r2
 8010aa0:	d102      	bne.n	8010aa8 <_printf_float+0x268>
 8010aa2:	6823      	ldr	r3, [r4, #0]
 8010aa4:	07d9      	lsls	r1, r3, #31
 8010aa6:	d5d8      	bpl.n	8010a5a <_printf_float+0x21a>
 8010aa8:	4653      	mov	r3, sl
 8010aaa:	465a      	mov	r2, fp
 8010aac:	4631      	mov	r1, r6
 8010aae:	4628      	mov	r0, r5
 8010ab0:	47b8      	blx	r7
 8010ab2:	3001      	adds	r0, #1
 8010ab4:	f43f af12 	beq.w	80108dc <_printf_float+0x9c>
 8010ab8:	f04f 0900 	mov.w	r9, #0
 8010abc:	f104 0a1a 	add.w	sl, r4, #26
 8010ac0:	9b07      	ldr	r3, [sp, #28]
 8010ac2:	425b      	negs	r3, r3
 8010ac4:	454b      	cmp	r3, r9
 8010ac6:	dc01      	bgt.n	8010acc <_printf_float+0x28c>
 8010ac8:	9b08      	ldr	r3, [sp, #32]
 8010aca:	e795      	b.n	80109f8 <_printf_float+0x1b8>
 8010acc:	2301      	movs	r3, #1
 8010ace:	4652      	mov	r2, sl
 8010ad0:	4631      	mov	r1, r6
 8010ad2:	4628      	mov	r0, r5
 8010ad4:	47b8      	blx	r7
 8010ad6:	3001      	adds	r0, #1
 8010ad8:	f43f af00 	beq.w	80108dc <_printf_float+0x9c>
 8010adc:	f109 0901 	add.w	r9, r9, #1
 8010ae0:	e7ee      	b.n	8010ac0 <_printf_float+0x280>
 8010ae2:	bf00      	nop
 8010ae4:	f3af 8000 	nop.w
 8010ae8:	ffffffff 	.word	0xffffffff
 8010aec:	7fefffff 	.word	0x7fefffff
 8010af0:	08013ad8 	.word	0x08013ad8
 8010af4:	08013adc 	.word	0x08013adc
 8010af8:	08013ae4 	.word	0x08013ae4
 8010afc:	08013ae0 	.word	0x08013ae0
 8010b00:	08013ae8 	.word	0x08013ae8
 8010b04:	9a08      	ldr	r2, [sp, #32]
 8010b06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010b08:	429a      	cmp	r2, r3
 8010b0a:	bfa8      	it	ge
 8010b0c:	461a      	movge	r2, r3
 8010b0e:	2a00      	cmp	r2, #0
 8010b10:	4691      	mov	r9, r2
 8010b12:	dc38      	bgt.n	8010b86 <_printf_float+0x346>
 8010b14:	2300      	movs	r3, #0
 8010b16:	9305      	str	r3, [sp, #20]
 8010b18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010b1c:	f104 021a 	add.w	r2, r4, #26
 8010b20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010b22:	9905      	ldr	r1, [sp, #20]
 8010b24:	9304      	str	r3, [sp, #16]
 8010b26:	eba3 0309 	sub.w	r3, r3, r9
 8010b2a:	428b      	cmp	r3, r1
 8010b2c:	dc33      	bgt.n	8010b96 <_printf_float+0x356>
 8010b2e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010b32:	429a      	cmp	r2, r3
 8010b34:	db3c      	blt.n	8010bb0 <_printf_float+0x370>
 8010b36:	6823      	ldr	r3, [r4, #0]
 8010b38:	07da      	lsls	r2, r3, #31
 8010b3a:	d439      	bmi.n	8010bb0 <_printf_float+0x370>
 8010b3c:	9a08      	ldr	r2, [sp, #32]
 8010b3e:	9b04      	ldr	r3, [sp, #16]
 8010b40:	9907      	ldr	r1, [sp, #28]
 8010b42:	1ad3      	subs	r3, r2, r3
 8010b44:	eba2 0901 	sub.w	r9, r2, r1
 8010b48:	4599      	cmp	r9, r3
 8010b4a:	bfa8      	it	ge
 8010b4c:	4699      	movge	r9, r3
 8010b4e:	f1b9 0f00 	cmp.w	r9, #0
 8010b52:	dc35      	bgt.n	8010bc0 <_printf_float+0x380>
 8010b54:	f04f 0800 	mov.w	r8, #0
 8010b58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010b5c:	f104 0a1a 	add.w	sl, r4, #26
 8010b60:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010b64:	1a9b      	subs	r3, r3, r2
 8010b66:	eba3 0309 	sub.w	r3, r3, r9
 8010b6a:	4543      	cmp	r3, r8
 8010b6c:	f77f af75 	ble.w	8010a5a <_printf_float+0x21a>
 8010b70:	2301      	movs	r3, #1
 8010b72:	4652      	mov	r2, sl
 8010b74:	4631      	mov	r1, r6
 8010b76:	4628      	mov	r0, r5
 8010b78:	47b8      	blx	r7
 8010b7a:	3001      	adds	r0, #1
 8010b7c:	f43f aeae 	beq.w	80108dc <_printf_float+0x9c>
 8010b80:	f108 0801 	add.w	r8, r8, #1
 8010b84:	e7ec      	b.n	8010b60 <_printf_float+0x320>
 8010b86:	4613      	mov	r3, r2
 8010b88:	4631      	mov	r1, r6
 8010b8a:	4642      	mov	r2, r8
 8010b8c:	4628      	mov	r0, r5
 8010b8e:	47b8      	blx	r7
 8010b90:	3001      	adds	r0, #1
 8010b92:	d1bf      	bne.n	8010b14 <_printf_float+0x2d4>
 8010b94:	e6a2      	b.n	80108dc <_printf_float+0x9c>
 8010b96:	2301      	movs	r3, #1
 8010b98:	4631      	mov	r1, r6
 8010b9a:	4628      	mov	r0, r5
 8010b9c:	9204      	str	r2, [sp, #16]
 8010b9e:	47b8      	blx	r7
 8010ba0:	3001      	adds	r0, #1
 8010ba2:	f43f ae9b 	beq.w	80108dc <_printf_float+0x9c>
 8010ba6:	9b05      	ldr	r3, [sp, #20]
 8010ba8:	9a04      	ldr	r2, [sp, #16]
 8010baa:	3301      	adds	r3, #1
 8010bac:	9305      	str	r3, [sp, #20]
 8010bae:	e7b7      	b.n	8010b20 <_printf_float+0x2e0>
 8010bb0:	4653      	mov	r3, sl
 8010bb2:	465a      	mov	r2, fp
 8010bb4:	4631      	mov	r1, r6
 8010bb6:	4628      	mov	r0, r5
 8010bb8:	47b8      	blx	r7
 8010bba:	3001      	adds	r0, #1
 8010bbc:	d1be      	bne.n	8010b3c <_printf_float+0x2fc>
 8010bbe:	e68d      	b.n	80108dc <_printf_float+0x9c>
 8010bc0:	9a04      	ldr	r2, [sp, #16]
 8010bc2:	464b      	mov	r3, r9
 8010bc4:	4442      	add	r2, r8
 8010bc6:	4631      	mov	r1, r6
 8010bc8:	4628      	mov	r0, r5
 8010bca:	47b8      	blx	r7
 8010bcc:	3001      	adds	r0, #1
 8010bce:	d1c1      	bne.n	8010b54 <_printf_float+0x314>
 8010bd0:	e684      	b.n	80108dc <_printf_float+0x9c>
 8010bd2:	9a08      	ldr	r2, [sp, #32]
 8010bd4:	2a01      	cmp	r2, #1
 8010bd6:	dc01      	bgt.n	8010bdc <_printf_float+0x39c>
 8010bd8:	07db      	lsls	r3, r3, #31
 8010bda:	d537      	bpl.n	8010c4c <_printf_float+0x40c>
 8010bdc:	2301      	movs	r3, #1
 8010bde:	4642      	mov	r2, r8
 8010be0:	4631      	mov	r1, r6
 8010be2:	4628      	mov	r0, r5
 8010be4:	47b8      	blx	r7
 8010be6:	3001      	adds	r0, #1
 8010be8:	f43f ae78 	beq.w	80108dc <_printf_float+0x9c>
 8010bec:	4653      	mov	r3, sl
 8010bee:	465a      	mov	r2, fp
 8010bf0:	4631      	mov	r1, r6
 8010bf2:	4628      	mov	r0, r5
 8010bf4:	47b8      	blx	r7
 8010bf6:	3001      	adds	r0, #1
 8010bf8:	f43f ae70 	beq.w	80108dc <_printf_float+0x9c>
 8010bfc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010c00:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c08:	d01b      	beq.n	8010c42 <_printf_float+0x402>
 8010c0a:	9b08      	ldr	r3, [sp, #32]
 8010c0c:	f108 0201 	add.w	r2, r8, #1
 8010c10:	3b01      	subs	r3, #1
 8010c12:	4631      	mov	r1, r6
 8010c14:	4628      	mov	r0, r5
 8010c16:	47b8      	blx	r7
 8010c18:	3001      	adds	r0, #1
 8010c1a:	d10e      	bne.n	8010c3a <_printf_float+0x3fa>
 8010c1c:	e65e      	b.n	80108dc <_printf_float+0x9c>
 8010c1e:	2301      	movs	r3, #1
 8010c20:	464a      	mov	r2, r9
 8010c22:	4631      	mov	r1, r6
 8010c24:	4628      	mov	r0, r5
 8010c26:	47b8      	blx	r7
 8010c28:	3001      	adds	r0, #1
 8010c2a:	f43f ae57 	beq.w	80108dc <_printf_float+0x9c>
 8010c2e:	f108 0801 	add.w	r8, r8, #1
 8010c32:	9b08      	ldr	r3, [sp, #32]
 8010c34:	3b01      	subs	r3, #1
 8010c36:	4543      	cmp	r3, r8
 8010c38:	dcf1      	bgt.n	8010c1e <_printf_float+0x3de>
 8010c3a:	9b04      	ldr	r3, [sp, #16]
 8010c3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010c40:	e6db      	b.n	80109fa <_printf_float+0x1ba>
 8010c42:	f04f 0800 	mov.w	r8, #0
 8010c46:	f104 091a 	add.w	r9, r4, #26
 8010c4a:	e7f2      	b.n	8010c32 <_printf_float+0x3f2>
 8010c4c:	2301      	movs	r3, #1
 8010c4e:	4642      	mov	r2, r8
 8010c50:	e7df      	b.n	8010c12 <_printf_float+0x3d2>
 8010c52:	2301      	movs	r3, #1
 8010c54:	464a      	mov	r2, r9
 8010c56:	4631      	mov	r1, r6
 8010c58:	4628      	mov	r0, r5
 8010c5a:	47b8      	blx	r7
 8010c5c:	3001      	adds	r0, #1
 8010c5e:	f43f ae3d 	beq.w	80108dc <_printf_float+0x9c>
 8010c62:	f108 0801 	add.w	r8, r8, #1
 8010c66:	68e3      	ldr	r3, [r4, #12]
 8010c68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010c6a:	1a5b      	subs	r3, r3, r1
 8010c6c:	4543      	cmp	r3, r8
 8010c6e:	dcf0      	bgt.n	8010c52 <_printf_float+0x412>
 8010c70:	e6f7      	b.n	8010a62 <_printf_float+0x222>
 8010c72:	f04f 0800 	mov.w	r8, #0
 8010c76:	f104 0919 	add.w	r9, r4, #25
 8010c7a:	e7f4      	b.n	8010c66 <_printf_float+0x426>

08010c7c <_printf_common>:
 8010c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c80:	4616      	mov	r6, r2
 8010c82:	4699      	mov	r9, r3
 8010c84:	688a      	ldr	r2, [r1, #8]
 8010c86:	690b      	ldr	r3, [r1, #16]
 8010c88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010c8c:	4293      	cmp	r3, r2
 8010c8e:	bfb8      	it	lt
 8010c90:	4613      	movlt	r3, r2
 8010c92:	6033      	str	r3, [r6, #0]
 8010c94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010c98:	4607      	mov	r7, r0
 8010c9a:	460c      	mov	r4, r1
 8010c9c:	b10a      	cbz	r2, 8010ca2 <_printf_common+0x26>
 8010c9e:	3301      	adds	r3, #1
 8010ca0:	6033      	str	r3, [r6, #0]
 8010ca2:	6823      	ldr	r3, [r4, #0]
 8010ca4:	0699      	lsls	r1, r3, #26
 8010ca6:	bf42      	ittt	mi
 8010ca8:	6833      	ldrmi	r3, [r6, #0]
 8010caa:	3302      	addmi	r3, #2
 8010cac:	6033      	strmi	r3, [r6, #0]
 8010cae:	6825      	ldr	r5, [r4, #0]
 8010cb0:	f015 0506 	ands.w	r5, r5, #6
 8010cb4:	d106      	bne.n	8010cc4 <_printf_common+0x48>
 8010cb6:	f104 0a19 	add.w	sl, r4, #25
 8010cba:	68e3      	ldr	r3, [r4, #12]
 8010cbc:	6832      	ldr	r2, [r6, #0]
 8010cbe:	1a9b      	subs	r3, r3, r2
 8010cc0:	42ab      	cmp	r3, r5
 8010cc2:	dc26      	bgt.n	8010d12 <_printf_common+0x96>
 8010cc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010cc8:	1e13      	subs	r3, r2, #0
 8010cca:	6822      	ldr	r2, [r4, #0]
 8010ccc:	bf18      	it	ne
 8010cce:	2301      	movne	r3, #1
 8010cd0:	0692      	lsls	r2, r2, #26
 8010cd2:	d42b      	bmi.n	8010d2c <_printf_common+0xb0>
 8010cd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010cd8:	4649      	mov	r1, r9
 8010cda:	4638      	mov	r0, r7
 8010cdc:	47c0      	blx	r8
 8010cde:	3001      	adds	r0, #1
 8010ce0:	d01e      	beq.n	8010d20 <_printf_common+0xa4>
 8010ce2:	6823      	ldr	r3, [r4, #0]
 8010ce4:	68e5      	ldr	r5, [r4, #12]
 8010ce6:	6832      	ldr	r2, [r6, #0]
 8010ce8:	f003 0306 	and.w	r3, r3, #6
 8010cec:	2b04      	cmp	r3, #4
 8010cee:	bf08      	it	eq
 8010cf0:	1aad      	subeq	r5, r5, r2
 8010cf2:	68a3      	ldr	r3, [r4, #8]
 8010cf4:	6922      	ldr	r2, [r4, #16]
 8010cf6:	bf0c      	ite	eq
 8010cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010cfc:	2500      	movne	r5, #0
 8010cfe:	4293      	cmp	r3, r2
 8010d00:	bfc4      	itt	gt
 8010d02:	1a9b      	subgt	r3, r3, r2
 8010d04:	18ed      	addgt	r5, r5, r3
 8010d06:	2600      	movs	r6, #0
 8010d08:	341a      	adds	r4, #26
 8010d0a:	42b5      	cmp	r5, r6
 8010d0c:	d11a      	bne.n	8010d44 <_printf_common+0xc8>
 8010d0e:	2000      	movs	r0, #0
 8010d10:	e008      	b.n	8010d24 <_printf_common+0xa8>
 8010d12:	2301      	movs	r3, #1
 8010d14:	4652      	mov	r2, sl
 8010d16:	4649      	mov	r1, r9
 8010d18:	4638      	mov	r0, r7
 8010d1a:	47c0      	blx	r8
 8010d1c:	3001      	adds	r0, #1
 8010d1e:	d103      	bne.n	8010d28 <_printf_common+0xac>
 8010d20:	f04f 30ff 	mov.w	r0, #4294967295
 8010d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d28:	3501      	adds	r5, #1
 8010d2a:	e7c6      	b.n	8010cba <_printf_common+0x3e>
 8010d2c:	18e1      	adds	r1, r4, r3
 8010d2e:	1c5a      	adds	r2, r3, #1
 8010d30:	2030      	movs	r0, #48	; 0x30
 8010d32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010d36:	4422      	add	r2, r4
 8010d38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010d3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010d40:	3302      	adds	r3, #2
 8010d42:	e7c7      	b.n	8010cd4 <_printf_common+0x58>
 8010d44:	2301      	movs	r3, #1
 8010d46:	4622      	mov	r2, r4
 8010d48:	4649      	mov	r1, r9
 8010d4a:	4638      	mov	r0, r7
 8010d4c:	47c0      	blx	r8
 8010d4e:	3001      	adds	r0, #1
 8010d50:	d0e6      	beq.n	8010d20 <_printf_common+0xa4>
 8010d52:	3601      	adds	r6, #1
 8010d54:	e7d9      	b.n	8010d0a <_printf_common+0x8e>
	...

08010d58 <_printf_i>:
 8010d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010d5c:	460c      	mov	r4, r1
 8010d5e:	4691      	mov	r9, r2
 8010d60:	7e27      	ldrb	r7, [r4, #24]
 8010d62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010d64:	2f78      	cmp	r7, #120	; 0x78
 8010d66:	4680      	mov	r8, r0
 8010d68:	469a      	mov	sl, r3
 8010d6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010d6e:	d807      	bhi.n	8010d80 <_printf_i+0x28>
 8010d70:	2f62      	cmp	r7, #98	; 0x62
 8010d72:	d80a      	bhi.n	8010d8a <_printf_i+0x32>
 8010d74:	2f00      	cmp	r7, #0
 8010d76:	f000 80d8 	beq.w	8010f2a <_printf_i+0x1d2>
 8010d7a:	2f58      	cmp	r7, #88	; 0x58
 8010d7c:	f000 80a3 	beq.w	8010ec6 <_printf_i+0x16e>
 8010d80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010d84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010d88:	e03a      	b.n	8010e00 <_printf_i+0xa8>
 8010d8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010d8e:	2b15      	cmp	r3, #21
 8010d90:	d8f6      	bhi.n	8010d80 <_printf_i+0x28>
 8010d92:	a001      	add	r0, pc, #4	; (adr r0, 8010d98 <_printf_i+0x40>)
 8010d94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010d98:	08010df1 	.word	0x08010df1
 8010d9c:	08010e05 	.word	0x08010e05
 8010da0:	08010d81 	.word	0x08010d81
 8010da4:	08010d81 	.word	0x08010d81
 8010da8:	08010d81 	.word	0x08010d81
 8010dac:	08010d81 	.word	0x08010d81
 8010db0:	08010e05 	.word	0x08010e05
 8010db4:	08010d81 	.word	0x08010d81
 8010db8:	08010d81 	.word	0x08010d81
 8010dbc:	08010d81 	.word	0x08010d81
 8010dc0:	08010d81 	.word	0x08010d81
 8010dc4:	08010f11 	.word	0x08010f11
 8010dc8:	08010e35 	.word	0x08010e35
 8010dcc:	08010ef3 	.word	0x08010ef3
 8010dd0:	08010d81 	.word	0x08010d81
 8010dd4:	08010d81 	.word	0x08010d81
 8010dd8:	08010f33 	.word	0x08010f33
 8010ddc:	08010d81 	.word	0x08010d81
 8010de0:	08010e35 	.word	0x08010e35
 8010de4:	08010d81 	.word	0x08010d81
 8010de8:	08010d81 	.word	0x08010d81
 8010dec:	08010efb 	.word	0x08010efb
 8010df0:	680b      	ldr	r3, [r1, #0]
 8010df2:	1d1a      	adds	r2, r3, #4
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	600a      	str	r2, [r1, #0]
 8010df8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010dfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010e00:	2301      	movs	r3, #1
 8010e02:	e0a3      	b.n	8010f4c <_printf_i+0x1f4>
 8010e04:	6825      	ldr	r5, [r4, #0]
 8010e06:	6808      	ldr	r0, [r1, #0]
 8010e08:	062e      	lsls	r6, r5, #24
 8010e0a:	f100 0304 	add.w	r3, r0, #4
 8010e0e:	d50a      	bpl.n	8010e26 <_printf_i+0xce>
 8010e10:	6805      	ldr	r5, [r0, #0]
 8010e12:	600b      	str	r3, [r1, #0]
 8010e14:	2d00      	cmp	r5, #0
 8010e16:	da03      	bge.n	8010e20 <_printf_i+0xc8>
 8010e18:	232d      	movs	r3, #45	; 0x2d
 8010e1a:	426d      	negs	r5, r5
 8010e1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e20:	485e      	ldr	r0, [pc, #376]	; (8010f9c <_printf_i+0x244>)
 8010e22:	230a      	movs	r3, #10
 8010e24:	e019      	b.n	8010e5a <_printf_i+0x102>
 8010e26:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010e2a:	6805      	ldr	r5, [r0, #0]
 8010e2c:	600b      	str	r3, [r1, #0]
 8010e2e:	bf18      	it	ne
 8010e30:	b22d      	sxthne	r5, r5
 8010e32:	e7ef      	b.n	8010e14 <_printf_i+0xbc>
 8010e34:	680b      	ldr	r3, [r1, #0]
 8010e36:	6825      	ldr	r5, [r4, #0]
 8010e38:	1d18      	adds	r0, r3, #4
 8010e3a:	6008      	str	r0, [r1, #0]
 8010e3c:	0628      	lsls	r0, r5, #24
 8010e3e:	d501      	bpl.n	8010e44 <_printf_i+0xec>
 8010e40:	681d      	ldr	r5, [r3, #0]
 8010e42:	e002      	b.n	8010e4a <_printf_i+0xf2>
 8010e44:	0669      	lsls	r1, r5, #25
 8010e46:	d5fb      	bpl.n	8010e40 <_printf_i+0xe8>
 8010e48:	881d      	ldrh	r5, [r3, #0]
 8010e4a:	4854      	ldr	r0, [pc, #336]	; (8010f9c <_printf_i+0x244>)
 8010e4c:	2f6f      	cmp	r7, #111	; 0x6f
 8010e4e:	bf0c      	ite	eq
 8010e50:	2308      	moveq	r3, #8
 8010e52:	230a      	movne	r3, #10
 8010e54:	2100      	movs	r1, #0
 8010e56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010e5a:	6866      	ldr	r6, [r4, #4]
 8010e5c:	60a6      	str	r6, [r4, #8]
 8010e5e:	2e00      	cmp	r6, #0
 8010e60:	bfa2      	ittt	ge
 8010e62:	6821      	ldrge	r1, [r4, #0]
 8010e64:	f021 0104 	bicge.w	r1, r1, #4
 8010e68:	6021      	strge	r1, [r4, #0]
 8010e6a:	b90d      	cbnz	r5, 8010e70 <_printf_i+0x118>
 8010e6c:	2e00      	cmp	r6, #0
 8010e6e:	d04d      	beq.n	8010f0c <_printf_i+0x1b4>
 8010e70:	4616      	mov	r6, r2
 8010e72:	fbb5 f1f3 	udiv	r1, r5, r3
 8010e76:	fb03 5711 	mls	r7, r3, r1, r5
 8010e7a:	5dc7      	ldrb	r7, [r0, r7]
 8010e7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010e80:	462f      	mov	r7, r5
 8010e82:	42bb      	cmp	r3, r7
 8010e84:	460d      	mov	r5, r1
 8010e86:	d9f4      	bls.n	8010e72 <_printf_i+0x11a>
 8010e88:	2b08      	cmp	r3, #8
 8010e8a:	d10b      	bne.n	8010ea4 <_printf_i+0x14c>
 8010e8c:	6823      	ldr	r3, [r4, #0]
 8010e8e:	07df      	lsls	r7, r3, #31
 8010e90:	d508      	bpl.n	8010ea4 <_printf_i+0x14c>
 8010e92:	6923      	ldr	r3, [r4, #16]
 8010e94:	6861      	ldr	r1, [r4, #4]
 8010e96:	4299      	cmp	r1, r3
 8010e98:	bfde      	ittt	le
 8010e9a:	2330      	movle	r3, #48	; 0x30
 8010e9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010ea0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010ea4:	1b92      	subs	r2, r2, r6
 8010ea6:	6122      	str	r2, [r4, #16]
 8010ea8:	f8cd a000 	str.w	sl, [sp]
 8010eac:	464b      	mov	r3, r9
 8010eae:	aa03      	add	r2, sp, #12
 8010eb0:	4621      	mov	r1, r4
 8010eb2:	4640      	mov	r0, r8
 8010eb4:	f7ff fee2 	bl	8010c7c <_printf_common>
 8010eb8:	3001      	adds	r0, #1
 8010eba:	d14c      	bne.n	8010f56 <_printf_i+0x1fe>
 8010ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8010ec0:	b004      	add	sp, #16
 8010ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ec6:	4835      	ldr	r0, [pc, #212]	; (8010f9c <_printf_i+0x244>)
 8010ec8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010ecc:	6823      	ldr	r3, [r4, #0]
 8010ece:	680e      	ldr	r6, [r1, #0]
 8010ed0:	061f      	lsls	r7, r3, #24
 8010ed2:	f856 5b04 	ldr.w	r5, [r6], #4
 8010ed6:	600e      	str	r6, [r1, #0]
 8010ed8:	d514      	bpl.n	8010f04 <_printf_i+0x1ac>
 8010eda:	07d9      	lsls	r1, r3, #31
 8010edc:	bf44      	itt	mi
 8010ede:	f043 0320 	orrmi.w	r3, r3, #32
 8010ee2:	6023      	strmi	r3, [r4, #0]
 8010ee4:	b91d      	cbnz	r5, 8010eee <_printf_i+0x196>
 8010ee6:	6823      	ldr	r3, [r4, #0]
 8010ee8:	f023 0320 	bic.w	r3, r3, #32
 8010eec:	6023      	str	r3, [r4, #0]
 8010eee:	2310      	movs	r3, #16
 8010ef0:	e7b0      	b.n	8010e54 <_printf_i+0xfc>
 8010ef2:	6823      	ldr	r3, [r4, #0]
 8010ef4:	f043 0320 	orr.w	r3, r3, #32
 8010ef8:	6023      	str	r3, [r4, #0]
 8010efa:	2378      	movs	r3, #120	; 0x78
 8010efc:	4828      	ldr	r0, [pc, #160]	; (8010fa0 <_printf_i+0x248>)
 8010efe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010f02:	e7e3      	b.n	8010ecc <_printf_i+0x174>
 8010f04:	065e      	lsls	r6, r3, #25
 8010f06:	bf48      	it	mi
 8010f08:	b2ad      	uxthmi	r5, r5
 8010f0a:	e7e6      	b.n	8010eda <_printf_i+0x182>
 8010f0c:	4616      	mov	r6, r2
 8010f0e:	e7bb      	b.n	8010e88 <_printf_i+0x130>
 8010f10:	680b      	ldr	r3, [r1, #0]
 8010f12:	6826      	ldr	r6, [r4, #0]
 8010f14:	6960      	ldr	r0, [r4, #20]
 8010f16:	1d1d      	adds	r5, r3, #4
 8010f18:	600d      	str	r5, [r1, #0]
 8010f1a:	0635      	lsls	r5, r6, #24
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	d501      	bpl.n	8010f24 <_printf_i+0x1cc>
 8010f20:	6018      	str	r0, [r3, #0]
 8010f22:	e002      	b.n	8010f2a <_printf_i+0x1d2>
 8010f24:	0671      	lsls	r1, r6, #25
 8010f26:	d5fb      	bpl.n	8010f20 <_printf_i+0x1c8>
 8010f28:	8018      	strh	r0, [r3, #0]
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	6123      	str	r3, [r4, #16]
 8010f2e:	4616      	mov	r6, r2
 8010f30:	e7ba      	b.n	8010ea8 <_printf_i+0x150>
 8010f32:	680b      	ldr	r3, [r1, #0]
 8010f34:	1d1a      	adds	r2, r3, #4
 8010f36:	600a      	str	r2, [r1, #0]
 8010f38:	681e      	ldr	r6, [r3, #0]
 8010f3a:	6862      	ldr	r2, [r4, #4]
 8010f3c:	2100      	movs	r1, #0
 8010f3e:	4630      	mov	r0, r6
 8010f40:	f7ef f9d6 	bl	80002f0 <memchr>
 8010f44:	b108      	cbz	r0, 8010f4a <_printf_i+0x1f2>
 8010f46:	1b80      	subs	r0, r0, r6
 8010f48:	6060      	str	r0, [r4, #4]
 8010f4a:	6863      	ldr	r3, [r4, #4]
 8010f4c:	6123      	str	r3, [r4, #16]
 8010f4e:	2300      	movs	r3, #0
 8010f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f54:	e7a8      	b.n	8010ea8 <_printf_i+0x150>
 8010f56:	6923      	ldr	r3, [r4, #16]
 8010f58:	4632      	mov	r2, r6
 8010f5a:	4649      	mov	r1, r9
 8010f5c:	4640      	mov	r0, r8
 8010f5e:	47d0      	blx	sl
 8010f60:	3001      	adds	r0, #1
 8010f62:	d0ab      	beq.n	8010ebc <_printf_i+0x164>
 8010f64:	6823      	ldr	r3, [r4, #0]
 8010f66:	079b      	lsls	r3, r3, #30
 8010f68:	d413      	bmi.n	8010f92 <_printf_i+0x23a>
 8010f6a:	68e0      	ldr	r0, [r4, #12]
 8010f6c:	9b03      	ldr	r3, [sp, #12]
 8010f6e:	4298      	cmp	r0, r3
 8010f70:	bfb8      	it	lt
 8010f72:	4618      	movlt	r0, r3
 8010f74:	e7a4      	b.n	8010ec0 <_printf_i+0x168>
 8010f76:	2301      	movs	r3, #1
 8010f78:	4632      	mov	r2, r6
 8010f7a:	4649      	mov	r1, r9
 8010f7c:	4640      	mov	r0, r8
 8010f7e:	47d0      	blx	sl
 8010f80:	3001      	adds	r0, #1
 8010f82:	d09b      	beq.n	8010ebc <_printf_i+0x164>
 8010f84:	3501      	adds	r5, #1
 8010f86:	68e3      	ldr	r3, [r4, #12]
 8010f88:	9903      	ldr	r1, [sp, #12]
 8010f8a:	1a5b      	subs	r3, r3, r1
 8010f8c:	42ab      	cmp	r3, r5
 8010f8e:	dcf2      	bgt.n	8010f76 <_printf_i+0x21e>
 8010f90:	e7eb      	b.n	8010f6a <_printf_i+0x212>
 8010f92:	2500      	movs	r5, #0
 8010f94:	f104 0619 	add.w	r6, r4, #25
 8010f98:	e7f5      	b.n	8010f86 <_printf_i+0x22e>
 8010f9a:	bf00      	nop
 8010f9c:	08013aea 	.word	0x08013aea
 8010fa0:	08013afb 	.word	0x08013afb

08010fa4 <iprintf>:
 8010fa4:	b40f      	push	{r0, r1, r2, r3}
 8010fa6:	4b0a      	ldr	r3, [pc, #40]	; (8010fd0 <iprintf+0x2c>)
 8010fa8:	b513      	push	{r0, r1, r4, lr}
 8010faa:	681c      	ldr	r4, [r3, #0]
 8010fac:	b124      	cbz	r4, 8010fb8 <iprintf+0x14>
 8010fae:	69a3      	ldr	r3, [r4, #24]
 8010fb0:	b913      	cbnz	r3, 8010fb8 <iprintf+0x14>
 8010fb2:	4620      	mov	r0, r4
 8010fb4:	f001 f86c 	bl	8012090 <__sinit>
 8010fb8:	ab05      	add	r3, sp, #20
 8010fba:	9a04      	ldr	r2, [sp, #16]
 8010fbc:	68a1      	ldr	r1, [r4, #8]
 8010fbe:	9301      	str	r3, [sp, #4]
 8010fc0:	4620      	mov	r0, r4
 8010fc2:	f001 fde7 	bl	8012b94 <_vfiprintf_r>
 8010fc6:	b002      	add	sp, #8
 8010fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010fcc:	b004      	add	sp, #16
 8010fce:	4770      	bx	lr
 8010fd0:	24000024 	.word	0x24000024

08010fd4 <_puts_r>:
 8010fd4:	b570      	push	{r4, r5, r6, lr}
 8010fd6:	460e      	mov	r6, r1
 8010fd8:	4605      	mov	r5, r0
 8010fda:	b118      	cbz	r0, 8010fe4 <_puts_r+0x10>
 8010fdc:	6983      	ldr	r3, [r0, #24]
 8010fde:	b90b      	cbnz	r3, 8010fe4 <_puts_r+0x10>
 8010fe0:	f001 f856 	bl	8012090 <__sinit>
 8010fe4:	69ab      	ldr	r3, [r5, #24]
 8010fe6:	68ac      	ldr	r4, [r5, #8]
 8010fe8:	b913      	cbnz	r3, 8010ff0 <_puts_r+0x1c>
 8010fea:	4628      	mov	r0, r5
 8010fec:	f001 f850 	bl	8012090 <__sinit>
 8010ff0:	4b2c      	ldr	r3, [pc, #176]	; (80110a4 <_puts_r+0xd0>)
 8010ff2:	429c      	cmp	r4, r3
 8010ff4:	d120      	bne.n	8011038 <_puts_r+0x64>
 8010ff6:	686c      	ldr	r4, [r5, #4]
 8010ff8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ffa:	07db      	lsls	r3, r3, #31
 8010ffc:	d405      	bmi.n	801100a <_puts_r+0x36>
 8010ffe:	89a3      	ldrh	r3, [r4, #12]
 8011000:	0598      	lsls	r0, r3, #22
 8011002:	d402      	bmi.n	801100a <_puts_r+0x36>
 8011004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011006:	f001 f8e6 	bl	80121d6 <__retarget_lock_acquire_recursive>
 801100a:	89a3      	ldrh	r3, [r4, #12]
 801100c:	0719      	lsls	r1, r3, #28
 801100e:	d51d      	bpl.n	801104c <_puts_r+0x78>
 8011010:	6923      	ldr	r3, [r4, #16]
 8011012:	b1db      	cbz	r3, 801104c <_puts_r+0x78>
 8011014:	3e01      	subs	r6, #1
 8011016:	68a3      	ldr	r3, [r4, #8]
 8011018:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801101c:	3b01      	subs	r3, #1
 801101e:	60a3      	str	r3, [r4, #8]
 8011020:	bb39      	cbnz	r1, 8011072 <_puts_r+0x9e>
 8011022:	2b00      	cmp	r3, #0
 8011024:	da38      	bge.n	8011098 <_puts_r+0xc4>
 8011026:	4622      	mov	r2, r4
 8011028:	210a      	movs	r1, #10
 801102a:	4628      	mov	r0, r5
 801102c:	f000 f848 	bl	80110c0 <__swbuf_r>
 8011030:	3001      	adds	r0, #1
 8011032:	d011      	beq.n	8011058 <_puts_r+0x84>
 8011034:	250a      	movs	r5, #10
 8011036:	e011      	b.n	801105c <_puts_r+0x88>
 8011038:	4b1b      	ldr	r3, [pc, #108]	; (80110a8 <_puts_r+0xd4>)
 801103a:	429c      	cmp	r4, r3
 801103c:	d101      	bne.n	8011042 <_puts_r+0x6e>
 801103e:	68ac      	ldr	r4, [r5, #8]
 8011040:	e7da      	b.n	8010ff8 <_puts_r+0x24>
 8011042:	4b1a      	ldr	r3, [pc, #104]	; (80110ac <_puts_r+0xd8>)
 8011044:	429c      	cmp	r4, r3
 8011046:	bf08      	it	eq
 8011048:	68ec      	ldreq	r4, [r5, #12]
 801104a:	e7d5      	b.n	8010ff8 <_puts_r+0x24>
 801104c:	4621      	mov	r1, r4
 801104e:	4628      	mov	r0, r5
 8011050:	f000 f888 	bl	8011164 <__swsetup_r>
 8011054:	2800      	cmp	r0, #0
 8011056:	d0dd      	beq.n	8011014 <_puts_r+0x40>
 8011058:	f04f 35ff 	mov.w	r5, #4294967295
 801105c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801105e:	07da      	lsls	r2, r3, #31
 8011060:	d405      	bmi.n	801106e <_puts_r+0x9a>
 8011062:	89a3      	ldrh	r3, [r4, #12]
 8011064:	059b      	lsls	r3, r3, #22
 8011066:	d402      	bmi.n	801106e <_puts_r+0x9a>
 8011068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801106a:	f001 f8b5 	bl	80121d8 <__retarget_lock_release_recursive>
 801106e:	4628      	mov	r0, r5
 8011070:	bd70      	pop	{r4, r5, r6, pc}
 8011072:	2b00      	cmp	r3, #0
 8011074:	da04      	bge.n	8011080 <_puts_r+0xac>
 8011076:	69a2      	ldr	r2, [r4, #24]
 8011078:	429a      	cmp	r2, r3
 801107a:	dc06      	bgt.n	801108a <_puts_r+0xb6>
 801107c:	290a      	cmp	r1, #10
 801107e:	d004      	beq.n	801108a <_puts_r+0xb6>
 8011080:	6823      	ldr	r3, [r4, #0]
 8011082:	1c5a      	adds	r2, r3, #1
 8011084:	6022      	str	r2, [r4, #0]
 8011086:	7019      	strb	r1, [r3, #0]
 8011088:	e7c5      	b.n	8011016 <_puts_r+0x42>
 801108a:	4622      	mov	r2, r4
 801108c:	4628      	mov	r0, r5
 801108e:	f000 f817 	bl	80110c0 <__swbuf_r>
 8011092:	3001      	adds	r0, #1
 8011094:	d1bf      	bne.n	8011016 <_puts_r+0x42>
 8011096:	e7df      	b.n	8011058 <_puts_r+0x84>
 8011098:	6823      	ldr	r3, [r4, #0]
 801109a:	250a      	movs	r5, #10
 801109c:	1c5a      	adds	r2, r3, #1
 801109e:	6022      	str	r2, [r4, #0]
 80110a0:	701d      	strb	r5, [r3, #0]
 80110a2:	e7db      	b.n	801105c <_puts_r+0x88>
 80110a4:	08013bc0 	.word	0x08013bc0
 80110a8:	08013be0 	.word	0x08013be0
 80110ac:	08013ba0 	.word	0x08013ba0

080110b0 <puts>:
 80110b0:	4b02      	ldr	r3, [pc, #8]	; (80110bc <puts+0xc>)
 80110b2:	4601      	mov	r1, r0
 80110b4:	6818      	ldr	r0, [r3, #0]
 80110b6:	f7ff bf8d 	b.w	8010fd4 <_puts_r>
 80110ba:	bf00      	nop
 80110bc:	24000024 	.word	0x24000024

080110c0 <__swbuf_r>:
 80110c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110c2:	460e      	mov	r6, r1
 80110c4:	4614      	mov	r4, r2
 80110c6:	4605      	mov	r5, r0
 80110c8:	b118      	cbz	r0, 80110d2 <__swbuf_r+0x12>
 80110ca:	6983      	ldr	r3, [r0, #24]
 80110cc:	b90b      	cbnz	r3, 80110d2 <__swbuf_r+0x12>
 80110ce:	f000 ffdf 	bl	8012090 <__sinit>
 80110d2:	4b21      	ldr	r3, [pc, #132]	; (8011158 <__swbuf_r+0x98>)
 80110d4:	429c      	cmp	r4, r3
 80110d6:	d12b      	bne.n	8011130 <__swbuf_r+0x70>
 80110d8:	686c      	ldr	r4, [r5, #4]
 80110da:	69a3      	ldr	r3, [r4, #24]
 80110dc:	60a3      	str	r3, [r4, #8]
 80110de:	89a3      	ldrh	r3, [r4, #12]
 80110e0:	071a      	lsls	r2, r3, #28
 80110e2:	d52f      	bpl.n	8011144 <__swbuf_r+0x84>
 80110e4:	6923      	ldr	r3, [r4, #16]
 80110e6:	b36b      	cbz	r3, 8011144 <__swbuf_r+0x84>
 80110e8:	6923      	ldr	r3, [r4, #16]
 80110ea:	6820      	ldr	r0, [r4, #0]
 80110ec:	1ac0      	subs	r0, r0, r3
 80110ee:	6963      	ldr	r3, [r4, #20]
 80110f0:	b2f6      	uxtb	r6, r6
 80110f2:	4283      	cmp	r3, r0
 80110f4:	4637      	mov	r7, r6
 80110f6:	dc04      	bgt.n	8011102 <__swbuf_r+0x42>
 80110f8:	4621      	mov	r1, r4
 80110fa:	4628      	mov	r0, r5
 80110fc:	f000 ff34 	bl	8011f68 <_fflush_r>
 8011100:	bb30      	cbnz	r0, 8011150 <__swbuf_r+0x90>
 8011102:	68a3      	ldr	r3, [r4, #8]
 8011104:	3b01      	subs	r3, #1
 8011106:	60a3      	str	r3, [r4, #8]
 8011108:	6823      	ldr	r3, [r4, #0]
 801110a:	1c5a      	adds	r2, r3, #1
 801110c:	6022      	str	r2, [r4, #0]
 801110e:	701e      	strb	r6, [r3, #0]
 8011110:	6963      	ldr	r3, [r4, #20]
 8011112:	3001      	adds	r0, #1
 8011114:	4283      	cmp	r3, r0
 8011116:	d004      	beq.n	8011122 <__swbuf_r+0x62>
 8011118:	89a3      	ldrh	r3, [r4, #12]
 801111a:	07db      	lsls	r3, r3, #31
 801111c:	d506      	bpl.n	801112c <__swbuf_r+0x6c>
 801111e:	2e0a      	cmp	r6, #10
 8011120:	d104      	bne.n	801112c <__swbuf_r+0x6c>
 8011122:	4621      	mov	r1, r4
 8011124:	4628      	mov	r0, r5
 8011126:	f000 ff1f 	bl	8011f68 <_fflush_r>
 801112a:	b988      	cbnz	r0, 8011150 <__swbuf_r+0x90>
 801112c:	4638      	mov	r0, r7
 801112e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011130:	4b0a      	ldr	r3, [pc, #40]	; (801115c <__swbuf_r+0x9c>)
 8011132:	429c      	cmp	r4, r3
 8011134:	d101      	bne.n	801113a <__swbuf_r+0x7a>
 8011136:	68ac      	ldr	r4, [r5, #8]
 8011138:	e7cf      	b.n	80110da <__swbuf_r+0x1a>
 801113a:	4b09      	ldr	r3, [pc, #36]	; (8011160 <__swbuf_r+0xa0>)
 801113c:	429c      	cmp	r4, r3
 801113e:	bf08      	it	eq
 8011140:	68ec      	ldreq	r4, [r5, #12]
 8011142:	e7ca      	b.n	80110da <__swbuf_r+0x1a>
 8011144:	4621      	mov	r1, r4
 8011146:	4628      	mov	r0, r5
 8011148:	f000 f80c 	bl	8011164 <__swsetup_r>
 801114c:	2800      	cmp	r0, #0
 801114e:	d0cb      	beq.n	80110e8 <__swbuf_r+0x28>
 8011150:	f04f 37ff 	mov.w	r7, #4294967295
 8011154:	e7ea      	b.n	801112c <__swbuf_r+0x6c>
 8011156:	bf00      	nop
 8011158:	08013bc0 	.word	0x08013bc0
 801115c:	08013be0 	.word	0x08013be0
 8011160:	08013ba0 	.word	0x08013ba0

08011164 <__swsetup_r>:
 8011164:	4b32      	ldr	r3, [pc, #200]	; (8011230 <__swsetup_r+0xcc>)
 8011166:	b570      	push	{r4, r5, r6, lr}
 8011168:	681d      	ldr	r5, [r3, #0]
 801116a:	4606      	mov	r6, r0
 801116c:	460c      	mov	r4, r1
 801116e:	b125      	cbz	r5, 801117a <__swsetup_r+0x16>
 8011170:	69ab      	ldr	r3, [r5, #24]
 8011172:	b913      	cbnz	r3, 801117a <__swsetup_r+0x16>
 8011174:	4628      	mov	r0, r5
 8011176:	f000 ff8b 	bl	8012090 <__sinit>
 801117a:	4b2e      	ldr	r3, [pc, #184]	; (8011234 <__swsetup_r+0xd0>)
 801117c:	429c      	cmp	r4, r3
 801117e:	d10f      	bne.n	80111a0 <__swsetup_r+0x3c>
 8011180:	686c      	ldr	r4, [r5, #4]
 8011182:	89a3      	ldrh	r3, [r4, #12]
 8011184:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011188:	0719      	lsls	r1, r3, #28
 801118a:	d42c      	bmi.n	80111e6 <__swsetup_r+0x82>
 801118c:	06dd      	lsls	r5, r3, #27
 801118e:	d411      	bmi.n	80111b4 <__swsetup_r+0x50>
 8011190:	2309      	movs	r3, #9
 8011192:	6033      	str	r3, [r6, #0]
 8011194:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011198:	81a3      	strh	r3, [r4, #12]
 801119a:	f04f 30ff 	mov.w	r0, #4294967295
 801119e:	e03e      	b.n	801121e <__swsetup_r+0xba>
 80111a0:	4b25      	ldr	r3, [pc, #148]	; (8011238 <__swsetup_r+0xd4>)
 80111a2:	429c      	cmp	r4, r3
 80111a4:	d101      	bne.n	80111aa <__swsetup_r+0x46>
 80111a6:	68ac      	ldr	r4, [r5, #8]
 80111a8:	e7eb      	b.n	8011182 <__swsetup_r+0x1e>
 80111aa:	4b24      	ldr	r3, [pc, #144]	; (801123c <__swsetup_r+0xd8>)
 80111ac:	429c      	cmp	r4, r3
 80111ae:	bf08      	it	eq
 80111b0:	68ec      	ldreq	r4, [r5, #12]
 80111b2:	e7e6      	b.n	8011182 <__swsetup_r+0x1e>
 80111b4:	0758      	lsls	r0, r3, #29
 80111b6:	d512      	bpl.n	80111de <__swsetup_r+0x7a>
 80111b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80111ba:	b141      	cbz	r1, 80111ce <__swsetup_r+0x6a>
 80111bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80111c0:	4299      	cmp	r1, r3
 80111c2:	d002      	beq.n	80111ca <__swsetup_r+0x66>
 80111c4:	4630      	mov	r0, r6
 80111c6:	f001 fc11 	bl	80129ec <_free_r>
 80111ca:	2300      	movs	r3, #0
 80111cc:	6363      	str	r3, [r4, #52]	; 0x34
 80111ce:	89a3      	ldrh	r3, [r4, #12]
 80111d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80111d4:	81a3      	strh	r3, [r4, #12]
 80111d6:	2300      	movs	r3, #0
 80111d8:	6063      	str	r3, [r4, #4]
 80111da:	6923      	ldr	r3, [r4, #16]
 80111dc:	6023      	str	r3, [r4, #0]
 80111de:	89a3      	ldrh	r3, [r4, #12]
 80111e0:	f043 0308 	orr.w	r3, r3, #8
 80111e4:	81a3      	strh	r3, [r4, #12]
 80111e6:	6923      	ldr	r3, [r4, #16]
 80111e8:	b94b      	cbnz	r3, 80111fe <__swsetup_r+0x9a>
 80111ea:	89a3      	ldrh	r3, [r4, #12]
 80111ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80111f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80111f4:	d003      	beq.n	80111fe <__swsetup_r+0x9a>
 80111f6:	4621      	mov	r1, r4
 80111f8:	4630      	mov	r0, r6
 80111fa:	f001 f813 	bl	8012224 <__smakebuf_r>
 80111fe:	89a0      	ldrh	r0, [r4, #12]
 8011200:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011204:	f010 0301 	ands.w	r3, r0, #1
 8011208:	d00a      	beq.n	8011220 <__swsetup_r+0xbc>
 801120a:	2300      	movs	r3, #0
 801120c:	60a3      	str	r3, [r4, #8]
 801120e:	6963      	ldr	r3, [r4, #20]
 8011210:	425b      	negs	r3, r3
 8011212:	61a3      	str	r3, [r4, #24]
 8011214:	6923      	ldr	r3, [r4, #16]
 8011216:	b943      	cbnz	r3, 801122a <__swsetup_r+0xc6>
 8011218:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801121c:	d1ba      	bne.n	8011194 <__swsetup_r+0x30>
 801121e:	bd70      	pop	{r4, r5, r6, pc}
 8011220:	0781      	lsls	r1, r0, #30
 8011222:	bf58      	it	pl
 8011224:	6963      	ldrpl	r3, [r4, #20]
 8011226:	60a3      	str	r3, [r4, #8]
 8011228:	e7f4      	b.n	8011214 <__swsetup_r+0xb0>
 801122a:	2000      	movs	r0, #0
 801122c:	e7f7      	b.n	801121e <__swsetup_r+0xba>
 801122e:	bf00      	nop
 8011230:	24000024 	.word	0x24000024
 8011234:	08013bc0 	.word	0x08013bc0
 8011238:	08013be0 	.word	0x08013be0
 801123c:	08013ba0 	.word	0x08013ba0

08011240 <quorem>:
 8011240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011244:	6903      	ldr	r3, [r0, #16]
 8011246:	690c      	ldr	r4, [r1, #16]
 8011248:	42a3      	cmp	r3, r4
 801124a:	4607      	mov	r7, r0
 801124c:	f2c0 8081 	blt.w	8011352 <quorem+0x112>
 8011250:	3c01      	subs	r4, #1
 8011252:	f101 0814 	add.w	r8, r1, #20
 8011256:	f100 0514 	add.w	r5, r0, #20
 801125a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801125e:	9301      	str	r3, [sp, #4]
 8011260:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011264:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011268:	3301      	adds	r3, #1
 801126a:	429a      	cmp	r2, r3
 801126c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011270:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011274:	fbb2 f6f3 	udiv	r6, r2, r3
 8011278:	d331      	bcc.n	80112de <quorem+0x9e>
 801127a:	f04f 0e00 	mov.w	lr, #0
 801127e:	4640      	mov	r0, r8
 8011280:	46ac      	mov	ip, r5
 8011282:	46f2      	mov	sl, lr
 8011284:	f850 2b04 	ldr.w	r2, [r0], #4
 8011288:	b293      	uxth	r3, r2
 801128a:	fb06 e303 	mla	r3, r6, r3, lr
 801128e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011292:	b29b      	uxth	r3, r3
 8011294:	ebaa 0303 	sub.w	r3, sl, r3
 8011298:	0c12      	lsrs	r2, r2, #16
 801129a:	f8dc a000 	ldr.w	sl, [ip]
 801129e:	fb06 e202 	mla	r2, r6, r2, lr
 80112a2:	fa13 f38a 	uxtah	r3, r3, sl
 80112a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80112aa:	fa1f fa82 	uxth.w	sl, r2
 80112ae:	f8dc 2000 	ldr.w	r2, [ip]
 80112b2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80112b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80112ba:	b29b      	uxth	r3, r3
 80112bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80112c0:	4581      	cmp	r9, r0
 80112c2:	f84c 3b04 	str.w	r3, [ip], #4
 80112c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80112ca:	d2db      	bcs.n	8011284 <quorem+0x44>
 80112cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80112d0:	b92b      	cbnz	r3, 80112de <quorem+0x9e>
 80112d2:	9b01      	ldr	r3, [sp, #4]
 80112d4:	3b04      	subs	r3, #4
 80112d6:	429d      	cmp	r5, r3
 80112d8:	461a      	mov	r2, r3
 80112da:	d32e      	bcc.n	801133a <quorem+0xfa>
 80112dc:	613c      	str	r4, [r7, #16]
 80112de:	4638      	mov	r0, r7
 80112e0:	f001 fa74 	bl	80127cc <__mcmp>
 80112e4:	2800      	cmp	r0, #0
 80112e6:	db24      	blt.n	8011332 <quorem+0xf2>
 80112e8:	3601      	adds	r6, #1
 80112ea:	4628      	mov	r0, r5
 80112ec:	f04f 0c00 	mov.w	ip, #0
 80112f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80112f4:	f8d0 e000 	ldr.w	lr, [r0]
 80112f8:	b293      	uxth	r3, r2
 80112fa:	ebac 0303 	sub.w	r3, ip, r3
 80112fe:	0c12      	lsrs	r2, r2, #16
 8011300:	fa13 f38e 	uxtah	r3, r3, lr
 8011304:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011308:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801130c:	b29b      	uxth	r3, r3
 801130e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011312:	45c1      	cmp	r9, r8
 8011314:	f840 3b04 	str.w	r3, [r0], #4
 8011318:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801131c:	d2e8      	bcs.n	80112f0 <quorem+0xb0>
 801131e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011322:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011326:	b922      	cbnz	r2, 8011332 <quorem+0xf2>
 8011328:	3b04      	subs	r3, #4
 801132a:	429d      	cmp	r5, r3
 801132c:	461a      	mov	r2, r3
 801132e:	d30a      	bcc.n	8011346 <quorem+0x106>
 8011330:	613c      	str	r4, [r7, #16]
 8011332:	4630      	mov	r0, r6
 8011334:	b003      	add	sp, #12
 8011336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801133a:	6812      	ldr	r2, [r2, #0]
 801133c:	3b04      	subs	r3, #4
 801133e:	2a00      	cmp	r2, #0
 8011340:	d1cc      	bne.n	80112dc <quorem+0x9c>
 8011342:	3c01      	subs	r4, #1
 8011344:	e7c7      	b.n	80112d6 <quorem+0x96>
 8011346:	6812      	ldr	r2, [r2, #0]
 8011348:	3b04      	subs	r3, #4
 801134a:	2a00      	cmp	r2, #0
 801134c:	d1f0      	bne.n	8011330 <quorem+0xf0>
 801134e:	3c01      	subs	r4, #1
 8011350:	e7eb      	b.n	801132a <quorem+0xea>
 8011352:	2000      	movs	r0, #0
 8011354:	e7ee      	b.n	8011334 <quorem+0xf4>
	...

08011358 <_dtoa_r>:
 8011358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801135c:	ec59 8b10 	vmov	r8, r9, d0
 8011360:	b095      	sub	sp, #84	; 0x54
 8011362:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011364:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8011366:	9107      	str	r1, [sp, #28]
 8011368:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801136c:	4606      	mov	r6, r0
 801136e:	9209      	str	r2, [sp, #36]	; 0x24
 8011370:	9310      	str	r3, [sp, #64]	; 0x40
 8011372:	b975      	cbnz	r5, 8011392 <_dtoa_r+0x3a>
 8011374:	2010      	movs	r0, #16
 8011376:	f000 ff95 	bl	80122a4 <malloc>
 801137a:	4602      	mov	r2, r0
 801137c:	6270      	str	r0, [r6, #36]	; 0x24
 801137e:	b920      	cbnz	r0, 801138a <_dtoa_r+0x32>
 8011380:	4bab      	ldr	r3, [pc, #684]	; (8011630 <_dtoa_r+0x2d8>)
 8011382:	21ea      	movs	r1, #234	; 0xea
 8011384:	48ab      	ldr	r0, [pc, #684]	; (8011634 <_dtoa_r+0x2dc>)
 8011386:	f001 fd9b 	bl	8012ec0 <__assert_func>
 801138a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801138e:	6005      	str	r5, [r0, #0]
 8011390:	60c5      	str	r5, [r0, #12]
 8011392:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011394:	6819      	ldr	r1, [r3, #0]
 8011396:	b151      	cbz	r1, 80113ae <_dtoa_r+0x56>
 8011398:	685a      	ldr	r2, [r3, #4]
 801139a:	604a      	str	r2, [r1, #4]
 801139c:	2301      	movs	r3, #1
 801139e:	4093      	lsls	r3, r2
 80113a0:	608b      	str	r3, [r1, #8]
 80113a2:	4630      	mov	r0, r6
 80113a4:	f000 ffd4 	bl	8012350 <_Bfree>
 80113a8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80113aa:	2200      	movs	r2, #0
 80113ac:	601a      	str	r2, [r3, #0]
 80113ae:	f1b9 0300 	subs.w	r3, r9, #0
 80113b2:	bfbb      	ittet	lt
 80113b4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80113b8:	9303      	strlt	r3, [sp, #12]
 80113ba:	2300      	movge	r3, #0
 80113bc:	2201      	movlt	r2, #1
 80113be:	bfac      	ite	ge
 80113c0:	6023      	strge	r3, [r4, #0]
 80113c2:	6022      	strlt	r2, [r4, #0]
 80113c4:	4b9c      	ldr	r3, [pc, #624]	; (8011638 <_dtoa_r+0x2e0>)
 80113c6:	9c03      	ldr	r4, [sp, #12]
 80113c8:	43a3      	bics	r3, r4
 80113ca:	d11a      	bne.n	8011402 <_dtoa_r+0xaa>
 80113cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80113ce:	f242 730f 	movw	r3, #9999	; 0x270f
 80113d2:	6013      	str	r3, [r2, #0]
 80113d4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80113d8:	ea53 0308 	orrs.w	r3, r3, r8
 80113dc:	f000 8512 	beq.w	8011e04 <_dtoa_r+0xaac>
 80113e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80113e2:	b953      	cbnz	r3, 80113fa <_dtoa_r+0xa2>
 80113e4:	4b95      	ldr	r3, [pc, #596]	; (801163c <_dtoa_r+0x2e4>)
 80113e6:	e01f      	b.n	8011428 <_dtoa_r+0xd0>
 80113e8:	4b95      	ldr	r3, [pc, #596]	; (8011640 <_dtoa_r+0x2e8>)
 80113ea:	9300      	str	r3, [sp, #0]
 80113ec:	3308      	adds	r3, #8
 80113ee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80113f0:	6013      	str	r3, [r2, #0]
 80113f2:	9800      	ldr	r0, [sp, #0]
 80113f4:	b015      	add	sp, #84	; 0x54
 80113f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113fa:	4b90      	ldr	r3, [pc, #576]	; (801163c <_dtoa_r+0x2e4>)
 80113fc:	9300      	str	r3, [sp, #0]
 80113fe:	3303      	adds	r3, #3
 8011400:	e7f5      	b.n	80113ee <_dtoa_r+0x96>
 8011402:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011406:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801140a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801140e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011412:	d10b      	bne.n	801142c <_dtoa_r+0xd4>
 8011414:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011416:	2301      	movs	r3, #1
 8011418:	6013      	str	r3, [r2, #0]
 801141a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801141c:	2b00      	cmp	r3, #0
 801141e:	f000 84ee 	beq.w	8011dfe <_dtoa_r+0xaa6>
 8011422:	4888      	ldr	r0, [pc, #544]	; (8011644 <_dtoa_r+0x2ec>)
 8011424:	6018      	str	r0, [r3, #0]
 8011426:	1e43      	subs	r3, r0, #1
 8011428:	9300      	str	r3, [sp, #0]
 801142a:	e7e2      	b.n	80113f2 <_dtoa_r+0x9a>
 801142c:	a913      	add	r1, sp, #76	; 0x4c
 801142e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011432:	aa12      	add	r2, sp, #72	; 0x48
 8011434:	4630      	mov	r0, r6
 8011436:	f001 fa6d 	bl	8012914 <__d2b>
 801143a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801143e:	4605      	mov	r5, r0
 8011440:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011442:	2900      	cmp	r1, #0
 8011444:	d047      	beq.n	80114d6 <_dtoa_r+0x17e>
 8011446:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8011448:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801144c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011450:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8011454:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011458:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801145c:	2400      	movs	r4, #0
 801145e:	ec43 2b16 	vmov	d6, r2, r3
 8011462:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8011466:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8011618 <_dtoa_r+0x2c0>
 801146a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801146e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8011620 <_dtoa_r+0x2c8>
 8011472:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011476:	eeb0 7b46 	vmov.f64	d7, d6
 801147a:	ee06 1a90 	vmov	s13, r1
 801147e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8011482:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011628 <_dtoa_r+0x2d0>
 8011486:	eea5 7b06 	vfma.f64	d7, d5, d6
 801148a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801148e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011496:	ee16 ba90 	vmov	fp, s13
 801149a:	9411      	str	r4, [sp, #68]	; 0x44
 801149c:	d508      	bpl.n	80114b0 <_dtoa_r+0x158>
 801149e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80114a2:	eeb4 6b47 	vcmp.f64	d6, d7
 80114a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114aa:	bf18      	it	ne
 80114ac:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80114b0:	f1bb 0f16 	cmp.w	fp, #22
 80114b4:	d832      	bhi.n	801151c <_dtoa_r+0x1c4>
 80114b6:	4b64      	ldr	r3, [pc, #400]	; (8011648 <_dtoa_r+0x2f0>)
 80114b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80114bc:	ed93 7b00 	vldr	d7, [r3]
 80114c0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80114c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80114c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114cc:	d501      	bpl.n	80114d2 <_dtoa_r+0x17a>
 80114ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 80114d2:	2300      	movs	r3, #0
 80114d4:	e023      	b.n	801151e <_dtoa_r+0x1c6>
 80114d6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80114d8:	4401      	add	r1, r0
 80114da:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80114de:	2b20      	cmp	r3, #32
 80114e0:	bfc3      	ittte	gt
 80114e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80114e6:	fa04 f303 	lslgt.w	r3, r4, r3
 80114ea:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80114ee:	f1c3 0320 	rsble	r3, r3, #32
 80114f2:	bfc6      	itte	gt
 80114f4:	fa28 f804 	lsrgt.w	r8, r8, r4
 80114f8:	ea43 0308 	orrgt.w	r3, r3, r8
 80114fc:	fa08 f303 	lslle.w	r3, r8, r3
 8011500:	ee07 3a90 	vmov	s15, r3
 8011504:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011508:	3901      	subs	r1, #1
 801150a:	ed8d 7b00 	vstr	d7, [sp]
 801150e:	9c01      	ldr	r4, [sp, #4]
 8011510:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011514:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8011518:	2401      	movs	r4, #1
 801151a:	e7a0      	b.n	801145e <_dtoa_r+0x106>
 801151c:	2301      	movs	r3, #1
 801151e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011520:	1a43      	subs	r3, r0, r1
 8011522:	1e5a      	subs	r2, r3, #1
 8011524:	bf45      	ittet	mi
 8011526:	f1c3 0301 	rsbmi	r3, r3, #1
 801152a:	9305      	strmi	r3, [sp, #20]
 801152c:	2300      	movpl	r3, #0
 801152e:	2300      	movmi	r3, #0
 8011530:	9206      	str	r2, [sp, #24]
 8011532:	bf54      	ite	pl
 8011534:	9305      	strpl	r3, [sp, #20]
 8011536:	9306      	strmi	r3, [sp, #24]
 8011538:	f1bb 0f00 	cmp.w	fp, #0
 801153c:	db18      	blt.n	8011570 <_dtoa_r+0x218>
 801153e:	9b06      	ldr	r3, [sp, #24]
 8011540:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8011544:	445b      	add	r3, fp
 8011546:	9306      	str	r3, [sp, #24]
 8011548:	2300      	movs	r3, #0
 801154a:	9a07      	ldr	r2, [sp, #28]
 801154c:	2a09      	cmp	r2, #9
 801154e:	d849      	bhi.n	80115e4 <_dtoa_r+0x28c>
 8011550:	2a05      	cmp	r2, #5
 8011552:	bfc4      	itt	gt
 8011554:	3a04      	subgt	r2, #4
 8011556:	9207      	strgt	r2, [sp, #28]
 8011558:	9a07      	ldr	r2, [sp, #28]
 801155a:	f1a2 0202 	sub.w	r2, r2, #2
 801155e:	bfcc      	ite	gt
 8011560:	2400      	movgt	r4, #0
 8011562:	2401      	movle	r4, #1
 8011564:	2a03      	cmp	r2, #3
 8011566:	d848      	bhi.n	80115fa <_dtoa_r+0x2a2>
 8011568:	e8df f002 	tbb	[pc, r2]
 801156c:	3a2c2e0b 	.word	0x3a2c2e0b
 8011570:	9b05      	ldr	r3, [sp, #20]
 8011572:	2200      	movs	r2, #0
 8011574:	eba3 030b 	sub.w	r3, r3, fp
 8011578:	9305      	str	r3, [sp, #20]
 801157a:	920e      	str	r2, [sp, #56]	; 0x38
 801157c:	f1cb 0300 	rsb	r3, fp, #0
 8011580:	e7e3      	b.n	801154a <_dtoa_r+0x1f2>
 8011582:	2200      	movs	r2, #0
 8011584:	9208      	str	r2, [sp, #32]
 8011586:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011588:	2a00      	cmp	r2, #0
 801158a:	dc39      	bgt.n	8011600 <_dtoa_r+0x2a8>
 801158c:	f04f 0a01 	mov.w	sl, #1
 8011590:	46d1      	mov	r9, sl
 8011592:	4652      	mov	r2, sl
 8011594:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8011598:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801159a:	2100      	movs	r1, #0
 801159c:	6079      	str	r1, [r7, #4]
 801159e:	2004      	movs	r0, #4
 80115a0:	f100 0c14 	add.w	ip, r0, #20
 80115a4:	4594      	cmp	ip, r2
 80115a6:	6879      	ldr	r1, [r7, #4]
 80115a8:	d92f      	bls.n	801160a <_dtoa_r+0x2b2>
 80115aa:	4630      	mov	r0, r6
 80115ac:	930c      	str	r3, [sp, #48]	; 0x30
 80115ae:	f000 fe8f 	bl	80122d0 <_Balloc>
 80115b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80115b4:	9000      	str	r0, [sp, #0]
 80115b6:	4602      	mov	r2, r0
 80115b8:	2800      	cmp	r0, #0
 80115ba:	d149      	bne.n	8011650 <_dtoa_r+0x2f8>
 80115bc:	4b23      	ldr	r3, [pc, #140]	; (801164c <_dtoa_r+0x2f4>)
 80115be:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80115c2:	e6df      	b.n	8011384 <_dtoa_r+0x2c>
 80115c4:	2201      	movs	r2, #1
 80115c6:	e7dd      	b.n	8011584 <_dtoa_r+0x22c>
 80115c8:	2200      	movs	r2, #0
 80115ca:	9208      	str	r2, [sp, #32]
 80115cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80115ce:	eb0b 0a02 	add.w	sl, fp, r2
 80115d2:	f10a 0901 	add.w	r9, sl, #1
 80115d6:	464a      	mov	r2, r9
 80115d8:	2a01      	cmp	r2, #1
 80115da:	bfb8      	it	lt
 80115dc:	2201      	movlt	r2, #1
 80115de:	e7db      	b.n	8011598 <_dtoa_r+0x240>
 80115e0:	2201      	movs	r2, #1
 80115e2:	e7f2      	b.n	80115ca <_dtoa_r+0x272>
 80115e4:	2401      	movs	r4, #1
 80115e6:	2200      	movs	r2, #0
 80115e8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80115ec:	f04f 3aff 	mov.w	sl, #4294967295
 80115f0:	2100      	movs	r1, #0
 80115f2:	46d1      	mov	r9, sl
 80115f4:	2212      	movs	r2, #18
 80115f6:	9109      	str	r1, [sp, #36]	; 0x24
 80115f8:	e7ce      	b.n	8011598 <_dtoa_r+0x240>
 80115fa:	2201      	movs	r2, #1
 80115fc:	9208      	str	r2, [sp, #32]
 80115fe:	e7f5      	b.n	80115ec <_dtoa_r+0x294>
 8011600:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8011604:	46d1      	mov	r9, sl
 8011606:	4652      	mov	r2, sl
 8011608:	e7c6      	b.n	8011598 <_dtoa_r+0x240>
 801160a:	3101      	adds	r1, #1
 801160c:	6079      	str	r1, [r7, #4]
 801160e:	0040      	lsls	r0, r0, #1
 8011610:	e7c6      	b.n	80115a0 <_dtoa_r+0x248>
 8011612:	bf00      	nop
 8011614:	f3af 8000 	nop.w
 8011618:	636f4361 	.word	0x636f4361
 801161c:	3fd287a7 	.word	0x3fd287a7
 8011620:	8b60c8b3 	.word	0x8b60c8b3
 8011624:	3fc68a28 	.word	0x3fc68a28
 8011628:	509f79fb 	.word	0x509f79fb
 801162c:	3fd34413 	.word	0x3fd34413
 8011630:	08013b19 	.word	0x08013b19
 8011634:	08013b30 	.word	0x08013b30
 8011638:	7ff00000 	.word	0x7ff00000
 801163c:	08013b15 	.word	0x08013b15
 8011640:	08013b0c 	.word	0x08013b0c
 8011644:	08013ae9 	.word	0x08013ae9
 8011648:	08013c88 	.word	0x08013c88
 801164c:	08013b8f 	.word	0x08013b8f
 8011650:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8011652:	9900      	ldr	r1, [sp, #0]
 8011654:	6011      	str	r1, [r2, #0]
 8011656:	f1b9 0f0e 	cmp.w	r9, #14
 801165a:	d872      	bhi.n	8011742 <_dtoa_r+0x3ea>
 801165c:	2c00      	cmp	r4, #0
 801165e:	d070      	beq.n	8011742 <_dtoa_r+0x3ea>
 8011660:	f1bb 0f00 	cmp.w	fp, #0
 8011664:	f340 80a6 	ble.w	80117b4 <_dtoa_r+0x45c>
 8011668:	49ca      	ldr	r1, [pc, #808]	; (8011994 <_dtoa_r+0x63c>)
 801166a:	f00b 020f 	and.w	r2, fp, #15
 801166e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8011672:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011676:	ed92 7b00 	vldr	d7, [r2]
 801167a:	ea4f 112b 	mov.w	r1, fp, asr #4
 801167e:	f000 808d 	beq.w	801179c <_dtoa_r+0x444>
 8011682:	4ac5      	ldr	r2, [pc, #788]	; (8011998 <_dtoa_r+0x640>)
 8011684:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8011688:	ed92 6b08 	vldr	d6, [r2, #32]
 801168c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8011690:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011694:	f001 010f 	and.w	r1, r1, #15
 8011698:	2203      	movs	r2, #3
 801169a:	48bf      	ldr	r0, [pc, #764]	; (8011998 <_dtoa_r+0x640>)
 801169c:	2900      	cmp	r1, #0
 801169e:	d17f      	bne.n	80117a0 <_dtoa_r+0x448>
 80116a0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80116a4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80116a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80116ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80116ae:	2900      	cmp	r1, #0
 80116b0:	f000 80b2 	beq.w	8011818 <_dtoa_r+0x4c0>
 80116b4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80116b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80116bc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80116c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116c4:	f140 80a8 	bpl.w	8011818 <_dtoa_r+0x4c0>
 80116c8:	f1b9 0f00 	cmp.w	r9, #0
 80116cc:	f000 80a4 	beq.w	8011818 <_dtoa_r+0x4c0>
 80116d0:	f1ba 0f00 	cmp.w	sl, #0
 80116d4:	dd31      	ble.n	801173a <_dtoa_r+0x3e2>
 80116d6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80116da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80116de:	ed8d 7b02 	vstr	d7, [sp, #8]
 80116e2:	f10b 37ff 	add.w	r7, fp, #4294967295
 80116e6:	3201      	adds	r2, #1
 80116e8:	4650      	mov	r0, sl
 80116ea:	ed9d 6b02 	vldr	d6, [sp, #8]
 80116ee:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80116f2:	ee07 2a90 	vmov	s15, r2
 80116f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80116fa:	eea7 5b06 	vfma.f64	d5, d7, d6
 80116fe:	ed8d 5b02 	vstr	d5, [sp, #8]
 8011702:	9c03      	ldr	r4, [sp, #12]
 8011704:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8011708:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801170c:	2800      	cmp	r0, #0
 801170e:	f040 8086 	bne.w	801181e <_dtoa_r+0x4c6>
 8011712:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011716:	ee36 6b47 	vsub.f64	d6, d6, d7
 801171a:	ec42 1b17 	vmov	d7, r1, r2
 801171e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011726:	f300 8272 	bgt.w	8011c0e <_dtoa_r+0x8b6>
 801172a:	eeb1 7b47 	vneg.f64	d7, d7
 801172e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011736:	f100 8267 	bmi.w	8011c08 <_dtoa_r+0x8b0>
 801173a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801173e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8011742:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011744:	2a00      	cmp	r2, #0
 8011746:	f2c0 8129 	blt.w	801199c <_dtoa_r+0x644>
 801174a:	f1bb 0f0e 	cmp.w	fp, #14
 801174e:	f300 8125 	bgt.w	801199c <_dtoa_r+0x644>
 8011752:	4b90      	ldr	r3, [pc, #576]	; (8011994 <_dtoa_r+0x63c>)
 8011754:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011758:	ed93 6b00 	vldr	d6, [r3]
 801175c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801175e:	2b00      	cmp	r3, #0
 8011760:	f280 80c3 	bge.w	80118ea <_dtoa_r+0x592>
 8011764:	f1b9 0f00 	cmp.w	r9, #0
 8011768:	f300 80bf 	bgt.w	80118ea <_dtoa_r+0x592>
 801176c:	f040 824c 	bne.w	8011c08 <_dtoa_r+0x8b0>
 8011770:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011774:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011778:	ed9d 7b02 	vldr	d7, [sp, #8]
 801177c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011784:	464c      	mov	r4, r9
 8011786:	464f      	mov	r7, r9
 8011788:	f280 8222 	bge.w	8011bd0 <_dtoa_r+0x878>
 801178c:	f8dd 8000 	ldr.w	r8, [sp]
 8011790:	2331      	movs	r3, #49	; 0x31
 8011792:	f808 3b01 	strb.w	r3, [r8], #1
 8011796:	f10b 0b01 	add.w	fp, fp, #1
 801179a:	e21e      	b.n	8011bda <_dtoa_r+0x882>
 801179c:	2202      	movs	r2, #2
 801179e:	e77c      	b.n	801169a <_dtoa_r+0x342>
 80117a0:	07cc      	lsls	r4, r1, #31
 80117a2:	d504      	bpl.n	80117ae <_dtoa_r+0x456>
 80117a4:	ed90 6b00 	vldr	d6, [r0]
 80117a8:	3201      	adds	r2, #1
 80117aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80117ae:	1049      	asrs	r1, r1, #1
 80117b0:	3008      	adds	r0, #8
 80117b2:	e773      	b.n	801169c <_dtoa_r+0x344>
 80117b4:	d02e      	beq.n	8011814 <_dtoa_r+0x4bc>
 80117b6:	f1cb 0100 	rsb	r1, fp, #0
 80117ba:	4a76      	ldr	r2, [pc, #472]	; (8011994 <_dtoa_r+0x63c>)
 80117bc:	f001 000f 	and.w	r0, r1, #15
 80117c0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80117c4:	ed92 7b00 	vldr	d7, [r2]
 80117c8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80117cc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80117d0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80117d4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80117d8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80117dc:	486e      	ldr	r0, [pc, #440]	; (8011998 <_dtoa_r+0x640>)
 80117de:	1109      	asrs	r1, r1, #4
 80117e0:	2400      	movs	r4, #0
 80117e2:	2202      	movs	r2, #2
 80117e4:	b939      	cbnz	r1, 80117f6 <_dtoa_r+0x49e>
 80117e6:	2c00      	cmp	r4, #0
 80117e8:	f43f af60 	beq.w	80116ac <_dtoa_r+0x354>
 80117ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80117f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80117f4:	e75a      	b.n	80116ac <_dtoa_r+0x354>
 80117f6:	07cf      	lsls	r7, r1, #31
 80117f8:	d509      	bpl.n	801180e <_dtoa_r+0x4b6>
 80117fa:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80117fe:	ed90 7b00 	vldr	d7, [r0]
 8011802:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011806:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801180a:	3201      	adds	r2, #1
 801180c:	2401      	movs	r4, #1
 801180e:	1049      	asrs	r1, r1, #1
 8011810:	3008      	adds	r0, #8
 8011812:	e7e7      	b.n	80117e4 <_dtoa_r+0x48c>
 8011814:	2202      	movs	r2, #2
 8011816:	e749      	b.n	80116ac <_dtoa_r+0x354>
 8011818:	465f      	mov	r7, fp
 801181a:	4648      	mov	r0, r9
 801181c:	e765      	b.n	80116ea <_dtoa_r+0x392>
 801181e:	ec42 1b17 	vmov	d7, r1, r2
 8011822:	4a5c      	ldr	r2, [pc, #368]	; (8011994 <_dtoa_r+0x63c>)
 8011824:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011828:	ed12 4b02 	vldr	d4, [r2, #-8]
 801182c:	9a00      	ldr	r2, [sp, #0]
 801182e:	1814      	adds	r4, r2, r0
 8011830:	9a08      	ldr	r2, [sp, #32]
 8011832:	b352      	cbz	r2, 801188a <_dtoa_r+0x532>
 8011834:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8011838:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801183c:	f8dd 8000 	ldr.w	r8, [sp]
 8011840:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8011844:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011848:	ee35 7b47 	vsub.f64	d7, d5, d7
 801184c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011850:	ee14 2a90 	vmov	r2, s9
 8011854:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011858:	3230      	adds	r2, #48	; 0x30
 801185a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801185e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011866:	f808 2b01 	strb.w	r2, [r8], #1
 801186a:	d439      	bmi.n	80118e0 <_dtoa_r+0x588>
 801186c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8011870:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8011874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011878:	d472      	bmi.n	8011960 <_dtoa_r+0x608>
 801187a:	45a0      	cmp	r8, r4
 801187c:	f43f af5d 	beq.w	801173a <_dtoa_r+0x3e2>
 8011880:	ee27 7b03 	vmul.f64	d7, d7, d3
 8011884:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011888:	e7e0      	b.n	801184c <_dtoa_r+0x4f4>
 801188a:	f8dd 8000 	ldr.w	r8, [sp]
 801188e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011892:	4621      	mov	r1, r4
 8011894:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011898:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801189c:	ee14 2a90 	vmov	r2, s9
 80118a0:	3230      	adds	r2, #48	; 0x30
 80118a2:	f808 2b01 	strb.w	r2, [r8], #1
 80118a6:	45a0      	cmp	r8, r4
 80118a8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80118ac:	ee36 6b45 	vsub.f64	d6, d6, d5
 80118b0:	d118      	bne.n	80118e4 <_dtoa_r+0x58c>
 80118b2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80118b6:	ee37 4b05 	vadd.f64	d4, d7, d5
 80118ba:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80118be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118c2:	dc4d      	bgt.n	8011960 <_dtoa_r+0x608>
 80118c4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80118c8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80118cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118d0:	f57f af33 	bpl.w	801173a <_dtoa_r+0x3e2>
 80118d4:	4688      	mov	r8, r1
 80118d6:	3901      	subs	r1, #1
 80118d8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80118dc:	2b30      	cmp	r3, #48	; 0x30
 80118de:	d0f9      	beq.n	80118d4 <_dtoa_r+0x57c>
 80118e0:	46bb      	mov	fp, r7
 80118e2:	e02a      	b.n	801193a <_dtoa_r+0x5e2>
 80118e4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80118e8:	e7d6      	b.n	8011898 <_dtoa_r+0x540>
 80118ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80118ee:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80118f2:	f8dd 8000 	ldr.w	r8, [sp]
 80118f6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80118fa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80118fe:	ee15 3a10 	vmov	r3, s10
 8011902:	3330      	adds	r3, #48	; 0x30
 8011904:	f808 3b01 	strb.w	r3, [r8], #1
 8011908:	9b00      	ldr	r3, [sp, #0]
 801190a:	eba8 0303 	sub.w	r3, r8, r3
 801190e:	4599      	cmp	r9, r3
 8011910:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011914:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011918:	d133      	bne.n	8011982 <_dtoa_r+0x62a>
 801191a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801191e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011926:	dc1a      	bgt.n	801195e <_dtoa_r+0x606>
 8011928:	eeb4 7b46 	vcmp.f64	d7, d6
 801192c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011930:	d103      	bne.n	801193a <_dtoa_r+0x5e2>
 8011932:	ee15 3a10 	vmov	r3, s10
 8011936:	07d9      	lsls	r1, r3, #31
 8011938:	d411      	bmi.n	801195e <_dtoa_r+0x606>
 801193a:	4629      	mov	r1, r5
 801193c:	4630      	mov	r0, r6
 801193e:	f000 fd07 	bl	8012350 <_Bfree>
 8011942:	2300      	movs	r3, #0
 8011944:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011946:	f888 3000 	strb.w	r3, [r8]
 801194a:	f10b 0301 	add.w	r3, fp, #1
 801194e:	6013      	str	r3, [r2, #0]
 8011950:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011952:	2b00      	cmp	r3, #0
 8011954:	f43f ad4d 	beq.w	80113f2 <_dtoa_r+0x9a>
 8011958:	f8c3 8000 	str.w	r8, [r3]
 801195c:	e549      	b.n	80113f2 <_dtoa_r+0x9a>
 801195e:	465f      	mov	r7, fp
 8011960:	4643      	mov	r3, r8
 8011962:	4698      	mov	r8, r3
 8011964:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011968:	2a39      	cmp	r2, #57	; 0x39
 801196a:	d106      	bne.n	801197a <_dtoa_r+0x622>
 801196c:	9a00      	ldr	r2, [sp, #0]
 801196e:	429a      	cmp	r2, r3
 8011970:	d1f7      	bne.n	8011962 <_dtoa_r+0x60a>
 8011972:	9900      	ldr	r1, [sp, #0]
 8011974:	2230      	movs	r2, #48	; 0x30
 8011976:	3701      	adds	r7, #1
 8011978:	700a      	strb	r2, [r1, #0]
 801197a:	781a      	ldrb	r2, [r3, #0]
 801197c:	3201      	adds	r2, #1
 801197e:	701a      	strb	r2, [r3, #0]
 8011980:	e7ae      	b.n	80118e0 <_dtoa_r+0x588>
 8011982:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011986:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801198a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801198e:	d1b2      	bne.n	80118f6 <_dtoa_r+0x59e>
 8011990:	e7d3      	b.n	801193a <_dtoa_r+0x5e2>
 8011992:	bf00      	nop
 8011994:	08013c88 	.word	0x08013c88
 8011998:	08013c60 	.word	0x08013c60
 801199c:	9908      	ldr	r1, [sp, #32]
 801199e:	2900      	cmp	r1, #0
 80119a0:	f000 80d1 	beq.w	8011b46 <_dtoa_r+0x7ee>
 80119a4:	9907      	ldr	r1, [sp, #28]
 80119a6:	2901      	cmp	r1, #1
 80119a8:	f300 80b4 	bgt.w	8011b14 <_dtoa_r+0x7bc>
 80119ac:	9911      	ldr	r1, [sp, #68]	; 0x44
 80119ae:	2900      	cmp	r1, #0
 80119b0:	f000 80ac 	beq.w	8011b0c <_dtoa_r+0x7b4>
 80119b4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80119b8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80119bc:	461c      	mov	r4, r3
 80119be:	930a      	str	r3, [sp, #40]	; 0x28
 80119c0:	9b05      	ldr	r3, [sp, #20]
 80119c2:	4413      	add	r3, r2
 80119c4:	9305      	str	r3, [sp, #20]
 80119c6:	9b06      	ldr	r3, [sp, #24]
 80119c8:	2101      	movs	r1, #1
 80119ca:	4413      	add	r3, r2
 80119cc:	4630      	mov	r0, r6
 80119ce:	9306      	str	r3, [sp, #24]
 80119d0:	f000 fd7a 	bl	80124c8 <__i2b>
 80119d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119d6:	4607      	mov	r7, r0
 80119d8:	f1b8 0f00 	cmp.w	r8, #0
 80119dc:	dd0d      	ble.n	80119fa <_dtoa_r+0x6a2>
 80119de:	9a06      	ldr	r2, [sp, #24]
 80119e0:	2a00      	cmp	r2, #0
 80119e2:	dd0a      	ble.n	80119fa <_dtoa_r+0x6a2>
 80119e4:	4542      	cmp	r2, r8
 80119e6:	9905      	ldr	r1, [sp, #20]
 80119e8:	bfa8      	it	ge
 80119ea:	4642      	movge	r2, r8
 80119ec:	1a89      	subs	r1, r1, r2
 80119ee:	9105      	str	r1, [sp, #20]
 80119f0:	9906      	ldr	r1, [sp, #24]
 80119f2:	eba8 0802 	sub.w	r8, r8, r2
 80119f6:	1a8a      	subs	r2, r1, r2
 80119f8:	9206      	str	r2, [sp, #24]
 80119fa:	b303      	cbz	r3, 8011a3e <_dtoa_r+0x6e6>
 80119fc:	9a08      	ldr	r2, [sp, #32]
 80119fe:	2a00      	cmp	r2, #0
 8011a00:	f000 80a6 	beq.w	8011b50 <_dtoa_r+0x7f8>
 8011a04:	2c00      	cmp	r4, #0
 8011a06:	dd13      	ble.n	8011a30 <_dtoa_r+0x6d8>
 8011a08:	4639      	mov	r1, r7
 8011a0a:	4622      	mov	r2, r4
 8011a0c:	4630      	mov	r0, r6
 8011a0e:	930c      	str	r3, [sp, #48]	; 0x30
 8011a10:	f000 fe16 	bl	8012640 <__pow5mult>
 8011a14:	462a      	mov	r2, r5
 8011a16:	4601      	mov	r1, r0
 8011a18:	4607      	mov	r7, r0
 8011a1a:	4630      	mov	r0, r6
 8011a1c:	f000 fd6a 	bl	80124f4 <__multiply>
 8011a20:	4629      	mov	r1, r5
 8011a22:	900a      	str	r0, [sp, #40]	; 0x28
 8011a24:	4630      	mov	r0, r6
 8011a26:	f000 fc93 	bl	8012350 <_Bfree>
 8011a2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011a2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a2e:	4615      	mov	r5, r2
 8011a30:	1b1a      	subs	r2, r3, r4
 8011a32:	d004      	beq.n	8011a3e <_dtoa_r+0x6e6>
 8011a34:	4629      	mov	r1, r5
 8011a36:	4630      	mov	r0, r6
 8011a38:	f000 fe02 	bl	8012640 <__pow5mult>
 8011a3c:	4605      	mov	r5, r0
 8011a3e:	2101      	movs	r1, #1
 8011a40:	4630      	mov	r0, r6
 8011a42:	f000 fd41 	bl	80124c8 <__i2b>
 8011a46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	4604      	mov	r4, r0
 8011a4c:	f340 8082 	ble.w	8011b54 <_dtoa_r+0x7fc>
 8011a50:	461a      	mov	r2, r3
 8011a52:	4601      	mov	r1, r0
 8011a54:	4630      	mov	r0, r6
 8011a56:	f000 fdf3 	bl	8012640 <__pow5mult>
 8011a5a:	9b07      	ldr	r3, [sp, #28]
 8011a5c:	2b01      	cmp	r3, #1
 8011a5e:	4604      	mov	r4, r0
 8011a60:	dd7b      	ble.n	8011b5a <_dtoa_r+0x802>
 8011a62:	2300      	movs	r3, #0
 8011a64:	930a      	str	r3, [sp, #40]	; 0x28
 8011a66:	6922      	ldr	r2, [r4, #16]
 8011a68:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011a6c:	6910      	ldr	r0, [r2, #16]
 8011a6e:	f000 fcdb 	bl	8012428 <__hi0bits>
 8011a72:	f1c0 0020 	rsb	r0, r0, #32
 8011a76:	9b06      	ldr	r3, [sp, #24]
 8011a78:	4418      	add	r0, r3
 8011a7a:	f010 001f 	ands.w	r0, r0, #31
 8011a7e:	f000 808d 	beq.w	8011b9c <_dtoa_r+0x844>
 8011a82:	f1c0 0220 	rsb	r2, r0, #32
 8011a86:	2a04      	cmp	r2, #4
 8011a88:	f340 8086 	ble.w	8011b98 <_dtoa_r+0x840>
 8011a8c:	f1c0 001c 	rsb	r0, r0, #28
 8011a90:	9b05      	ldr	r3, [sp, #20]
 8011a92:	4403      	add	r3, r0
 8011a94:	9305      	str	r3, [sp, #20]
 8011a96:	9b06      	ldr	r3, [sp, #24]
 8011a98:	4403      	add	r3, r0
 8011a9a:	4480      	add	r8, r0
 8011a9c:	9306      	str	r3, [sp, #24]
 8011a9e:	9b05      	ldr	r3, [sp, #20]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	dd05      	ble.n	8011ab0 <_dtoa_r+0x758>
 8011aa4:	4629      	mov	r1, r5
 8011aa6:	461a      	mov	r2, r3
 8011aa8:	4630      	mov	r0, r6
 8011aaa:	f000 fe23 	bl	80126f4 <__lshift>
 8011aae:	4605      	mov	r5, r0
 8011ab0:	9b06      	ldr	r3, [sp, #24]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	dd05      	ble.n	8011ac2 <_dtoa_r+0x76a>
 8011ab6:	4621      	mov	r1, r4
 8011ab8:	461a      	mov	r2, r3
 8011aba:	4630      	mov	r0, r6
 8011abc:	f000 fe1a 	bl	80126f4 <__lshift>
 8011ac0:	4604      	mov	r4, r0
 8011ac2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d06b      	beq.n	8011ba0 <_dtoa_r+0x848>
 8011ac8:	4621      	mov	r1, r4
 8011aca:	4628      	mov	r0, r5
 8011acc:	f000 fe7e 	bl	80127cc <__mcmp>
 8011ad0:	2800      	cmp	r0, #0
 8011ad2:	da65      	bge.n	8011ba0 <_dtoa_r+0x848>
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	4629      	mov	r1, r5
 8011ad8:	220a      	movs	r2, #10
 8011ada:	4630      	mov	r0, r6
 8011adc:	f000 fc5a 	bl	8012394 <__multadd>
 8011ae0:	9b08      	ldr	r3, [sp, #32]
 8011ae2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011ae6:	4605      	mov	r5, r0
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	f000 8192 	beq.w	8011e12 <_dtoa_r+0xaba>
 8011aee:	4639      	mov	r1, r7
 8011af0:	2300      	movs	r3, #0
 8011af2:	220a      	movs	r2, #10
 8011af4:	4630      	mov	r0, r6
 8011af6:	f000 fc4d 	bl	8012394 <__multadd>
 8011afa:	f1ba 0f00 	cmp.w	sl, #0
 8011afe:	4607      	mov	r7, r0
 8011b00:	f300 808e 	bgt.w	8011c20 <_dtoa_r+0x8c8>
 8011b04:	9b07      	ldr	r3, [sp, #28]
 8011b06:	2b02      	cmp	r3, #2
 8011b08:	dc51      	bgt.n	8011bae <_dtoa_r+0x856>
 8011b0a:	e089      	b.n	8011c20 <_dtoa_r+0x8c8>
 8011b0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011b0e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011b12:	e751      	b.n	80119b8 <_dtoa_r+0x660>
 8011b14:	f109 34ff 	add.w	r4, r9, #4294967295
 8011b18:	42a3      	cmp	r3, r4
 8011b1a:	bfbf      	itttt	lt
 8011b1c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8011b1e:	1ae3      	sublt	r3, r4, r3
 8011b20:	18d2      	addlt	r2, r2, r3
 8011b22:	4613      	movlt	r3, r2
 8011b24:	bfb7      	itett	lt
 8011b26:	930e      	strlt	r3, [sp, #56]	; 0x38
 8011b28:	1b1c      	subge	r4, r3, r4
 8011b2a:	4623      	movlt	r3, r4
 8011b2c:	2400      	movlt	r4, #0
 8011b2e:	f1b9 0f00 	cmp.w	r9, #0
 8011b32:	bfb5      	itete	lt
 8011b34:	9a05      	ldrlt	r2, [sp, #20]
 8011b36:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8011b3a:	eba2 0809 	sublt.w	r8, r2, r9
 8011b3e:	464a      	movge	r2, r9
 8011b40:	bfb8      	it	lt
 8011b42:	2200      	movlt	r2, #0
 8011b44:	e73b      	b.n	80119be <_dtoa_r+0x666>
 8011b46:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8011b4a:	9f08      	ldr	r7, [sp, #32]
 8011b4c:	461c      	mov	r4, r3
 8011b4e:	e743      	b.n	80119d8 <_dtoa_r+0x680>
 8011b50:	461a      	mov	r2, r3
 8011b52:	e76f      	b.n	8011a34 <_dtoa_r+0x6dc>
 8011b54:	9b07      	ldr	r3, [sp, #28]
 8011b56:	2b01      	cmp	r3, #1
 8011b58:	dc18      	bgt.n	8011b8c <_dtoa_r+0x834>
 8011b5a:	9b02      	ldr	r3, [sp, #8]
 8011b5c:	b9b3      	cbnz	r3, 8011b8c <_dtoa_r+0x834>
 8011b5e:	9b03      	ldr	r3, [sp, #12]
 8011b60:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8011b64:	b9a2      	cbnz	r2, 8011b90 <_dtoa_r+0x838>
 8011b66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011b6a:	0d12      	lsrs	r2, r2, #20
 8011b6c:	0512      	lsls	r2, r2, #20
 8011b6e:	b18a      	cbz	r2, 8011b94 <_dtoa_r+0x83c>
 8011b70:	9b05      	ldr	r3, [sp, #20]
 8011b72:	3301      	adds	r3, #1
 8011b74:	9305      	str	r3, [sp, #20]
 8011b76:	9b06      	ldr	r3, [sp, #24]
 8011b78:	3301      	adds	r3, #1
 8011b7a:	9306      	str	r3, [sp, #24]
 8011b7c:	2301      	movs	r3, #1
 8011b7e:	930a      	str	r3, [sp, #40]	; 0x28
 8011b80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	f47f af6f 	bne.w	8011a66 <_dtoa_r+0x70e>
 8011b88:	2001      	movs	r0, #1
 8011b8a:	e774      	b.n	8011a76 <_dtoa_r+0x71e>
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	e7f6      	b.n	8011b7e <_dtoa_r+0x826>
 8011b90:	9b02      	ldr	r3, [sp, #8]
 8011b92:	e7f4      	b.n	8011b7e <_dtoa_r+0x826>
 8011b94:	920a      	str	r2, [sp, #40]	; 0x28
 8011b96:	e7f3      	b.n	8011b80 <_dtoa_r+0x828>
 8011b98:	d081      	beq.n	8011a9e <_dtoa_r+0x746>
 8011b9a:	4610      	mov	r0, r2
 8011b9c:	301c      	adds	r0, #28
 8011b9e:	e777      	b.n	8011a90 <_dtoa_r+0x738>
 8011ba0:	f1b9 0f00 	cmp.w	r9, #0
 8011ba4:	dc37      	bgt.n	8011c16 <_dtoa_r+0x8be>
 8011ba6:	9b07      	ldr	r3, [sp, #28]
 8011ba8:	2b02      	cmp	r3, #2
 8011baa:	dd34      	ble.n	8011c16 <_dtoa_r+0x8be>
 8011bac:	46ca      	mov	sl, r9
 8011bae:	f1ba 0f00 	cmp.w	sl, #0
 8011bb2:	d10d      	bne.n	8011bd0 <_dtoa_r+0x878>
 8011bb4:	4621      	mov	r1, r4
 8011bb6:	4653      	mov	r3, sl
 8011bb8:	2205      	movs	r2, #5
 8011bba:	4630      	mov	r0, r6
 8011bbc:	f000 fbea 	bl	8012394 <__multadd>
 8011bc0:	4601      	mov	r1, r0
 8011bc2:	4604      	mov	r4, r0
 8011bc4:	4628      	mov	r0, r5
 8011bc6:	f000 fe01 	bl	80127cc <__mcmp>
 8011bca:	2800      	cmp	r0, #0
 8011bcc:	f73f adde 	bgt.w	801178c <_dtoa_r+0x434>
 8011bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bd2:	f8dd 8000 	ldr.w	r8, [sp]
 8011bd6:	ea6f 0b03 	mvn.w	fp, r3
 8011bda:	f04f 0900 	mov.w	r9, #0
 8011bde:	4621      	mov	r1, r4
 8011be0:	4630      	mov	r0, r6
 8011be2:	f000 fbb5 	bl	8012350 <_Bfree>
 8011be6:	2f00      	cmp	r7, #0
 8011be8:	f43f aea7 	beq.w	801193a <_dtoa_r+0x5e2>
 8011bec:	f1b9 0f00 	cmp.w	r9, #0
 8011bf0:	d005      	beq.n	8011bfe <_dtoa_r+0x8a6>
 8011bf2:	45b9      	cmp	r9, r7
 8011bf4:	d003      	beq.n	8011bfe <_dtoa_r+0x8a6>
 8011bf6:	4649      	mov	r1, r9
 8011bf8:	4630      	mov	r0, r6
 8011bfa:	f000 fba9 	bl	8012350 <_Bfree>
 8011bfe:	4639      	mov	r1, r7
 8011c00:	4630      	mov	r0, r6
 8011c02:	f000 fba5 	bl	8012350 <_Bfree>
 8011c06:	e698      	b.n	801193a <_dtoa_r+0x5e2>
 8011c08:	2400      	movs	r4, #0
 8011c0a:	4627      	mov	r7, r4
 8011c0c:	e7e0      	b.n	8011bd0 <_dtoa_r+0x878>
 8011c0e:	46bb      	mov	fp, r7
 8011c10:	4604      	mov	r4, r0
 8011c12:	4607      	mov	r7, r0
 8011c14:	e5ba      	b.n	801178c <_dtoa_r+0x434>
 8011c16:	9b08      	ldr	r3, [sp, #32]
 8011c18:	46ca      	mov	sl, r9
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	f000 8100 	beq.w	8011e20 <_dtoa_r+0xac8>
 8011c20:	f1b8 0f00 	cmp.w	r8, #0
 8011c24:	dd05      	ble.n	8011c32 <_dtoa_r+0x8da>
 8011c26:	4639      	mov	r1, r7
 8011c28:	4642      	mov	r2, r8
 8011c2a:	4630      	mov	r0, r6
 8011c2c:	f000 fd62 	bl	80126f4 <__lshift>
 8011c30:	4607      	mov	r7, r0
 8011c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d05d      	beq.n	8011cf4 <_dtoa_r+0x99c>
 8011c38:	6879      	ldr	r1, [r7, #4]
 8011c3a:	4630      	mov	r0, r6
 8011c3c:	f000 fb48 	bl	80122d0 <_Balloc>
 8011c40:	4680      	mov	r8, r0
 8011c42:	b928      	cbnz	r0, 8011c50 <_dtoa_r+0x8f8>
 8011c44:	4b82      	ldr	r3, [pc, #520]	; (8011e50 <_dtoa_r+0xaf8>)
 8011c46:	4602      	mov	r2, r0
 8011c48:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011c4c:	f7ff bb9a 	b.w	8011384 <_dtoa_r+0x2c>
 8011c50:	693a      	ldr	r2, [r7, #16]
 8011c52:	3202      	adds	r2, #2
 8011c54:	0092      	lsls	r2, r2, #2
 8011c56:	f107 010c 	add.w	r1, r7, #12
 8011c5a:	300c      	adds	r0, #12
 8011c5c:	f000 fb2a 	bl	80122b4 <memcpy>
 8011c60:	2201      	movs	r2, #1
 8011c62:	4641      	mov	r1, r8
 8011c64:	4630      	mov	r0, r6
 8011c66:	f000 fd45 	bl	80126f4 <__lshift>
 8011c6a:	9b00      	ldr	r3, [sp, #0]
 8011c6c:	3301      	adds	r3, #1
 8011c6e:	9305      	str	r3, [sp, #20]
 8011c70:	9b00      	ldr	r3, [sp, #0]
 8011c72:	4453      	add	r3, sl
 8011c74:	9309      	str	r3, [sp, #36]	; 0x24
 8011c76:	9b02      	ldr	r3, [sp, #8]
 8011c78:	f003 0301 	and.w	r3, r3, #1
 8011c7c:	46b9      	mov	r9, r7
 8011c7e:	9308      	str	r3, [sp, #32]
 8011c80:	4607      	mov	r7, r0
 8011c82:	9b05      	ldr	r3, [sp, #20]
 8011c84:	4621      	mov	r1, r4
 8011c86:	3b01      	subs	r3, #1
 8011c88:	4628      	mov	r0, r5
 8011c8a:	9302      	str	r3, [sp, #8]
 8011c8c:	f7ff fad8 	bl	8011240 <quorem>
 8011c90:	4603      	mov	r3, r0
 8011c92:	3330      	adds	r3, #48	; 0x30
 8011c94:	9006      	str	r0, [sp, #24]
 8011c96:	4649      	mov	r1, r9
 8011c98:	4628      	mov	r0, r5
 8011c9a:	930a      	str	r3, [sp, #40]	; 0x28
 8011c9c:	f000 fd96 	bl	80127cc <__mcmp>
 8011ca0:	463a      	mov	r2, r7
 8011ca2:	4682      	mov	sl, r0
 8011ca4:	4621      	mov	r1, r4
 8011ca6:	4630      	mov	r0, r6
 8011ca8:	f000 fdac 	bl	8012804 <__mdiff>
 8011cac:	68c2      	ldr	r2, [r0, #12]
 8011cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cb0:	4680      	mov	r8, r0
 8011cb2:	bb0a      	cbnz	r2, 8011cf8 <_dtoa_r+0x9a0>
 8011cb4:	4601      	mov	r1, r0
 8011cb6:	4628      	mov	r0, r5
 8011cb8:	f000 fd88 	bl	80127cc <__mcmp>
 8011cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cbe:	4602      	mov	r2, r0
 8011cc0:	4641      	mov	r1, r8
 8011cc2:	4630      	mov	r0, r6
 8011cc4:	920e      	str	r2, [sp, #56]	; 0x38
 8011cc6:	930a      	str	r3, [sp, #40]	; 0x28
 8011cc8:	f000 fb42 	bl	8012350 <_Bfree>
 8011ccc:	9b07      	ldr	r3, [sp, #28]
 8011cce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011cd0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8011cd4:	ea43 0102 	orr.w	r1, r3, r2
 8011cd8:	9b08      	ldr	r3, [sp, #32]
 8011cda:	430b      	orrs	r3, r1
 8011cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cde:	d10d      	bne.n	8011cfc <_dtoa_r+0x9a4>
 8011ce0:	2b39      	cmp	r3, #57	; 0x39
 8011ce2:	d029      	beq.n	8011d38 <_dtoa_r+0x9e0>
 8011ce4:	f1ba 0f00 	cmp.w	sl, #0
 8011ce8:	dd01      	ble.n	8011cee <_dtoa_r+0x996>
 8011cea:	9b06      	ldr	r3, [sp, #24]
 8011cec:	3331      	adds	r3, #49	; 0x31
 8011cee:	9a02      	ldr	r2, [sp, #8]
 8011cf0:	7013      	strb	r3, [r2, #0]
 8011cf2:	e774      	b.n	8011bde <_dtoa_r+0x886>
 8011cf4:	4638      	mov	r0, r7
 8011cf6:	e7b8      	b.n	8011c6a <_dtoa_r+0x912>
 8011cf8:	2201      	movs	r2, #1
 8011cfa:	e7e1      	b.n	8011cc0 <_dtoa_r+0x968>
 8011cfc:	f1ba 0f00 	cmp.w	sl, #0
 8011d00:	db06      	blt.n	8011d10 <_dtoa_r+0x9b8>
 8011d02:	9907      	ldr	r1, [sp, #28]
 8011d04:	ea41 0a0a 	orr.w	sl, r1, sl
 8011d08:	9908      	ldr	r1, [sp, #32]
 8011d0a:	ea5a 0101 	orrs.w	r1, sl, r1
 8011d0e:	d120      	bne.n	8011d52 <_dtoa_r+0x9fa>
 8011d10:	2a00      	cmp	r2, #0
 8011d12:	ddec      	ble.n	8011cee <_dtoa_r+0x996>
 8011d14:	4629      	mov	r1, r5
 8011d16:	2201      	movs	r2, #1
 8011d18:	4630      	mov	r0, r6
 8011d1a:	9305      	str	r3, [sp, #20]
 8011d1c:	f000 fcea 	bl	80126f4 <__lshift>
 8011d20:	4621      	mov	r1, r4
 8011d22:	4605      	mov	r5, r0
 8011d24:	f000 fd52 	bl	80127cc <__mcmp>
 8011d28:	2800      	cmp	r0, #0
 8011d2a:	9b05      	ldr	r3, [sp, #20]
 8011d2c:	dc02      	bgt.n	8011d34 <_dtoa_r+0x9dc>
 8011d2e:	d1de      	bne.n	8011cee <_dtoa_r+0x996>
 8011d30:	07da      	lsls	r2, r3, #31
 8011d32:	d5dc      	bpl.n	8011cee <_dtoa_r+0x996>
 8011d34:	2b39      	cmp	r3, #57	; 0x39
 8011d36:	d1d8      	bne.n	8011cea <_dtoa_r+0x992>
 8011d38:	9a02      	ldr	r2, [sp, #8]
 8011d3a:	2339      	movs	r3, #57	; 0x39
 8011d3c:	7013      	strb	r3, [r2, #0]
 8011d3e:	4643      	mov	r3, r8
 8011d40:	4698      	mov	r8, r3
 8011d42:	3b01      	subs	r3, #1
 8011d44:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8011d48:	2a39      	cmp	r2, #57	; 0x39
 8011d4a:	d051      	beq.n	8011df0 <_dtoa_r+0xa98>
 8011d4c:	3201      	adds	r2, #1
 8011d4e:	701a      	strb	r2, [r3, #0]
 8011d50:	e745      	b.n	8011bde <_dtoa_r+0x886>
 8011d52:	2a00      	cmp	r2, #0
 8011d54:	dd03      	ble.n	8011d5e <_dtoa_r+0xa06>
 8011d56:	2b39      	cmp	r3, #57	; 0x39
 8011d58:	d0ee      	beq.n	8011d38 <_dtoa_r+0x9e0>
 8011d5a:	3301      	adds	r3, #1
 8011d5c:	e7c7      	b.n	8011cee <_dtoa_r+0x996>
 8011d5e:	9a05      	ldr	r2, [sp, #20]
 8011d60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011d62:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011d66:	428a      	cmp	r2, r1
 8011d68:	d02b      	beq.n	8011dc2 <_dtoa_r+0xa6a>
 8011d6a:	4629      	mov	r1, r5
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	220a      	movs	r2, #10
 8011d70:	4630      	mov	r0, r6
 8011d72:	f000 fb0f 	bl	8012394 <__multadd>
 8011d76:	45b9      	cmp	r9, r7
 8011d78:	4605      	mov	r5, r0
 8011d7a:	f04f 0300 	mov.w	r3, #0
 8011d7e:	f04f 020a 	mov.w	r2, #10
 8011d82:	4649      	mov	r1, r9
 8011d84:	4630      	mov	r0, r6
 8011d86:	d107      	bne.n	8011d98 <_dtoa_r+0xa40>
 8011d88:	f000 fb04 	bl	8012394 <__multadd>
 8011d8c:	4681      	mov	r9, r0
 8011d8e:	4607      	mov	r7, r0
 8011d90:	9b05      	ldr	r3, [sp, #20]
 8011d92:	3301      	adds	r3, #1
 8011d94:	9305      	str	r3, [sp, #20]
 8011d96:	e774      	b.n	8011c82 <_dtoa_r+0x92a>
 8011d98:	f000 fafc 	bl	8012394 <__multadd>
 8011d9c:	4639      	mov	r1, r7
 8011d9e:	4681      	mov	r9, r0
 8011da0:	2300      	movs	r3, #0
 8011da2:	220a      	movs	r2, #10
 8011da4:	4630      	mov	r0, r6
 8011da6:	f000 faf5 	bl	8012394 <__multadd>
 8011daa:	4607      	mov	r7, r0
 8011dac:	e7f0      	b.n	8011d90 <_dtoa_r+0xa38>
 8011dae:	f1ba 0f00 	cmp.w	sl, #0
 8011db2:	9a00      	ldr	r2, [sp, #0]
 8011db4:	bfcc      	ite	gt
 8011db6:	46d0      	movgt	r8, sl
 8011db8:	f04f 0801 	movle.w	r8, #1
 8011dbc:	4490      	add	r8, r2
 8011dbe:	f04f 0900 	mov.w	r9, #0
 8011dc2:	4629      	mov	r1, r5
 8011dc4:	2201      	movs	r2, #1
 8011dc6:	4630      	mov	r0, r6
 8011dc8:	9302      	str	r3, [sp, #8]
 8011dca:	f000 fc93 	bl	80126f4 <__lshift>
 8011dce:	4621      	mov	r1, r4
 8011dd0:	4605      	mov	r5, r0
 8011dd2:	f000 fcfb 	bl	80127cc <__mcmp>
 8011dd6:	2800      	cmp	r0, #0
 8011dd8:	dcb1      	bgt.n	8011d3e <_dtoa_r+0x9e6>
 8011dda:	d102      	bne.n	8011de2 <_dtoa_r+0xa8a>
 8011ddc:	9b02      	ldr	r3, [sp, #8]
 8011dde:	07db      	lsls	r3, r3, #31
 8011de0:	d4ad      	bmi.n	8011d3e <_dtoa_r+0x9e6>
 8011de2:	4643      	mov	r3, r8
 8011de4:	4698      	mov	r8, r3
 8011de6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011dea:	2a30      	cmp	r2, #48	; 0x30
 8011dec:	d0fa      	beq.n	8011de4 <_dtoa_r+0xa8c>
 8011dee:	e6f6      	b.n	8011bde <_dtoa_r+0x886>
 8011df0:	9a00      	ldr	r2, [sp, #0]
 8011df2:	429a      	cmp	r2, r3
 8011df4:	d1a4      	bne.n	8011d40 <_dtoa_r+0x9e8>
 8011df6:	f10b 0b01 	add.w	fp, fp, #1
 8011dfa:	2331      	movs	r3, #49	; 0x31
 8011dfc:	e778      	b.n	8011cf0 <_dtoa_r+0x998>
 8011dfe:	4b15      	ldr	r3, [pc, #84]	; (8011e54 <_dtoa_r+0xafc>)
 8011e00:	f7ff bb12 	b.w	8011428 <_dtoa_r+0xd0>
 8011e04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	f47f aaee 	bne.w	80113e8 <_dtoa_r+0x90>
 8011e0c:	4b12      	ldr	r3, [pc, #72]	; (8011e58 <_dtoa_r+0xb00>)
 8011e0e:	f7ff bb0b 	b.w	8011428 <_dtoa_r+0xd0>
 8011e12:	f1ba 0f00 	cmp.w	sl, #0
 8011e16:	dc03      	bgt.n	8011e20 <_dtoa_r+0xac8>
 8011e18:	9b07      	ldr	r3, [sp, #28]
 8011e1a:	2b02      	cmp	r3, #2
 8011e1c:	f73f aec7 	bgt.w	8011bae <_dtoa_r+0x856>
 8011e20:	f8dd 8000 	ldr.w	r8, [sp]
 8011e24:	4621      	mov	r1, r4
 8011e26:	4628      	mov	r0, r5
 8011e28:	f7ff fa0a 	bl	8011240 <quorem>
 8011e2c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011e30:	f808 3b01 	strb.w	r3, [r8], #1
 8011e34:	9a00      	ldr	r2, [sp, #0]
 8011e36:	eba8 0202 	sub.w	r2, r8, r2
 8011e3a:	4592      	cmp	sl, r2
 8011e3c:	ddb7      	ble.n	8011dae <_dtoa_r+0xa56>
 8011e3e:	4629      	mov	r1, r5
 8011e40:	2300      	movs	r3, #0
 8011e42:	220a      	movs	r2, #10
 8011e44:	4630      	mov	r0, r6
 8011e46:	f000 faa5 	bl	8012394 <__multadd>
 8011e4a:	4605      	mov	r5, r0
 8011e4c:	e7ea      	b.n	8011e24 <_dtoa_r+0xacc>
 8011e4e:	bf00      	nop
 8011e50:	08013b8f 	.word	0x08013b8f
 8011e54:	08013ae8 	.word	0x08013ae8
 8011e58:	08013b0c 	.word	0x08013b0c

08011e5c <__sflush_r>:
 8011e5c:	898a      	ldrh	r2, [r1, #12]
 8011e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e62:	4605      	mov	r5, r0
 8011e64:	0710      	lsls	r0, r2, #28
 8011e66:	460c      	mov	r4, r1
 8011e68:	d458      	bmi.n	8011f1c <__sflush_r+0xc0>
 8011e6a:	684b      	ldr	r3, [r1, #4]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	dc05      	bgt.n	8011e7c <__sflush_r+0x20>
 8011e70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	dc02      	bgt.n	8011e7c <__sflush_r+0x20>
 8011e76:	2000      	movs	r0, #0
 8011e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011e7e:	2e00      	cmp	r6, #0
 8011e80:	d0f9      	beq.n	8011e76 <__sflush_r+0x1a>
 8011e82:	2300      	movs	r3, #0
 8011e84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011e88:	682f      	ldr	r7, [r5, #0]
 8011e8a:	602b      	str	r3, [r5, #0]
 8011e8c:	d032      	beq.n	8011ef4 <__sflush_r+0x98>
 8011e8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011e90:	89a3      	ldrh	r3, [r4, #12]
 8011e92:	075a      	lsls	r2, r3, #29
 8011e94:	d505      	bpl.n	8011ea2 <__sflush_r+0x46>
 8011e96:	6863      	ldr	r3, [r4, #4]
 8011e98:	1ac0      	subs	r0, r0, r3
 8011e9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011e9c:	b10b      	cbz	r3, 8011ea2 <__sflush_r+0x46>
 8011e9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011ea0:	1ac0      	subs	r0, r0, r3
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	4602      	mov	r2, r0
 8011ea6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011ea8:	6a21      	ldr	r1, [r4, #32]
 8011eaa:	4628      	mov	r0, r5
 8011eac:	47b0      	blx	r6
 8011eae:	1c43      	adds	r3, r0, #1
 8011eb0:	89a3      	ldrh	r3, [r4, #12]
 8011eb2:	d106      	bne.n	8011ec2 <__sflush_r+0x66>
 8011eb4:	6829      	ldr	r1, [r5, #0]
 8011eb6:	291d      	cmp	r1, #29
 8011eb8:	d82c      	bhi.n	8011f14 <__sflush_r+0xb8>
 8011eba:	4a2a      	ldr	r2, [pc, #168]	; (8011f64 <__sflush_r+0x108>)
 8011ebc:	40ca      	lsrs	r2, r1
 8011ebe:	07d6      	lsls	r6, r2, #31
 8011ec0:	d528      	bpl.n	8011f14 <__sflush_r+0xb8>
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	6062      	str	r2, [r4, #4]
 8011ec6:	04d9      	lsls	r1, r3, #19
 8011ec8:	6922      	ldr	r2, [r4, #16]
 8011eca:	6022      	str	r2, [r4, #0]
 8011ecc:	d504      	bpl.n	8011ed8 <__sflush_r+0x7c>
 8011ece:	1c42      	adds	r2, r0, #1
 8011ed0:	d101      	bne.n	8011ed6 <__sflush_r+0x7a>
 8011ed2:	682b      	ldr	r3, [r5, #0]
 8011ed4:	b903      	cbnz	r3, 8011ed8 <__sflush_r+0x7c>
 8011ed6:	6560      	str	r0, [r4, #84]	; 0x54
 8011ed8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011eda:	602f      	str	r7, [r5, #0]
 8011edc:	2900      	cmp	r1, #0
 8011ede:	d0ca      	beq.n	8011e76 <__sflush_r+0x1a>
 8011ee0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011ee4:	4299      	cmp	r1, r3
 8011ee6:	d002      	beq.n	8011eee <__sflush_r+0x92>
 8011ee8:	4628      	mov	r0, r5
 8011eea:	f000 fd7f 	bl	80129ec <_free_r>
 8011eee:	2000      	movs	r0, #0
 8011ef0:	6360      	str	r0, [r4, #52]	; 0x34
 8011ef2:	e7c1      	b.n	8011e78 <__sflush_r+0x1c>
 8011ef4:	6a21      	ldr	r1, [r4, #32]
 8011ef6:	2301      	movs	r3, #1
 8011ef8:	4628      	mov	r0, r5
 8011efa:	47b0      	blx	r6
 8011efc:	1c41      	adds	r1, r0, #1
 8011efe:	d1c7      	bne.n	8011e90 <__sflush_r+0x34>
 8011f00:	682b      	ldr	r3, [r5, #0]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d0c4      	beq.n	8011e90 <__sflush_r+0x34>
 8011f06:	2b1d      	cmp	r3, #29
 8011f08:	d001      	beq.n	8011f0e <__sflush_r+0xb2>
 8011f0a:	2b16      	cmp	r3, #22
 8011f0c:	d101      	bne.n	8011f12 <__sflush_r+0xb6>
 8011f0e:	602f      	str	r7, [r5, #0]
 8011f10:	e7b1      	b.n	8011e76 <__sflush_r+0x1a>
 8011f12:	89a3      	ldrh	r3, [r4, #12]
 8011f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f18:	81a3      	strh	r3, [r4, #12]
 8011f1a:	e7ad      	b.n	8011e78 <__sflush_r+0x1c>
 8011f1c:	690f      	ldr	r7, [r1, #16]
 8011f1e:	2f00      	cmp	r7, #0
 8011f20:	d0a9      	beq.n	8011e76 <__sflush_r+0x1a>
 8011f22:	0793      	lsls	r3, r2, #30
 8011f24:	680e      	ldr	r6, [r1, #0]
 8011f26:	bf08      	it	eq
 8011f28:	694b      	ldreq	r3, [r1, #20]
 8011f2a:	600f      	str	r7, [r1, #0]
 8011f2c:	bf18      	it	ne
 8011f2e:	2300      	movne	r3, #0
 8011f30:	eba6 0807 	sub.w	r8, r6, r7
 8011f34:	608b      	str	r3, [r1, #8]
 8011f36:	f1b8 0f00 	cmp.w	r8, #0
 8011f3a:	dd9c      	ble.n	8011e76 <__sflush_r+0x1a>
 8011f3c:	6a21      	ldr	r1, [r4, #32]
 8011f3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011f40:	4643      	mov	r3, r8
 8011f42:	463a      	mov	r2, r7
 8011f44:	4628      	mov	r0, r5
 8011f46:	47b0      	blx	r6
 8011f48:	2800      	cmp	r0, #0
 8011f4a:	dc06      	bgt.n	8011f5a <__sflush_r+0xfe>
 8011f4c:	89a3      	ldrh	r3, [r4, #12]
 8011f4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f52:	81a3      	strh	r3, [r4, #12]
 8011f54:	f04f 30ff 	mov.w	r0, #4294967295
 8011f58:	e78e      	b.n	8011e78 <__sflush_r+0x1c>
 8011f5a:	4407      	add	r7, r0
 8011f5c:	eba8 0800 	sub.w	r8, r8, r0
 8011f60:	e7e9      	b.n	8011f36 <__sflush_r+0xda>
 8011f62:	bf00      	nop
 8011f64:	20400001 	.word	0x20400001

08011f68 <_fflush_r>:
 8011f68:	b538      	push	{r3, r4, r5, lr}
 8011f6a:	690b      	ldr	r3, [r1, #16]
 8011f6c:	4605      	mov	r5, r0
 8011f6e:	460c      	mov	r4, r1
 8011f70:	b913      	cbnz	r3, 8011f78 <_fflush_r+0x10>
 8011f72:	2500      	movs	r5, #0
 8011f74:	4628      	mov	r0, r5
 8011f76:	bd38      	pop	{r3, r4, r5, pc}
 8011f78:	b118      	cbz	r0, 8011f82 <_fflush_r+0x1a>
 8011f7a:	6983      	ldr	r3, [r0, #24]
 8011f7c:	b90b      	cbnz	r3, 8011f82 <_fflush_r+0x1a>
 8011f7e:	f000 f887 	bl	8012090 <__sinit>
 8011f82:	4b14      	ldr	r3, [pc, #80]	; (8011fd4 <_fflush_r+0x6c>)
 8011f84:	429c      	cmp	r4, r3
 8011f86:	d11b      	bne.n	8011fc0 <_fflush_r+0x58>
 8011f88:	686c      	ldr	r4, [r5, #4]
 8011f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d0ef      	beq.n	8011f72 <_fflush_r+0xa>
 8011f92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011f94:	07d0      	lsls	r0, r2, #31
 8011f96:	d404      	bmi.n	8011fa2 <_fflush_r+0x3a>
 8011f98:	0599      	lsls	r1, r3, #22
 8011f9a:	d402      	bmi.n	8011fa2 <_fflush_r+0x3a>
 8011f9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011f9e:	f000 f91a 	bl	80121d6 <__retarget_lock_acquire_recursive>
 8011fa2:	4628      	mov	r0, r5
 8011fa4:	4621      	mov	r1, r4
 8011fa6:	f7ff ff59 	bl	8011e5c <__sflush_r>
 8011faa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011fac:	07da      	lsls	r2, r3, #31
 8011fae:	4605      	mov	r5, r0
 8011fb0:	d4e0      	bmi.n	8011f74 <_fflush_r+0xc>
 8011fb2:	89a3      	ldrh	r3, [r4, #12]
 8011fb4:	059b      	lsls	r3, r3, #22
 8011fb6:	d4dd      	bmi.n	8011f74 <_fflush_r+0xc>
 8011fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011fba:	f000 f90d 	bl	80121d8 <__retarget_lock_release_recursive>
 8011fbe:	e7d9      	b.n	8011f74 <_fflush_r+0xc>
 8011fc0:	4b05      	ldr	r3, [pc, #20]	; (8011fd8 <_fflush_r+0x70>)
 8011fc2:	429c      	cmp	r4, r3
 8011fc4:	d101      	bne.n	8011fca <_fflush_r+0x62>
 8011fc6:	68ac      	ldr	r4, [r5, #8]
 8011fc8:	e7df      	b.n	8011f8a <_fflush_r+0x22>
 8011fca:	4b04      	ldr	r3, [pc, #16]	; (8011fdc <_fflush_r+0x74>)
 8011fcc:	429c      	cmp	r4, r3
 8011fce:	bf08      	it	eq
 8011fd0:	68ec      	ldreq	r4, [r5, #12]
 8011fd2:	e7da      	b.n	8011f8a <_fflush_r+0x22>
 8011fd4:	08013bc0 	.word	0x08013bc0
 8011fd8:	08013be0 	.word	0x08013be0
 8011fdc:	08013ba0 	.word	0x08013ba0

08011fe0 <std>:
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	b510      	push	{r4, lr}
 8011fe4:	4604      	mov	r4, r0
 8011fe6:	e9c0 3300 	strd	r3, r3, [r0]
 8011fea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011fee:	6083      	str	r3, [r0, #8]
 8011ff0:	8181      	strh	r1, [r0, #12]
 8011ff2:	6643      	str	r3, [r0, #100]	; 0x64
 8011ff4:	81c2      	strh	r2, [r0, #14]
 8011ff6:	6183      	str	r3, [r0, #24]
 8011ff8:	4619      	mov	r1, r3
 8011ffa:	2208      	movs	r2, #8
 8011ffc:	305c      	adds	r0, #92	; 0x5c
 8011ffe:	f7fe fb87 	bl	8010710 <memset>
 8012002:	4b05      	ldr	r3, [pc, #20]	; (8012018 <std+0x38>)
 8012004:	6263      	str	r3, [r4, #36]	; 0x24
 8012006:	4b05      	ldr	r3, [pc, #20]	; (801201c <std+0x3c>)
 8012008:	62a3      	str	r3, [r4, #40]	; 0x28
 801200a:	4b05      	ldr	r3, [pc, #20]	; (8012020 <std+0x40>)
 801200c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801200e:	4b05      	ldr	r3, [pc, #20]	; (8012024 <std+0x44>)
 8012010:	6224      	str	r4, [r4, #32]
 8012012:	6323      	str	r3, [r4, #48]	; 0x30
 8012014:	bd10      	pop	{r4, pc}
 8012016:	bf00      	nop
 8012018:	08012e15 	.word	0x08012e15
 801201c:	08012e37 	.word	0x08012e37
 8012020:	08012e6f 	.word	0x08012e6f
 8012024:	08012e93 	.word	0x08012e93

08012028 <_cleanup_r>:
 8012028:	4901      	ldr	r1, [pc, #4]	; (8012030 <_cleanup_r+0x8>)
 801202a:	f000 b8af 	b.w	801218c <_fwalk_reent>
 801202e:	bf00      	nop
 8012030:	08011f69 	.word	0x08011f69

08012034 <__sfmoreglue>:
 8012034:	b570      	push	{r4, r5, r6, lr}
 8012036:	1e4a      	subs	r2, r1, #1
 8012038:	2568      	movs	r5, #104	; 0x68
 801203a:	4355      	muls	r5, r2
 801203c:	460e      	mov	r6, r1
 801203e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012042:	f000 fd23 	bl	8012a8c <_malloc_r>
 8012046:	4604      	mov	r4, r0
 8012048:	b140      	cbz	r0, 801205c <__sfmoreglue+0x28>
 801204a:	2100      	movs	r1, #0
 801204c:	e9c0 1600 	strd	r1, r6, [r0]
 8012050:	300c      	adds	r0, #12
 8012052:	60a0      	str	r0, [r4, #8]
 8012054:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012058:	f7fe fb5a 	bl	8010710 <memset>
 801205c:	4620      	mov	r0, r4
 801205e:	bd70      	pop	{r4, r5, r6, pc}

08012060 <__sfp_lock_acquire>:
 8012060:	4801      	ldr	r0, [pc, #4]	; (8012068 <__sfp_lock_acquire+0x8>)
 8012062:	f000 b8b8 	b.w	80121d6 <__retarget_lock_acquire_recursive>
 8012066:	bf00      	nop
 8012068:	240008a0 	.word	0x240008a0

0801206c <__sfp_lock_release>:
 801206c:	4801      	ldr	r0, [pc, #4]	; (8012074 <__sfp_lock_release+0x8>)
 801206e:	f000 b8b3 	b.w	80121d8 <__retarget_lock_release_recursive>
 8012072:	bf00      	nop
 8012074:	240008a0 	.word	0x240008a0

08012078 <__sinit_lock_acquire>:
 8012078:	4801      	ldr	r0, [pc, #4]	; (8012080 <__sinit_lock_acquire+0x8>)
 801207a:	f000 b8ac 	b.w	80121d6 <__retarget_lock_acquire_recursive>
 801207e:	bf00      	nop
 8012080:	2400089b 	.word	0x2400089b

08012084 <__sinit_lock_release>:
 8012084:	4801      	ldr	r0, [pc, #4]	; (801208c <__sinit_lock_release+0x8>)
 8012086:	f000 b8a7 	b.w	80121d8 <__retarget_lock_release_recursive>
 801208a:	bf00      	nop
 801208c:	2400089b 	.word	0x2400089b

08012090 <__sinit>:
 8012090:	b510      	push	{r4, lr}
 8012092:	4604      	mov	r4, r0
 8012094:	f7ff fff0 	bl	8012078 <__sinit_lock_acquire>
 8012098:	69a3      	ldr	r3, [r4, #24]
 801209a:	b11b      	cbz	r3, 80120a4 <__sinit+0x14>
 801209c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120a0:	f7ff bff0 	b.w	8012084 <__sinit_lock_release>
 80120a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80120a8:	6523      	str	r3, [r4, #80]	; 0x50
 80120aa:	4b13      	ldr	r3, [pc, #76]	; (80120f8 <__sinit+0x68>)
 80120ac:	4a13      	ldr	r2, [pc, #76]	; (80120fc <__sinit+0x6c>)
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80120b2:	42a3      	cmp	r3, r4
 80120b4:	bf04      	itt	eq
 80120b6:	2301      	moveq	r3, #1
 80120b8:	61a3      	streq	r3, [r4, #24]
 80120ba:	4620      	mov	r0, r4
 80120bc:	f000 f820 	bl	8012100 <__sfp>
 80120c0:	6060      	str	r0, [r4, #4]
 80120c2:	4620      	mov	r0, r4
 80120c4:	f000 f81c 	bl	8012100 <__sfp>
 80120c8:	60a0      	str	r0, [r4, #8]
 80120ca:	4620      	mov	r0, r4
 80120cc:	f000 f818 	bl	8012100 <__sfp>
 80120d0:	2200      	movs	r2, #0
 80120d2:	60e0      	str	r0, [r4, #12]
 80120d4:	2104      	movs	r1, #4
 80120d6:	6860      	ldr	r0, [r4, #4]
 80120d8:	f7ff ff82 	bl	8011fe0 <std>
 80120dc:	68a0      	ldr	r0, [r4, #8]
 80120de:	2201      	movs	r2, #1
 80120e0:	2109      	movs	r1, #9
 80120e2:	f7ff ff7d 	bl	8011fe0 <std>
 80120e6:	68e0      	ldr	r0, [r4, #12]
 80120e8:	2202      	movs	r2, #2
 80120ea:	2112      	movs	r1, #18
 80120ec:	f7ff ff78 	bl	8011fe0 <std>
 80120f0:	2301      	movs	r3, #1
 80120f2:	61a3      	str	r3, [r4, #24]
 80120f4:	e7d2      	b.n	801209c <__sinit+0xc>
 80120f6:	bf00      	nop
 80120f8:	08013ad4 	.word	0x08013ad4
 80120fc:	08012029 	.word	0x08012029

08012100 <__sfp>:
 8012100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012102:	4607      	mov	r7, r0
 8012104:	f7ff ffac 	bl	8012060 <__sfp_lock_acquire>
 8012108:	4b1e      	ldr	r3, [pc, #120]	; (8012184 <__sfp+0x84>)
 801210a:	681e      	ldr	r6, [r3, #0]
 801210c:	69b3      	ldr	r3, [r6, #24]
 801210e:	b913      	cbnz	r3, 8012116 <__sfp+0x16>
 8012110:	4630      	mov	r0, r6
 8012112:	f7ff ffbd 	bl	8012090 <__sinit>
 8012116:	3648      	adds	r6, #72	; 0x48
 8012118:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801211c:	3b01      	subs	r3, #1
 801211e:	d503      	bpl.n	8012128 <__sfp+0x28>
 8012120:	6833      	ldr	r3, [r6, #0]
 8012122:	b30b      	cbz	r3, 8012168 <__sfp+0x68>
 8012124:	6836      	ldr	r6, [r6, #0]
 8012126:	e7f7      	b.n	8012118 <__sfp+0x18>
 8012128:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801212c:	b9d5      	cbnz	r5, 8012164 <__sfp+0x64>
 801212e:	4b16      	ldr	r3, [pc, #88]	; (8012188 <__sfp+0x88>)
 8012130:	60e3      	str	r3, [r4, #12]
 8012132:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012136:	6665      	str	r5, [r4, #100]	; 0x64
 8012138:	f000 f84c 	bl	80121d4 <__retarget_lock_init_recursive>
 801213c:	f7ff ff96 	bl	801206c <__sfp_lock_release>
 8012140:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012144:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012148:	6025      	str	r5, [r4, #0]
 801214a:	61a5      	str	r5, [r4, #24]
 801214c:	2208      	movs	r2, #8
 801214e:	4629      	mov	r1, r5
 8012150:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012154:	f7fe fadc 	bl	8010710 <memset>
 8012158:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801215c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012160:	4620      	mov	r0, r4
 8012162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012164:	3468      	adds	r4, #104	; 0x68
 8012166:	e7d9      	b.n	801211c <__sfp+0x1c>
 8012168:	2104      	movs	r1, #4
 801216a:	4638      	mov	r0, r7
 801216c:	f7ff ff62 	bl	8012034 <__sfmoreglue>
 8012170:	4604      	mov	r4, r0
 8012172:	6030      	str	r0, [r6, #0]
 8012174:	2800      	cmp	r0, #0
 8012176:	d1d5      	bne.n	8012124 <__sfp+0x24>
 8012178:	f7ff ff78 	bl	801206c <__sfp_lock_release>
 801217c:	230c      	movs	r3, #12
 801217e:	603b      	str	r3, [r7, #0]
 8012180:	e7ee      	b.n	8012160 <__sfp+0x60>
 8012182:	bf00      	nop
 8012184:	08013ad4 	.word	0x08013ad4
 8012188:	ffff0001 	.word	0xffff0001

0801218c <_fwalk_reent>:
 801218c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012190:	4606      	mov	r6, r0
 8012192:	4688      	mov	r8, r1
 8012194:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012198:	2700      	movs	r7, #0
 801219a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801219e:	f1b9 0901 	subs.w	r9, r9, #1
 80121a2:	d505      	bpl.n	80121b0 <_fwalk_reent+0x24>
 80121a4:	6824      	ldr	r4, [r4, #0]
 80121a6:	2c00      	cmp	r4, #0
 80121a8:	d1f7      	bne.n	801219a <_fwalk_reent+0xe>
 80121aa:	4638      	mov	r0, r7
 80121ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121b0:	89ab      	ldrh	r3, [r5, #12]
 80121b2:	2b01      	cmp	r3, #1
 80121b4:	d907      	bls.n	80121c6 <_fwalk_reent+0x3a>
 80121b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80121ba:	3301      	adds	r3, #1
 80121bc:	d003      	beq.n	80121c6 <_fwalk_reent+0x3a>
 80121be:	4629      	mov	r1, r5
 80121c0:	4630      	mov	r0, r6
 80121c2:	47c0      	blx	r8
 80121c4:	4307      	orrs	r7, r0
 80121c6:	3568      	adds	r5, #104	; 0x68
 80121c8:	e7e9      	b.n	801219e <_fwalk_reent+0x12>
	...

080121cc <_localeconv_r>:
 80121cc:	4800      	ldr	r0, [pc, #0]	; (80121d0 <_localeconv_r+0x4>)
 80121ce:	4770      	bx	lr
 80121d0:	24000178 	.word	0x24000178

080121d4 <__retarget_lock_init_recursive>:
 80121d4:	4770      	bx	lr

080121d6 <__retarget_lock_acquire_recursive>:
 80121d6:	4770      	bx	lr

080121d8 <__retarget_lock_release_recursive>:
 80121d8:	4770      	bx	lr

080121da <__swhatbuf_r>:
 80121da:	b570      	push	{r4, r5, r6, lr}
 80121dc:	460e      	mov	r6, r1
 80121de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121e2:	2900      	cmp	r1, #0
 80121e4:	b096      	sub	sp, #88	; 0x58
 80121e6:	4614      	mov	r4, r2
 80121e8:	461d      	mov	r5, r3
 80121ea:	da07      	bge.n	80121fc <__swhatbuf_r+0x22>
 80121ec:	2300      	movs	r3, #0
 80121ee:	602b      	str	r3, [r5, #0]
 80121f0:	89b3      	ldrh	r3, [r6, #12]
 80121f2:	061a      	lsls	r2, r3, #24
 80121f4:	d410      	bmi.n	8012218 <__swhatbuf_r+0x3e>
 80121f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80121fa:	e00e      	b.n	801221a <__swhatbuf_r+0x40>
 80121fc:	466a      	mov	r2, sp
 80121fe:	f000 fe9f 	bl	8012f40 <_fstat_r>
 8012202:	2800      	cmp	r0, #0
 8012204:	dbf2      	blt.n	80121ec <__swhatbuf_r+0x12>
 8012206:	9a01      	ldr	r2, [sp, #4]
 8012208:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801220c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012210:	425a      	negs	r2, r3
 8012212:	415a      	adcs	r2, r3
 8012214:	602a      	str	r2, [r5, #0]
 8012216:	e7ee      	b.n	80121f6 <__swhatbuf_r+0x1c>
 8012218:	2340      	movs	r3, #64	; 0x40
 801221a:	2000      	movs	r0, #0
 801221c:	6023      	str	r3, [r4, #0]
 801221e:	b016      	add	sp, #88	; 0x58
 8012220:	bd70      	pop	{r4, r5, r6, pc}
	...

08012224 <__smakebuf_r>:
 8012224:	898b      	ldrh	r3, [r1, #12]
 8012226:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012228:	079d      	lsls	r5, r3, #30
 801222a:	4606      	mov	r6, r0
 801222c:	460c      	mov	r4, r1
 801222e:	d507      	bpl.n	8012240 <__smakebuf_r+0x1c>
 8012230:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012234:	6023      	str	r3, [r4, #0]
 8012236:	6123      	str	r3, [r4, #16]
 8012238:	2301      	movs	r3, #1
 801223a:	6163      	str	r3, [r4, #20]
 801223c:	b002      	add	sp, #8
 801223e:	bd70      	pop	{r4, r5, r6, pc}
 8012240:	ab01      	add	r3, sp, #4
 8012242:	466a      	mov	r2, sp
 8012244:	f7ff ffc9 	bl	80121da <__swhatbuf_r>
 8012248:	9900      	ldr	r1, [sp, #0]
 801224a:	4605      	mov	r5, r0
 801224c:	4630      	mov	r0, r6
 801224e:	f000 fc1d 	bl	8012a8c <_malloc_r>
 8012252:	b948      	cbnz	r0, 8012268 <__smakebuf_r+0x44>
 8012254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012258:	059a      	lsls	r2, r3, #22
 801225a:	d4ef      	bmi.n	801223c <__smakebuf_r+0x18>
 801225c:	f023 0303 	bic.w	r3, r3, #3
 8012260:	f043 0302 	orr.w	r3, r3, #2
 8012264:	81a3      	strh	r3, [r4, #12]
 8012266:	e7e3      	b.n	8012230 <__smakebuf_r+0xc>
 8012268:	4b0d      	ldr	r3, [pc, #52]	; (80122a0 <__smakebuf_r+0x7c>)
 801226a:	62b3      	str	r3, [r6, #40]	; 0x28
 801226c:	89a3      	ldrh	r3, [r4, #12]
 801226e:	6020      	str	r0, [r4, #0]
 8012270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012274:	81a3      	strh	r3, [r4, #12]
 8012276:	9b00      	ldr	r3, [sp, #0]
 8012278:	6163      	str	r3, [r4, #20]
 801227a:	9b01      	ldr	r3, [sp, #4]
 801227c:	6120      	str	r0, [r4, #16]
 801227e:	b15b      	cbz	r3, 8012298 <__smakebuf_r+0x74>
 8012280:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012284:	4630      	mov	r0, r6
 8012286:	f000 fe6d 	bl	8012f64 <_isatty_r>
 801228a:	b128      	cbz	r0, 8012298 <__smakebuf_r+0x74>
 801228c:	89a3      	ldrh	r3, [r4, #12]
 801228e:	f023 0303 	bic.w	r3, r3, #3
 8012292:	f043 0301 	orr.w	r3, r3, #1
 8012296:	81a3      	strh	r3, [r4, #12]
 8012298:	89a0      	ldrh	r0, [r4, #12]
 801229a:	4305      	orrs	r5, r0
 801229c:	81a5      	strh	r5, [r4, #12]
 801229e:	e7cd      	b.n	801223c <__smakebuf_r+0x18>
 80122a0:	08012029 	.word	0x08012029

080122a4 <malloc>:
 80122a4:	4b02      	ldr	r3, [pc, #8]	; (80122b0 <malloc+0xc>)
 80122a6:	4601      	mov	r1, r0
 80122a8:	6818      	ldr	r0, [r3, #0]
 80122aa:	f000 bbef 	b.w	8012a8c <_malloc_r>
 80122ae:	bf00      	nop
 80122b0:	24000024 	.word	0x24000024

080122b4 <memcpy>:
 80122b4:	440a      	add	r2, r1
 80122b6:	4291      	cmp	r1, r2
 80122b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80122bc:	d100      	bne.n	80122c0 <memcpy+0xc>
 80122be:	4770      	bx	lr
 80122c0:	b510      	push	{r4, lr}
 80122c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80122c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80122ca:	4291      	cmp	r1, r2
 80122cc:	d1f9      	bne.n	80122c2 <memcpy+0xe>
 80122ce:	bd10      	pop	{r4, pc}

080122d0 <_Balloc>:
 80122d0:	b570      	push	{r4, r5, r6, lr}
 80122d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80122d4:	4604      	mov	r4, r0
 80122d6:	460d      	mov	r5, r1
 80122d8:	b976      	cbnz	r6, 80122f8 <_Balloc+0x28>
 80122da:	2010      	movs	r0, #16
 80122dc:	f7ff ffe2 	bl	80122a4 <malloc>
 80122e0:	4602      	mov	r2, r0
 80122e2:	6260      	str	r0, [r4, #36]	; 0x24
 80122e4:	b920      	cbnz	r0, 80122f0 <_Balloc+0x20>
 80122e6:	4b18      	ldr	r3, [pc, #96]	; (8012348 <_Balloc+0x78>)
 80122e8:	4818      	ldr	r0, [pc, #96]	; (801234c <_Balloc+0x7c>)
 80122ea:	2166      	movs	r1, #102	; 0x66
 80122ec:	f000 fde8 	bl	8012ec0 <__assert_func>
 80122f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80122f4:	6006      	str	r6, [r0, #0]
 80122f6:	60c6      	str	r6, [r0, #12]
 80122f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80122fa:	68f3      	ldr	r3, [r6, #12]
 80122fc:	b183      	cbz	r3, 8012320 <_Balloc+0x50>
 80122fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012300:	68db      	ldr	r3, [r3, #12]
 8012302:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012306:	b9b8      	cbnz	r0, 8012338 <_Balloc+0x68>
 8012308:	2101      	movs	r1, #1
 801230a:	fa01 f605 	lsl.w	r6, r1, r5
 801230e:	1d72      	adds	r2, r6, #5
 8012310:	0092      	lsls	r2, r2, #2
 8012312:	4620      	mov	r0, r4
 8012314:	f000 fb5a 	bl	80129cc <_calloc_r>
 8012318:	b160      	cbz	r0, 8012334 <_Balloc+0x64>
 801231a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801231e:	e00e      	b.n	801233e <_Balloc+0x6e>
 8012320:	2221      	movs	r2, #33	; 0x21
 8012322:	2104      	movs	r1, #4
 8012324:	4620      	mov	r0, r4
 8012326:	f000 fb51 	bl	80129cc <_calloc_r>
 801232a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801232c:	60f0      	str	r0, [r6, #12]
 801232e:	68db      	ldr	r3, [r3, #12]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d1e4      	bne.n	80122fe <_Balloc+0x2e>
 8012334:	2000      	movs	r0, #0
 8012336:	bd70      	pop	{r4, r5, r6, pc}
 8012338:	6802      	ldr	r2, [r0, #0]
 801233a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801233e:	2300      	movs	r3, #0
 8012340:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012344:	e7f7      	b.n	8012336 <_Balloc+0x66>
 8012346:	bf00      	nop
 8012348:	08013b19 	.word	0x08013b19
 801234c:	08013c00 	.word	0x08013c00

08012350 <_Bfree>:
 8012350:	b570      	push	{r4, r5, r6, lr}
 8012352:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012354:	4605      	mov	r5, r0
 8012356:	460c      	mov	r4, r1
 8012358:	b976      	cbnz	r6, 8012378 <_Bfree+0x28>
 801235a:	2010      	movs	r0, #16
 801235c:	f7ff ffa2 	bl	80122a4 <malloc>
 8012360:	4602      	mov	r2, r0
 8012362:	6268      	str	r0, [r5, #36]	; 0x24
 8012364:	b920      	cbnz	r0, 8012370 <_Bfree+0x20>
 8012366:	4b09      	ldr	r3, [pc, #36]	; (801238c <_Bfree+0x3c>)
 8012368:	4809      	ldr	r0, [pc, #36]	; (8012390 <_Bfree+0x40>)
 801236a:	218a      	movs	r1, #138	; 0x8a
 801236c:	f000 fda8 	bl	8012ec0 <__assert_func>
 8012370:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012374:	6006      	str	r6, [r0, #0]
 8012376:	60c6      	str	r6, [r0, #12]
 8012378:	b13c      	cbz	r4, 801238a <_Bfree+0x3a>
 801237a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801237c:	6862      	ldr	r2, [r4, #4]
 801237e:	68db      	ldr	r3, [r3, #12]
 8012380:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012384:	6021      	str	r1, [r4, #0]
 8012386:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801238a:	bd70      	pop	{r4, r5, r6, pc}
 801238c:	08013b19 	.word	0x08013b19
 8012390:	08013c00 	.word	0x08013c00

08012394 <__multadd>:
 8012394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012398:	690e      	ldr	r6, [r1, #16]
 801239a:	4607      	mov	r7, r0
 801239c:	4698      	mov	r8, r3
 801239e:	460c      	mov	r4, r1
 80123a0:	f101 0014 	add.w	r0, r1, #20
 80123a4:	2300      	movs	r3, #0
 80123a6:	6805      	ldr	r5, [r0, #0]
 80123a8:	b2a9      	uxth	r1, r5
 80123aa:	fb02 8101 	mla	r1, r2, r1, r8
 80123ae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80123b2:	0c2d      	lsrs	r5, r5, #16
 80123b4:	fb02 c505 	mla	r5, r2, r5, ip
 80123b8:	b289      	uxth	r1, r1
 80123ba:	3301      	adds	r3, #1
 80123bc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80123c0:	429e      	cmp	r6, r3
 80123c2:	f840 1b04 	str.w	r1, [r0], #4
 80123c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80123ca:	dcec      	bgt.n	80123a6 <__multadd+0x12>
 80123cc:	f1b8 0f00 	cmp.w	r8, #0
 80123d0:	d022      	beq.n	8012418 <__multadd+0x84>
 80123d2:	68a3      	ldr	r3, [r4, #8]
 80123d4:	42b3      	cmp	r3, r6
 80123d6:	dc19      	bgt.n	801240c <__multadd+0x78>
 80123d8:	6861      	ldr	r1, [r4, #4]
 80123da:	4638      	mov	r0, r7
 80123dc:	3101      	adds	r1, #1
 80123de:	f7ff ff77 	bl	80122d0 <_Balloc>
 80123e2:	4605      	mov	r5, r0
 80123e4:	b928      	cbnz	r0, 80123f2 <__multadd+0x5e>
 80123e6:	4602      	mov	r2, r0
 80123e8:	4b0d      	ldr	r3, [pc, #52]	; (8012420 <__multadd+0x8c>)
 80123ea:	480e      	ldr	r0, [pc, #56]	; (8012424 <__multadd+0x90>)
 80123ec:	21b5      	movs	r1, #181	; 0xb5
 80123ee:	f000 fd67 	bl	8012ec0 <__assert_func>
 80123f2:	6922      	ldr	r2, [r4, #16]
 80123f4:	3202      	adds	r2, #2
 80123f6:	f104 010c 	add.w	r1, r4, #12
 80123fa:	0092      	lsls	r2, r2, #2
 80123fc:	300c      	adds	r0, #12
 80123fe:	f7ff ff59 	bl	80122b4 <memcpy>
 8012402:	4621      	mov	r1, r4
 8012404:	4638      	mov	r0, r7
 8012406:	f7ff ffa3 	bl	8012350 <_Bfree>
 801240a:	462c      	mov	r4, r5
 801240c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012410:	3601      	adds	r6, #1
 8012412:	f8c3 8014 	str.w	r8, [r3, #20]
 8012416:	6126      	str	r6, [r4, #16]
 8012418:	4620      	mov	r0, r4
 801241a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801241e:	bf00      	nop
 8012420:	08013b8f 	.word	0x08013b8f
 8012424:	08013c00 	.word	0x08013c00

08012428 <__hi0bits>:
 8012428:	0c03      	lsrs	r3, r0, #16
 801242a:	041b      	lsls	r3, r3, #16
 801242c:	b9d3      	cbnz	r3, 8012464 <__hi0bits+0x3c>
 801242e:	0400      	lsls	r0, r0, #16
 8012430:	2310      	movs	r3, #16
 8012432:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012436:	bf04      	itt	eq
 8012438:	0200      	lsleq	r0, r0, #8
 801243a:	3308      	addeq	r3, #8
 801243c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012440:	bf04      	itt	eq
 8012442:	0100      	lsleq	r0, r0, #4
 8012444:	3304      	addeq	r3, #4
 8012446:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801244a:	bf04      	itt	eq
 801244c:	0080      	lsleq	r0, r0, #2
 801244e:	3302      	addeq	r3, #2
 8012450:	2800      	cmp	r0, #0
 8012452:	db05      	blt.n	8012460 <__hi0bits+0x38>
 8012454:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012458:	f103 0301 	add.w	r3, r3, #1
 801245c:	bf08      	it	eq
 801245e:	2320      	moveq	r3, #32
 8012460:	4618      	mov	r0, r3
 8012462:	4770      	bx	lr
 8012464:	2300      	movs	r3, #0
 8012466:	e7e4      	b.n	8012432 <__hi0bits+0xa>

08012468 <__lo0bits>:
 8012468:	6803      	ldr	r3, [r0, #0]
 801246a:	f013 0207 	ands.w	r2, r3, #7
 801246e:	4601      	mov	r1, r0
 8012470:	d00b      	beq.n	801248a <__lo0bits+0x22>
 8012472:	07da      	lsls	r2, r3, #31
 8012474:	d424      	bmi.n	80124c0 <__lo0bits+0x58>
 8012476:	0798      	lsls	r0, r3, #30
 8012478:	bf49      	itett	mi
 801247a:	085b      	lsrmi	r3, r3, #1
 801247c:	089b      	lsrpl	r3, r3, #2
 801247e:	2001      	movmi	r0, #1
 8012480:	600b      	strmi	r3, [r1, #0]
 8012482:	bf5c      	itt	pl
 8012484:	600b      	strpl	r3, [r1, #0]
 8012486:	2002      	movpl	r0, #2
 8012488:	4770      	bx	lr
 801248a:	b298      	uxth	r0, r3
 801248c:	b9b0      	cbnz	r0, 80124bc <__lo0bits+0x54>
 801248e:	0c1b      	lsrs	r3, r3, #16
 8012490:	2010      	movs	r0, #16
 8012492:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012496:	bf04      	itt	eq
 8012498:	0a1b      	lsreq	r3, r3, #8
 801249a:	3008      	addeq	r0, #8
 801249c:	071a      	lsls	r2, r3, #28
 801249e:	bf04      	itt	eq
 80124a0:	091b      	lsreq	r3, r3, #4
 80124a2:	3004      	addeq	r0, #4
 80124a4:	079a      	lsls	r2, r3, #30
 80124a6:	bf04      	itt	eq
 80124a8:	089b      	lsreq	r3, r3, #2
 80124aa:	3002      	addeq	r0, #2
 80124ac:	07da      	lsls	r2, r3, #31
 80124ae:	d403      	bmi.n	80124b8 <__lo0bits+0x50>
 80124b0:	085b      	lsrs	r3, r3, #1
 80124b2:	f100 0001 	add.w	r0, r0, #1
 80124b6:	d005      	beq.n	80124c4 <__lo0bits+0x5c>
 80124b8:	600b      	str	r3, [r1, #0]
 80124ba:	4770      	bx	lr
 80124bc:	4610      	mov	r0, r2
 80124be:	e7e8      	b.n	8012492 <__lo0bits+0x2a>
 80124c0:	2000      	movs	r0, #0
 80124c2:	4770      	bx	lr
 80124c4:	2020      	movs	r0, #32
 80124c6:	4770      	bx	lr

080124c8 <__i2b>:
 80124c8:	b510      	push	{r4, lr}
 80124ca:	460c      	mov	r4, r1
 80124cc:	2101      	movs	r1, #1
 80124ce:	f7ff feff 	bl	80122d0 <_Balloc>
 80124d2:	4602      	mov	r2, r0
 80124d4:	b928      	cbnz	r0, 80124e2 <__i2b+0x1a>
 80124d6:	4b05      	ldr	r3, [pc, #20]	; (80124ec <__i2b+0x24>)
 80124d8:	4805      	ldr	r0, [pc, #20]	; (80124f0 <__i2b+0x28>)
 80124da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80124de:	f000 fcef 	bl	8012ec0 <__assert_func>
 80124e2:	2301      	movs	r3, #1
 80124e4:	6144      	str	r4, [r0, #20]
 80124e6:	6103      	str	r3, [r0, #16]
 80124e8:	bd10      	pop	{r4, pc}
 80124ea:	bf00      	nop
 80124ec:	08013b8f 	.word	0x08013b8f
 80124f0:	08013c00 	.word	0x08013c00

080124f4 <__multiply>:
 80124f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124f8:	4614      	mov	r4, r2
 80124fa:	690a      	ldr	r2, [r1, #16]
 80124fc:	6923      	ldr	r3, [r4, #16]
 80124fe:	429a      	cmp	r2, r3
 8012500:	bfb8      	it	lt
 8012502:	460b      	movlt	r3, r1
 8012504:	460d      	mov	r5, r1
 8012506:	bfbc      	itt	lt
 8012508:	4625      	movlt	r5, r4
 801250a:	461c      	movlt	r4, r3
 801250c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8012510:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012514:	68ab      	ldr	r3, [r5, #8]
 8012516:	6869      	ldr	r1, [r5, #4]
 8012518:	eb0a 0709 	add.w	r7, sl, r9
 801251c:	42bb      	cmp	r3, r7
 801251e:	b085      	sub	sp, #20
 8012520:	bfb8      	it	lt
 8012522:	3101      	addlt	r1, #1
 8012524:	f7ff fed4 	bl	80122d0 <_Balloc>
 8012528:	b930      	cbnz	r0, 8012538 <__multiply+0x44>
 801252a:	4602      	mov	r2, r0
 801252c:	4b42      	ldr	r3, [pc, #264]	; (8012638 <__multiply+0x144>)
 801252e:	4843      	ldr	r0, [pc, #268]	; (801263c <__multiply+0x148>)
 8012530:	f240 115d 	movw	r1, #349	; 0x15d
 8012534:	f000 fcc4 	bl	8012ec0 <__assert_func>
 8012538:	f100 0614 	add.w	r6, r0, #20
 801253c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012540:	4633      	mov	r3, r6
 8012542:	2200      	movs	r2, #0
 8012544:	4543      	cmp	r3, r8
 8012546:	d31e      	bcc.n	8012586 <__multiply+0x92>
 8012548:	f105 0c14 	add.w	ip, r5, #20
 801254c:	f104 0314 	add.w	r3, r4, #20
 8012550:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8012554:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012558:	9202      	str	r2, [sp, #8]
 801255a:	ebac 0205 	sub.w	r2, ip, r5
 801255e:	3a15      	subs	r2, #21
 8012560:	f022 0203 	bic.w	r2, r2, #3
 8012564:	3204      	adds	r2, #4
 8012566:	f105 0115 	add.w	r1, r5, #21
 801256a:	458c      	cmp	ip, r1
 801256c:	bf38      	it	cc
 801256e:	2204      	movcc	r2, #4
 8012570:	9201      	str	r2, [sp, #4]
 8012572:	9a02      	ldr	r2, [sp, #8]
 8012574:	9303      	str	r3, [sp, #12]
 8012576:	429a      	cmp	r2, r3
 8012578:	d808      	bhi.n	801258c <__multiply+0x98>
 801257a:	2f00      	cmp	r7, #0
 801257c:	dc55      	bgt.n	801262a <__multiply+0x136>
 801257e:	6107      	str	r7, [r0, #16]
 8012580:	b005      	add	sp, #20
 8012582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012586:	f843 2b04 	str.w	r2, [r3], #4
 801258a:	e7db      	b.n	8012544 <__multiply+0x50>
 801258c:	f8b3 a000 	ldrh.w	sl, [r3]
 8012590:	f1ba 0f00 	cmp.w	sl, #0
 8012594:	d020      	beq.n	80125d8 <__multiply+0xe4>
 8012596:	f105 0e14 	add.w	lr, r5, #20
 801259a:	46b1      	mov	r9, r6
 801259c:	2200      	movs	r2, #0
 801259e:	f85e 4b04 	ldr.w	r4, [lr], #4
 80125a2:	f8d9 b000 	ldr.w	fp, [r9]
 80125a6:	b2a1      	uxth	r1, r4
 80125a8:	fa1f fb8b 	uxth.w	fp, fp
 80125ac:	fb0a b101 	mla	r1, sl, r1, fp
 80125b0:	4411      	add	r1, r2
 80125b2:	f8d9 2000 	ldr.w	r2, [r9]
 80125b6:	0c24      	lsrs	r4, r4, #16
 80125b8:	0c12      	lsrs	r2, r2, #16
 80125ba:	fb0a 2404 	mla	r4, sl, r4, r2
 80125be:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80125c2:	b289      	uxth	r1, r1
 80125c4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80125c8:	45f4      	cmp	ip, lr
 80125ca:	f849 1b04 	str.w	r1, [r9], #4
 80125ce:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80125d2:	d8e4      	bhi.n	801259e <__multiply+0xaa>
 80125d4:	9901      	ldr	r1, [sp, #4]
 80125d6:	5072      	str	r2, [r6, r1]
 80125d8:	9a03      	ldr	r2, [sp, #12]
 80125da:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80125de:	3304      	adds	r3, #4
 80125e0:	f1b9 0f00 	cmp.w	r9, #0
 80125e4:	d01f      	beq.n	8012626 <__multiply+0x132>
 80125e6:	6834      	ldr	r4, [r6, #0]
 80125e8:	f105 0114 	add.w	r1, r5, #20
 80125ec:	46b6      	mov	lr, r6
 80125ee:	f04f 0a00 	mov.w	sl, #0
 80125f2:	880a      	ldrh	r2, [r1, #0]
 80125f4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80125f8:	fb09 b202 	mla	r2, r9, r2, fp
 80125fc:	4492      	add	sl, r2
 80125fe:	b2a4      	uxth	r4, r4
 8012600:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8012604:	f84e 4b04 	str.w	r4, [lr], #4
 8012608:	f851 4b04 	ldr.w	r4, [r1], #4
 801260c:	f8be 2000 	ldrh.w	r2, [lr]
 8012610:	0c24      	lsrs	r4, r4, #16
 8012612:	fb09 2404 	mla	r4, r9, r4, r2
 8012616:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801261a:	458c      	cmp	ip, r1
 801261c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012620:	d8e7      	bhi.n	80125f2 <__multiply+0xfe>
 8012622:	9a01      	ldr	r2, [sp, #4]
 8012624:	50b4      	str	r4, [r6, r2]
 8012626:	3604      	adds	r6, #4
 8012628:	e7a3      	b.n	8012572 <__multiply+0x7e>
 801262a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801262e:	2b00      	cmp	r3, #0
 8012630:	d1a5      	bne.n	801257e <__multiply+0x8a>
 8012632:	3f01      	subs	r7, #1
 8012634:	e7a1      	b.n	801257a <__multiply+0x86>
 8012636:	bf00      	nop
 8012638:	08013b8f 	.word	0x08013b8f
 801263c:	08013c00 	.word	0x08013c00

08012640 <__pow5mult>:
 8012640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012644:	4615      	mov	r5, r2
 8012646:	f012 0203 	ands.w	r2, r2, #3
 801264a:	4606      	mov	r6, r0
 801264c:	460f      	mov	r7, r1
 801264e:	d007      	beq.n	8012660 <__pow5mult+0x20>
 8012650:	4c25      	ldr	r4, [pc, #148]	; (80126e8 <__pow5mult+0xa8>)
 8012652:	3a01      	subs	r2, #1
 8012654:	2300      	movs	r3, #0
 8012656:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801265a:	f7ff fe9b 	bl	8012394 <__multadd>
 801265e:	4607      	mov	r7, r0
 8012660:	10ad      	asrs	r5, r5, #2
 8012662:	d03d      	beq.n	80126e0 <__pow5mult+0xa0>
 8012664:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012666:	b97c      	cbnz	r4, 8012688 <__pow5mult+0x48>
 8012668:	2010      	movs	r0, #16
 801266a:	f7ff fe1b 	bl	80122a4 <malloc>
 801266e:	4602      	mov	r2, r0
 8012670:	6270      	str	r0, [r6, #36]	; 0x24
 8012672:	b928      	cbnz	r0, 8012680 <__pow5mult+0x40>
 8012674:	4b1d      	ldr	r3, [pc, #116]	; (80126ec <__pow5mult+0xac>)
 8012676:	481e      	ldr	r0, [pc, #120]	; (80126f0 <__pow5mult+0xb0>)
 8012678:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801267c:	f000 fc20 	bl	8012ec0 <__assert_func>
 8012680:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012684:	6004      	str	r4, [r0, #0]
 8012686:	60c4      	str	r4, [r0, #12]
 8012688:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801268c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012690:	b94c      	cbnz	r4, 80126a6 <__pow5mult+0x66>
 8012692:	f240 2171 	movw	r1, #625	; 0x271
 8012696:	4630      	mov	r0, r6
 8012698:	f7ff ff16 	bl	80124c8 <__i2b>
 801269c:	2300      	movs	r3, #0
 801269e:	f8c8 0008 	str.w	r0, [r8, #8]
 80126a2:	4604      	mov	r4, r0
 80126a4:	6003      	str	r3, [r0, #0]
 80126a6:	f04f 0900 	mov.w	r9, #0
 80126aa:	07eb      	lsls	r3, r5, #31
 80126ac:	d50a      	bpl.n	80126c4 <__pow5mult+0x84>
 80126ae:	4639      	mov	r1, r7
 80126b0:	4622      	mov	r2, r4
 80126b2:	4630      	mov	r0, r6
 80126b4:	f7ff ff1e 	bl	80124f4 <__multiply>
 80126b8:	4639      	mov	r1, r7
 80126ba:	4680      	mov	r8, r0
 80126bc:	4630      	mov	r0, r6
 80126be:	f7ff fe47 	bl	8012350 <_Bfree>
 80126c2:	4647      	mov	r7, r8
 80126c4:	106d      	asrs	r5, r5, #1
 80126c6:	d00b      	beq.n	80126e0 <__pow5mult+0xa0>
 80126c8:	6820      	ldr	r0, [r4, #0]
 80126ca:	b938      	cbnz	r0, 80126dc <__pow5mult+0x9c>
 80126cc:	4622      	mov	r2, r4
 80126ce:	4621      	mov	r1, r4
 80126d0:	4630      	mov	r0, r6
 80126d2:	f7ff ff0f 	bl	80124f4 <__multiply>
 80126d6:	6020      	str	r0, [r4, #0]
 80126d8:	f8c0 9000 	str.w	r9, [r0]
 80126dc:	4604      	mov	r4, r0
 80126de:	e7e4      	b.n	80126aa <__pow5mult+0x6a>
 80126e0:	4638      	mov	r0, r7
 80126e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126e6:	bf00      	nop
 80126e8:	08013d50 	.word	0x08013d50
 80126ec:	08013b19 	.word	0x08013b19
 80126f0:	08013c00 	.word	0x08013c00

080126f4 <__lshift>:
 80126f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126f8:	460c      	mov	r4, r1
 80126fa:	6849      	ldr	r1, [r1, #4]
 80126fc:	6923      	ldr	r3, [r4, #16]
 80126fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012702:	68a3      	ldr	r3, [r4, #8]
 8012704:	4607      	mov	r7, r0
 8012706:	4691      	mov	r9, r2
 8012708:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801270c:	f108 0601 	add.w	r6, r8, #1
 8012710:	42b3      	cmp	r3, r6
 8012712:	db0b      	blt.n	801272c <__lshift+0x38>
 8012714:	4638      	mov	r0, r7
 8012716:	f7ff fddb 	bl	80122d0 <_Balloc>
 801271a:	4605      	mov	r5, r0
 801271c:	b948      	cbnz	r0, 8012732 <__lshift+0x3e>
 801271e:	4602      	mov	r2, r0
 8012720:	4b28      	ldr	r3, [pc, #160]	; (80127c4 <__lshift+0xd0>)
 8012722:	4829      	ldr	r0, [pc, #164]	; (80127c8 <__lshift+0xd4>)
 8012724:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012728:	f000 fbca 	bl	8012ec0 <__assert_func>
 801272c:	3101      	adds	r1, #1
 801272e:	005b      	lsls	r3, r3, #1
 8012730:	e7ee      	b.n	8012710 <__lshift+0x1c>
 8012732:	2300      	movs	r3, #0
 8012734:	f100 0114 	add.w	r1, r0, #20
 8012738:	f100 0210 	add.w	r2, r0, #16
 801273c:	4618      	mov	r0, r3
 801273e:	4553      	cmp	r3, sl
 8012740:	db33      	blt.n	80127aa <__lshift+0xb6>
 8012742:	6920      	ldr	r0, [r4, #16]
 8012744:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012748:	f104 0314 	add.w	r3, r4, #20
 801274c:	f019 091f 	ands.w	r9, r9, #31
 8012750:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012754:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012758:	d02b      	beq.n	80127b2 <__lshift+0xbe>
 801275a:	f1c9 0e20 	rsb	lr, r9, #32
 801275e:	468a      	mov	sl, r1
 8012760:	2200      	movs	r2, #0
 8012762:	6818      	ldr	r0, [r3, #0]
 8012764:	fa00 f009 	lsl.w	r0, r0, r9
 8012768:	4302      	orrs	r2, r0
 801276a:	f84a 2b04 	str.w	r2, [sl], #4
 801276e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012772:	459c      	cmp	ip, r3
 8012774:	fa22 f20e 	lsr.w	r2, r2, lr
 8012778:	d8f3      	bhi.n	8012762 <__lshift+0x6e>
 801277a:	ebac 0304 	sub.w	r3, ip, r4
 801277e:	3b15      	subs	r3, #21
 8012780:	f023 0303 	bic.w	r3, r3, #3
 8012784:	3304      	adds	r3, #4
 8012786:	f104 0015 	add.w	r0, r4, #21
 801278a:	4584      	cmp	ip, r0
 801278c:	bf38      	it	cc
 801278e:	2304      	movcc	r3, #4
 8012790:	50ca      	str	r2, [r1, r3]
 8012792:	b10a      	cbz	r2, 8012798 <__lshift+0xa4>
 8012794:	f108 0602 	add.w	r6, r8, #2
 8012798:	3e01      	subs	r6, #1
 801279a:	4638      	mov	r0, r7
 801279c:	612e      	str	r6, [r5, #16]
 801279e:	4621      	mov	r1, r4
 80127a0:	f7ff fdd6 	bl	8012350 <_Bfree>
 80127a4:	4628      	mov	r0, r5
 80127a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80127ae:	3301      	adds	r3, #1
 80127b0:	e7c5      	b.n	801273e <__lshift+0x4a>
 80127b2:	3904      	subs	r1, #4
 80127b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80127b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80127bc:	459c      	cmp	ip, r3
 80127be:	d8f9      	bhi.n	80127b4 <__lshift+0xc0>
 80127c0:	e7ea      	b.n	8012798 <__lshift+0xa4>
 80127c2:	bf00      	nop
 80127c4:	08013b8f 	.word	0x08013b8f
 80127c8:	08013c00 	.word	0x08013c00

080127cc <__mcmp>:
 80127cc:	b530      	push	{r4, r5, lr}
 80127ce:	6902      	ldr	r2, [r0, #16]
 80127d0:	690c      	ldr	r4, [r1, #16]
 80127d2:	1b12      	subs	r2, r2, r4
 80127d4:	d10e      	bne.n	80127f4 <__mcmp+0x28>
 80127d6:	f100 0314 	add.w	r3, r0, #20
 80127da:	3114      	adds	r1, #20
 80127dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80127e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80127e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80127e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80127ec:	42a5      	cmp	r5, r4
 80127ee:	d003      	beq.n	80127f8 <__mcmp+0x2c>
 80127f0:	d305      	bcc.n	80127fe <__mcmp+0x32>
 80127f2:	2201      	movs	r2, #1
 80127f4:	4610      	mov	r0, r2
 80127f6:	bd30      	pop	{r4, r5, pc}
 80127f8:	4283      	cmp	r3, r0
 80127fa:	d3f3      	bcc.n	80127e4 <__mcmp+0x18>
 80127fc:	e7fa      	b.n	80127f4 <__mcmp+0x28>
 80127fe:	f04f 32ff 	mov.w	r2, #4294967295
 8012802:	e7f7      	b.n	80127f4 <__mcmp+0x28>

08012804 <__mdiff>:
 8012804:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012808:	460c      	mov	r4, r1
 801280a:	4606      	mov	r6, r0
 801280c:	4611      	mov	r1, r2
 801280e:	4620      	mov	r0, r4
 8012810:	4617      	mov	r7, r2
 8012812:	f7ff ffdb 	bl	80127cc <__mcmp>
 8012816:	1e05      	subs	r5, r0, #0
 8012818:	d110      	bne.n	801283c <__mdiff+0x38>
 801281a:	4629      	mov	r1, r5
 801281c:	4630      	mov	r0, r6
 801281e:	f7ff fd57 	bl	80122d0 <_Balloc>
 8012822:	b930      	cbnz	r0, 8012832 <__mdiff+0x2e>
 8012824:	4b39      	ldr	r3, [pc, #228]	; (801290c <__mdiff+0x108>)
 8012826:	4602      	mov	r2, r0
 8012828:	f240 2132 	movw	r1, #562	; 0x232
 801282c:	4838      	ldr	r0, [pc, #224]	; (8012910 <__mdiff+0x10c>)
 801282e:	f000 fb47 	bl	8012ec0 <__assert_func>
 8012832:	2301      	movs	r3, #1
 8012834:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012838:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801283c:	bfa4      	itt	ge
 801283e:	463b      	movge	r3, r7
 8012840:	4627      	movge	r7, r4
 8012842:	4630      	mov	r0, r6
 8012844:	6879      	ldr	r1, [r7, #4]
 8012846:	bfa6      	itte	ge
 8012848:	461c      	movge	r4, r3
 801284a:	2500      	movge	r5, #0
 801284c:	2501      	movlt	r5, #1
 801284e:	f7ff fd3f 	bl	80122d0 <_Balloc>
 8012852:	b920      	cbnz	r0, 801285e <__mdiff+0x5a>
 8012854:	4b2d      	ldr	r3, [pc, #180]	; (801290c <__mdiff+0x108>)
 8012856:	4602      	mov	r2, r0
 8012858:	f44f 7110 	mov.w	r1, #576	; 0x240
 801285c:	e7e6      	b.n	801282c <__mdiff+0x28>
 801285e:	693e      	ldr	r6, [r7, #16]
 8012860:	60c5      	str	r5, [r0, #12]
 8012862:	6925      	ldr	r5, [r4, #16]
 8012864:	f107 0114 	add.w	r1, r7, #20
 8012868:	f104 0914 	add.w	r9, r4, #20
 801286c:	f100 0e14 	add.w	lr, r0, #20
 8012870:	f107 0210 	add.w	r2, r7, #16
 8012874:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8012878:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801287c:	46f2      	mov	sl, lr
 801287e:	2700      	movs	r7, #0
 8012880:	f859 3b04 	ldr.w	r3, [r9], #4
 8012884:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012888:	fa1f f883 	uxth.w	r8, r3
 801288c:	fa17 f78b 	uxtah	r7, r7, fp
 8012890:	0c1b      	lsrs	r3, r3, #16
 8012892:	eba7 0808 	sub.w	r8, r7, r8
 8012896:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801289a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801289e:	fa1f f888 	uxth.w	r8, r8
 80128a2:	141f      	asrs	r7, r3, #16
 80128a4:	454d      	cmp	r5, r9
 80128a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80128aa:	f84a 3b04 	str.w	r3, [sl], #4
 80128ae:	d8e7      	bhi.n	8012880 <__mdiff+0x7c>
 80128b0:	1b2b      	subs	r3, r5, r4
 80128b2:	3b15      	subs	r3, #21
 80128b4:	f023 0303 	bic.w	r3, r3, #3
 80128b8:	3304      	adds	r3, #4
 80128ba:	3415      	adds	r4, #21
 80128bc:	42a5      	cmp	r5, r4
 80128be:	bf38      	it	cc
 80128c0:	2304      	movcc	r3, #4
 80128c2:	4419      	add	r1, r3
 80128c4:	4473      	add	r3, lr
 80128c6:	469e      	mov	lr, r3
 80128c8:	460d      	mov	r5, r1
 80128ca:	4565      	cmp	r5, ip
 80128cc:	d30e      	bcc.n	80128ec <__mdiff+0xe8>
 80128ce:	f10c 0203 	add.w	r2, ip, #3
 80128d2:	1a52      	subs	r2, r2, r1
 80128d4:	f022 0203 	bic.w	r2, r2, #3
 80128d8:	3903      	subs	r1, #3
 80128da:	458c      	cmp	ip, r1
 80128dc:	bf38      	it	cc
 80128de:	2200      	movcc	r2, #0
 80128e0:	441a      	add	r2, r3
 80128e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80128e6:	b17b      	cbz	r3, 8012908 <__mdiff+0x104>
 80128e8:	6106      	str	r6, [r0, #16]
 80128ea:	e7a5      	b.n	8012838 <__mdiff+0x34>
 80128ec:	f855 8b04 	ldr.w	r8, [r5], #4
 80128f0:	fa17 f488 	uxtah	r4, r7, r8
 80128f4:	1422      	asrs	r2, r4, #16
 80128f6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80128fa:	b2a4      	uxth	r4, r4
 80128fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8012900:	f84e 4b04 	str.w	r4, [lr], #4
 8012904:	1417      	asrs	r7, r2, #16
 8012906:	e7e0      	b.n	80128ca <__mdiff+0xc6>
 8012908:	3e01      	subs	r6, #1
 801290a:	e7ea      	b.n	80128e2 <__mdiff+0xde>
 801290c:	08013b8f 	.word	0x08013b8f
 8012910:	08013c00 	.word	0x08013c00

08012914 <__d2b>:
 8012914:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012918:	4689      	mov	r9, r1
 801291a:	2101      	movs	r1, #1
 801291c:	ec57 6b10 	vmov	r6, r7, d0
 8012920:	4690      	mov	r8, r2
 8012922:	f7ff fcd5 	bl	80122d0 <_Balloc>
 8012926:	4604      	mov	r4, r0
 8012928:	b930      	cbnz	r0, 8012938 <__d2b+0x24>
 801292a:	4602      	mov	r2, r0
 801292c:	4b25      	ldr	r3, [pc, #148]	; (80129c4 <__d2b+0xb0>)
 801292e:	4826      	ldr	r0, [pc, #152]	; (80129c8 <__d2b+0xb4>)
 8012930:	f240 310a 	movw	r1, #778	; 0x30a
 8012934:	f000 fac4 	bl	8012ec0 <__assert_func>
 8012938:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801293c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012940:	bb35      	cbnz	r5, 8012990 <__d2b+0x7c>
 8012942:	2e00      	cmp	r6, #0
 8012944:	9301      	str	r3, [sp, #4]
 8012946:	d028      	beq.n	801299a <__d2b+0x86>
 8012948:	4668      	mov	r0, sp
 801294a:	9600      	str	r6, [sp, #0]
 801294c:	f7ff fd8c 	bl	8012468 <__lo0bits>
 8012950:	9900      	ldr	r1, [sp, #0]
 8012952:	b300      	cbz	r0, 8012996 <__d2b+0x82>
 8012954:	9a01      	ldr	r2, [sp, #4]
 8012956:	f1c0 0320 	rsb	r3, r0, #32
 801295a:	fa02 f303 	lsl.w	r3, r2, r3
 801295e:	430b      	orrs	r3, r1
 8012960:	40c2      	lsrs	r2, r0
 8012962:	6163      	str	r3, [r4, #20]
 8012964:	9201      	str	r2, [sp, #4]
 8012966:	9b01      	ldr	r3, [sp, #4]
 8012968:	61a3      	str	r3, [r4, #24]
 801296a:	2b00      	cmp	r3, #0
 801296c:	bf14      	ite	ne
 801296e:	2202      	movne	r2, #2
 8012970:	2201      	moveq	r2, #1
 8012972:	6122      	str	r2, [r4, #16]
 8012974:	b1d5      	cbz	r5, 80129ac <__d2b+0x98>
 8012976:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801297a:	4405      	add	r5, r0
 801297c:	f8c9 5000 	str.w	r5, [r9]
 8012980:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012984:	f8c8 0000 	str.w	r0, [r8]
 8012988:	4620      	mov	r0, r4
 801298a:	b003      	add	sp, #12
 801298c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012990:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012994:	e7d5      	b.n	8012942 <__d2b+0x2e>
 8012996:	6161      	str	r1, [r4, #20]
 8012998:	e7e5      	b.n	8012966 <__d2b+0x52>
 801299a:	a801      	add	r0, sp, #4
 801299c:	f7ff fd64 	bl	8012468 <__lo0bits>
 80129a0:	9b01      	ldr	r3, [sp, #4]
 80129a2:	6163      	str	r3, [r4, #20]
 80129a4:	2201      	movs	r2, #1
 80129a6:	6122      	str	r2, [r4, #16]
 80129a8:	3020      	adds	r0, #32
 80129aa:	e7e3      	b.n	8012974 <__d2b+0x60>
 80129ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80129b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80129b4:	f8c9 0000 	str.w	r0, [r9]
 80129b8:	6918      	ldr	r0, [r3, #16]
 80129ba:	f7ff fd35 	bl	8012428 <__hi0bits>
 80129be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80129c2:	e7df      	b.n	8012984 <__d2b+0x70>
 80129c4:	08013b8f 	.word	0x08013b8f
 80129c8:	08013c00 	.word	0x08013c00

080129cc <_calloc_r>:
 80129cc:	b513      	push	{r0, r1, r4, lr}
 80129ce:	434a      	muls	r2, r1
 80129d0:	4611      	mov	r1, r2
 80129d2:	9201      	str	r2, [sp, #4]
 80129d4:	f000 f85a 	bl	8012a8c <_malloc_r>
 80129d8:	4604      	mov	r4, r0
 80129da:	b118      	cbz	r0, 80129e4 <_calloc_r+0x18>
 80129dc:	9a01      	ldr	r2, [sp, #4]
 80129de:	2100      	movs	r1, #0
 80129e0:	f7fd fe96 	bl	8010710 <memset>
 80129e4:	4620      	mov	r0, r4
 80129e6:	b002      	add	sp, #8
 80129e8:	bd10      	pop	{r4, pc}
	...

080129ec <_free_r>:
 80129ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80129ee:	2900      	cmp	r1, #0
 80129f0:	d048      	beq.n	8012a84 <_free_r+0x98>
 80129f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80129f6:	9001      	str	r0, [sp, #4]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	f1a1 0404 	sub.w	r4, r1, #4
 80129fe:	bfb8      	it	lt
 8012a00:	18e4      	addlt	r4, r4, r3
 8012a02:	f000 fae3 	bl	8012fcc <__malloc_lock>
 8012a06:	4a20      	ldr	r2, [pc, #128]	; (8012a88 <_free_r+0x9c>)
 8012a08:	9801      	ldr	r0, [sp, #4]
 8012a0a:	6813      	ldr	r3, [r2, #0]
 8012a0c:	4615      	mov	r5, r2
 8012a0e:	b933      	cbnz	r3, 8012a1e <_free_r+0x32>
 8012a10:	6063      	str	r3, [r4, #4]
 8012a12:	6014      	str	r4, [r2, #0]
 8012a14:	b003      	add	sp, #12
 8012a16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012a1a:	f000 badd 	b.w	8012fd8 <__malloc_unlock>
 8012a1e:	42a3      	cmp	r3, r4
 8012a20:	d90b      	bls.n	8012a3a <_free_r+0x4e>
 8012a22:	6821      	ldr	r1, [r4, #0]
 8012a24:	1862      	adds	r2, r4, r1
 8012a26:	4293      	cmp	r3, r2
 8012a28:	bf04      	itt	eq
 8012a2a:	681a      	ldreq	r2, [r3, #0]
 8012a2c:	685b      	ldreq	r3, [r3, #4]
 8012a2e:	6063      	str	r3, [r4, #4]
 8012a30:	bf04      	itt	eq
 8012a32:	1852      	addeq	r2, r2, r1
 8012a34:	6022      	streq	r2, [r4, #0]
 8012a36:	602c      	str	r4, [r5, #0]
 8012a38:	e7ec      	b.n	8012a14 <_free_r+0x28>
 8012a3a:	461a      	mov	r2, r3
 8012a3c:	685b      	ldr	r3, [r3, #4]
 8012a3e:	b10b      	cbz	r3, 8012a44 <_free_r+0x58>
 8012a40:	42a3      	cmp	r3, r4
 8012a42:	d9fa      	bls.n	8012a3a <_free_r+0x4e>
 8012a44:	6811      	ldr	r1, [r2, #0]
 8012a46:	1855      	adds	r5, r2, r1
 8012a48:	42a5      	cmp	r5, r4
 8012a4a:	d10b      	bne.n	8012a64 <_free_r+0x78>
 8012a4c:	6824      	ldr	r4, [r4, #0]
 8012a4e:	4421      	add	r1, r4
 8012a50:	1854      	adds	r4, r2, r1
 8012a52:	42a3      	cmp	r3, r4
 8012a54:	6011      	str	r1, [r2, #0]
 8012a56:	d1dd      	bne.n	8012a14 <_free_r+0x28>
 8012a58:	681c      	ldr	r4, [r3, #0]
 8012a5a:	685b      	ldr	r3, [r3, #4]
 8012a5c:	6053      	str	r3, [r2, #4]
 8012a5e:	4421      	add	r1, r4
 8012a60:	6011      	str	r1, [r2, #0]
 8012a62:	e7d7      	b.n	8012a14 <_free_r+0x28>
 8012a64:	d902      	bls.n	8012a6c <_free_r+0x80>
 8012a66:	230c      	movs	r3, #12
 8012a68:	6003      	str	r3, [r0, #0]
 8012a6a:	e7d3      	b.n	8012a14 <_free_r+0x28>
 8012a6c:	6825      	ldr	r5, [r4, #0]
 8012a6e:	1961      	adds	r1, r4, r5
 8012a70:	428b      	cmp	r3, r1
 8012a72:	bf04      	itt	eq
 8012a74:	6819      	ldreq	r1, [r3, #0]
 8012a76:	685b      	ldreq	r3, [r3, #4]
 8012a78:	6063      	str	r3, [r4, #4]
 8012a7a:	bf04      	itt	eq
 8012a7c:	1949      	addeq	r1, r1, r5
 8012a7e:	6021      	streq	r1, [r4, #0]
 8012a80:	6054      	str	r4, [r2, #4]
 8012a82:	e7c7      	b.n	8012a14 <_free_r+0x28>
 8012a84:	b003      	add	sp, #12
 8012a86:	bd30      	pop	{r4, r5, pc}
 8012a88:	24000240 	.word	0x24000240

08012a8c <_malloc_r>:
 8012a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a8e:	1ccd      	adds	r5, r1, #3
 8012a90:	f025 0503 	bic.w	r5, r5, #3
 8012a94:	3508      	adds	r5, #8
 8012a96:	2d0c      	cmp	r5, #12
 8012a98:	bf38      	it	cc
 8012a9a:	250c      	movcc	r5, #12
 8012a9c:	2d00      	cmp	r5, #0
 8012a9e:	4606      	mov	r6, r0
 8012aa0:	db01      	blt.n	8012aa6 <_malloc_r+0x1a>
 8012aa2:	42a9      	cmp	r1, r5
 8012aa4:	d903      	bls.n	8012aae <_malloc_r+0x22>
 8012aa6:	230c      	movs	r3, #12
 8012aa8:	6033      	str	r3, [r6, #0]
 8012aaa:	2000      	movs	r0, #0
 8012aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012aae:	f000 fa8d 	bl	8012fcc <__malloc_lock>
 8012ab2:	4921      	ldr	r1, [pc, #132]	; (8012b38 <_malloc_r+0xac>)
 8012ab4:	680a      	ldr	r2, [r1, #0]
 8012ab6:	4614      	mov	r4, r2
 8012ab8:	b99c      	cbnz	r4, 8012ae2 <_malloc_r+0x56>
 8012aba:	4f20      	ldr	r7, [pc, #128]	; (8012b3c <_malloc_r+0xb0>)
 8012abc:	683b      	ldr	r3, [r7, #0]
 8012abe:	b923      	cbnz	r3, 8012aca <_malloc_r+0x3e>
 8012ac0:	4621      	mov	r1, r4
 8012ac2:	4630      	mov	r0, r6
 8012ac4:	f000 f996 	bl	8012df4 <_sbrk_r>
 8012ac8:	6038      	str	r0, [r7, #0]
 8012aca:	4629      	mov	r1, r5
 8012acc:	4630      	mov	r0, r6
 8012ace:	f000 f991 	bl	8012df4 <_sbrk_r>
 8012ad2:	1c43      	adds	r3, r0, #1
 8012ad4:	d123      	bne.n	8012b1e <_malloc_r+0x92>
 8012ad6:	230c      	movs	r3, #12
 8012ad8:	6033      	str	r3, [r6, #0]
 8012ada:	4630      	mov	r0, r6
 8012adc:	f000 fa7c 	bl	8012fd8 <__malloc_unlock>
 8012ae0:	e7e3      	b.n	8012aaa <_malloc_r+0x1e>
 8012ae2:	6823      	ldr	r3, [r4, #0]
 8012ae4:	1b5b      	subs	r3, r3, r5
 8012ae6:	d417      	bmi.n	8012b18 <_malloc_r+0x8c>
 8012ae8:	2b0b      	cmp	r3, #11
 8012aea:	d903      	bls.n	8012af4 <_malloc_r+0x68>
 8012aec:	6023      	str	r3, [r4, #0]
 8012aee:	441c      	add	r4, r3
 8012af0:	6025      	str	r5, [r4, #0]
 8012af2:	e004      	b.n	8012afe <_malloc_r+0x72>
 8012af4:	6863      	ldr	r3, [r4, #4]
 8012af6:	42a2      	cmp	r2, r4
 8012af8:	bf0c      	ite	eq
 8012afa:	600b      	streq	r3, [r1, #0]
 8012afc:	6053      	strne	r3, [r2, #4]
 8012afe:	4630      	mov	r0, r6
 8012b00:	f000 fa6a 	bl	8012fd8 <__malloc_unlock>
 8012b04:	f104 000b 	add.w	r0, r4, #11
 8012b08:	1d23      	adds	r3, r4, #4
 8012b0a:	f020 0007 	bic.w	r0, r0, #7
 8012b0e:	1ac2      	subs	r2, r0, r3
 8012b10:	d0cc      	beq.n	8012aac <_malloc_r+0x20>
 8012b12:	1a1b      	subs	r3, r3, r0
 8012b14:	50a3      	str	r3, [r4, r2]
 8012b16:	e7c9      	b.n	8012aac <_malloc_r+0x20>
 8012b18:	4622      	mov	r2, r4
 8012b1a:	6864      	ldr	r4, [r4, #4]
 8012b1c:	e7cc      	b.n	8012ab8 <_malloc_r+0x2c>
 8012b1e:	1cc4      	adds	r4, r0, #3
 8012b20:	f024 0403 	bic.w	r4, r4, #3
 8012b24:	42a0      	cmp	r0, r4
 8012b26:	d0e3      	beq.n	8012af0 <_malloc_r+0x64>
 8012b28:	1a21      	subs	r1, r4, r0
 8012b2a:	4630      	mov	r0, r6
 8012b2c:	f000 f962 	bl	8012df4 <_sbrk_r>
 8012b30:	3001      	adds	r0, #1
 8012b32:	d1dd      	bne.n	8012af0 <_malloc_r+0x64>
 8012b34:	e7cf      	b.n	8012ad6 <_malloc_r+0x4a>
 8012b36:	bf00      	nop
 8012b38:	24000240 	.word	0x24000240
 8012b3c:	24000244 	.word	0x24000244

08012b40 <__sfputc_r>:
 8012b40:	6893      	ldr	r3, [r2, #8]
 8012b42:	3b01      	subs	r3, #1
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	b410      	push	{r4}
 8012b48:	6093      	str	r3, [r2, #8]
 8012b4a:	da08      	bge.n	8012b5e <__sfputc_r+0x1e>
 8012b4c:	6994      	ldr	r4, [r2, #24]
 8012b4e:	42a3      	cmp	r3, r4
 8012b50:	db01      	blt.n	8012b56 <__sfputc_r+0x16>
 8012b52:	290a      	cmp	r1, #10
 8012b54:	d103      	bne.n	8012b5e <__sfputc_r+0x1e>
 8012b56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b5a:	f7fe bab1 	b.w	80110c0 <__swbuf_r>
 8012b5e:	6813      	ldr	r3, [r2, #0]
 8012b60:	1c58      	adds	r0, r3, #1
 8012b62:	6010      	str	r0, [r2, #0]
 8012b64:	7019      	strb	r1, [r3, #0]
 8012b66:	4608      	mov	r0, r1
 8012b68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b6c:	4770      	bx	lr

08012b6e <__sfputs_r>:
 8012b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b70:	4606      	mov	r6, r0
 8012b72:	460f      	mov	r7, r1
 8012b74:	4614      	mov	r4, r2
 8012b76:	18d5      	adds	r5, r2, r3
 8012b78:	42ac      	cmp	r4, r5
 8012b7a:	d101      	bne.n	8012b80 <__sfputs_r+0x12>
 8012b7c:	2000      	movs	r0, #0
 8012b7e:	e007      	b.n	8012b90 <__sfputs_r+0x22>
 8012b80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b84:	463a      	mov	r2, r7
 8012b86:	4630      	mov	r0, r6
 8012b88:	f7ff ffda 	bl	8012b40 <__sfputc_r>
 8012b8c:	1c43      	adds	r3, r0, #1
 8012b8e:	d1f3      	bne.n	8012b78 <__sfputs_r+0xa>
 8012b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012b94 <_vfiprintf_r>:
 8012b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b98:	460d      	mov	r5, r1
 8012b9a:	b09d      	sub	sp, #116	; 0x74
 8012b9c:	4614      	mov	r4, r2
 8012b9e:	4698      	mov	r8, r3
 8012ba0:	4606      	mov	r6, r0
 8012ba2:	b118      	cbz	r0, 8012bac <_vfiprintf_r+0x18>
 8012ba4:	6983      	ldr	r3, [r0, #24]
 8012ba6:	b90b      	cbnz	r3, 8012bac <_vfiprintf_r+0x18>
 8012ba8:	f7ff fa72 	bl	8012090 <__sinit>
 8012bac:	4b89      	ldr	r3, [pc, #548]	; (8012dd4 <_vfiprintf_r+0x240>)
 8012bae:	429d      	cmp	r5, r3
 8012bb0:	d11b      	bne.n	8012bea <_vfiprintf_r+0x56>
 8012bb2:	6875      	ldr	r5, [r6, #4]
 8012bb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012bb6:	07d9      	lsls	r1, r3, #31
 8012bb8:	d405      	bmi.n	8012bc6 <_vfiprintf_r+0x32>
 8012bba:	89ab      	ldrh	r3, [r5, #12]
 8012bbc:	059a      	lsls	r2, r3, #22
 8012bbe:	d402      	bmi.n	8012bc6 <_vfiprintf_r+0x32>
 8012bc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012bc2:	f7ff fb08 	bl	80121d6 <__retarget_lock_acquire_recursive>
 8012bc6:	89ab      	ldrh	r3, [r5, #12]
 8012bc8:	071b      	lsls	r3, r3, #28
 8012bca:	d501      	bpl.n	8012bd0 <_vfiprintf_r+0x3c>
 8012bcc:	692b      	ldr	r3, [r5, #16]
 8012bce:	b9eb      	cbnz	r3, 8012c0c <_vfiprintf_r+0x78>
 8012bd0:	4629      	mov	r1, r5
 8012bd2:	4630      	mov	r0, r6
 8012bd4:	f7fe fac6 	bl	8011164 <__swsetup_r>
 8012bd8:	b1c0      	cbz	r0, 8012c0c <_vfiprintf_r+0x78>
 8012bda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012bdc:	07dc      	lsls	r4, r3, #31
 8012bde:	d50e      	bpl.n	8012bfe <_vfiprintf_r+0x6a>
 8012be0:	f04f 30ff 	mov.w	r0, #4294967295
 8012be4:	b01d      	add	sp, #116	; 0x74
 8012be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bea:	4b7b      	ldr	r3, [pc, #492]	; (8012dd8 <_vfiprintf_r+0x244>)
 8012bec:	429d      	cmp	r5, r3
 8012bee:	d101      	bne.n	8012bf4 <_vfiprintf_r+0x60>
 8012bf0:	68b5      	ldr	r5, [r6, #8]
 8012bf2:	e7df      	b.n	8012bb4 <_vfiprintf_r+0x20>
 8012bf4:	4b79      	ldr	r3, [pc, #484]	; (8012ddc <_vfiprintf_r+0x248>)
 8012bf6:	429d      	cmp	r5, r3
 8012bf8:	bf08      	it	eq
 8012bfa:	68f5      	ldreq	r5, [r6, #12]
 8012bfc:	e7da      	b.n	8012bb4 <_vfiprintf_r+0x20>
 8012bfe:	89ab      	ldrh	r3, [r5, #12]
 8012c00:	0598      	lsls	r0, r3, #22
 8012c02:	d4ed      	bmi.n	8012be0 <_vfiprintf_r+0x4c>
 8012c04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c06:	f7ff fae7 	bl	80121d8 <__retarget_lock_release_recursive>
 8012c0a:	e7e9      	b.n	8012be0 <_vfiprintf_r+0x4c>
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8012c10:	2320      	movs	r3, #32
 8012c12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012c16:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c1a:	2330      	movs	r3, #48	; 0x30
 8012c1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012de0 <_vfiprintf_r+0x24c>
 8012c20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012c24:	f04f 0901 	mov.w	r9, #1
 8012c28:	4623      	mov	r3, r4
 8012c2a:	469a      	mov	sl, r3
 8012c2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c30:	b10a      	cbz	r2, 8012c36 <_vfiprintf_r+0xa2>
 8012c32:	2a25      	cmp	r2, #37	; 0x25
 8012c34:	d1f9      	bne.n	8012c2a <_vfiprintf_r+0x96>
 8012c36:	ebba 0b04 	subs.w	fp, sl, r4
 8012c3a:	d00b      	beq.n	8012c54 <_vfiprintf_r+0xc0>
 8012c3c:	465b      	mov	r3, fp
 8012c3e:	4622      	mov	r2, r4
 8012c40:	4629      	mov	r1, r5
 8012c42:	4630      	mov	r0, r6
 8012c44:	f7ff ff93 	bl	8012b6e <__sfputs_r>
 8012c48:	3001      	adds	r0, #1
 8012c4a:	f000 80aa 	beq.w	8012da2 <_vfiprintf_r+0x20e>
 8012c4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c50:	445a      	add	r2, fp
 8012c52:	9209      	str	r2, [sp, #36]	; 0x24
 8012c54:	f89a 3000 	ldrb.w	r3, [sl]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	f000 80a2 	beq.w	8012da2 <_vfiprintf_r+0x20e>
 8012c5e:	2300      	movs	r3, #0
 8012c60:	f04f 32ff 	mov.w	r2, #4294967295
 8012c64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c68:	f10a 0a01 	add.w	sl, sl, #1
 8012c6c:	9304      	str	r3, [sp, #16]
 8012c6e:	9307      	str	r3, [sp, #28]
 8012c70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012c74:	931a      	str	r3, [sp, #104]	; 0x68
 8012c76:	4654      	mov	r4, sl
 8012c78:	2205      	movs	r2, #5
 8012c7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c7e:	4858      	ldr	r0, [pc, #352]	; (8012de0 <_vfiprintf_r+0x24c>)
 8012c80:	f7ed fb36 	bl	80002f0 <memchr>
 8012c84:	9a04      	ldr	r2, [sp, #16]
 8012c86:	b9d8      	cbnz	r0, 8012cc0 <_vfiprintf_r+0x12c>
 8012c88:	06d1      	lsls	r1, r2, #27
 8012c8a:	bf44      	itt	mi
 8012c8c:	2320      	movmi	r3, #32
 8012c8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c92:	0713      	lsls	r3, r2, #28
 8012c94:	bf44      	itt	mi
 8012c96:	232b      	movmi	r3, #43	; 0x2b
 8012c98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c9c:	f89a 3000 	ldrb.w	r3, [sl]
 8012ca0:	2b2a      	cmp	r3, #42	; 0x2a
 8012ca2:	d015      	beq.n	8012cd0 <_vfiprintf_r+0x13c>
 8012ca4:	9a07      	ldr	r2, [sp, #28]
 8012ca6:	4654      	mov	r4, sl
 8012ca8:	2000      	movs	r0, #0
 8012caa:	f04f 0c0a 	mov.w	ip, #10
 8012cae:	4621      	mov	r1, r4
 8012cb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012cb4:	3b30      	subs	r3, #48	; 0x30
 8012cb6:	2b09      	cmp	r3, #9
 8012cb8:	d94e      	bls.n	8012d58 <_vfiprintf_r+0x1c4>
 8012cba:	b1b0      	cbz	r0, 8012cea <_vfiprintf_r+0x156>
 8012cbc:	9207      	str	r2, [sp, #28]
 8012cbe:	e014      	b.n	8012cea <_vfiprintf_r+0x156>
 8012cc0:	eba0 0308 	sub.w	r3, r0, r8
 8012cc4:	fa09 f303 	lsl.w	r3, r9, r3
 8012cc8:	4313      	orrs	r3, r2
 8012cca:	9304      	str	r3, [sp, #16]
 8012ccc:	46a2      	mov	sl, r4
 8012cce:	e7d2      	b.n	8012c76 <_vfiprintf_r+0xe2>
 8012cd0:	9b03      	ldr	r3, [sp, #12]
 8012cd2:	1d19      	adds	r1, r3, #4
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	9103      	str	r1, [sp, #12]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	bfbb      	ittet	lt
 8012cdc:	425b      	neglt	r3, r3
 8012cde:	f042 0202 	orrlt.w	r2, r2, #2
 8012ce2:	9307      	strge	r3, [sp, #28]
 8012ce4:	9307      	strlt	r3, [sp, #28]
 8012ce6:	bfb8      	it	lt
 8012ce8:	9204      	strlt	r2, [sp, #16]
 8012cea:	7823      	ldrb	r3, [r4, #0]
 8012cec:	2b2e      	cmp	r3, #46	; 0x2e
 8012cee:	d10c      	bne.n	8012d0a <_vfiprintf_r+0x176>
 8012cf0:	7863      	ldrb	r3, [r4, #1]
 8012cf2:	2b2a      	cmp	r3, #42	; 0x2a
 8012cf4:	d135      	bne.n	8012d62 <_vfiprintf_r+0x1ce>
 8012cf6:	9b03      	ldr	r3, [sp, #12]
 8012cf8:	1d1a      	adds	r2, r3, #4
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	9203      	str	r2, [sp, #12]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	bfb8      	it	lt
 8012d02:	f04f 33ff 	movlt.w	r3, #4294967295
 8012d06:	3402      	adds	r4, #2
 8012d08:	9305      	str	r3, [sp, #20]
 8012d0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012df0 <_vfiprintf_r+0x25c>
 8012d0e:	7821      	ldrb	r1, [r4, #0]
 8012d10:	2203      	movs	r2, #3
 8012d12:	4650      	mov	r0, sl
 8012d14:	f7ed faec 	bl	80002f0 <memchr>
 8012d18:	b140      	cbz	r0, 8012d2c <_vfiprintf_r+0x198>
 8012d1a:	2340      	movs	r3, #64	; 0x40
 8012d1c:	eba0 000a 	sub.w	r0, r0, sl
 8012d20:	fa03 f000 	lsl.w	r0, r3, r0
 8012d24:	9b04      	ldr	r3, [sp, #16]
 8012d26:	4303      	orrs	r3, r0
 8012d28:	3401      	adds	r4, #1
 8012d2a:	9304      	str	r3, [sp, #16]
 8012d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d30:	482c      	ldr	r0, [pc, #176]	; (8012de4 <_vfiprintf_r+0x250>)
 8012d32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012d36:	2206      	movs	r2, #6
 8012d38:	f7ed fada 	bl	80002f0 <memchr>
 8012d3c:	2800      	cmp	r0, #0
 8012d3e:	d03f      	beq.n	8012dc0 <_vfiprintf_r+0x22c>
 8012d40:	4b29      	ldr	r3, [pc, #164]	; (8012de8 <_vfiprintf_r+0x254>)
 8012d42:	bb1b      	cbnz	r3, 8012d8c <_vfiprintf_r+0x1f8>
 8012d44:	9b03      	ldr	r3, [sp, #12]
 8012d46:	3307      	adds	r3, #7
 8012d48:	f023 0307 	bic.w	r3, r3, #7
 8012d4c:	3308      	adds	r3, #8
 8012d4e:	9303      	str	r3, [sp, #12]
 8012d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d52:	443b      	add	r3, r7
 8012d54:	9309      	str	r3, [sp, #36]	; 0x24
 8012d56:	e767      	b.n	8012c28 <_vfiprintf_r+0x94>
 8012d58:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d5c:	460c      	mov	r4, r1
 8012d5e:	2001      	movs	r0, #1
 8012d60:	e7a5      	b.n	8012cae <_vfiprintf_r+0x11a>
 8012d62:	2300      	movs	r3, #0
 8012d64:	3401      	adds	r4, #1
 8012d66:	9305      	str	r3, [sp, #20]
 8012d68:	4619      	mov	r1, r3
 8012d6a:	f04f 0c0a 	mov.w	ip, #10
 8012d6e:	4620      	mov	r0, r4
 8012d70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d74:	3a30      	subs	r2, #48	; 0x30
 8012d76:	2a09      	cmp	r2, #9
 8012d78:	d903      	bls.n	8012d82 <_vfiprintf_r+0x1ee>
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d0c5      	beq.n	8012d0a <_vfiprintf_r+0x176>
 8012d7e:	9105      	str	r1, [sp, #20]
 8012d80:	e7c3      	b.n	8012d0a <_vfiprintf_r+0x176>
 8012d82:	fb0c 2101 	mla	r1, ip, r1, r2
 8012d86:	4604      	mov	r4, r0
 8012d88:	2301      	movs	r3, #1
 8012d8a:	e7f0      	b.n	8012d6e <_vfiprintf_r+0x1da>
 8012d8c:	ab03      	add	r3, sp, #12
 8012d8e:	9300      	str	r3, [sp, #0]
 8012d90:	462a      	mov	r2, r5
 8012d92:	4b16      	ldr	r3, [pc, #88]	; (8012dec <_vfiprintf_r+0x258>)
 8012d94:	a904      	add	r1, sp, #16
 8012d96:	4630      	mov	r0, r6
 8012d98:	f7fd fd52 	bl	8010840 <_printf_float>
 8012d9c:	4607      	mov	r7, r0
 8012d9e:	1c78      	adds	r0, r7, #1
 8012da0:	d1d6      	bne.n	8012d50 <_vfiprintf_r+0x1bc>
 8012da2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012da4:	07d9      	lsls	r1, r3, #31
 8012da6:	d405      	bmi.n	8012db4 <_vfiprintf_r+0x220>
 8012da8:	89ab      	ldrh	r3, [r5, #12]
 8012daa:	059a      	lsls	r2, r3, #22
 8012dac:	d402      	bmi.n	8012db4 <_vfiprintf_r+0x220>
 8012dae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012db0:	f7ff fa12 	bl	80121d8 <__retarget_lock_release_recursive>
 8012db4:	89ab      	ldrh	r3, [r5, #12]
 8012db6:	065b      	lsls	r3, r3, #25
 8012db8:	f53f af12 	bmi.w	8012be0 <_vfiprintf_r+0x4c>
 8012dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012dbe:	e711      	b.n	8012be4 <_vfiprintf_r+0x50>
 8012dc0:	ab03      	add	r3, sp, #12
 8012dc2:	9300      	str	r3, [sp, #0]
 8012dc4:	462a      	mov	r2, r5
 8012dc6:	4b09      	ldr	r3, [pc, #36]	; (8012dec <_vfiprintf_r+0x258>)
 8012dc8:	a904      	add	r1, sp, #16
 8012dca:	4630      	mov	r0, r6
 8012dcc:	f7fd ffc4 	bl	8010d58 <_printf_i>
 8012dd0:	e7e4      	b.n	8012d9c <_vfiprintf_r+0x208>
 8012dd2:	bf00      	nop
 8012dd4:	08013bc0 	.word	0x08013bc0
 8012dd8:	08013be0 	.word	0x08013be0
 8012ddc:	08013ba0 	.word	0x08013ba0
 8012de0:	08013d5c 	.word	0x08013d5c
 8012de4:	08013d66 	.word	0x08013d66
 8012de8:	08010841 	.word	0x08010841
 8012dec:	08012b6f 	.word	0x08012b6f
 8012df0:	08013d62 	.word	0x08013d62

08012df4 <_sbrk_r>:
 8012df4:	b538      	push	{r3, r4, r5, lr}
 8012df6:	4d06      	ldr	r5, [pc, #24]	; (8012e10 <_sbrk_r+0x1c>)
 8012df8:	2300      	movs	r3, #0
 8012dfa:	4604      	mov	r4, r0
 8012dfc:	4608      	mov	r0, r1
 8012dfe:	602b      	str	r3, [r5, #0]
 8012e00:	f7f1 fa22 	bl	8004248 <_sbrk>
 8012e04:	1c43      	adds	r3, r0, #1
 8012e06:	d102      	bne.n	8012e0e <_sbrk_r+0x1a>
 8012e08:	682b      	ldr	r3, [r5, #0]
 8012e0a:	b103      	cbz	r3, 8012e0e <_sbrk_r+0x1a>
 8012e0c:	6023      	str	r3, [r4, #0]
 8012e0e:	bd38      	pop	{r3, r4, r5, pc}
 8012e10:	240008a4 	.word	0x240008a4

08012e14 <__sread>:
 8012e14:	b510      	push	{r4, lr}
 8012e16:	460c      	mov	r4, r1
 8012e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e1c:	f000 f8e2 	bl	8012fe4 <_read_r>
 8012e20:	2800      	cmp	r0, #0
 8012e22:	bfab      	itete	ge
 8012e24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012e26:	89a3      	ldrhlt	r3, [r4, #12]
 8012e28:	181b      	addge	r3, r3, r0
 8012e2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012e2e:	bfac      	ite	ge
 8012e30:	6563      	strge	r3, [r4, #84]	; 0x54
 8012e32:	81a3      	strhlt	r3, [r4, #12]
 8012e34:	bd10      	pop	{r4, pc}

08012e36 <__swrite>:
 8012e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e3a:	461f      	mov	r7, r3
 8012e3c:	898b      	ldrh	r3, [r1, #12]
 8012e3e:	05db      	lsls	r3, r3, #23
 8012e40:	4605      	mov	r5, r0
 8012e42:	460c      	mov	r4, r1
 8012e44:	4616      	mov	r6, r2
 8012e46:	d505      	bpl.n	8012e54 <__swrite+0x1e>
 8012e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e4c:	2302      	movs	r3, #2
 8012e4e:	2200      	movs	r2, #0
 8012e50:	f000 f898 	bl	8012f84 <_lseek_r>
 8012e54:	89a3      	ldrh	r3, [r4, #12]
 8012e56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012e5e:	81a3      	strh	r3, [r4, #12]
 8012e60:	4632      	mov	r2, r6
 8012e62:	463b      	mov	r3, r7
 8012e64:	4628      	mov	r0, r5
 8012e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e6a:	f000 b817 	b.w	8012e9c <_write_r>

08012e6e <__sseek>:
 8012e6e:	b510      	push	{r4, lr}
 8012e70:	460c      	mov	r4, r1
 8012e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e76:	f000 f885 	bl	8012f84 <_lseek_r>
 8012e7a:	1c43      	adds	r3, r0, #1
 8012e7c:	89a3      	ldrh	r3, [r4, #12]
 8012e7e:	bf15      	itete	ne
 8012e80:	6560      	strne	r0, [r4, #84]	; 0x54
 8012e82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012e86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012e8a:	81a3      	strheq	r3, [r4, #12]
 8012e8c:	bf18      	it	ne
 8012e8e:	81a3      	strhne	r3, [r4, #12]
 8012e90:	bd10      	pop	{r4, pc}

08012e92 <__sclose>:
 8012e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e96:	f000 b831 	b.w	8012efc <_close_r>
	...

08012e9c <_write_r>:
 8012e9c:	b538      	push	{r3, r4, r5, lr}
 8012e9e:	4d07      	ldr	r5, [pc, #28]	; (8012ebc <_write_r+0x20>)
 8012ea0:	4604      	mov	r4, r0
 8012ea2:	4608      	mov	r0, r1
 8012ea4:	4611      	mov	r1, r2
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	602a      	str	r2, [r5, #0]
 8012eaa:	461a      	mov	r2, r3
 8012eac:	f7ef fe8e 	bl	8002bcc <_write>
 8012eb0:	1c43      	adds	r3, r0, #1
 8012eb2:	d102      	bne.n	8012eba <_write_r+0x1e>
 8012eb4:	682b      	ldr	r3, [r5, #0]
 8012eb6:	b103      	cbz	r3, 8012eba <_write_r+0x1e>
 8012eb8:	6023      	str	r3, [r4, #0]
 8012eba:	bd38      	pop	{r3, r4, r5, pc}
 8012ebc:	240008a4 	.word	0x240008a4

08012ec0 <__assert_func>:
 8012ec0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012ec2:	4614      	mov	r4, r2
 8012ec4:	461a      	mov	r2, r3
 8012ec6:	4b09      	ldr	r3, [pc, #36]	; (8012eec <__assert_func+0x2c>)
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	4605      	mov	r5, r0
 8012ecc:	68d8      	ldr	r0, [r3, #12]
 8012ece:	b14c      	cbz	r4, 8012ee4 <__assert_func+0x24>
 8012ed0:	4b07      	ldr	r3, [pc, #28]	; (8012ef0 <__assert_func+0x30>)
 8012ed2:	9100      	str	r1, [sp, #0]
 8012ed4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012ed8:	4906      	ldr	r1, [pc, #24]	; (8012ef4 <__assert_func+0x34>)
 8012eda:	462b      	mov	r3, r5
 8012edc:	f000 f81e 	bl	8012f1c <fiprintf>
 8012ee0:	f000 f89f 	bl	8013022 <abort>
 8012ee4:	4b04      	ldr	r3, [pc, #16]	; (8012ef8 <__assert_func+0x38>)
 8012ee6:	461c      	mov	r4, r3
 8012ee8:	e7f3      	b.n	8012ed2 <__assert_func+0x12>
 8012eea:	bf00      	nop
 8012eec:	24000024 	.word	0x24000024
 8012ef0:	08013d6d 	.word	0x08013d6d
 8012ef4:	08013d7a 	.word	0x08013d7a
 8012ef8:	08013da8 	.word	0x08013da8

08012efc <_close_r>:
 8012efc:	b538      	push	{r3, r4, r5, lr}
 8012efe:	4d06      	ldr	r5, [pc, #24]	; (8012f18 <_close_r+0x1c>)
 8012f00:	2300      	movs	r3, #0
 8012f02:	4604      	mov	r4, r0
 8012f04:	4608      	mov	r0, r1
 8012f06:	602b      	str	r3, [r5, #0]
 8012f08:	f7f1 f969 	bl	80041de <_close>
 8012f0c:	1c43      	adds	r3, r0, #1
 8012f0e:	d102      	bne.n	8012f16 <_close_r+0x1a>
 8012f10:	682b      	ldr	r3, [r5, #0]
 8012f12:	b103      	cbz	r3, 8012f16 <_close_r+0x1a>
 8012f14:	6023      	str	r3, [r4, #0]
 8012f16:	bd38      	pop	{r3, r4, r5, pc}
 8012f18:	240008a4 	.word	0x240008a4

08012f1c <fiprintf>:
 8012f1c:	b40e      	push	{r1, r2, r3}
 8012f1e:	b503      	push	{r0, r1, lr}
 8012f20:	4601      	mov	r1, r0
 8012f22:	ab03      	add	r3, sp, #12
 8012f24:	4805      	ldr	r0, [pc, #20]	; (8012f3c <fiprintf+0x20>)
 8012f26:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f2a:	6800      	ldr	r0, [r0, #0]
 8012f2c:	9301      	str	r3, [sp, #4]
 8012f2e:	f7ff fe31 	bl	8012b94 <_vfiprintf_r>
 8012f32:	b002      	add	sp, #8
 8012f34:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f38:	b003      	add	sp, #12
 8012f3a:	4770      	bx	lr
 8012f3c:	24000024 	.word	0x24000024

08012f40 <_fstat_r>:
 8012f40:	b538      	push	{r3, r4, r5, lr}
 8012f42:	4d07      	ldr	r5, [pc, #28]	; (8012f60 <_fstat_r+0x20>)
 8012f44:	2300      	movs	r3, #0
 8012f46:	4604      	mov	r4, r0
 8012f48:	4608      	mov	r0, r1
 8012f4a:	4611      	mov	r1, r2
 8012f4c:	602b      	str	r3, [r5, #0]
 8012f4e:	f7f1 f952 	bl	80041f6 <_fstat>
 8012f52:	1c43      	adds	r3, r0, #1
 8012f54:	d102      	bne.n	8012f5c <_fstat_r+0x1c>
 8012f56:	682b      	ldr	r3, [r5, #0]
 8012f58:	b103      	cbz	r3, 8012f5c <_fstat_r+0x1c>
 8012f5a:	6023      	str	r3, [r4, #0]
 8012f5c:	bd38      	pop	{r3, r4, r5, pc}
 8012f5e:	bf00      	nop
 8012f60:	240008a4 	.word	0x240008a4

08012f64 <_isatty_r>:
 8012f64:	b538      	push	{r3, r4, r5, lr}
 8012f66:	4d06      	ldr	r5, [pc, #24]	; (8012f80 <_isatty_r+0x1c>)
 8012f68:	2300      	movs	r3, #0
 8012f6a:	4604      	mov	r4, r0
 8012f6c:	4608      	mov	r0, r1
 8012f6e:	602b      	str	r3, [r5, #0]
 8012f70:	f7f1 f951 	bl	8004216 <_isatty>
 8012f74:	1c43      	adds	r3, r0, #1
 8012f76:	d102      	bne.n	8012f7e <_isatty_r+0x1a>
 8012f78:	682b      	ldr	r3, [r5, #0]
 8012f7a:	b103      	cbz	r3, 8012f7e <_isatty_r+0x1a>
 8012f7c:	6023      	str	r3, [r4, #0]
 8012f7e:	bd38      	pop	{r3, r4, r5, pc}
 8012f80:	240008a4 	.word	0x240008a4

08012f84 <_lseek_r>:
 8012f84:	b538      	push	{r3, r4, r5, lr}
 8012f86:	4d07      	ldr	r5, [pc, #28]	; (8012fa4 <_lseek_r+0x20>)
 8012f88:	4604      	mov	r4, r0
 8012f8a:	4608      	mov	r0, r1
 8012f8c:	4611      	mov	r1, r2
 8012f8e:	2200      	movs	r2, #0
 8012f90:	602a      	str	r2, [r5, #0]
 8012f92:	461a      	mov	r2, r3
 8012f94:	f7f1 f94a 	bl	800422c <_lseek>
 8012f98:	1c43      	adds	r3, r0, #1
 8012f9a:	d102      	bne.n	8012fa2 <_lseek_r+0x1e>
 8012f9c:	682b      	ldr	r3, [r5, #0]
 8012f9e:	b103      	cbz	r3, 8012fa2 <_lseek_r+0x1e>
 8012fa0:	6023      	str	r3, [r4, #0]
 8012fa2:	bd38      	pop	{r3, r4, r5, pc}
 8012fa4:	240008a4 	.word	0x240008a4

08012fa8 <__ascii_mbtowc>:
 8012fa8:	b082      	sub	sp, #8
 8012faa:	b901      	cbnz	r1, 8012fae <__ascii_mbtowc+0x6>
 8012fac:	a901      	add	r1, sp, #4
 8012fae:	b142      	cbz	r2, 8012fc2 <__ascii_mbtowc+0x1a>
 8012fb0:	b14b      	cbz	r3, 8012fc6 <__ascii_mbtowc+0x1e>
 8012fb2:	7813      	ldrb	r3, [r2, #0]
 8012fb4:	600b      	str	r3, [r1, #0]
 8012fb6:	7812      	ldrb	r2, [r2, #0]
 8012fb8:	1e10      	subs	r0, r2, #0
 8012fba:	bf18      	it	ne
 8012fbc:	2001      	movne	r0, #1
 8012fbe:	b002      	add	sp, #8
 8012fc0:	4770      	bx	lr
 8012fc2:	4610      	mov	r0, r2
 8012fc4:	e7fb      	b.n	8012fbe <__ascii_mbtowc+0x16>
 8012fc6:	f06f 0001 	mvn.w	r0, #1
 8012fca:	e7f8      	b.n	8012fbe <__ascii_mbtowc+0x16>

08012fcc <__malloc_lock>:
 8012fcc:	4801      	ldr	r0, [pc, #4]	; (8012fd4 <__malloc_lock+0x8>)
 8012fce:	f7ff b902 	b.w	80121d6 <__retarget_lock_acquire_recursive>
 8012fd2:	bf00      	nop
 8012fd4:	2400089c 	.word	0x2400089c

08012fd8 <__malloc_unlock>:
 8012fd8:	4801      	ldr	r0, [pc, #4]	; (8012fe0 <__malloc_unlock+0x8>)
 8012fda:	f7ff b8fd 	b.w	80121d8 <__retarget_lock_release_recursive>
 8012fde:	bf00      	nop
 8012fe0:	2400089c 	.word	0x2400089c

08012fe4 <_read_r>:
 8012fe4:	b538      	push	{r3, r4, r5, lr}
 8012fe6:	4d07      	ldr	r5, [pc, #28]	; (8013004 <_read_r+0x20>)
 8012fe8:	4604      	mov	r4, r0
 8012fea:	4608      	mov	r0, r1
 8012fec:	4611      	mov	r1, r2
 8012fee:	2200      	movs	r2, #0
 8012ff0:	602a      	str	r2, [r5, #0]
 8012ff2:	461a      	mov	r2, r3
 8012ff4:	f7f1 f8d6 	bl	80041a4 <_read>
 8012ff8:	1c43      	adds	r3, r0, #1
 8012ffa:	d102      	bne.n	8013002 <_read_r+0x1e>
 8012ffc:	682b      	ldr	r3, [r5, #0]
 8012ffe:	b103      	cbz	r3, 8013002 <_read_r+0x1e>
 8013000:	6023      	str	r3, [r4, #0]
 8013002:	bd38      	pop	{r3, r4, r5, pc}
 8013004:	240008a4 	.word	0x240008a4

08013008 <__ascii_wctomb>:
 8013008:	b149      	cbz	r1, 801301e <__ascii_wctomb+0x16>
 801300a:	2aff      	cmp	r2, #255	; 0xff
 801300c:	bf85      	ittet	hi
 801300e:	238a      	movhi	r3, #138	; 0x8a
 8013010:	6003      	strhi	r3, [r0, #0]
 8013012:	700a      	strbls	r2, [r1, #0]
 8013014:	f04f 30ff 	movhi.w	r0, #4294967295
 8013018:	bf98      	it	ls
 801301a:	2001      	movls	r0, #1
 801301c:	4770      	bx	lr
 801301e:	4608      	mov	r0, r1
 8013020:	4770      	bx	lr

08013022 <abort>:
 8013022:	b508      	push	{r3, lr}
 8013024:	2006      	movs	r0, #6
 8013026:	f000 f82b 	bl	8013080 <raise>
 801302a:	2001      	movs	r0, #1
 801302c:	f7f1 f8b0 	bl	8004190 <_exit>

08013030 <_raise_r>:
 8013030:	291f      	cmp	r1, #31
 8013032:	b538      	push	{r3, r4, r5, lr}
 8013034:	4604      	mov	r4, r0
 8013036:	460d      	mov	r5, r1
 8013038:	d904      	bls.n	8013044 <_raise_r+0x14>
 801303a:	2316      	movs	r3, #22
 801303c:	6003      	str	r3, [r0, #0]
 801303e:	f04f 30ff 	mov.w	r0, #4294967295
 8013042:	bd38      	pop	{r3, r4, r5, pc}
 8013044:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013046:	b112      	cbz	r2, 801304e <_raise_r+0x1e>
 8013048:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801304c:	b94b      	cbnz	r3, 8013062 <_raise_r+0x32>
 801304e:	4620      	mov	r0, r4
 8013050:	f000 f830 	bl	80130b4 <_getpid_r>
 8013054:	462a      	mov	r2, r5
 8013056:	4601      	mov	r1, r0
 8013058:	4620      	mov	r0, r4
 801305a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801305e:	f000 b817 	b.w	8013090 <_kill_r>
 8013062:	2b01      	cmp	r3, #1
 8013064:	d00a      	beq.n	801307c <_raise_r+0x4c>
 8013066:	1c59      	adds	r1, r3, #1
 8013068:	d103      	bne.n	8013072 <_raise_r+0x42>
 801306a:	2316      	movs	r3, #22
 801306c:	6003      	str	r3, [r0, #0]
 801306e:	2001      	movs	r0, #1
 8013070:	e7e7      	b.n	8013042 <_raise_r+0x12>
 8013072:	2400      	movs	r4, #0
 8013074:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013078:	4628      	mov	r0, r5
 801307a:	4798      	blx	r3
 801307c:	2000      	movs	r0, #0
 801307e:	e7e0      	b.n	8013042 <_raise_r+0x12>

08013080 <raise>:
 8013080:	4b02      	ldr	r3, [pc, #8]	; (801308c <raise+0xc>)
 8013082:	4601      	mov	r1, r0
 8013084:	6818      	ldr	r0, [r3, #0]
 8013086:	f7ff bfd3 	b.w	8013030 <_raise_r>
 801308a:	bf00      	nop
 801308c:	24000024 	.word	0x24000024

08013090 <_kill_r>:
 8013090:	b538      	push	{r3, r4, r5, lr}
 8013092:	4d07      	ldr	r5, [pc, #28]	; (80130b0 <_kill_r+0x20>)
 8013094:	2300      	movs	r3, #0
 8013096:	4604      	mov	r4, r0
 8013098:	4608      	mov	r0, r1
 801309a:	4611      	mov	r1, r2
 801309c:	602b      	str	r3, [r5, #0]
 801309e:	f7f1 f867 	bl	8004170 <_kill>
 80130a2:	1c43      	adds	r3, r0, #1
 80130a4:	d102      	bne.n	80130ac <_kill_r+0x1c>
 80130a6:	682b      	ldr	r3, [r5, #0]
 80130a8:	b103      	cbz	r3, 80130ac <_kill_r+0x1c>
 80130aa:	6023      	str	r3, [r4, #0]
 80130ac:	bd38      	pop	{r3, r4, r5, pc}
 80130ae:	bf00      	nop
 80130b0:	240008a4 	.word	0x240008a4

080130b4 <_getpid_r>:
 80130b4:	f7f1 b854 	b.w	8004160 <_getpid>

080130b8 <atan2>:
 80130b8:	f000 b862 	b.w	8013180 <__ieee754_atan2>
 80130bc:	0000      	movs	r0, r0
	...

080130c0 <sqrt>:
 80130c0:	b508      	push	{r3, lr}
 80130c2:	ed2d 8b04 	vpush	{d8-d9}
 80130c6:	eeb0 8b40 	vmov.f64	d8, d0
 80130ca:	f000 f927 	bl	801331c <__ieee754_sqrt>
 80130ce:	4b10      	ldr	r3, [pc, #64]	; (8013110 <sqrt+0x50>)
 80130d0:	f993 3000 	ldrsb.w	r3, [r3]
 80130d4:	3301      	adds	r3, #1
 80130d6:	d011      	beq.n	80130fc <sqrt+0x3c>
 80130d8:	eeb4 8b48 	vcmp.f64	d8, d8
 80130dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130e0:	d60c      	bvs.n	80130fc <sqrt+0x3c>
 80130e2:	ed9f 9b09 	vldr	d9, [pc, #36]	; 8013108 <sqrt+0x48>
 80130e6:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80130ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130ee:	d505      	bpl.n	80130fc <sqrt+0x3c>
 80130f0:	f7fd fae4 	bl	80106bc <__errno>
 80130f4:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80130f8:	2321      	movs	r3, #33	; 0x21
 80130fa:	6003      	str	r3, [r0, #0]
 80130fc:	ecbd 8b04 	vpop	{d8-d9}
 8013100:	bd08      	pop	{r3, pc}
 8013102:	bf00      	nop
 8013104:	f3af 8000 	nop.w
	...
 8013110:	240001f4 	.word	0x240001f4

08013114 <asinf>:
 8013114:	b508      	push	{r3, lr}
 8013116:	ed2d 8b02 	vpush	{d8}
 801311a:	eeb0 8a40 	vmov.f32	s16, s0
 801311e:	f000 f901 	bl	8013324 <__ieee754_asinf>
 8013122:	4b13      	ldr	r3, [pc, #76]	; (8013170 <asinf+0x5c>)
 8013124:	f993 3000 	ldrsb.w	r3, [r3]
 8013128:	3301      	adds	r3, #1
 801312a:	eef0 8a40 	vmov.f32	s17, s0
 801312e:	d01a      	beq.n	8013166 <asinf+0x52>
 8013130:	eeb4 8a48 	vcmp.f32	s16, s16
 8013134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013138:	d615      	bvs.n	8013166 <asinf+0x52>
 801313a:	eeb0 0a48 	vmov.f32	s0, s16
 801313e:	f000 fc53 	bl	80139e8 <fabsf>
 8013142:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013146:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801314a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801314e:	dd0a      	ble.n	8013166 <asinf+0x52>
 8013150:	f7fd fab4 	bl	80106bc <__errno>
 8013154:	ecbd 8b02 	vpop	{d8}
 8013158:	2321      	movs	r3, #33	; 0x21
 801315a:	6003      	str	r3, [r0, #0]
 801315c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013160:	4804      	ldr	r0, [pc, #16]	; (8013174 <asinf+0x60>)
 8013162:	f000 bc49 	b.w	80139f8 <nanf>
 8013166:	eeb0 0a68 	vmov.f32	s0, s17
 801316a:	ecbd 8b02 	vpop	{d8}
 801316e:	bd08      	pop	{r3, pc}
 8013170:	240001f4 	.word	0x240001f4
 8013174:	08013da8 	.word	0x08013da8

08013178 <atan2f>:
 8013178:	f000 b9ba 	b.w	80134f0 <__ieee754_atan2f>
 801317c:	0000      	movs	r0, r0
	...

08013180 <__ieee754_atan2>:
 8013180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013182:	ee11 6a10 	vmov	r6, s2
 8013186:	ee11 0a90 	vmov	r0, s3
 801318a:	4273      	negs	r3, r6
 801318c:	4f60      	ldr	r7, [pc, #384]	; (8013310 <__ieee754_atan2+0x190>)
 801318e:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8013192:	4333      	orrs	r3, r6
 8013194:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8013198:	42bb      	cmp	r3, r7
 801319a:	ed8d 0b00 	vstr	d0, [sp]
 801319e:	d80b      	bhi.n	80131b8 <__ieee754_atan2+0x38>
 80131a0:	e9dd c500 	ldrd	ip, r5, [sp]
 80131a4:	f1cc 0100 	rsb	r1, ip, #0
 80131a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80131ac:	ea41 010c 	orr.w	r1, r1, ip
 80131b0:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 80131b4:	42b9      	cmp	r1, r7
 80131b6:	d906      	bls.n	80131c6 <__ieee754_atan2+0x46>
 80131b8:	ed9d 7b00 	vldr	d7, [sp]
 80131bc:	ee37 7b01 	vadd.f64	d7, d7, d1
 80131c0:	ed8d 7b00 	vstr	d7, [sp]
 80131c4:	e054      	b.n	8013270 <__ieee754_atan2+0xf0>
 80131c6:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 80131ca:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 80131ce:	4331      	orrs	r1, r6
 80131d0:	d104      	bne.n	80131dc <__ieee754_atan2+0x5c>
 80131d2:	b003      	add	sp, #12
 80131d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80131d8:	f000 ba2e 	b.w	8013638 <atan>
 80131dc:	1784      	asrs	r4, r0, #30
 80131de:	f004 0402 	and.w	r4, r4, #2
 80131e2:	ea53 010c 	orrs.w	r1, r3, ip
 80131e6:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 80131ea:	d109      	bne.n	8013200 <__ieee754_atan2+0x80>
 80131ec:	2c02      	cmp	r4, #2
 80131ee:	d069      	beq.n	80132c4 <__ieee754_atan2+0x144>
 80131f0:	ed9f 7b39 	vldr	d7, [pc, #228]	; 80132d8 <__ieee754_atan2+0x158>
 80131f4:	ed9d 6b00 	vldr	d6, [sp]
 80131f8:	2c03      	cmp	r4, #3
 80131fa:	fe07 7b06 	vseleq.f64	d7, d7, d6
 80131fe:	e7df      	b.n	80131c0 <__ieee754_atan2+0x40>
 8013200:	ea52 0106 	orrs.w	r1, r2, r6
 8013204:	d107      	bne.n	8013216 <__ieee754_atan2+0x96>
 8013206:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80132e0 <__ieee754_atan2+0x160>
 801320a:	ed9f 7b37 	vldr	d7, [pc, #220]	; 80132e8 <__ieee754_atan2+0x168>
 801320e:	2d00      	cmp	r5, #0
 8013210:	fe26 7b07 	vselge.f64	d7, d6, d7
 8013214:	e7d4      	b.n	80131c0 <__ieee754_atan2+0x40>
 8013216:	42ba      	cmp	r2, r7
 8013218:	d10f      	bne.n	801323a <__ieee754_atan2+0xba>
 801321a:	4293      	cmp	r3, r2
 801321c:	f104 34ff 	add.w	r4, r4, #4294967295
 8013220:	d107      	bne.n	8013232 <__ieee754_atan2+0xb2>
 8013222:	2c02      	cmp	r4, #2
 8013224:	d851      	bhi.n	80132ca <__ieee754_atan2+0x14a>
 8013226:	4b3b      	ldr	r3, [pc, #236]	; (8013314 <__ieee754_atan2+0x194>)
 8013228:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801322c:	ed94 7b00 	vldr	d7, [r4]
 8013230:	e7c6      	b.n	80131c0 <__ieee754_atan2+0x40>
 8013232:	2c02      	cmp	r4, #2
 8013234:	d84c      	bhi.n	80132d0 <__ieee754_atan2+0x150>
 8013236:	4b38      	ldr	r3, [pc, #224]	; (8013318 <__ieee754_atan2+0x198>)
 8013238:	e7f6      	b.n	8013228 <__ieee754_atan2+0xa8>
 801323a:	42bb      	cmp	r3, r7
 801323c:	d0e3      	beq.n	8013206 <__ieee754_atan2+0x86>
 801323e:	1a9b      	subs	r3, r3, r2
 8013240:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8013244:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013248:	da16      	bge.n	8013278 <__ieee754_atan2+0xf8>
 801324a:	2800      	cmp	r0, #0
 801324c:	da01      	bge.n	8013252 <__ieee754_atan2+0xd2>
 801324e:	323c      	adds	r2, #60	; 0x3c
 8013250:	db17      	blt.n	8013282 <__ieee754_atan2+0x102>
 8013252:	ed9d 7b00 	vldr	d7, [sp]
 8013256:	ee87 0b01 	vdiv.f64	d0, d7, d1
 801325a:	f000 fae7 	bl	801382c <fabs>
 801325e:	f000 f9eb 	bl	8013638 <atan>
 8013262:	ed8d 0b00 	vstr	d0, [sp]
 8013266:	2c01      	cmp	r4, #1
 8013268:	d00e      	beq.n	8013288 <__ieee754_atan2+0x108>
 801326a:	2c02      	cmp	r4, #2
 801326c:	d014      	beq.n	8013298 <__ieee754_atan2+0x118>
 801326e:	b9f4      	cbnz	r4, 80132ae <__ieee754_atan2+0x12e>
 8013270:	ed9d 0b00 	vldr	d0, [sp]
 8013274:	b003      	add	sp, #12
 8013276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013278:	ed9f 7b19 	vldr	d7, [pc, #100]	; 80132e0 <__ieee754_atan2+0x160>
 801327c:	ed8d 7b00 	vstr	d7, [sp]
 8013280:	e7f1      	b.n	8013266 <__ieee754_atan2+0xe6>
 8013282:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 80132f0 <__ieee754_atan2+0x170>
 8013286:	e7f9      	b.n	801327c <__ieee754_atan2+0xfc>
 8013288:	e9dd 2300 	ldrd	r2, r3, [sp]
 801328c:	9901      	ldr	r1, [sp, #4]
 801328e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013292:	e9cd 2300 	strd	r2, r3, [sp]
 8013296:	e7eb      	b.n	8013270 <__ieee754_atan2+0xf0>
 8013298:	ed9d 6b00 	vldr	d6, [sp]
 801329c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80132f8 <__ieee754_atan2+0x178>
 80132a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80132a4:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8013300 <__ieee754_atan2+0x180>
 80132a8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80132ac:	e788      	b.n	80131c0 <__ieee754_atan2+0x40>
 80132ae:	ed9d 6b00 	vldr	d6, [sp]
 80132b2:	ed9f 7b11 	vldr	d7, [pc, #68]	; 80132f8 <__ieee754_atan2+0x178>
 80132b6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80132ba:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8013300 <__ieee754_atan2+0x180>
 80132be:	ee37 7b46 	vsub.f64	d7, d7, d6
 80132c2:	e77d      	b.n	80131c0 <__ieee754_atan2+0x40>
 80132c4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8013300 <__ieee754_atan2+0x180>
 80132c8:	e77a      	b.n	80131c0 <__ieee754_atan2+0x40>
 80132ca:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8013308 <__ieee754_atan2+0x188>
 80132ce:	e777      	b.n	80131c0 <__ieee754_atan2+0x40>
 80132d0:	ed9f 7b07 	vldr	d7, [pc, #28]	; 80132f0 <__ieee754_atan2+0x170>
 80132d4:	e774      	b.n	80131c0 <__ieee754_atan2+0x40>
 80132d6:	bf00      	nop
 80132d8:	54442d18 	.word	0x54442d18
 80132dc:	c00921fb 	.word	0xc00921fb
 80132e0:	54442d18 	.word	0x54442d18
 80132e4:	3ff921fb 	.word	0x3ff921fb
 80132e8:	54442d18 	.word	0x54442d18
 80132ec:	bff921fb 	.word	0xbff921fb
	...
 80132f8:	33145c07 	.word	0x33145c07
 80132fc:	3ca1a626 	.word	0x3ca1a626
 8013300:	54442d18 	.word	0x54442d18
 8013304:	400921fb 	.word	0x400921fb
 8013308:	54442d18 	.word	0x54442d18
 801330c:	3fe921fb 	.word	0x3fe921fb
 8013310:	7ff00000 	.word	0x7ff00000
 8013314:	08013eb8 	.word	0x08013eb8
 8013318:	08013ed0 	.word	0x08013ed0

0801331c <__ieee754_sqrt>:
 801331c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8013320:	4770      	bx	lr
	...

08013324 <__ieee754_asinf>:
 8013324:	b538      	push	{r3, r4, r5, lr}
 8013326:	ee10 5a10 	vmov	r5, s0
 801332a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801332e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8013332:	ed2d 8b04 	vpush	{d8-d9}
 8013336:	d10c      	bne.n	8013352 <__ieee754_asinf+0x2e>
 8013338:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80134b0 <__ieee754_asinf+0x18c>
 801333c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80134b4 <__ieee754_asinf+0x190>
 8013340:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013344:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013348:	eeb0 0a67 	vmov.f32	s0, s15
 801334c:	ecbd 8b04 	vpop	{d8-d9}
 8013350:	bd38      	pop	{r3, r4, r5, pc}
 8013352:	dd04      	ble.n	801335e <__ieee754_asinf+0x3a>
 8013354:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013358:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801335c:	e7f6      	b.n	801334c <__ieee754_asinf+0x28>
 801335e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8013362:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8013366:	da0b      	bge.n	8013380 <__ieee754_asinf+0x5c>
 8013368:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 801336c:	da52      	bge.n	8013414 <__ieee754_asinf+0xf0>
 801336e:	eddf 7a52 	vldr	s15, [pc, #328]	; 80134b8 <__ieee754_asinf+0x194>
 8013372:	ee70 7a27 	vadd.f32	s15, s0, s15
 8013376:	eef4 7ae8 	vcmpe.f32	s15, s17
 801337a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801337e:	dce5      	bgt.n	801334c <__ieee754_asinf+0x28>
 8013380:	f000 fb32 	bl	80139e8 <fabsf>
 8013384:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8013388:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 801338c:	ee20 8a08 	vmul.f32	s16, s0, s16
 8013390:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80134bc <__ieee754_asinf+0x198>
 8013394:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80134c0 <__ieee754_asinf+0x19c>
 8013398:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 80134c4 <__ieee754_asinf+0x1a0>
 801339c:	eea8 7a27 	vfma.f32	s14, s16, s15
 80133a0:	eddf 7a49 	vldr	s15, [pc, #292]	; 80134c8 <__ieee754_asinf+0x1a4>
 80133a4:	eee7 7a08 	vfma.f32	s15, s14, s16
 80133a8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80134cc <__ieee754_asinf+0x1a8>
 80133ac:	eea7 7a88 	vfma.f32	s14, s15, s16
 80133b0:	eddf 7a47 	vldr	s15, [pc, #284]	; 80134d0 <__ieee754_asinf+0x1ac>
 80133b4:	eee7 7a08 	vfma.f32	s15, s14, s16
 80133b8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80134d4 <__ieee754_asinf+0x1b0>
 80133bc:	eea7 9a88 	vfma.f32	s18, s15, s16
 80133c0:	eddf 7a45 	vldr	s15, [pc, #276]	; 80134d8 <__ieee754_asinf+0x1b4>
 80133c4:	eee8 7a07 	vfma.f32	s15, s16, s14
 80133c8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80134dc <__ieee754_asinf+0x1b8>
 80133cc:	eea7 7a88 	vfma.f32	s14, s15, s16
 80133d0:	eddf 7a43 	vldr	s15, [pc, #268]	; 80134e0 <__ieee754_asinf+0x1bc>
 80133d4:	eee7 7a08 	vfma.f32	s15, s14, s16
 80133d8:	eeb0 0a48 	vmov.f32	s0, s16
 80133dc:	eee7 8a88 	vfma.f32	s17, s15, s16
 80133e0:	f000 f924 	bl	801362c <__ieee754_sqrtf>
 80133e4:	4b3f      	ldr	r3, [pc, #252]	; (80134e4 <__ieee754_asinf+0x1c0>)
 80133e6:	ee29 9a08 	vmul.f32	s18, s18, s16
 80133ea:	429c      	cmp	r4, r3
 80133ec:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80133f0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80133f4:	dd3d      	ble.n	8013472 <__ieee754_asinf+0x14e>
 80133f6:	eea0 0a06 	vfma.f32	s0, s0, s12
 80133fa:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80134e8 <__ieee754_asinf+0x1c4>
 80133fe:	eee0 7a26 	vfma.f32	s15, s0, s13
 8013402:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80134b4 <__ieee754_asinf+0x190>
 8013406:	ee30 0a67 	vsub.f32	s0, s0, s15
 801340a:	2d00      	cmp	r5, #0
 801340c:	bfd8      	it	le
 801340e:	eeb1 0a40 	vnegle.f32	s0, s0
 8013412:	e79b      	b.n	801334c <__ieee754_asinf+0x28>
 8013414:	ee60 7a00 	vmul.f32	s15, s0, s0
 8013418:	eddf 6a28 	vldr	s13, [pc, #160]	; 80134bc <__ieee754_asinf+0x198>
 801341c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80134c0 <__ieee754_asinf+0x19c>
 8013420:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80134d4 <__ieee754_asinf+0x1b0>
 8013424:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8013428:	eddf 6a27 	vldr	s13, [pc, #156]	; 80134c8 <__ieee754_asinf+0x1a4>
 801342c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013430:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80134cc <__ieee754_asinf+0x1a8>
 8013434:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013438:	eddf 6a25 	vldr	s13, [pc, #148]	; 80134d0 <__ieee754_asinf+0x1ac>
 801343c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013440:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80134c4 <__ieee754_asinf+0x1a0>
 8013444:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013448:	eddf 6a23 	vldr	s13, [pc, #140]	; 80134d8 <__ieee754_asinf+0x1b4>
 801344c:	eee7 6a86 	vfma.f32	s13, s15, s12
 8013450:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80134dc <__ieee754_asinf+0x1b8>
 8013454:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8013458:	eddf 6a21 	vldr	s13, [pc, #132]	; 80134e0 <__ieee754_asinf+0x1bc>
 801345c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013460:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013464:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8013468:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801346c:	eea0 0a27 	vfma.f32	s0, s0, s15
 8013470:	e76c      	b.n	801334c <__ieee754_asinf+0x28>
 8013472:	ee10 3a10 	vmov	r3, s0
 8013476:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801347a:	f023 030f 	bic.w	r3, r3, #15
 801347e:	ee07 3a10 	vmov	s14, r3
 8013482:	eea7 8a47 	vfms.f32	s16, s14, s14
 8013486:	ee70 7a07 	vadd.f32	s15, s0, s14
 801348a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801348e:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8013492:	eddf 7a07 	vldr	s15, [pc, #28]	; 80134b0 <__ieee754_asinf+0x18c>
 8013496:	eee5 7ae6 	vfms.f32	s15, s11, s13
 801349a:	eed0 7a06 	vfnms.f32	s15, s0, s12
 801349e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80134ec <__ieee754_asinf+0x1c8>
 80134a2:	eeb0 6a40 	vmov.f32	s12, s0
 80134a6:	eea7 6a66 	vfms.f32	s12, s14, s13
 80134aa:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80134ae:	e7aa      	b.n	8013406 <__ieee754_asinf+0xe2>
 80134b0:	b33bbd2e 	.word	0xb33bbd2e
 80134b4:	3fc90fdb 	.word	0x3fc90fdb
 80134b8:	7149f2ca 	.word	0x7149f2ca
 80134bc:	3811ef08 	.word	0x3811ef08
 80134c0:	3a4f7f04 	.word	0x3a4f7f04
 80134c4:	3e2aaaab 	.word	0x3e2aaaab
 80134c8:	bd241146 	.word	0xbd241146
 80134cc:	3e4e0aa8 	.word	0x3e4e0aa8
 80134d0:	bea6b090 	.word	0xbea6b090
 80134d4:	3d9dc62e 	.word	0x3d9dc62e
 80134d8:	bf303361 	.word	0xbf303361
 80134dc:	4001572d 	.word	0x4001572d
 80134e0:	c019d139 	.word	0xc019d139
 80134e4:	3f799999 	.word	0x3f799999
 80134e8:	333bbd2e 	.word	0x333bbd2e
 80134ec:	3f490fdb 	.word	0x3f490fdb

080134f0 <__ieee754_atan2f>:
 80134f0:	ee10 2a90 	vmov	r2, s1
 80134f4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80134f8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80134fc:	b510      	push	{r4, lr}
 80134fe:	eef0 7a40 	vmov.f32	s15, s0
 8013502:	dc06      	bgt.n	8013512 <__ieee754_atan2f+0x22>
 8013504:	ee10 0a10 	vmov	r0, s0
 8013508:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801350c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013510:	dd04      	ble.n	801351c <__ieee754_atan2f+0x2c>
 8013512:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8013516:	eeb0 0a67 	vmov.f32	s0, s15
 801351a:	bd10      	pop	{r4, pc}
 801351c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8013520:	d103      	bne.n	801352a <__ieee754_atan2f+0x3a>
 8013522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013526:	f000 b98b 	b.w	8013840 <atanf>
 801352a:	1794      	asrs	r4, r2, #30
 801352c:	f004 0402 	and.w	r4, r4, #2
 8013530:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8013534:	b93b      	cbnz	r3, 8013546 <__ieee754_atan2f+0x56>
 8013536:	2c02      	cmp	r4, #2
 8013538:	d05c      	beq.n	80135f4 <__ieee754_atan2f+0x104>
 801353a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8013608 <__ieee754_atan2f+0x118>
 801353e:	2c03      	cmp	r4, #3
 8013540:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8013544:	e7e7      	b.n	8013516 <__ieee754_atan2f+0x26>
 8013546:	b939      	cbnz	r1, 8013558 <__ieee754_atan2f+0x68>
 8013548:	eddf 7a30 	vldr	s15, [pc, #192]	; 801360c <__ieee754_atan2f+0x11c>
 801354c:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8013610 <__ieee754_atan2f+0x120>
 8013550:	2800      	cmp	r0, #0
 8013552:	fe67 7a80 	vselge.f32	s15, s15, s0
 8013556:	e7de      	b.n	8013516 <__ieee754_atan2f+0x26>
 8013558:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801355c:	d110      	bne.n	8013580 <__ieee754_atan2f+0x90>
 801355e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013562:	f104 34ff 	add.w	r4, r4, #4294967295
 8013566:	d107      	bne.n	8013578 <__ieee754_atan2f+0x88>
 8013568:	2c02      	cmp	r4, #2
 801356a:	d846      	bhi.n	80135fa <__ieee754_atan2f+0x10a>
 801356c:	4b29      	ldr	r3, [pc, #164]	; (8013614 <__ieee754_atan2f+0x124>)
 801356e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013572:	edd4 7a00 	vldr	s15, [r4]
 8013576:	e7ce      	b.n	8013516 <__ieee754_atan2f+0x26>
 8013578:	2c02      	cmp	r4, #2
 801357a:	d841      	bhi.n	8013600 <__ieee754_atan2f+0x110>
 801357c:	4b26      	ldr	r3, [pc, #152]	; (8013618 <__ieee754_atan2f+0x128>)
 801357e:	e7f6      	b.n	801356e <__ieee754_atan2f+0x7e>
 8013580:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013584:	d0e0      	beq.n	8013548 <__ieee754_atan2f+0x58>
 8013586:	1a5b      	subs	r3, r3, r1
 8013588:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801358c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8013590:	da1a      	bge.n	80135c8 <__ieee754_atan2f+0xd8>
 8013592:	2a00      	cmp	r2, #0
 8013594:	da01      	bge.n	801359a <__ieee754_atan2f+0xaa>
 8013596:	313c      	adds	r1, #60	; 0x3c
 8013598:	db19      	blt.n	80135ce <__ieee754_atan2f+0xde>
 801359a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801359e:	f000 fa23 	bl	80139e8 <fabsf>
 80135a2:	f000 f94d 	bl	8013840 <atanf>
 80135a6:	eef0 7a40 	vmov.f32	s15, s0
 80135aa:	2c01      	cmp	r4, #1
 80135ac:	d012      	beq.n	80135d4 <__ieee754_atan2f+0xe4>
 80135ae:	2c02      	cmp	r4, #2
 80135b0:	d017      	beq.n	80135e2 <__ieee754_atan2f+0xf2>
 80135b2:	2c00      	cmp	r4, #0
 80135b4:	d0af      	beq.n	8013516 <__ieee754_atan2f+0x26>
 80135b6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 801361c <__ieee754_atan2f+0x12c>
 80135ba:	ee77 7a80 	vadd.f32	s15, s15, s0
 80135be:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8013620 <__ieee754_atan2f+0x130>
 80135c2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80135c6:	e7a6      	b.n	8013516 <__ieee754_atan2f+0x26>
 80135c8:	eddf 7a10 	vldr	s15, [pc, #64]	; 801360c <__ieee754_atan2f+0x11c>
 80135cc:	e7ed      	b.n	80135aa <__ieee754_atan2f+0xba>
 80135ce:	eddf 7a15 	vldr	s15, [pc, #84]	; 8013624 <__ieee754_atan2f+0x134>
 80135d2:	e7ea      	b.n	80135aa <__ieee754_atan2f+0xba>
 80135d4:	ee17 3a90 	vmov	r3, s15
 80135d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80135dc:	ee07 3a90 	vmov	s15, r3
 80135e0:	e799      	b.n	8013516 <__ieee754_atan2f+0x26>
 80135e2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801361c <__ieee754_atan2f+0x12c>
 80135e6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80135ea:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8013620 <__ieee754_atan2f+0x130>
 80135ee:	ee70 7a67 	vsub.f32	s15, s0, s15
 80135f2:	e790      	b.n	8013516 <__ieee754_atan2f+0x26>
 80135f4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8013620 <__ieee754_atan2f+0x130>
 80135f8:	e78d      	b.n	8013516 <__ieee754_atan2f+0x26>
 80135fa:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8013628 <__ieee754_atan2f+0x138>
 80135fe:	e78a      	b.n	8013516 <__ieee754_atan2f+0x26>
 8013600:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013624 <__ieee754_atan2f+0x134>
 8013604:	e787      	b.n	8013516 <__ieee754_atan2f+0x26>
 8013606:	bf00      	nop
 8013608:	c0490fdb 	.word	0xc0490fdb
 801360c:	3fc90fdb 	.word	0x3fc90fdb
 8013610:	bfc90fdb 	.word	0xbfc90fdb
 8013614:	08013ee8 	.word	0x08013ee8
 8013618:	08013ef4 	.word	0x08013ef4
 801361c:	33bbbd2e 	.word	0x33bbbd2e
 8013620:	40490fdb 	.word	0x40490fdb
 8013624:	00000000 	.word	0x00000000
 8013628:	3f490fdb 	.word	0x3f490fdb

0801362c <__ieee754_sqrtf>:
 801362c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013630:	4770      	bx	lr
 8013632:	0000      	movs	r0, r0
 8013634:	0000      	movs	r0, r0
	...

08013638 <atan>:
 8013638:	b538      	push	{r3, r4, r5, lr}
 801363a:	eeb0 7b40 	vmov.f64	d7, d0
 801363e:	ee17 5a90 	vmov	r5, s15
 8013642:	4b73      	ldr	r3, [pc, #460]	; (8013810 <atan+0x1d8>)
 8013644:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8013648:	429c      	cmp	r4, r3
 801364a:	dd13      	ble.n	8013674 <atan+0x3c>
 801364c:	4b71      	ldr	r3, [pc, #452]	; (8013814 <atan+0x1dc>)
 801364e:	429c      	cmp	r4, r3
 8013650:	dc03      	bgt.n	801365a <atan+0x22>
 8013652:	d107      	bne.n	8013664 <atan+0x2c>
 8013654:	ee10 3a10 	vmov	r3, s0
 8013658:	b123      	cbz	r3, 8013664 <atan+0x2c>
 801365a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801365e:	eeb0 0b47 	vmov.f64	d0, d7
 8013662:	bd38      	pop	{r3, r4, r5, pc}
 8013664:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80137a0 <atan+0x168>
 8013668:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 80137a8 <atan+0x170>
 801366c:	2d00      	cmp	r5, #0
 801366e:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8013672:	e7f4      	b.n	801365e <atan+0x26>
 8013674:	4b68      	ldr	r3, [pc, #416]	; (8013818 <atan+0x1e0>)
 8013676:	429c      	cmp	r4, r3
 8013678:	dc11      	bgt.n	801369e <atan+0x66>
 801367a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801367e:	429c      	cmp	r4, r3
 8013680:	dc0a      	bgt.n	8013698 <atan+0x60>
 8013682:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8013686:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80137b0 <atan+0x178>
 801368a:	ee30 6b06 	vadd.f64	d6, d0, d6
 801368e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8013692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013696:	dce2      	bgt.n	801365e <atan+0x26>
 8013698:	f04f 33ff 	mov.w	r3, #4294967295
 801369c:	e013      	b.n	80136c6 <atan+0x8e>
 801369e:	f000 f8c5 	bl	801382c <fabs>
 80136a2:	4b5e      	ldr	r3, [pc, #376]	; (801381c <atan+0x1e4>)
 80136a4:	429c      	cmp	r4, r3
 80136a6:	dc4f      	bgt.n	8013748 <atan+0x110>
 80136a8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80136ac:	429c      	cmp	r4, r3
 80136ae:	dc41      	bgt.n	8013734 <atan+0xfc>
 80136b0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80136b4:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80136b8:	2300      	movs	r3, #0
 80136ba:	eea0 6b07 	vfma.f64	d6, d0, d7
 80136be:	ee30 0b07 	vadd.f64	d0, d0, d7
 80136c2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80136c6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80137b8 <atan+0x180>
 80136ca:	ee27 4b07 	vmul.f64	d4, d7, d7
 80136ce:	ee24 5b04 	vmul.f64	d5, d4, d4
 80136d2:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80137c0 <atan+0x188>
 80136d6:	eea5 3b06 	vfma.f64	d3, d5, d6
 80136da:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80137c8 <atan+0x190>
 80136de:	eea3 6b05 	vfma.f64	d6, d3, d5
 80136e2:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80137d0 <atan+0x198>
 80136e6:	eea6 3b05 	vfma.f64	d3, d6, d5
 80136ea:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80137d8 <atan+0x1a0>
 80136ee:	eea3 6b05 	vfma.f64	d6, d3, d5
 80136f2:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80137e0 <atan+0x1a8>
 80136f6:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 80137e8 <atan+0x1b0>
 80136fa:	eea6 3b05 	vfma.f64	d3, d6, d5
 80136fe:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80137f0 <atan+0x1b8>
 8013702:	eea5 2b06 	vfma.f64	d2, d5, d6
 8013706:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80137f8 <atan+0x1c0>
 801370a:	eea2 6b05 	vfma.f64	d6, d2, d5
 801370e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8013800 <atan+0x1c8>
 8013712:	eea6 2b05 	vfma.f64	d2, d6, d5
 8013716:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8013808 <atan+0x1d0>
 801371a:	1c5a      	adds	r2, r3, #1
 801371c:	eea2 6b05 	vfma.f64	d6, d2, d5
 8013720:	ee26 6b05 	vmul.f64	d6, d6, d5
 8013724:	eea3 6b04 	vfma.f64	d6, d3, d4
 8013728:	ee27 6b06 	vmul.f64	d6, d7, d6
 801372c:	d121      	bne.n	8013772 <atan+0x13a>
 801372e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013732:	e794      	b.n	801365e <atan+0x26>
 8013734:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8013738:	2301      	movs	r3, #1
 801373a:	ee30 6b47 	vsub.f64	d6, d0, d7
 801373e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013742:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8013746:	e7be      	b.n	80136c6 <atan+0x8e>
 8013748:	4b35      	ldr	r3, [pc, #212]	; (8013820 <atan+0x1e8>)
 801374a:	429c      	cmp	r4, r3
 801374c:	da0b      	bge.n	8013766 <atan+0x12e>
 801374e:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8013752:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8013756:	ee30 5b47 	vsub.f64	d5, d0, d7
 801375a:	eea0 6b07 	vfma.f64	d6, d0, d7
 801375e:	2302      	movs	r3, #2
 8013760:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8013764:	e7af      	b.n	80136c6 <atan+0x8e>
 8013766:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801376a:	2303      	movs	r3, #3
 801376c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8013770:	e7a9      	b.n	80136c6 <atan+0x8e>
 8013772:	4a2c      	ldr	r2, [pc, #176]	; (8013824 <atan+0x1ec>)
 8013774:	492c      	ldr	r1, [pc, #176]	; (8013828 <atan+0x1f0>)
 8013776:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801377a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801377e:	ed93 5b00 	vldr	d5, [r3]
 8013782:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013786:	ee36 7b47 	vsub.f64	d7, d6, d7
 801378a:	ed92 6b00 	vldr	d6, [r2]
 801378e:	2d00      	cmp	r5, #0
 8013790:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013794:	bfb8      	it	lt
 8013796:	eeb1 7b47 	vneglt.f64	d7, d7
 801379a:	e760      	b.n	801365e <atan+0x26>
 801379c:	f3af 8000 	nop.w
 80137a0:	54442d18 	.word	0x54442d18
 80137a4:	3ff921fb 	.word	0x3ff921fb
 80137a8:	54442d18 	.word	0x54442d18
 80137ac:	bff921fb 	.word	0xbff921fb
 80137b0:	8800759c 	.word	0x8800759c
 80137b4:	7e37e43c 	.word	0x7e37e43c
 80137b8:	e322da11 	.word	0xe322da11
 80137bc:	3f90ad3a 	.word	0x3f90ad3a
 80137c0:	24760deb 	.word	0x24760deb
 80137c4:	3fa97b4b 	.word	0x3fa97b4b
 80137c8:	a0d03d51 	.word	0xa0d03d51
 80137cc:	3fb10d66 	.word	0x3fb10d66
 80137d0:	c54c206e 	.word	0xc54c206e
 80137d4:	3fb745cd 	.word	0x3fb745cd
 80137d8:	920083ff 	.word	0x920083ff
 80137dc:	3fc24924 	.word	0x3fc24924
 80137e0:	5555550d 	.word	0x5555550d
 80137e4:	3fd55555 	.word	0x3fd55555
 80137e8:	52defd9a 	.word	0x52defd9a
 80137ec:	bfadde2d 	.word	0xbfadde2d
 80137f0:	2c6a6c2f 	.word	0x2c6a6c2f
 80137f4:	bfa2b444 	.word	0xbfa2b444
 80137f8:	af749a6d 	.word	0xaf749a6d
 80137fc:	bfb3b0f2 	.word	0xbfb3b0f2
 8013800:	fe231671 	.word	0xfe231671
 8013804:	bfbc71c6 	.word	0xbfbc71c6
 8013808:	9998ebc4 	.word	0x9998ebc4
 801380c:	bfc99999 	.word	0xbfc99999
 8013810:	440fffff 	.word	0x440fffff
 8013814:	7ff00000 	.word	0x7ff00000
 8013818:	3fdbffff 	.word	0x3fdbffff
 801381c:	3ff2ffff 	.word	0x3ff2ffff
 8013820:	40038000 	.word	0x40038000
 8013824:	08013f00 	.word	0x08013f00
 8013828:	08013f20 	.word	0x08013f20

0801382c <fabs>:
 801382c:	ec51 0b10 	vmov	r0, r1, d0
 8013830:	ee10 2a10 	vmov	r2, s0
 8013834:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013838:	ec43 2b10 	vmov	d0, r2, r3
 801383c:	4770      	bx	lr
	...

08013840 <atanf>:
 8013840:	b538      	push	{r3, r4, r5, lr}
 8013842:	ee10 5a10 	vmov	r5, s0
 8013846:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801384a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801384e:	eef0 7a40 	vmov.f32	s15, s0
 8013852:	db0f      	blt.n	8013874 <atanf+0x34>
 8013854:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013858:	dd04      	ble.n	8013864 <atanf+0x24>
 801385a:	ee70 7a00 	vadd.f32	s15, s0, s0
 801385e:	eeb0 0a67 	vmov.f32	s0, s15
 8013862:	bd38      	pop	{r3, r4, r5, pc}
 8013864:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801399c <atanf+0x15c>
 8013868:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80139a0 <atanf+0x160>
 801386c:	2d00      	cmp	r5, #0
 801386e:	fe77 7a80 	vselgt.f32	s15, s15, s0
 8013872:	e7f4      	b.n	801385e <atanf+0x1e>
 8013874:	4b4b      	ldr	r3, [pc, #300]	; (80139a4 <atanf+0x164>)
 8013876:	429c      	cmp	r4, r3
 8013878:	dc10      	bgt.n	801389c <atanf+0x5c>
 801387a:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801387e:	da0a      	bge.n	8013896 <atanf+0x56>
 8013880:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80139a8 <atanf+0x168>
 8013884:	ee30 7a07 	vadd.f32	s14, s0, s14
 8013888:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801388c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013894:	dce3      	bgt.n	801385e <atanf+0x1e>
 8013896:	f04f 33ff 	mov.w	r3, #4294967295
 801389a:	e013      	b.n	80138c4 <atanf+0x84>
 801389c:	f000 f8a4 	bl	80139e8 <fabsf>
 80138a0:	4b42      	ldr	r3, [pc, #264]	; (80139ac <atanf+0x16c>)
 80138a2:	429c      	cmp	r4, r3
 80138a4:	dc4f      	bgt.n	8013946 <atanf+0x106>
 80138a6:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80138aa:	429c      	cmp	r4, r3
 80138ac:	dc41      	bgt.n	8013932 <atanf+0xf2>
 80138ae:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80138b2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80138b6:	eea0 7a27 	vfma.f32	s14, s0, s15
 80138ba:	2300      	movs	r3, #0
 80138bc:	ee30 0a27 	vadd.f32	s0, s0, s15
 80138c0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80138c4:	1c5a      	adds	r2, r3, #1
 80138c6:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80138ca:	eddf 5a39 	vldr	s11, [pc, #228]	; 80139b0 <atanf+0x170>
 80138ce:	ed9f 6a39 	vldr	s12, [pc, #228]	; 80139b4 <atanf+0x174>
 80138d2:	ed9f 5a39 	vldr	s10, [pc, #228]	; 80139b8 <atanf+0x178>
 80138d6:	ed9f 0a39 	vldr	s0, [pc, #228]	; 80139bc <atanf+0x17c>
 80138da:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80138de:	eea7 6a25 	vfma.f32	s12, s14, s11
 80138e2:	eddf 5a37 	vldr	s11, [pc, #220]	; 80139c0 <atanf+0x180>
 80138e6:	eee6 5a07 	vfma.f32	s11, s12, s14
 80138ea:	ed9f 6a36 	vldr	s12, [pc, #216]	; 80139c4 <atanf+0x184>
 80138ee:	eea5 6a87 	vfma.f32	s12, s11, s14
 80138f2:	eddf 5a35 	vldr	s11, [pc, #212]	; 80139c8 <atanf+0x188>
 80138f6:	eee6 5a07 	vfma.f32	s11, s12, s14
 80138fa:	ed9f 6a34 	vldr	s12, [pc, #208]	; 80139cc <atanf+0x18c>
 80138fe:	eea5 6a87 	vfma.f32	s12, s11, s14
 8013902:	eddf 5a33 	vldr	s11, [pc, #204]	; 80139d0 <atanf+0x190>
 8013906:	eee7 5a05 	vfma.f32	s11, s14, s10
 801390a:	ed9f 5a32 	vldr	s10, [pc, #200]	; 80139d4 <atanf+0x194>
 801390e:	eea5 5a87 	vfma.f32	s10, s11, s14
 8013912:	eddf 5a31 	vldr	s11, [pc, #196]	; 80139d8 <atanf+0x198>
 8013916:	eee5 5a07 	vfma.f32	s11, s10, s14
 801391a:	eea5 0a87 	vfma.f32	s0, s11, s14
 801391e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8013922:	eea6 0a26 	vfma.f32	s0, s12, s13
 8013926:	ee27 0a80 	vmul.f32	s0, s15, s0
 801392a:	d121      	bne.n	8013970 <atanf+0x130>
 801392c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013930:	e795      	b.n	801385e <atanf+0x1e>
 8013932:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013936:	ee30 7a67 	vsub.f32	s14, s0, s15
 801393a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801393e:	2301      	movs	r3, #1
 8013940:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013944:	e7be      	b.n	80138c4 <atanf+0x84>
 8013946:	4b25      	ldr	r3, [pc, #148]	; (80139dc <atanf+0x19c>)
 8013948:	429c      	cmp	r4, r3
 801394a:	dc0b      	bgt.n	8013964 <atanf+0x124>
 801394c:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8013950:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013954:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013958:	2302      	movs	r3, #2
 801395a:	ee70 6a67 	vsub.f32	s13, s0, s15
 801395e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013962:	e7af      	b.n	80138c4 <atanf+0x84>
 8013964:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013968:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801396c:	2303      	movs	r3, #3
 801396e:	e7a9      	b.n	80138c4 <atanf+0x84>
 8013970:	4a1b      	ldr	r2, [pc, #108]	; (80139e0 <atanf+0x1a0>)
 8013972:	491c      	ldr	r1, [pc, #112]	; (80139e4 <atanf+0x1a4>)
 8013974:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013978:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801397c:	ed93 7a00 	vldr	s14, [r3]
 8013980:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013984:	2d00      	cmp	r5, #0
 8013986:	ee70 7a67 	vsub.f32	s15, s0, s15
 801398a:	ed92 0a00 	vldr	s0, [r2]
 801398e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013992:	bfb8      	it	lt
 8013994:	eef1 7a67 	vneglt.f32	s15, s15
 8013998:	e761      	b.n	801385e <atanf+0x1e>
 801399a:	bf00      	nop
 801399c:	3fc90fdb 	.word	0x3fc90fdb
 80139a0:	bfc90fdb 	.word	0xbfc90fdb
 80139a4:	3edfffff 	.word	0x3edfffff
 80139a8:	7149f2ca 	.word	0x7149f2ca
 80139ac:	3f97ffff 	.word	0x3f97ffff
 80139b0:	3c8569d7 	.word	0x3c8569d7
 80139b4:	3d4bda59 	.word	0x3d4bda59
 80139b8:	bd15a221 	.word	0xbd15a221
 80139bc:	be4ccccd 	.word	0xbe4ccccd
 80139c0:	3d886b35 	.word	0x3d886b35
 80139c4:	3dba2e6e 	.word	0x3dba2e6e
 80139c8:	3e124925 	.word	0x3e124925
 80139cc:	3eaaaaab 	.word	0x3eaaaaab
 80139d0:	bd6ef16b 	.word	0xbd6ef16b
 80139d4:	bd9d8795 	.word	0xbd9d8795
 80139d8:	bde38e38 	.word	0xbde38e38
 80139dc:	401bffff 	.word	0x401bffff
 80139e0:	08013f40 	.word	0x08013f40
 80139e4:	08013f50 	.word	0x08013f50

080139e8 <fabsf>:
 80139e8:	ee10 3a10 	vmov	r3, s0
 80139ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80139f0:	ee00 3a10 	vmov	s0, r3
 80139f4:	4770      	bx	lr
	...

080139f8 <nanf>:
 80139f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013a00 <nanf+0x8>
 80139fc:	4770      	bx	lr
 80139fe:	bf00      	nop
 8013a00:	7fc00000 	.word	0x7fc00000

08013a04 <_init>:
 8013a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a06:	bf00      	nop
 8013a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a0a:	bc08      	pop	{r3}
 8013a0c:	469e      	mov	lr, r3
 8013a0e:	4770      	bx	lr

08013a10 <_fini>:
 8013a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a12:	bf00      	nop
 8013a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a16:	bc08      	pop	{r3}
 8013a18:	469e      	mov	lr, r3
 8013a1a:	4770      	bx	lr
